   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "xmc_can.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_CAN_IsPanelControlReady,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	XMC_CAN_IsPanelControlReady:
  23              	.LFB61:
  24              	 .file 1 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc/xmc_can.h"
   1:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
   2:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @file xmc_can.h
   3:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @date 2017-11-09
   4:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
   5:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @cond
   6:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
   7:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
   9:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * All rights reserved.                        
  11:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *                                             
  12:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * following conditions are met:   
  14:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  15:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * disclaimer.                        
  17:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 
  18:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 
  21:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  24:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  32:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
  35:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
  36:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Change History
  37:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * --------------
  38:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
  39:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-02-20:
  40:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - Initial <br>
  41:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - Documentation improved <br>
  42:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
  43:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-05-20:
  44:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - New elements have added in XMC_CAN_MO_t data structure <br>
  45:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  46:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_STATUS_t enum structure has updated. <br>
  47:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
  48:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-06-20:
  49:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - New APIs added: XMC_CAN_NODE_ClearStatus(),XMC_CAN_MO_ReceiveData(), XMC_CAN_GATEWAY_InitD
  50:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  51:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *      
  52:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-07-09:
  53:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - New API added: XMC_CAN_NODE_Enable. <br>
  54:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
  55:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-01:
  56:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed fCANB clock support <br>
  57:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
  58:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-15:
  59:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added "xmc_can_map.h" include <br>
  60:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
  61:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-07:
  62:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_IsPanelControlReady()
  63:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 
  64:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 2017-11-09:
  65:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_InitEx() and XMC_CAN_NODE_NominalBitTimeConfigureEx()
  66:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - Make XMC_CAN_GetBaudrateClockSource(), XMC_CAN_SetBaudrateClockSource() and XMC_CAN_GetBau
  67:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
  68:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Details of use for node configuration related APIs</b><br>
  69:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Please use the XMC_CAN_NODE_SetInitBit() and XMC_CAN_NODE_EnableConfigurationChange() before cal
  70:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * related APIs.
  71:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange() and  XMC_CAN_NODE_ResetInitBit() can be called for dis
  72:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * change and enable the node for communication afterwards.
  73:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Do not use this when configuring the nominal bit time with XMC_CAN_NODE_NominalBitTimeConfigure(
  74:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Enable/Disable node configuration change is taken in account.
  75:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
  76:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Example Usage:</b>
  77:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @code
  78:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * //disabling the Node
  79:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetInitBit(CAN_NODE0)
  80:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * //allowing the configuration change
  81:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0)
  82:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * //Node configuration
  83:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_FrameCounterConfigure(CAN_NODE0,&can_node_frame_counter);
  84:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack(CAN_NODE0)
  85:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * //disable configuration
  86:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0)
  87:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * //Enabling node for communication
  88:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_ResetInitBit(CAN_NODE0)
  89:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @endcode
  90:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
  91:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-20:
  92:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - Fixed bug in XMC_CAN_MO_Config() <br>  
  93:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @endcond
  94:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
  95:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
  96:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
  97:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #ifndef XMC_CAN_H
  98:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_H
  99:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 100:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 101:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * HEADER FILES
 102:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 103:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_common.h"
 104:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 105:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #if defined(CAN)
 106:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 107:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_scu.h"
 108:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_can_map.h"
 109:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #include <string.h>
 110:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 111:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 112:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup XMClib XMC Peripheral Library
 113:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 114:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 115:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 116:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 117:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup CAN
 118:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @brief Controller Area Network Controller (CAN) driver for the XMC microcontroller family.
 119:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 120:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * CAN driver provides transfer of CAN frames in accordance with CAN specificetion V2.0 B (active).
 121:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * can receive and transmit standard frames with 11-bit identifiers as well as extended frames with
 122:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * All CAN nodes share a common set of message objects. Each message object can be individually all
 123:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * CAN nodes. 
 124:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Besides serving as a storage container for incoming and outgoing frames, message objects can be 
 125:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * gateways between 
 126:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * the CAN nodes or to setup a FIFO buffer. The CAN module provides Analyzer mode,Loop-back mode an
 127:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * node analysis.
 128:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 
 129:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * The driver is divided into five sections:
 130:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN Global features:
 131:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure module frequency using function XMC_CAN_Init().
 132:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Module interrupt using configuration structure XMC_CAN_NODE_INTERRUPT_TRI
 133:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_EventTrigger().
 134:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 
 135:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_NODE features:
 136:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to set baud rate by configuration structure XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t and
 137:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *    function XMC_CAN_NODE_NominalBitTimeConfigure().
 138:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure loop-back mode using fuction XMC_CAN_NODE_EnableLoopBack().
 139:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure CAN Node analyzer using function XMC_CAN_NODE_SetAnalyzerMode().
 140:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows CAN node events enable/ disable by enum structure XMC_CAN_NODE_EVENT_t and functions X
 141:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *    and XMC_CAN_NODE_DisableEvent().
 142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides bit timming analysis, configuration structure XMC_CAN_NODE_FRAME_COUNTER_t and funct
 143:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_NODE_FrameCounterConfigure(). 
 144:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 145:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_MO features:
 146:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object initialization by configuration structure XMC_CAN_MO_t and function XMC
 147:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows transfer of message objects using functions XMC_CAN_MO_Transmit() and XMC_CAN_MO_Recei
 148:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Single Data Transfer and Single Transmit Trial using functions 
 149:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_MO_EnableSingleTransmitTrial() and XMC_CAN_MO_EnableSingleTransmitTrial().
 150:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure MO events using function XMC_CAN_MO_EnableEvent(). 
 151:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 152:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_FIFO features:
 153:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object FIFO structure by configuration structure XMC_CAN_FIFO_CONFIG_t and fun
 154:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_TXFIFO_ConfigMOBaseObject() , XMC_CAN_RXFIFO_ConfigMOBaseObject() and XMC_CAN_TXFIFO_Tra
 155:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 156:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_GATEWAY features:
 157:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides Gateway mode, configuration structure XMC_CAN_GATEWAY_CONFIG_t and function XMC_CAN_
 158:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 159:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 160:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 161:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 162:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 163:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * MACROS
 164:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 165:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Pos (18U)   /**< Standard Identifier bitposition */
 166:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 167:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Msk ((0x000007FFUL) << XMC_CAN_MO_MOAR_STDID_Pos) /**< Standard Ident
 168:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 169:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_NODE_NIPR_Msk         (0x7UL) /**< Node event mask */
 170:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 171:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_MO_MOIPR_Msk          (0x7U)  /**< Message Object event mask */
 172:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 173:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 174:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * ENUMS
 175:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 176:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 177:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Defines the status of CAN, to verify the CAN related API calls. Use type \a XMC_CAN_STATUS_t fo
 178:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** */
 179:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_STATUS
 180:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 181:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_SUCCESS,           /**< Driver accepted application request*/
 182:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_ERROR,             /**< Returned when unknown error occurred */
 183:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_BUSY,              /**< Driver is busy and can not handle request*/
 184:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_NOT_ACCEPTABLE, /**< Message object type not allowed*/
 185:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_DISABLED       /**< Returned if Message object is disabled */
 186:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_STATUS_t;
 187:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 188:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 189:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN module Panel Commands . Use type \a XMC_CAN_PANCMD_t for this enum.
 190:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** */
 191:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_PANCMD
 192:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 193:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_INIT_LIST = 1U,              /**< Command to initialize a list */
 194:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_ALLOCATE = 2U,        /**< Command to activate static allocation */
 195:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_ALLOCATE = 3U,       /**< Command to activate dynamic allocation */
 196:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 197:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEFORE = 4U,   /**< Remove a message object from the list and insert
 198:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEFORE = 5U,  /**< Command to activate dynamic allocation */
 199:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEHIND = 6U,   /**< Command to activate dynamic allocation */
 200:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEHIND = 7U   /**< Command to activate dynamic allocation */
 201:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_PANCMD_t;
 202:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 203:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 204:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** * Defines loop Back Mode, to enable/disable an in-system test of the MultiCAN module .
 205:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** * Use type \a XMC_CAN_LOOKBACKMODE_t for this enum.
 206:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** */
 207:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_LOOKBACKMODE
 208:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 209:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_ENABLED,   /**< Each CAN node can be connected to the internal CAN bus  */
 210:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_DISABLED   /**< Each CAN node can be connected to the external CAN bus */
 211:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_LOOKBACKMODE_t;
 212:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 213:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 214:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Message Object direction. Use type \a XMC_CAN_MO_TYPE_t for this enum.
 215:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 216:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_TYPE
 217:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 218:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_RECMSGOBJ,   /**< Receive Message Object selected */
 219:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_TRANSMSGOBJ  /**< Transmit Message Object selected */
 220:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_TYPE_t;
 221:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 222:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 223:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Data frame types. Use type \a XMC_CAN_FRAME_TYPE_t for this enum.
 224:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 225:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_TYPE
 226:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 227:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_STANDARD_11BITS, /**< Standard type identifier*/
 228:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_EXTENDED_29BITS  /**< Extended type identifier*/
 229:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_TYPE_t;
 230:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 231:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 232:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 233:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines arbitration mode for transmit acceptance filtering. Use type \a XMC_CAN_ARBITRATION_MODE
 234:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 235:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_ARBITRATION_MODE
 236:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 237:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_1 = 1U,   /**< Transmit acceptance based in the order(p
 238:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_IDE_DIR_BASED_PRIO_2 = 2U, /**< Transmit acceptance filtering is based o
 239:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_3 = 3U    /**< Transmit acceptance based in the order *
 240:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_ARBITRATION_MODE_t;
 241:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 242:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 243:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the operation mode of the frame counter. Use type \a XMC_CAN_FRAME_COUNT_MODE_t for this
 244:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 245:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_COUNT_MODE
 246:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 247:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE = 0U,       /**< Frame Count Mode */
 248:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_TIME_STAMP = 1U,  /**< The frame counter is incremented with the beginni
 249:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_BIT_TIMING = 2U   /**< Used for baud rate detection and analysis of the 
 250:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_COUNT_MODE_t;
 251:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 252:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 253:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Divider Modes. Use type \a XMC_CAN_DM_t for this enum.
 254:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 255:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_DM
 256:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 257:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_NORMAL = 1U,      /**< Normal divider mode */
 258:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_FRACTIONAL = 2U,  /**< Fractional divider mode */
 259:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_OFF = 3U          /**< Divider Mode in off-state*/
 260:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_DM_t;
 261:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 262:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 263:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object set status. Use type \a XMC_CAN_MO_SET_STATUS_t for th
 264:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 265:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_SET_STATUS
 266:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 267:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_PENDING = CAN_MO_MOCTR_SETRXPND_Msk,     /**< Set receive pending */
 268:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_PENDING = CAN_MO_MOCTR_SETTXPND_Msk,     /**< Set transmit pending */
 269:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_UPDATING = CAN_MO_MOCTR_SETRXUPD_Msk,    /**< Set receive updating */
 270:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_NEW_DATA = CAN_MO_MOCTR_SETNEWDAT_Msk,      /**< Set new data */
 271:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_SETMSGLST_Msk,  /**< Set message lost */
 272:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_SETMSGVAL_Msk, /**< Set message valid */
 273:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_SETRTSEL_Msk, /**< Set transmit/receive selec
 274:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_ENABLE = CAN_MO_MOCTR_SETRXEN_Msk,       /**< Set receive enable */
 275:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_REQUEST = CAN_MO_MOCTR_SETTXRQ_Msk,      /**< Set transmit request */
 276:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_SETTXEN0_Msk,     /**< Set transmit enable 0 */
 277:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_SETTXEN1_Msk,     /**< Set transmit enable 1 */
 278:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_SETDIR_Msk /**< Set message direction */
 279:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_SET_STATUS_t;
 280:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 281:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 282:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object reset status. Use type \a XMC_CAN_MO_RESET_STATUS_t fo
 283:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 284:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_RESET_STATUS
 285:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 286:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_PENDING = CAN_MO_MOCTR_RESRXPND_Msk,     /**< Reset receive pending */
 287:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_PENDING = CAN_MO_MOCTR_RESTXPND_Msk,     /**< Reset transmit pending *
 288:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_UPDATING = CAN_MO_MOCTR_RESRXUPD_Msk,    /**< Reset receive updating *
 289:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_NEW_DATA = CAN_MO_MOCTR_RESNEWDAT_Msk,      /**< Reset new data */
 290:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_RESMSGLST_Msk,  /**< Reset message lost */
 291:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_RESMSGVAL_Msk, /**< Reset message valid */
 292:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_RESRTSEL_Msk, /**< Reset transmit/receive s
 293:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_ENABLE = CAN_MO_MOCTR_RESRXEN_Msk,       /**< Reset receive enable */
 294:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_REQUEST = CAN_MO_MOCTR_RESTXRQ_Msk,      /**< Reset transmit request *
 295:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_RESTXEN0_Msk,     /**< Reset transmit enable 0 
 296:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_RESTXEN1_Msk,     /**< Reset transmit enable 1 
 297:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_RESDIR_Msk /**< Reset message direction 
 298:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_RESET_STATUS_t;
 299:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 300:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 301:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object status. Use type \a XMC_CAN_MO_STATUS_t for this enum.
 302:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 303:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_STATUS
 304:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 305:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_PENDING = CAN_MO_MOSTAT_RXPND_Msk,                   /**< Defines message ha
 306:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_PENDING = CAN_MO_MOSTAT_TXPND_Msk,                   /**< Defines message ha
 307:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_UPDATING = CAN_MO_MOSTAT_RXUPD_Msk,                  /**< Defines Message id
 308:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_NEW_DATA = CAN_MO_MOSTAT_NEWDAT_Msk,                    /**< Defines no update 
 309:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_LOST = CAN_MO_MOSTAT_MSGLST_Msk,                /**< CAN message is los
 310:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_VALID = CAN_MO_MOSTAT_MSGVAL_Msk,               /**< Message valid */
 311:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_TX_SELECTED = CAN_MO_MOSTAT_RTSEL_Msk,               /**< Transmit/Receive s
 312:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_ENABLE = CAN_MO_MOSTAT_RXEN_Msk,                     /**< Receive enable */
 313:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_REQUEST = CAN_MO_MOSTAT_TXRQ_Msk,                    /**< Transmit request *
 314:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE0 = CAN_MO_MOSTAT_TXEN0_Msk,                   /**< Transmit enable 0 
 315:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE1 = CAN_MO_MOSTAT_TXEN1_Msk,                   /**< Transmit enable 1 
 316:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_DIRECTION = CAN_MO_MOSTAT_DIR_Msk,              /**< Message direction 
 317:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_LIST = CAN_MO_MOSTAT_LIST_Msk,                          /**< List allocation */
 318:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_PREVIOUS_MO = CAN_MO_MOSTAT_PPREV_Msk,     /**< Pointer to previous 
 319:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_NEXT_MO = (int32_t)CAN_MO_MOSTAT_PNEXT_Msk   /**< Pointer to next Me
 320:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_STATUS_t;
 321:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 322:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 323:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node status. Use type \a XMC_CAN_NODE_STATUS_t for this enum.
 324:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 325:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_STATUS
 326:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 327:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LAST_ERROR_CODE = CAN_NODE_NSR_LEC_Msk,       /**< Last Error Code */
 328:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_TX_OK = CAN_NODE_NSR_TXOK_Msk,                /**< Message transmitted succes
 329:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_RX_OK = CAN_NODE_NSR_RXOK_Msk,                /**< Message received successfu
 330:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ALERT_WARNING = CAN_NODE_NSR_ALERT_Msk,       /**< Alert warning */
 331:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ERROR_WARNING_STATUS = CAN_NODE_NSR_EWRN_Msk, /**< Error warning status */
 332:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_BUS_OFF= CAN_NODE_NSR_BOFF_Msk,       /**< Bus-off status */
 333:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_LENGTH_ERROR = CAN_NODE_NSR_LLE_Msk,     /**< List length error */
 334:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_OBJECT_ERROR = CAN_NODE_NSR_LOE_Msk,     /**< List object error */
 335:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 336:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_SUSPENDED_ACK = CAN_NODE_NSR_SUSACK_Msk       /**< Suspend Acknowledge */
 337:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #endif
 338:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_STATUS_t;
 339:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 340:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 341:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node control like initialization, node disable and analyzer mode .
 342:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_NODE_CONTROL_t for this enum.
 343:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 344:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_CONTROL
 345:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 346:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_NODE_INIT = CAN_NODE_NCR_INIT_Msk,            /**< Node initialization */
 347:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_TX_INT_ENABLE = CAN_NODE_NCR_TRIE_Msk,        /**< Transfer event enable */
 348:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_LEC_INT_ENABLE = CAN_NODE_NCR_LECIE_Msk,      /**< LEC Indicated Error Event
 349:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_ALERT_INT_ENABLE = CAN_NODE_NCR_ALIE_Msk,     /**< Alert Event Enable */
 350:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_DISABLE = CAN_NODE_NCR_CANDIS_Msk,        /**< CAN disable */
 351:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CONF_CHANGE_ENABLE= CAN_NODE_NCR_CCE_Msk,     /**< Configuration change enab
 352:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_ANALYZER_NODEDE = CAN_NODE_NCR_CALM_Msk,  /**< CAN Analyzer mode */
 353:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 354:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_SUSPENDED_ENABLE = CAN_NODE_NCR_SUSEN_Msk     /**< Suspend Enable */
 355:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #endif
 356:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_CONTROL_t;
 357:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 358:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 359:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node events. Use type \a XMC_CAN_NODE_EVENT_t for this enum.
 360:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 361:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_EVENT
 362:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 363:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_TX_INT = CAN_NODE_NCR_TRIE_Msk,   /**< Node Transfer OK Event */
 364:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_ALERT = CAN_NODE_NCR_ALIE_Msk,    /**< Node Alert Event */
 365:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_LEC = CAN_NODE_NCR_LECIE_Msk,     /**< Last Error code Event */
 366:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_CFCIE = CAN_NODE_NFCR_CFCIE_Msk   /**< CAN Frame Count Event  */
 367:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_EVENT_t;
 368:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 369:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 370:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN node pointer events position. Use type \a XMC_CAN_NODE_POINTER_EVENT_
 371:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 372:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_POINTER_EVENT
 373:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 374:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_ALERT = CAN_NODE_NIPR_ALINP_Pos,           /**< Node Alert Event node 
 375:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_LEC = CAN_NODE_NIPR_LECINP_Pos,            /**< Last Error code Event 
 376:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK = CAN_NODE_NIPR_TRINP_Pos,     /**< Transmit Event node po
 377:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER = CAN_NODE_NIPR_CFCINP_Pos   /**< CAN Frame Count Event 
 378:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_POINTER_EVENT_t;
 379:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 380:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 381:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object event node pointer position. Use type \a XMC_CAN_MO_POINTER_EVENT_t f
 382:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 383:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_POINTER_EVENT
 384:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 385:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_TRANSMIT = CAN_MO_MOIPR_TXINP_Pos,     /**< Transmit Event node pointer 
 386:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_RECEIVE = CAN_MO_MOIPR_RXINP_Pos       /**< Receive Event node pointer *
 387:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_POINTER_EVENT_t;
 388:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 389:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 390:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object event type. Use type \a XMC_CAN_MO_EVENT_t for this en
 391:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 392:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_EVENT
 393:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 394:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_TRANSMIT = CAN_MO_MOFCR_TXIE_Msk,  /**< Message Object transmit event */
 395:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_RECEIVE = CAN_MO_MOFCR_RXIE_Msk,   /**< Message Object receive event */
 396:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_OVERFLOW = CAN_MO_MOFCR_OVIE_Msk,  /**< Message Object overflow event */
 397:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_EVENT_t;
 398:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 399:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 400:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the possible receive inputs. Use type \a XMC_CAN_NODE_RECEIVE_INPUT_t for this enum.
 401:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 402:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_RECEIVE_INPUT
 403:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 404:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCA,   /**< CAN Receive Input A */
 405:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCB,   /**< CAN Receive Input B */
 406:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCC,   /**< CAN Receive Input C */
 407:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCD,   /**< CAN Receive Input D */
 408:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCE,   /**< CAN Receive Input E */
 409:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCF,   /**< CAN Receive Input F */
 410:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCG,   /**< CAN Receive Input G */
 411:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCH    /**< CAN Receive Input H */
 412:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_RECEIVE_INPUT_t;
 413:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 414:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 415:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error transfer direction. Use type \a XMC_CAN_NODE_LAST_ERROR_DIR_t for this enum.
 416:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 417:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_DIR
 418:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 419:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_RECEPCION,    /**< The last error occurred while the CAN n
 420:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_TRANSMISSION  /**< The last error occurred while the CAN n
 421:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_DIR_t;
 422:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 423:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 424:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 425:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error increment. Use type \a XMC_CAN_NODE_LAST_ERROR_INC_t for this enum.
 426:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 427:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_INC
 428:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 429:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_1, /**< The last error led to an error counter increment of 1. */
 430:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_8  /**< The last error led to an error counter increment of 8. */
 431:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_INC_t;
 432:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 433:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 434:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines interrupt request on interrupt output line INT_O[n]. Use type \a XMC_CAN_NODE_INTERRUPT_
 435:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 436:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_INTERRUPT_TRIGGER
 437:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 438:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_0 = 0x1U,
 439:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_1 = 0x2U,
 440:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_2 = 0x4U,
 441:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_3 = 0x8U,
 442:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_4 = 0x16U,
 443:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_5 = 0x32U,
 444:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_6 = 0x64U,
 445:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_7 = 0x128U,
 446:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_INTERRUPT_TRIGGER_t;
 447:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 448:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 449:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Clock source used for the MCAN baudrate generator 
 450:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 451:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_CANCLKSRC
 452:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {  
 453:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 454:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #if (UC_FAMILY == XMC4)
 455:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 456:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #else
 457:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_MCLK = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock. 
 458:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #endif
 459:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FOHP = 0x2U, /**< Use high performance oscillator (fOHP) as MCAN baudrate gener
 460:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #else
 461:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 462:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #endif
 463:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_CANCLKSRC_t;
 464:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 465:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 466:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * DATA STRUCTURES
 467:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 468:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 469:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN node Nominal Bit Time. Use type \a XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t for this s
 470:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** */
 471:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG
 472:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 473:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t can_frequency;       /**< Frequency of the CAN module(fCAN). \a can_frequency shall be r
 474:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t baudrate;          /**< Specifies the node baud rate. Unit: baud \a baudrate shall be ra
 475:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sample_point;      /**< Sample point is used to compensate mismatch between transmitter 
 476:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                    the synchronization segment. Sample point. Range = [0, 10000] with respect [0%, 
 477:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sjw;               /**< (Re) Synchronization Jump Width. Range:0-3 */
 478:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t;
 479:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 480:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 481:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines base, top and bottom of CAN Message Object FIFO Structure. Use type \a XMC_CAN_FIFO_CONF
 482:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * A FIFO consists of one base object and n slave objects.
 483:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 484:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_FIFO_CONFIG
 485:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 486:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_bottom;    /**< points to the first element(slave object) in a FIFO structure.Range 
 487:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_top;     /**< points to the last element(slave object) in a FIFO structure. Range :0
 488:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_base;    /**< points to the actual target object(Base object) within a FIFO/Gateway 
 489:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FIFO_CONFIG_t;
 490:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 491:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 492:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Gateway FIFO structure and provides additional options for gateway destination objec
 493:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_GATEWAY_CONFIG_t for this structure.
 494:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 495:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_GATEWAY_CONFIG
 496:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 497:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_bottom;       /**< points to the first element(gateway destination object) in a F
 498:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_top;        /**< points to the last element(gateway destination object) in a FIFO
 499:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_base;       /**< points to the actual target object within a FIFO/Gateway structu
 500:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_frame_send;   /**< TXRQ updated in the gateway destination object after the int
 501:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object */
 502:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_identifier_copy;   /**< The identifier of the gateway source object (after storing t
 503:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object. */
 504:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 505:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_length_code_copy; /**< Data length code of the gateway source object (after sto
 506:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                            gateway destination object */
 507:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_copy;  /**< Data fields in registers MODATALn and MODATAHn of the gateway sourc
 508:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                 are copied to the gateway destination.*/
 509:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 510:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_GATEWAY_CONFIG_t;
 511:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 512:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 513:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN Global Initialization structure
 514:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** */
 515:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_GLOBAL_TypeDef XMC_CAN_t;
 516:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 517:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard start*/
 518:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 519:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   #pragma push
 520:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   #pragma anon_unions
 521:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 522:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   #pragma warning 586
 523:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #endif
 524:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 525:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 526:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines frame counter configuration. Use type \a XMC_CAN_NODE_FRAME_COUNTER_t for this structure
 527:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * It provides configuration of frame counter that counts transmitted/received CAN frames or obtain
 528:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * when a frame has been started to transmit or be received by the CAN node.
 529:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** */
 530:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_FRAME_COUNTER
 531:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 532:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 533:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   union{
 534:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 535:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 16;
 536:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_selection:3;   /**<   Defines function of the frame counter  */
 537:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_mode:2;      /**<   Determines the operation mode of the frame count
 538:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 11;
 539:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****     };
 540:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t nfcr;
 541:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 542:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   };
 543:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_FRAME_COUNTER_t;
 544:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 545:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 546:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *Defines Node Runtime structure.
 547:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** */
 548:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_NODE_TypeDef  XMC_CAN_NODE_t;            /**<  pointer to the Node CAN register */
 549:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 550:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 551:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object runtime elements. Use type \a XMC_CAN_MO_t for this structure.
 552:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 553:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_MO
 554:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 555:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   CAN_MO_TypeDef *can_mo_ptr;                     /**< Pointer to the Message Object CAN register *
 556:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   union{
 557:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 558:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_identifier:29;            /**< standard (11 bit)/Extended (29 bit) message ident
 559:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mode:1;                /**< Standard/Extended identifier support */
 560:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_priority:2;               /**< Arbitration Mode/Priority */
 561:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****     };
 562:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_ar;
 563:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   };
 564:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   union{
 565:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 566:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mask:29;              /**< CAN Identifier of Message Object */
 567:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_ide_mask:1;              /**< Identifier Extension Bit of Message Object */
 568:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****     };
 569:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_amr;
 570:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   };
 571:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t can_data_length;                        /**< Message data length, Range:0-8 */
 572:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 573:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   union{
 574:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 575:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       uint8_t can_data_byte[8];                 /**< Each position of the array represents a data b
 576:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       uint16_t can_data_word[4];                /**< Each position of the array represents a 16 bit
 577:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_data[2];                     /**< can_data[0] lower 4 bytes of the data. can_dat
 578:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                               of the data */
 579:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       uint64_t can_data_long;                   /** Data of the Message Object*/
 580:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       };
 581:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 582:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_t can_mo_type;                  /**<  Message Type */
 583:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 584:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_t;
 585:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard end*/
 586:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 587:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   #pragma pop
 588:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 589:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   #pragma warning restore
 590:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #endif
 591:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 592:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * API Prototypes
 593:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 594:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #ifdef __cplusplus
 595:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** extern "C" {
 596:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #endif
 597:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 598:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 599:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 600:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 601:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 602:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 603:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 604:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 605:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 606:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Disables CAN module. In disabled state, no registers of CAN module can be read or written excep
 607:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 608:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 609:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_Enable()\n\n\n
 610:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 611:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 612:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 613:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Disable(XMC_CAN_t *const obj);
 614:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 615:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 616:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 617:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 618:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *         for details.
 619:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 620:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 621:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 622:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 623:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Enables CAN module and initializes all CAN registers to reset values. It is required to re-conf
 624:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  before any data transfer. It configures CAN_CLC.DISR bit.
 625:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 626:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 627:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_Disable()\n\n\n
 628:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 629:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 630:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 631:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Enable(XMC_CAN_t *const obj);
 632:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 633:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 634:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 635:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 636:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 637:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 638:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param node_num  CAN node number,Range : 0-2
 639:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param mo_num  CAN Message Object number,Range : 0-63
 640:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 641:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 642:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 643:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 644:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Allocates Message Object from free list to node list. Each \a node_num is linked to one unique 
 645:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  A CAN node performs message transfer only with the \a mo_num message objects that are allocated
 646:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  It configures PANCTR register.
 647:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 648:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 649:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 650:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 651:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 652:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 653:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 654:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 655:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 656:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 657:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 658:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 659:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 660:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return Ready status of list controller
 661:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 662:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 663:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns ready status of the list controller
 664:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 665:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 666:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_PanelControl()
 667:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 668:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 669:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
 670:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
  25              	 .loc 1 670 0
  26              	 .cfi_startproc
  27 0000 80B5     	 push {r7,lr}
  28              	.LCFI0:
  29              	 .cfi_def_cfa_offset 8
  30              	 .cfi_offset 7,-8
  31              	 .cfi_offset 14,-4
  32 0002 82B0     	 sub sp,sp,#8
  33              	.LCFI1:
  34              	 .cfi_def_cfa_offset 16
  35 0004 00AF     	 add r7,sp,#0
  36              	.LCFI2:
  37              	 .cfi_def_cfa_register 7
  38 0006 7860     	 str r0,[r7,#4]
 671:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
  39              	 .loc 1 671 0
  40 0008 7A68     	 ldr r2,[r7,#4]
  41 000a E223     	 mov r3,#226
  42 000c 5B00     	 lsl r3,r3,#1
  43 000e D258     	 ldr r2,[r2,r3]
  44 0010 C023     	 mov r3,#192
  45 0012 9B00     	 lsl r3,r3,#2
  46 0014 1340     	 and r3,r2
  47 0016 5A42     	 neg r2,r3
  48 0018 5341     	 adc r3,r3,r2
  49 001a DBB2     	 uxtb r3,r3
 672:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
  50              	 .loc 1 672 0
  51 001c 181C     	 mov r0,r3
  52 001e BD46     	 mov sp,r7
  53 0020 02B0     	 add sp,sp,#8
  54              	 
  55 0022 80BD     	 pop {r7,pc}
  56              	 .cfi_endproc
  57              	.LFE61:
  59              	 .section .text.XMC_CAN_PanelControl,"ax",%progbits
  60              	 .align 2
  61              	 .code 16
  62              	 .thumb_func
  64              	XMC_CAN_PanelControl:
  65              	.LFB62:
 673:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 674:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 675:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 676:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 677:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 678:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 679:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param pancmd panal command selection. Refer @ref XMC_CAN_PANCMD_t for valid values.
 680:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg1   Panel Argument 1,Range : 0-2
 681:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg2   Panel Argument 2, Range : 0-63
 682:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 683:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 684:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 685:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 686:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures the panel command and panel arguments. A panel operation consists of a command code 
 687:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  panel arguments (PANAR1, PANAR2). Commands that have a return value deliver it to the PANAR1 bi
 688:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  return an error flag deliver it to bit 31 of the Panel Control Register, this means bit 7 of PA
 689:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  panel argument PANAR1,\a arg2 represents panel argument PANAR2 and \a pancmd represents command
 690:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  register.
 691:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 692:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 693:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 694:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 695:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 696:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 697:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
 698:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_PANCMD_t pancmd,
 699:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                       const uint8_t arg1,
 700:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                       const uint8_t arg2)
 701:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
  66              	 .loc 1 701 0
  67              	 .cfi_startproc
  68 0000 90B5     	 push {r4,r7,lr}
  69              	.LCFI3:
  70              	 .cfi_def_cfa_offset 12
  71              	 .cfi_offset 4,-12
  72              	 .cfi_offset 7,-8
  73              	 .cfi_offset 14,-4
  74 0002 83B0     	 sub sp,sp,#12
  75              	.LCFI4:
  76              	 .cfi_def_cfa_offset 24
  77 0004 00AF     	 add r7,sp,#0
  78              	.LCFI5:
  79              	 .cfi_def_cfa_register 7
  80 0006 7860     	 str r0,[r7,#4]
  81 0008 0C1C     	 mov r4,r1
  82 000a 101C     	 mov r0,r2
  83 000c 191C     	 mov r1,r3
  84 000e FB1C     	 add r3,r7,#3
  85 0010 221C     	 add r2,r4,#0
  86 0012 1A70     	 strb r2,[r3]
  87 0014 BB1C     	 add r3,r7,#2
  88 0016 021C     	 add r2,r0,#0
  89 0018 1A70     	 strb r2,[r3]
  90 001a 7B1C     	 add r3,r7,#1
  91 001c 0A1C     	 add r2,r1,#0
  92 001e 1A70     	 strb r2,[r3]
 702:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
  93              	 .loc 1 702 0
  94 0020 FB1C     	 add r3,r7,#3
  95 0022 1A78     	 ldrb r2,[r3]
 703:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
  96              	 .loc 1 703 0
  97 0024 BB1C     	 add r3,r7,#2
  98 0026 1B78     	 ldrb r3,[r3]
  99 0028 1904     	 lsl r1,r3,#16
 100 002a FF23     	 mov r3,#255
 101 002c 1B04     	 lsl r3,r3,#16
 102 002e 0B40     	 and r3,r1
 702:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 103              	 .loc 1 702 0
 104 0030 1A43     	 orr r2,r3
 704:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 105              	 .loc 1 704 0
 106 0032 7B1C     	 add r3,r7,#1
 107 0034 1B78     	 ldrb r3,[r3]
 108 0036 1B06     	 lsl r3,r3,#24
 703:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 109              	 .loc 1 703 0
 110 0038 1A43     	 orr r2,r3
 111 003a 111C     	 mov r1,r2
 702:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 112              	 .loc 1 702 0
 113 003c 7A68     	 ldr r2,[r7,#4]
 114 003e E223     	 mov r3,#226
 115 0040 5B00     	 lsl r3,r3,#1
 116 0042 D150     	 str r1,[r2,r3]
 705:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
 117              	 .loc 1 705 0
 118 0044 BD46     	 mov sp,r7
 119 0046 03B0     	 add sp,sp,#12
 120              	 
 121 0048 90BD     	 pop {r4,r7,pc}
 122              	 .cfi_endproc
 123              	.LFE62:
 125 004a C046     	 .section .text.XMC_CAN_NODE_EnableConfigurationChange,"ax",%progbits
 126              	 .align 2
 127              	 .code 16
 128              	 .thumb_func
 130              	XMC_CAN_NODE_EnableConfigurationChange:
 131              	.LFB78:
 706:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 707:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 708:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 709:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 710:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 711:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 712:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 713:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_requestr  Interrupt trigger number selection. Refer @ref XMC_CAN_NODE_INTERRUPT_T
 714:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *               Multiple interrupt trigger events can be ORed.
 715:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 716:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 717:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 718:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 719:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures multiple interrupt requests with a single write operation. \a service_requestr repre
 720:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  request or multiple.It configures MITR register.
 721:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 722:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 723:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 724:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 725:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 726:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 727:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_EventTrigger(XMC_CAN_t *const obj,const XMC_CAN_NODE_INTERRUPT_TRIGGER
 728:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 729:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   obj->MITR = ((uint32_t)service_requestr << CAN_MITR_IT_Pos) & (uint32_t)CAN_MITR_IT_Msk;
 730:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
 731:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 732:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 733:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 734:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 735:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 736:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 737:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 738:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source
 739:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). 
 740:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *        The can_frequency shall be an integer divisor of the CAN clock source frequency (fPERI/fM
 741:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *        it should be selected such that if fulfills the minimum operating frequency specified in 
 742:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *        In addition the can_frequency shall be an integer multiple of the baudrate.
 743:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *        Max. value: Max. clock source frequency, i.e. if using fOHP and using a XTAL of 20MHz the
 744:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 745:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return Actual frequency
 746:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 747:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 748:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_Init() configures clock rate of the module timer clock fCAN. 
 749:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that only the normal divider is used to avoid jitter.
 750:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * In addition the actual achievable frequency is returned.
 751:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 752:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 753:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Altering CAN module \a can_frequency shall affects baud rate, call XMC_CAN_NODE_NominalBitTimeCo
 754:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 755:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 756:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 757:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx()\n\n\n
 758:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 759:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 760:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 761:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 762:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 763:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 764:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 765:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 766:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return Baudrate generator clock source
 767:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 768:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 769:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Returns CAN baudrate generator clock source
 770:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 771:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use only for XMC1400 series and XMC47/4800 series projects
 772:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 773:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 774:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj);
 775:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 776:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 777:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 778:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 779:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 780:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 781:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 
 782:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 783:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Sets CAN baudrate generator clock source
 784:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 785:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use only for XMC1400 series and XMC47/4800 series projects
 786:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 787:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 788:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source);
 789:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 790:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 791:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 792:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 793:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 794:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return baudrate generator input clock frequency 
 795:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 796:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 797:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Gets CAN baudrate generator input clock frequency
 798:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 799:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use only for XMC1400 series and XMC47/4800 series projects
 800:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 801:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 802:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj);
 803:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 804:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 805:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 806:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 807:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 808:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 809:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 810:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source.
 811:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). Max. value: Max. clock source frequency, i.e. i
 812:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use clksrc parameter only for XMC1400 series and XMC47/4800 series projects, otherwise omi
 813:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 814:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 815:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 816:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 817:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Configures clock rate of the module timer clock fCAN. Altering CAN module \a can_frequency shall
 818:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_NominalBitTimeConfigure() or XMC_CAN_NODE_NominalBitTimeConfigureEx() to confi
 819:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 820:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 821:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 822:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 823:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 824:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx(), XMC_CAN_InitEx
 825:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 826:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 827:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 828:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #else
 829:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency);
 830:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #endif
 831:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 832:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 833:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 834:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
 835:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 836:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 837:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 838:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 839:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Initializes CAN message object. Initialization includes configuring Message Object identifier ty
 840:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * identifier value, Message Object type, and transfer requests. It configures FDR register.
 841:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 842:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 843:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * None
 844:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 845:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 846:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo);
 847:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 848:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /* NODE APIs */
 849:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 850:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 851:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 852:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node      Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers.
 853:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param ptr_event     CAN_NODE interrupt pointer position. Refer @ref XMC_CAN_NODE_POINTER_EVENT_
 854:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_request Interrupt service request number. Range : 0-7
 855:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 856:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 857:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 858:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 859:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures node interrupt pointer \a service_request for CAN Node events \a ptr_event. It confi
 860:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 861:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 862:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * None
 863:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 864:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 865:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 866:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
 867:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
 868:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                           const uint32_t service_request)
 869:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 870:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_eve
 871:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
 872:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 873:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 874:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 875:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 876:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 877:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 878:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 879:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 880:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 881:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 882:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 883:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 884:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 885:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 886:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * None
 887:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 888:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 889:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_NominalBitTimeConfigure(XMC_CAN_NODE_t *const can_node,
 890:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_b
 891:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 892:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 893:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 894:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 895:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 896:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 897:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return Status on the sucess setting the desired bitrate XMC_CAN_STATUS_t
 898:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 899:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 900:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_NODE_NominalBitTimeConfigure() configures the CAN node baudrate. 
 901:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that allows bitrates below 100kpbs.
 902:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @note Consider using the new API for new projects. XMC_CAN_NODE_NominalBitTimeConfigure() is kep
 903:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 904:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 905:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 906:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 907:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 908:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_InitEx()
 909:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 910:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 911:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
 912:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                                const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const 
 913:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 914:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 915:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 916:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param input    CAN receive input selection. Refer @ref XMC_CAN_NODE_RECEIVE_INPUT_t for details
 917:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 918:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 919:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 920:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 921:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \a input specifies CAN input receive pin. This API Configures NPCRx register,it is required to c
 922:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(), before configuring NPCRx register, call XMC_CAN_NODE_D
 923:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * API after configuring NPCRx register. CAN input receive pins which falls under analog port pins 
 924:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_GPIO_EnableDigitalInput(),to enable digital pad.
 925:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 926:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *\par<b>Related APIs:</b><BR>
 927:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * None
 928:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 929:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 930:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 931:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 932:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 933:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 934:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
 935:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                               const XMC_CAN_NODE_RECEIVE_INPUT_t input)
 936:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 937:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 938:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                    (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Ms
 939:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
 940:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 941:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 942:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 943:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node  Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_
 944:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 945:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 946:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 947:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 948:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Enable Node \a can_node in Loop-Back Mode. A Node is connected to an internal (virtual) loop-bac
 949:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * nodes which are in Loop- Back Mode are connected to this virtual CAN bus so that they can commun
 950:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * other internally. The external transmit line is forced recessive in Loop-Back Mode. This API Con
 951:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 952:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration configuration.
 953:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 954:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 955:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_DisableLoopBack().
 956:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 957:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
 958:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  NPCRx can be written only if bit NCRx.CCE is set.
 959:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 960:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 961:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 962:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
 963:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 964:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 965:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
 966:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 967:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 968:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 969:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 970:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 971:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 972:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 973:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 974:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Disable Node Loop-Back Mode, disables internal (virtual) loop-back CAN bus. This API Configures 
 975:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 976:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration.
 977:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 978:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 979:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack()
 980:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 981:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 982:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 983:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 984:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 985:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 986:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 987:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableLoopBack(XMC_CAN_NODE_t *const can_node)
 988:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 989:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR &= ~(uint32_t)CAN_NODE_NPCR_LBM_Msk;
 990:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
 991:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 992:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 993:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 994:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 995:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 996:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
 997:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
 998:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 999:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1000:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1001:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1002:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Enable CAN Node events. It configures NFCR register.
1003:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1004:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1005:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableEvent()
1006:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1007:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1008:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1009:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1010:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1011:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1012:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1013:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1014:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1015:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
1016:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
1017:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1018:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1019:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1020:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1021:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Disable CAN Node events. It configures NFCR register.
1022:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1023:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1024:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableEvent()
1025:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1026:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1027:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1028:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1029:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1030:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1031:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1032:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1033:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1034:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1035:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_DIR_t Last error transfer direction. Refer @ref XMC_CAN_NODE_LAS
1036:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1037:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1038:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Returns NODE Last Error occurred during Transmit/receive direction. It returns value of NFCR reg
1039:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1040:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1041:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferInc()\n\n\n
1042:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1043:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1044:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1045:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_DIR_t XMC_CAN_NODE_GetLastErrTransferDir(XMC_CAN_NODE_t *co
1046:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1047:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_DIR_t)(((node->NECNT) & CAN_NODE_NECNT_LETD_Msk) >> CAN_NODE_NECN
1048:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1049:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1050:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1051:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1052:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1053:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1054:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1055:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_INC_t Last error transfer increment. Refer @ref XMC_CAN_NODE_LAS
1056:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1057:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1058:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns NODE Last Error Transfer Increment. It returns value of NFCR register.
1059:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1060:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1061:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferDir()\n\n\n
1062:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1063:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1064:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1065:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_INC_t XMC_CAN_NODE_GetLastErrTransferInc(XMC_CAN_NODE_t *co
1066:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1067:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_INC_t)(((node->NECNT) & CAN_NODE_NECNT_LEINC_Msk)>> CAN_NODE_NECN
1068:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1069:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1070:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1071:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1072:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1073:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1074:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param  error_warning_level  Error Warning level value. Range :0-255.
1075:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1076:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1077:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1078:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1079:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Configures error warning level in order to set the corresponding error warning bit EWRN. It conf
1080:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * into NECNT register. Before this configuration call XMC_CAN_NODE_EnableConfigurationChange() API
1081:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1082:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1083:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetErrorWarningLevel()\n\n\n
1084:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1085:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1086:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1087:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1088:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1089:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1090:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetErrorWarningLevel(XMC_CAN_NODE_t *const can_node, uint8_t erro
1091:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1092:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_EWRNLVL_Msk)) |
1093:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)error_warning_level << CAN_NODE_NECNT_EWRNLVL_Pos) & (uint32_t)CAN_
1094:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1095:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1096:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1097:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1098:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1099:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1100:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_tec  transmit error counter value. Range :0-255
1101:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1102:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1103:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1104:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1105:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures Transmit error counter. It configures \a can_tec into NECNT register. Before this co
1106:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_EnableConfigurationChange() API.
1107:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1108:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1109:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetTransmitErrorCounter()\n\n\n
1110:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1111:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
1112:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1113:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1114:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1115:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1116:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1117:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t c
1118:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1119:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_TEC_Msk)) |
1120:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)can_tec << CAN_NODE_NECNT_TEC_Pos) & (uint32_t)CAN_NODE_NECNT_TEC_M
1121:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1122:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1123:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1124:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1125:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1126:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1127:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_rec  receive error counter value. Range :0-255
1128:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1129:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1130:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1131:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1132:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Configures Receive Error Counter. It configures \a can_rec into NECNT register. Before this conf
1133:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange() API.
1134:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1135:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1136:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetReceiveErrorCounter()\n\n\n
1137:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1138:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1139:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1140:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1141:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1143:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t ca
1144:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1145:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_REC_Msk)) |
1146:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                    (((uint32_t)can_rec << CAN_NODE_NECNT_REC_Pos) & (uint32_t)CAN_NODE_NECNT_REC_Ms
1147:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1148:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1149:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1150:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1151:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1152:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1153:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1154:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t Error Warning Level. Range :0 - 255
1155:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1156:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1157:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns error warning level. This determines the threshold value (warning level, default 96) to
1158:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  to set the corresponding error warning bit EWRN. It reads NECNT register.
1159:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1160:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1161:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetErrorWarningLevel()\n\n\n
1162:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1163:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1164:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1165:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1166:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetErrorWarningLevel(XMC_CAN_NODE_t *const can_node)
1167:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1168:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_EWRNLVL_Msk) >> CAN_NODE_NECNT_EWR
1169:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1170:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1171:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1172:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1173:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1174:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1175:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1176:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t transmit error counter value. Range :0 - 255
1177:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1178:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1179:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Transmit Error Counter value. If the Bitstream Processor detects an error while a trans
1180:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  running, the Transmit Error Counter is incremented by 8. An increment of 1 is used when the err
1181:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  reported by an external CAN node via an Error Frame generation. It reads NECNT register.
1182:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1183:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1184:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetTransmitErrorCounter()
1185:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1186:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1187:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1188:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1189:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1190:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1191:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node)
1192:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1193:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_TEC_Msk) >> CAN_NODE_NECNT_TEC_Po
1194:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1195:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1196:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1197:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1198:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1199:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1200:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1201:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t  receive error counter value.
1202:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1203:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1204:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Receive Error Counter value. It reads NECNT register.
1205:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1206:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1207:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetReceiveErrorCounter()
1208:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1209:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1210:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1211:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node)
1212:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1213:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_REC_Msk) >> CAN_NODE_NECNT_REC_Po
1214:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1215:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1216:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1217:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1218:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1219:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1220:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1221:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint32_t Current status of the node.
1222:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1223:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1224:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Returns errors status as well as successfully transferred CAN frames status.
1225:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1226:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1227:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_ClearStatus()
1228:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1229:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1230:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1231:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint32_t XMC_CAN_NODE_GetStatus(XMC_CAN_NODE_t *const can_node)
1232:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1233:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   return ((can_node->NSR));
1234:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1235:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1236:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1237:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1238:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1239:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node_status Status to clear.Refer @ref XMC_CAN_NODE_STATUS_t for valid values.
1240:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1241:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1242:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1243:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1244:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Clear errors status as well as successfully transferred CAN frames status.
1245:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1246:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1247:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetStatus()
1248:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1249:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1250:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1251:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ClearStatus(XMC_CAN_NODE_t *const can_node,XMC_CAN_NODE_STATUS_t 
1252:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1253:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****    can_node->NSR &= ~(uint32_t)can_node_status;
1254:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1255:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1256:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1257:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1258:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1259:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1260:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1261:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1262:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1263:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1264:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Allow to change the configuration of the CAN node, like bit timing, CAN bus transmit/receive por
1265:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * counters read. It configures NCRx.CCE bit.
1266:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1267:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1268:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange()
1269:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1270:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1271:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1272:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1273:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 132              	 .loc 1 1273 0
 133              	 .cfi_startproc
 134 0000 80B5     	 push {r7,lr}
 135              	.LCFI6:
 136              	 .cfi_def_cfa_offset 8
 137              	 .cfi_offset 7,-8
 138              	 .cfi_offset 14,-4
 139 0002 82B0     	 sub sp,sp,#8
 140              	.LCFI7:
 141              	 .cfi_def_cfa_offset 16
 142 0004 00AF     	 add r7,sp,#0
 143              	.LCFI8:
 144              	 .cfi_def_cfa_register 7
 145 0006 7860     	 str r0,[r7,#4]
1274:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 146              	 .loc 1 1274 0
 147 0008 7B68     	 ldr r3,[r7,#4]
 148 000a 1B68     	 ldr r3,[r3]
 149 000c 4022     	 mov r2,#64
 150 000e 1A43     	 orr r2,r3
 151 0010 7B68     	 ldr r3,[r7,#4]
 152 0012 1A60     	 str r2,[r3]
1275:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
 153              	 .loc 1 1275 0
 154 0014 BD46     	 mov sp,r7
 155 0016 02B0     	 add sp,sp,#8
 156              	 
 157 0018 80BD     	 pop {r7,pc}
 158              	 .cfi_endproc
 159              	.LFE78:
 161 001a C046     	 .section .text.XMC_CAN_NODE_DisableConfigurationChange,"ax",%progbits
 162              	 .align 2
 163              	 .code 16
 164              	 .thumb_func
 166              	XMC_CAN_NODE_DisableConfigurationChange:
 167              	.LFB79:
1276:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1277:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1278:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1279:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1280:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1281:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1282:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1283:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1284:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1285:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Forbid to change the configuration of the CAN node. It configures NCRx.CCE bit.
1286:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1287:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1288:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange()
1289:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1290:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1291:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1292:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1293:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 168              	 .loc 1 1293 0
 169              	 .cfi_startproc
 170 0000 80B5     	 push {r7,lr}
 171              	.LCFI9:
 172              	 .cfi_def_cfa_offset 8
 173              	 .cfi_offset 7,-8
 174              	 .cfi_offset 14,-4
 175 0002 82B0     	 sub sp,sp,#8
 176              	.LCFI10:
 177              	 .cfi_def_cfa_offset 16
 178 0004 00AF     	 add r7,sp,#0
 179              	.LCFI11:
 180              	 .cfi_def_cfa_register 7
 181 0006 7860     	 str r0,[r7,#4]
1294:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 182              	 .loc 1 1294 0
 183 0008 7B68     	 ldr r3,[r7,#4]
 184 000a 1B68     	 ldr r3,[r3]
 185 000c 4022     	 mov r2,#64
 186 000e 9343     	 bic r3,r2
 187 0010 1A1C     	 mov r2,r3
 188 0012 7B68     	 ldr r3,[r7,#4]
 189 0014 1A60     	 str r2,[r3]
1295:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
 190              	 .loc 1 1295 0
 191 0016 BD46     	 mov sp,r7
 192 0018 02B0     	 add sp,sp,#8
 193              	 
 194 001a 80BD     	 pop {r7,pc}
 195              	 .cfi_endproc
 196              	.LFE79:
 198              	 .section .text.max,"ax",%progbits
 199              	 .align 2
 200              	 .code 16
 201              	 .thumb_func
 203              	max:
 204              	.LFB114:
 205              	 .file 2 "../Libraries/XMCLib/src/xmc_can.c"
   1:../Libraries/XMCLib/src/xmc_can.c **** /**
   2:../Libraries/XMCLib/src/xmc_can.c ****  * @file xmc_can.c
   3:../Libraries/XMCLib/src/xmc_can.c ****  * @date 2017-11-09
   4:../Libraries/XMCLib/src/xmc_can.c ****  *
   5:../Libraries/XMCLib/src/xmc_can.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_can.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_can.c ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_can.c ****  *
   9:../Libraries/XMCLib/src/xmc_can.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_can.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_can.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_can.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_can.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_can.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_can.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_can.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_can.c ****  * 
  18:../Libraries/XMCLib/src/xmc_can.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_can.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_can.c ****  * 
  21:../Libraries/XMCLib/src/xmc_can.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_can.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_can.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_can.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_can.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_can.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_can.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_can.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_can.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_can.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_can.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_can.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_can.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_can.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_can.c ****  *
  36:../Libraries/XMCLib/src/xmc_can.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_can.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_can.c ****  *
  39:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_can.c ****  *     - Initial draft <br>
  41:../Libraries/XMCLib/src/xmc_can.c ****  *
  42:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-05-20:
  43:../Libraries/XMCLib/src/xmc_can.c ****  *     - New API added: XMC_CAN_MO_ReceiveData() <br>
  44:../Libraries/XMCLib/src/xmc_can.c ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  45:../Libraries/XMCLib/src/xmc_can.c ****  *     - Minor fix in XMC_CAN_TXFIFO_ConfigMOSlaveObject(). <br>
  46:../Libraries/XMCLib/src/xmc_can.c ****  *
  47:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-06-20:
  48:../Libraries/XMCLib/src/xmc_can.c ****  *     - Removed version macros and declaration of GetDriverVersion API
  49:../Libraries/XMCLib/src/xmc_can.c ****  *
  50:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-09-01:
  51:../Libraries/XMCLib/src/xmc_can.c ****  *     - Removed  fCANB clock support <br>
  52:../Libraries/XMCLib/src/xmc_can.c ****  *
  53:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-09-08:
  54:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed bug in XMC_CAN_Init() <br>
  55:../Libraries/XMCLib/src/xmc_can.c ****  *
  56:../Libraries/XMCLib/src/xmc_can.c ****  * 2016-06-07:
  57:../Libraries/XMCLib/src/xmc_can.c ****  *     - Changed XMC_CAN_AllocateMOtoNodeList to wait for ready status of list controller
  58:../Libraries/XMCLib/src/xmc_can.c ****  *
  59:../Libraries/XMCLib/src/xmc_can.c ****  * 2016-06-20:
  60:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed bug in XMC_CAN_MO_Config() <br> 
  61:../Libraries/XMCLib/src/xmc_can.c ****  *
  62:../Libraries/XMCLib/src/xmc_can.c ****  * 2017-11-09:
  63:../Libraries/XMCLib/src/xmc_can.c ****  *     - Added XMC_CAN_InitEx() and XMC_CAN_NODE_NominalBitTimeConfigureEx()
  64:../Libraries/XMCLib/src/xmc_can.c ****  *     - Make XMC_CAN_GetBaudrateClockSource(), XMC_CAN_SetBaudrateClockSource() and XMC_CAN_GetBau
  65:../Libraries/XMCLib/src/xmc_can.c ****  *     - Changed refactoring XMC_CAN_MO_Config() to configure MOCTR depending on transmit or receiv
  66:../Libraries/XMCLib/src/xmc_can.c ****  *
  67:../Libraries/XMCLib/src/xmc_can.c ****  * @endcond
  68:../Libraries/XMCLib/src/xmc_can.c ****  *
  69:../Libraries/XMCLib/src/xmc_can.c ****  */ 
  70:../Libraries/XMCLib/src/xmc_can.c **** 
  71:../Libraries/XMCLib/src/xmc_can.c **** /*******************************************************************************
  72:../Libraries/XMCLib/src/xmc_can.c ****  * HEADER FILES
  73:../Libraries/XMCLib/src/xmc_can.c ****  *******************************************************************************/
  74:../Libraries/XMCLib/src/xmc_can.c **** #include "xmc_can.h"
  75:../Libraries/XMCLib/src/xmc_can.c **** 
  76:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CAN)
  77:../Libraries/XMCLib/src/xmc_can.c **** #include "xmc_scu.h"
  78:../Libraries/XMCLib/src/xmc_can.c **** 
  79:../Libraries/XMCLib/src/xmc_can.c **** __STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
  80:../Libraries/XMCLib/src/xmc_can.c **** {
 206              	 .loc 2 80 0
 207              	 .cfi_startproc
 208 0000 80B5     	 push {r7,lr}
 209              	.LCFI12:
 210              	 .cfi_def_cfa_offset 8
 211              	 .cfi_offset 7,-8
 212              	 .cfi_offset 14,-4
 213 0002 82B0     	 sub sp,sp,#8
 214              	.LCFI13:
 215              	 .cfi_def_cfa_offset 16
 216 0004 00AF     	 add r7,sp,#0
 217              	.LCFI14:
 218              	 .cfi_def_cfa_register 7
 219 0006 7860     	 str r0,[r7,#4]
 220 0008 3960     	 str r1,[r7]
  81:../Libraries/XMCLib/src/xmc_can.c ****   return (a > b) ? a : b;
 221              	 .loc 2 81 0
 222 000a 7A68     	 ldr r2,[r7,#4]
 223 000c 3B68     	 ldr r3,[r7]
 224 000e 9342     	 cmp r3,r2
 225 0010 00D2     	 bcs .L8
 226 0012 131C     	 mov r3,r2
 227              	.L8:
  82:../Libraries/XMCLib/src/xmc_can.c **** }
 228              	 .loc 2 82 0 discriminator 1
 229 0014 181C     	 mov r0,r3
 230 0016 BD46     	 mov sp,r7
 231 0018 02B0     	 add sp,sp,#8
 232              	 
 233 001a 80BD     	 pop {r7,pc}
 234              	 .cfi_endproc
 235              	.LFE114:
 237              	 .section .text.min,"ax",%progbits
 238              	 .align 2
 239              	 .code 16
 240              	 .thumb_func
 242              	min:
 243              	.LFB115:
  83:../Libraries/XMCLib/src/xmc_can.c **** 
  84:../Libraries/XMCLib/src/xmc_can.c **** __STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
  85:../Libraries/XMCLib/src/xmc_can.c **** {
 244              	 .loc 2 85 0
 245              	 .cfi_startproc
 246 0000 80B5     	 push {r7,lr}
 247              	.LCFI15:
 248              	 .cfi_def_cfa_offset 8
 249              	 .cfi_offset 7,-8
 250              	 .cfi_offset 14,-4
 251 0002 82B0     	 sub sp,sp,#8
 252              	.LCFI16:
 253              	 .cfi_def_cfa_offset 16
 254 0004 00AF     	 add r7,sp,#0
 255              	.LCFI17:
 256              	 .cfi_def_cfa_register 7
 257 0006 7860     	 str r0,[r7,#4]
 258 0008 3960     	 str r1,[r7]
  86:../Libraries/XMCLib/src/xmc_can.c ****   return (a < b) ? a : b;
 259              	 .loc 2 86 0
 260 000a 7A68     	 ldr r2,[r7,#4]
 261 000c 3B68     	 ldr r3,[r7]
 262 000e 9342     	 cmp r3,r2
 263 0010 00D9     	 bls .L11
 264 0012 131C     	 mov r3,r2
 265              	.L11:
  87:../Libraries/XMCLib/src/xmc_can.c **** }
 266              	 .loc 2 87 0 discriminator 1
 267 0014 181C     	 mov r0,r3
 268 0016 BD46     	 mov sp,r7
 269 0018 02B0     	 add sp,sp,#8
 270              	 
 271 001a 80BD     	 pop {r7,pc}
 272              	 .cfi_endproc
 273              	.LFE115:
 275              	 .global __aeabi_uidivmod
 276              	 .global __aeabi_uidiv
 277              	 .section .text.XMC_CAN_NODE_NominalBitTimeConfigureEx,"ax",%progbits
 278              	 .align 2
 279              	 .global XMC_CAN_NODE_NominalBitTimeConfigureEx
 280              	 .code 16
 281              	 .thumb_func
 283              	XMC_CAN_NODE_NominalBitTimeConfigureEx:
 284              	.LFB116:
  88:../Libraries/XMCLib/src/xmc_can.c **** 
  89:../Libraries/XMCLib/src/xmc_can.c **** /*******************************************************************************
  90:../Libraries/XMCLib/src/xmc_can.c ****  * API IMPLEMENTATION
  91:../Libraries/XMCLib/src/xmc_can.c ****  *******************************************************************************/
  92:../Libraries/XMCLib/src/xmc_can.c **** 
  93:../Libraries/XMCLib/src/xmc_can.c **** /* The max prescaler is the equal to max BRP setting (64) multiply by 8 (DIV8) */
  94:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_PRESCALER 512
  95:../Libraries/XMCLib/src/xmc_can.c **** 
  96:../Libraries/XMCLib/src/xmc_can.c **** /* maximum TSEG1 is 16 and maximum TSEG2 is 8, plus one fix sync tq */
  97:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_NTQ 25
  98:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_NTQ 8
  99:../Libraries/XMCLib/src/xmc_can.c **** 
 100:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_TSEG1 3
 101:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_TSEG2 2
 102:../Libraries/XMCLib/src/xmc_can.c **** 
 103:../Libraries/XMCLib/src/xmc_can.c **** int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
 104:../Libraries/XMCLib/src/xmc_can.c ****                                                const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const 
 105:../Libraries/XMCLib/src/xmc_can.c **** {
 285              	 .loc 2 105 0
 286              	 .cfi_startproc
 287 0000 80B5     	 push {r7,lr}
 288              	.LCFI18:
 289              	 .cfi_def_cfa_offset 8
 290              	 .cfi_offset 7,-8
 291              	 .cfi_offset 14,-4
 292 0002 88B0     	 sub sp,sp,#32
 293              	.LCFI19:
 294              	 .cfi_def_cfa_offset 40
 295 0004 00AF     	 add r7,sp,#0
 296              	.LCFI20:
 297              	 .cfi_def_cfa_register 7
 298 0006 7860     	 str r0,[r7,#4]
 299 0008 3960     	 str r1,[r7]
 106:../Libraries/XMCLib/src/xmc_can.c ****   /* Check that the CAN frequency is a multiple of the required baudrate */
 107:../Libraries/XMCLib/src/xmc_can.c ****   if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
 300              	 .loc 2 107 0
 301 000a 3B68     	 ldr r3,[r7]
 302 000c 1A68     	 ldr r2,[r3]
 303 000e 3B68     	 ldr r3,[r7]
 304 0010 5B68     	 ldr r3,[r3,#4]
 305 0012 101C     	 mov r0,r2
 306 0014 191C     	 mov r1,r3
 307 0016 FFF7FEFF 	 bl __aeabi_uidivmod
 308 001a 0B1E     	 sub r3,r1,#0
 309 001c 00D0     	 beq .LCB258
 310 001e 80E0     	 b .L13
 311              	.LCB258:
 312              	.LBB2:
 108:../Libraries/XMCLib/src/xmc_can.c ****   {
 109:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t prescaler;
 110:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t div8 = 0;
 313              	 .loc 2 110 0
 314 0020 0023     	 mov r3,#0
 315 0022 BB61     	 str r3,[r7,#24]
 111:../Libraries/XMCLib/src/xmc_can.c **** 
 112:../Libraries/XMCLib/src/xmc_can.c ****   /* Calculate the factor between can frequency and required baudrate, this is equal to (prescaler 
 113:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
 316              	 .loc 2 113 0
 317 0024 3B68     	 ldr r3,[r7]
 318 0026 1A68     	 ldr r2,[r3]
 319 0028 3B68     	 ldr r3,[r7]
 320 002a 5B68     	 ldr r3,[r3,#4]
 321 002c 101C     	 mov r0,r2
 322 002e 191C     	 mov r1,r3
 323 0030 FFF7FEFF 	 bl __aeabi_uidiv
 324 0034 031C     	 mov r3,r0
 325 0036 3B61     	 str r3,[r7,#16]
 114:../Libraries/XMCLib/src/xmc_can.c **** 
 115:../Libraries/XMCLib/src/xmc_can.c ****     /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bi
 116:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
 326              	 .loc 2 116 0
 327 0038 1923     	 mov r3,#25
 328 003a 7B61     	 str r3,[r7,#20]
 117:../Libraries/XMCLib/src/xmc_can.c ****     while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 329              	 .loc 2 117 0
 330 003c 22E0     	 b .L14
 331              	.L18:
 118:../Libraries/XMCLib/src/xmc_can.c ****     {
 119:../Libraries/XMCLib/src/xmc_can.c ****       /* consider this ntq, only if fcan_div is multiple of ntq */
 120:../Libraries/XMCLib/src/xmc_can.c ****     if ((fcan_div % ntq) == 0)
 332              	 .loc 2 120 0
 333 003e 3B69     	 ldr r3,[r7,#16]
 334 0040 181C     	 mov r0,r3
 335 0042 7969     	 ldr r1,[r7,#20]
 336 0044 FFF7FEFF 	 bl __aeabi_uidivmod
 337 0048 0B1E     	 sub r3,r1,#0
 338 004a 18D1     	 bne .L15
 121:../Libraries/XMCLib/src/xmc_can.c ****     {
 122:../Libraries/XMCLib/src/xmc_can.c ****         prescaler = fcan_div / ntq;
 339              	 .loc 2 122 0
 340 004c 3869     	 ldr r0,[r7,#16]
 341 004e 7969     	 ldr r1,[r7,#20]
 342 0050 FFF7FEFF 	 bl __aeabi_uidiv
 343 0054 031C     	 mov r3,r0
 344 0056 FB61     	 str r3,[r7,#28]
 123:../Libraries/XMCLib/src/xmc_can.c ****         if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
 345              	 .loc 2 123 0
 346 0058 FB69     	 ldr r3,[r7,#28]
 347 005a 002B     	 cmp r3,#0
 348 005c 0FD0     	 beq .L15
 349              	 .loc 2 123 0 is_stmt 0 discriminator 1
 350 005e FA69     	 ldr r2,[r7,#28]
 351 0060 8023     	 mov r3,#128
 352 0062 9B00     	 lsl r3,r3,#2
 353 0064 9A42     	 cmp r2,r3
 354 0066 0AD8     	 bhi .L15
 124:../Libraries/XMCLib/src/xmc_can.c ****         {
 125:../Libraries/XMCLib/src/xmc_can.c ****           if (prescaler >= 64)
 355              	 .loc 2 125 0 is_stmt 1
 356 0068 FB69     	 ldr r3,[r7,#28]
 357 006a 3F2B     	 cmp r3,#63
 358 006c 06D9     	 bls .L16
 126:../Libraries/XMCLib/src/xmc_can.c ****           {
 127:../Libraries/XMCLib/src/xmc_can.c ****           /* consider prescaler >=64, if it is integer divisible by 8*/
 128:../Libraries/XMCLib/src/xmc_can.c ****             if ((prescaler & 0x7U) == 0)
 359              	 .loc 2 128 0
 360 006e FB69     	 ldr r3,[r7,#28]
 361 0070 0722     	 mov r2,#7
 362 0072 1340     	 and r3,r2
 363 0074 03D1     	 bne .L15
 129:../Libraries/XMCLib/src/xmc_can.c ****         {
 130:../Libraries/XMCLib/src/xmc_can.c ****               div8 = 1;
 364              	 .loc 2 130 0
 365 0076 0123     	 mov r3,#1
 366 0078 BB61     	 str r3,[r7,#24]
 131:../Libraries/XMCLib/src/xmc_can.c ****               break;
 367              	 .loc 2 131 0
 368 007a 06E0     	 b .L17
 369              	.L16:
 132:../Libraries/XMCLib/src/xmc_can.c ****         }
 133:../Libraries/XMCLib/src/xmc_can.c ****           }
 134:../Libraries/XMCLib/src/xmc_can.c ****           else
 135:../Libraries/XMCLib/src/xmc_can.c ****           {
 136:../Libraries/XMCLib/src/xmc_can.c ****             break;
 370              	 .loc 2 136 0
 371 007c 05E0     	 b .L17
 372              	.L15:
 137:../Libraries/XMCLib/src/xmc_can.c ****           }
 138:../Libraries/XMCLib/src/xmc_can.c ****         }
 139:../Libraries/XMCLib/src/xmc_can.c ****       }
 140:../Libraries/XMCLib/src/xmc_can.c ****       --ntq;
 373              	 .loc 2 140 0
 374 007e 7B69     	 ldr r3,[r7,#20]
 375 0080 013B     	 sub r3,r3,#1
 376 0082 7B61     	 str r3,[r7,#20]
 377              	.L14:
 117:../Libraries/XMCLib/src/xmc_can.c ****     {
 378              	 .loc 2 117 0
 379 0084 7B69     	 ldr r3,[r7,#20]
 380 0086 072B     	 cmp r3,#7
 381 0088 D9D8     	 bhi .L18
 382              	.L17:
 141:../Libraries/XMCLib/src/xmc_can.c ****     }
 142:../Libraries/XMCLib/src/xmc_can.c **** 
 143:../Libraries/XMCLib/src/xmc_can.c ****     if (ntq >= XMC_CAN_NODE_MIN_NTQ)
 383              	 .loc 2 143 0
 384 008a 7B69     	 ldr r3,[r7,#20]
 385 008c 072B     	 cmp r3,#7
 386 008e 48D9     	 bls .L13
 387              	.LBB3:
 144:../Libraries/XMCLib/src/xmc_can.c ****     {
 145:../Libraries/XMCLib/src/xmc_can.c ****       uint32_t tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 1000;
 388              	 .loc 2 145 0
 389 0090 7B69     	 ldr r3,[r7,#20]
 390 0092 013B     	 sub r3,r3,#1
 391 0094 3A68     	 ldr r2,[r7]
 392 0096 1289     	 ldrh r2,[r2,#8]
 393 0098 5343     	 mul r3,r2
 394 009a 181C     	 mov r0,r3
 395 009c FA23     	 mov r3,#250
 396 009e 9900     	 lsl r1,r3,#2
 397 00a0 FFF7FEFF 	 bl __aeabi_uidiv
 398 00a4 031C     	 mov r3,r0
 399 00a6 FB60     	 str r3,[r7,#12]
 146:../Libraries/XMCLib/src/xmc_can.c ****       uint32_t tseg2 = ntq - tseg1 - 1;
 400              	 .loc 2 146 0
 401 00a8 7A69     	 ldr r2,[r7,#20]
 402 00aa FB68     	 ldr r3,[r7,#12]
 403 00ac D31A     	 sub r3,r2,r3
 404 00ae 013B     	 sub r3,r3,#1
 405 00b0 BB60     	 str r3,[r7,#8]
 147:../Libraries/XMCLib/src/xmc_can.c **** 
 148:../Libraries/XMCLib/src/xmc_can.c ****       if ((tseg1 < XMC_CAN_NODE_MIN_TSEG1) || (tseg2 < XMC_CAN_NODE_MIN_TSEG2) || (tseg2 < bit_time
 406              	 .loc 2 148 0
 407 00b2 FB68     	 ldr r3,[r7,#12]
 408 00b4 022B     	 cmp r3,#2
 409 00b6 08D9     	 bls .L19
 410              	 .loc 2 148 0 is_stmt 0 discriminator 1
 411 00b8 BB68     	 ldr r3,[r7,#8]
 412 00ba 012B     	 cmp r3,#1
 413 00bc 05D9     	 bls .L19
 414              	 .loc 2 148 0 discriminator 2
 415 00be 3B68     	 ldr r3,[r7]
 416 00c0 5B89     	 ldrh r3,[r3,#10]
 417 00c2 1A1E     	 sub r2,r3,#0
 418 00c4 BB68     	 ldr r3,[r7,#8]
 419 00c6 9A42     	 cmp r2,r3
 420 00c8 01D9     	 bls .L20
 421              	.L19:
 149:../Libraries/XMCLib/src/xmc_can.c ****       {
 150:../Libraries/XMCLib/src/xmc_can.c ****       return XMC_CAN_STATUS_ERROR;
 422              	 .loc 2 150 0 is_stmt 1
 423 00ca 0123     	 mov r3,#1
 424 00cc 2AE0     	 b .L21
 425              	.L20:
 151:../Libraries/XMCLib/src/xmc_can.c ****       }
 152:../Libraries/XMCLib/src/xmc_can.c **** 
 153:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_NODE_EnableConfigurationChange(can_node);
 426              	 .loc 2 153 0
 427 00ce 7B68     	 ldr r3,[r7,#4]
 428 00d0 181C     	 mov r0,r3
 429 00d2 FFF7FEFF 	 bl XMC_CAN_NODE_EnableConfigurationChange
 154:../Libraries/XMCLib/src/xmc_can.c **** 
 155:../Libraries/XMCLib/src/xmc_can.c ****       /* Configure bit timing register */
 156:../Libraries/XMCLib/src/xmc_can.c ****       can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_M
 430              	 .loc 2 156 0
 431 00d6 BB68     	 ldr r3,[r7,#8]
 432 00d8 013B     	 sub r3,r3,#1
 433 00da 1A03     	 lsl r2,r3,#12
 434 00dc E023     	 mov r3,#224
 435 00de DB01     	 lsl r3,r3,#7
 436 00e0 1A40     	 and r2,r3
 157:../Libraries/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 437              	 .loc 2 157 0
 438 00e2 3B68     	 ldr r3,[r7]
 439 00e4 5B89     	 ldrh r3,[r3,#10]
 440 00e6 013B     	 sub r3,r3,#1
 441 00e8 9B01     	 lsl r3,r3,#6
 442 00ea FF21     	 mov r1,#255
 443 00ec 0B40     	 and r3,r1
 156:../Libraries/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 444              	 .loc 2 156 0
 445 00ee 1A43     	 orr r2,r3
 158:../Libraries/XMCLib/src/xmc_can.c ****                         (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_
 446              	 .loc 2 158 0
 447 00f0 FB68     	 ldr r3,[r7,#12]
 448 00f2 013B     	 sub r3,r3,#1
 449 00f4 1902     	 lsl r1,r3,#8
 450 00f6 F023     	 mov r3,#240
 451 00f8 1B01     	 lsl r3,r3,#4
 452 00fa 0B40     	 and r3,r1
 157:../Libraries/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 453              	 .loc 2 157 0
 454 00fc 1A43     	 orr r2,r3
 159:../Libraries/XMCLib/src/xmc_can.c ****                         (((prescaler - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_
 455              	 .loc 2 159 0
 456 00fe FB69     	 ldr r3,[r7,#28]
 457 0100 013B     	 sub r3,r3,#1
 458 0102 3F21     	 mov r1,#63
 459 0104 0B40     	 and r3,r1
 158:../Libraries/XMCLib/src/xmc_can.c ****                         (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_
 460              	 .loc 2 158 0
 461 0106 1A43     	 orr r2,r3
 160:../Libraries/XMCLib/src/xmc_can.c ****                         ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 462              	 .loc 2 160 0
 463 0108 BB69     	 ldr r3,[r7,#24]
 464 010a DB03     	 lsl r3,r3,#15
 465 010c 1B04     	 lsl r3,r3,#16
 466 010e 1B0C     	 lsr r3,r3,#16
 159:../Libraries/XMCLib/src/xmc_can.c ****                         (((prescaler - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_
 467              	 .loc 2 159 0
 468 0110 1A43     	 orr r2,r3
 156:../Libraries/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 469              	 .loc 2 156 0
 470 0112 7B68     	 ldr r3,[r7,#4]
 471 0114 1A61     	 str r2,[r3,#16]
 161:../Libraries/XMCLib/src/xmc_can.c **** 
 162:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_NODE_DisableConfigurationChange(can_node);
 472              	 .loc 2 162 0
 473 0116 7B68     	 ldr r3,[r7,#4]
 474 0118 181C     	 mov r0,r3
 475 011a FFF7FEFF 	 bl XMC_CAN_NODE_DisableConfigurationChange
 163:../Libraries/XMCLib/src/xmc_can.c **** 
 164:../Libraries/XMCLib/src/xmc_can.c ****       return XMC_CAN_STATUS_SUCCESS;
 476              	 .loc 2 164 0
 477 011e 0023     	 mov r3,#0
 478 0120 00E0     	 b .L21
 479              	.L13:
 480              	.LBE3:
 481              	.LBE2:
 165:../Libraries/XMCLib/src/xmc_can.c ****     }
 166:../Libraries/XMCLib/src/xmc_can.c ****   }
 167:../Libraries/XMCLib/src/xmc_can.c **** 
 168:../Libraries/XMCLib/src/xmc_can.c ****   return XMC_CAN_STATUS_ERROR;
 482              	 .loc 2 168 0
 483 0122 0123     	 mov r3,#1
 484              	.L21:
 169:../Libraries/XMCLib/src/xmc_can.c **** }
 485              	 .loc 2 169 0
 486 0124 181C     	 mov r0,r3
 487 0126 BD46     	 mov sp,r7
 488 0128 08B0     	 add sp,sp,#32
 489              	 
 490 012a 80BD     	 pop {r7,pc}
 491              	 .cfi_endproc
 492              	.LFE116:
 494              	 .section .text.XMC_CAN_NODE_NominalBitTimeConfigure,"ax",%progbits
 495              	 .align 2
 496              	 .global XMC_CAN_NODE_NominalBitTimeConfigure
 497              	 .code 16
 498              	 .thumb_func
 500              	XMC_CAN_NODE_NominalBitTimeConfigure:
 501              	.LFB117:
 170:../Libraries/XMCLib/src/xmc_can.c **** 
 171:../Libraries/XMCLib/src/xmc_can.c **** /* Baudrate Configuration */
 172:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_NominalBitTimeConfigure (XMC_CAN_NODE_t *const can_node,
 173:../Libraries/XMCLib/src/xmc_can.c ****                                            const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_
 174:../Libraries/XMCLib/src/xmc_can.c **** {
 502              	 .loc 2 174 0
 503              	 .cfi_startproc
 504 0000 80B5     	 push {r7,lr}
 505              	.LCFI21:
 506              	 .cfi_def_cfa_offset 8
 507              	 .cfi_offset 7,-8
 508              	 .cfi_offset 14,-4
 509 0002 90B0     	 sub sp,sp,#64
 510              	.LCFI22:
 511              	 .cfi_def_cfa_offset 72
 512 0004 00AF     	 add r7,sp,#0
 513              	.LCFI23:
 514              	 .cfi_def_cfa_register 7
 515 0006 7860     	 str r0,[r7,#4]
 516 0008 3960     	 str r1,[r7]
 175:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t temp_brp = 12U ;
 517              	 .loc 2 175 0
 518 000a 0C23     	 mov r3,#12
 519 000c FB63     	 str r3,[r7,#60]
 176:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t temp_tseg1 = 12U;
 520              	 .loc 2 176 0
 521 000e 0C23     	 mov r3,#12
 522 0010 BB63     	 str r3,[r7,#56]
 177:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_brp = 0U;
 523              	 .loc 2 177 0
 524 0012 0023     	 mov r3,#0
 525 0014 7B63     	 str r3,[r7,#52]
 178:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tseg1 = 1U;
 526              	 .loc 2 178 0
 527 0016 0123     	 mov r3,#1
 528 0018 3B63     	 str r3,[r7,#48]
 179:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tseg2 = 0U;
 529              	 .loc 2 179 0
 530 001a 0023     	 mov r3,#0
 531 001c 7B61     	 str r3,[r7,#20]
 180:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tbaud = 0U;
 532              	 .loc 2 180 0
 533 001e 0023     	 mov r3,#0
 534 0020 FB62     	 str r3,[r7,#44]
 181:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_error = 10000U;
 535              	 .loc 2 181 0
 536 0022 6A4B     	 ldr r3,.L40
 537 0024 BB62     	 str r3,[r7,#40]
 182:../Libraries/XMCLib/src/xmc_can.c **** 
 183:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: rate not supported", (can_bit_time->baudrate
 184:../Libraries/XMCLib/src/xmc_can.c ****              (can_bit_time->baudrate >= 100000U));
 185:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: fCAN not supported",
 186:../Libraries/XMCLib/src/xmc_can.c ****              can_bit_time->can_frequency <= 120000000U);
 187:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: fCAN not supported",
 188:../Libraries/XMCLib/src/xmc_can.c ****              can_bit_time->can_frequency > 5000000U);
 189:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: sample point not supported",
 190:../Libraries/XMCLib/src/xmc_can.c ****              (can_bit_time->sample_point < 10000U) && ((can_bit_time->sample_point > 0U)));
 191:../Libraries/XMCLib/src/xmc_can.c ****        
 192:../Libraries/XMCLib/src/xmc_can.c ****   /*
 193:../Libraries/XMCLib/src/xmc_can.c ****    * Bit timing & sampling
 194:../Libraries/XMCLib/src/xmc_can.c ****    * Tq = (BRP+1)/Fcan if DIV8 = 0
 195:../Libraries/XMCLib/src/xmc_can.c ****    * Tq = 8*(BRP+1)/Fcan if DIV8 = 1
 196:../Libraries/XMCLib/src/xmc_can.c ****    * TSync = 1.Tq
 197:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg1 = (TSEG1+1)*Tq                >= 3Tq
 198:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg2 = (TSEG2+1)*Tq                >= 2Tq
 199:../Libraries/XMCLib/src/xmc_can.c ****    * Bit Time = TSync + TSeg1 + TSeg2    >= 8Tq
 200:../Libraries/XMCLib/src/xmc_can.c ****    *
 201:../Libraries/XMCLib/src/xmc_can.c ****    * Resynchronization:
 202:../Libraries/XMCLib/src/xmc_can.c ****    *
 203:../Libraries/XMCLib/src/xmc_can.c ****    * Tsjw = (SJW + 1)*Tq
 204:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg1 >= Tsjw + Tprop
 205:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg2 >= Tsjw
 206:../Libraries/XMCLib/src/xmc_can.c ****    */
 207:../Libraries/XMCLib/src/xmc_can.c ****   /* search for best baudrate */
 208:../Libraries/XMCLib/src/xmc_can.c ****   for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
 538              	 .loc 2 208 0
 539 0026 0123     	 mov r3,#1
 540 0028 FB63     	 str r3,[r7,#60]
 541 002a 6AE0     	 b .L23
 542              	.L32:
 543              	.LBB4:
 209:../Libraries/XMCLib/src/xmc_can.c ****   {
 210:../Libraries/XMCLib/src/xmc_can.c **** 
 211:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t f_quanta = (uint32_t)((can_bit_time->can_frequency * 10U) / temp_brp);
 544              	 .loc 2 211 0
 545 002c 3B68     	 ldr r3,[r7]
 546 002e 1A68     	 ldr r2,[r3]
 547 0030 131C     	 mov r3,r2
 548 0032 9B00     	 lsl r3,r3,#2
 549 0034 9B18     	 add r3,r3,r2
 550 0036 5B00     	 lsl r3,r3,#1
 551 0038 181C     	 mov r0,r3
 552 003a F96B     	 ldr r1,[r7,#60]
 553 003c FFF7FEFF 	 bl __aeabi_uidiv
 554 0040 031C     	 mov r3,r0
 555 0042 3B61     	 str r3,[r7,#16]
 212:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t temp_tbaud = (uint32_t)(f_quanta / (can_bit_time->baudrate));
 556              	 .loc 2 212 0
 557 0044 3B68     	 ldr r3,[r7]
 558 0046 5B68     	 ldr r3,[r3,#4]
 559 0048 3869     	 ldr r0,[r7,#16]
 560 004a 191C     	 mov r1,r3
 561 004c FFF7FEFF 	 bl __aeabi_uidiv
 562 0050 031C     	 mov r3,r0
 563 0052 7B62     	 str r3,[r7,#36]
 213:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t temp_baudrate;
 214:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t error;
 215:../Libraries/XMCLib/src/xmc_can.c **** 
 216:../Libraries/XMCLib/src/xmc_can.c ****   if((temp_tbaud % 10U) > 5U)
 564              	 .loc 2 216 0
 565 0054 7B6A     	 ldr r3,[r7,#36]
 566 0056 181C     	 mov r0,r3
 567 0058 0A21     	 mov r1,#10
 568 005a FFF7FEFF 	 bl __aeabi_uidivmod
 569 005e 0B1E     	 sub r3,r1,#0
 570 0060 052B     	 cmp r3,#5
 571 0062 0AD9     	 bls .L24
 217:../Libraries/XMCLib/src/xmc_can.c ****   {
 218:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 572              	 .loc 2 218 0
 573 0064 7B6A     	 ldr r3,[r7,#36]
 574 0066 181C     	 mov r0,r3
 575 0068 0A21     	 mov r1,#10
 576 006a FFF7FEFF 	 bl __aeabi_uidiv
 577 006e 031C     	 mov r3,r0
 578 0070 7B62     	 str r3,[r7,#36]
 219:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud++;
 579              	 .loc 2 219 0
 580 0072 7B6A     	 ldr r3,[r7,#36]
 581 0074 0133     	 add r3,r3,#1
 582 0076 7B62     	 str r3,[r7,#36]
 583 0078 06E0     	 b .L25
 584              	.L24:
 220:../Libraries/XMCLib/src/xmc_can.c ****   }
 221:../Libraries/XMCLib/src/xmc_can.c ****   else
 222:../Libraries/XMCLib/src/xmc_can.c ****   {
 223:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 585              	 .loc 2 223 0
 586 007a 7B6A     	 ldr r3,[r7,#36]
 587 007c 181C     	 mov r0,r3
 588 007e 0A21     	 mov r1,#10
 589 0080 FFF7FEFF 	 bl __aeabi_uidiv
 590 0084 031C     	 mov r3,r0
 591 0086 7B62     	 str r3,[r7,#36]
 592              	.L25:
 224:../Libraries/XMCLib/src/xmc_can.c ****   }
 225:../Libraries/XMCLib/src/xmc_can.c **** 
 226:../Libraries/XMCLib/src/xmc_can.c ****   if(temp_tbaud > 0U)
 593              	 .loc 2 226 0
 594 0088 7B6A     	 ldr r3,[r7,#36]
 595 008a 002B     	 cmp r3,#0
 596 008c 0BD0     	 beq .L26
 227:../Libraries/XMCLib/src/xmc_can.c ****   {
 228:../Libraries/XMCLib/src/xmc_can.c ****     temp_baudrate = (uint32_t) (f_quanta / (temp_tbaud * 10U));
 597              	 .loc 2 228 0
 598 008e 7A6A     	 ldr r2,[r7,#36]
 599 0090 131C     	 mov r3,r2
 600 0092 9B00     	 lsl r3,r3,#2
 601 0094 9B18     	 add r3,r3,r2
 602 0096 5B00     	 lsl r3,r3,#1
 603 0098 3869     	 ldr r0,[r7,#16]
 604 009a 191C     	 mov r1,r3
 605 009c FFF7FEFF 	 bl __aeabi_uidiv
 606 00a0 031C     	 mov r3,r0
 607 00a2 3B62     	 str r3,[r7,#32]
 608 00a4 08E0     	 b .L27
 609              	.L26:
 229:../Libraries/XMCLib/src/xmc_can.c ****   }
 230:../Libraries/XMCLib/src/xmc_can.c ****   else
 231:../Libraries/XMCLib/src/xmc_can.c ****   {
 232:../Libraries/XMCLib/src/xmc_can.c ****     temp_baudrate = f_quanta / 10U;
 610              	 .loc 2 232 0
 611 00a6 3B69     	 ldr r3,[r7,#16]
 612 00a8 181C     	 mov r0,r3
 613 00aa 0A21     	 mov r1,#10
 614 00ac FFF7FEFF 	 bl __aeabi_uidiv
 615 00b0 031C     	 mov r3,r0
 616 00b2 3B62     	 str r3,[r7,#32]
 233:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud = 1;
 617              	 .loc 2 233 0
 618 00b4 0123     	 mov r3,#1
 619 00b6 7B62     	 str r3,[r7,#36]
 620              	.L27:
 234:../Libraries/XMCLib/src/xmc_can.c ****   }
 235:../Libraries/XMCLib/src/xmc_can.c **** 
 236:../Libraries/XMCLib/src/xmc_can.c ****   if(temp_baudrate >= can_bit_time->baudrate)
 621              	 .loc 2 236 0
 622 00b8 3B68     	 ldr r3,[r7]
 623 00ba 5A68     	 ldr r2,[r3,#4]
 624 00bc 3B6A     	 ldr r3,[r7,#32]
 625 00be 9A42     	 cmp r2,r3
 626 00c0 05D8     	 bhi .L28
 237:../Libraries/XMCLib/src/xmc_can.c ****   {
 238:../Libraries/XMCLib/src/xmc_can.c ****   error = temp_baudrate - can_bit_time->baudrate;
 627              	 .loc 2 238 0
 628 00c2 3B68     	 ldr r3,[r7]
 629 00c4 5B68     	 ldr r3,[r3,#4]
 630 00c6 3A6A     	 ldr r2,[r7,#32]
 631 00c8 D31A     	 sub r3,r2,r3
 632 00ca FB61     	 str r3,[r7,#28]
 633 00cc 04E0     	 b .L29
 634              	.L28:
 239:../Libraries/XMCLib/src/xmc_can.c ****   }
 240:../Libraries/XMCLib/src/xmc_can.c ****   else
 241:../Libraries/XMCLib/src/xmc_can.c ****   {
 242:../Libraries/XMCLib/src/xmc_can.c ****   error = can_bit_time->baudrate - temp_baudrate;
 635              	 .loc 2 242 0
 636 00ce 3B68     	 ldr r3,[r7]
 637 00d0 5A68     	 ldr r2,[r3,#4]
 638 00d2 3B6A     	 ldr r3,[r7,#32]
 639 00d4 D31A     	 sub r3,r2,r3
 640 00d6 FB61     	 str r3,[r7,#28]
 641              	.L29:
 243:../Libraries/XMCLib/src/xmc_can.c ****   }
 244:../Libraries/XMCLib/src/xmc_can.c **** 
 245:../Libraries/XMCLib/src/xmc_can.c ****   if ((temp_tbaud <= 20U) && (best_error > error))
 642              	 .loc 2 245 0
 643 00d8 7B6A     	 ldr r3,[r7,#36]
 644 00da 142B     	 cmp r3,#20
 645 00dc 0ED8     	 bhi .L30
 646              	 .loc 2 245 0 is_stmt 0 discriminator 1
 647 00de BA6A     	 ldr r2,[r7,#40]
 648 00e0 FB69     	 ldr r3,[r7,#28]
 649 00e2 9A42     	 cmp r2,r3
 650 00e4 0AD9     	 bls .L30
 246:../Libraries/XMCLib/src/xmc_can.c ****   {
 247:../Libraries/XMCLib/src/xmc_can.c ****     best_brp = temp_brp;
 651              	 .loc 2 247 0 is_stmt 1
 652 00e6 FB6B     	 ldr r3,[r7,#60]
 653 00e8 7B63     	 str r3,[r7,#52]
 248:../Libraries/XMCLib/src/xmc_can.c ****     best_tbaud = temp_tbaud;
 654              	 .loc 2 248 0
 655 00ea 7B6A     	 ldr r3,[r7,#36]
 656 00ec FB62     	 str r3,[r7,#44]
 249:../Libraries/XMCLib/src/xmc_can.c ****     best_error = (error);
 657              	 .loc 2 249 0
 658 00ee FB69     	 ldr r3,[r7,#28]
 659 00f0 BB62     	 str r3,[r7,#40]
 250:../Libraries/XMCLib/src/xmc_can.c **** 
 251:../Libraries/XMCLib/src/xmc_can.c ****     if (error < 1000U)
 660              	 .loc 2 251 0
 661 00f2 FB69     	 ldr r3,[r7,#28]
 662 00f4 364A     	 ldr r2,.L40+4
 663 00f6 9342     	 cmp r3,r2
 664 00f8 00D8     	 bhi .L30
 252:../Libraries/XMCLib/src/xmc_can.c ****     {
 253:../Libraries/XMCLib/src/xmc_can.c ****       break;
 665              	 .loc 2 253 0
 666 00fa 05E0     	 b .L31
 667              	.L30:
 668              	.LBE4:
 208:../Libraries/XMCLib/src/xmc_can.c ****   {
 669              	 .loc 2 208 0 discriminator 2
 670 00fc FB6B     	 ldr r3,[r7,#60]
 671 00fe 0133     	 add r3,r3,#1
 672 0100 FB63     	 str r3,[r7,#60]
 673              	.L23:
 208:../Libraries/XMCLib/src/xmc_can.c ****   {
 674              	 .loc 2 208 0 is_stmt 0 discriminator 1
 675 0102 FB6B     	 ldr r3,[r7,#60]
 676 0104 402B     	 cmp r3,#64
 677 0106 91D9     	 bls .L32
 678              	.L31:
 254:../Libraries/XMCLib/src/xmc_can.c ****     }
 255:../Libraries/XMCLib/src/xmc_can.c ****    }
 256:../Libraries/XMCLib/src/xmc_can.c ****   }
 257:../Libraries/XMCLib/src/xmc_can.c ****   /* search for best sample point */
 258:../Libraries/XMCLib/src/xmc_can.c ****   best_error = 10000U;
 679              	 .loc 2 258 0 is_stmt 1
 680 0108 304B     	 ldr r3,.L40
 681 010a BB62     	 str r3,[r7,#40]
 259:../Libraries/XMCLib/src/xmc_can.c **** 
 260:../Libraries/XMCLib/src/xmc_can.c ****   for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
 682              	 .loc 2 260 0
 683 010c 4023     	 mov r3,#64
 684 010e BB63     	 str r3,[r7,#56]
 685 0110 2EE0     	 b .L33
 686              	.L39:
 687              	.LBB5:
 261:../Libraries/XMCLib/src/xmc_can.c ****   {
 262:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t tempSamplePoint = ((temp_tseg1 + 1U) * 10000U) / best_tbaud;
 688              	 .loc 2 262 0
 689 0112 BB6B     	 ldr r3,[r7,#56]
 690 0114 0133     	 add r3,r3,#1
 691 0116 2D4A     	 ldr r2,.L40
 692 0118 5343     	 mul r3,r2
 693 011a 181C     	 mov r0,r3
 694 011c F96A     	 ldr r1,[r7,#44]
 695 011e FFF7FEFF 	 bl __aeabi_uidiv
 696 0122 031C     	 mov r3,r0
 697 0124 FB60     	 str r3,[r7,#12]
 263:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t error;
 264:../Libraries/XMCLib/src/xmc_can.c ****   if (tempSamplePoint >= can_bit_time->sample_point)
 698              	 .loc 2 264 0
 699 0126 3B68     	 ldr r3,[r7]
 700 0128 1B89     	 ldrh r3,[r3,#8]
 701 012a 1A1E     	 sub r2,r3,#0
 702 012c FB68     	 ldr r3,[r7,#12]
 703 012e 9A42     	 cmp r2,r3
 704 0130 06D8     	 bhi .L34
 265:../Libraries/XMCLib/src/xmc_can.c ****   {
 266:../Libraries/XMCLib/src/xmc_can.c ****       error = tempSamplePoint  - can_bit_time->sample_point;
 705              	 .loc 2 266 0
 706 0132 3B68     	 ldr r3,[r7]
 707 0134 1B89     	 ldrh r3,[r3,#8]
 708 0136 1A1C     	 mov r2,r3
 709 0138 FB68     	 ldr r3,[r7,#12]
 710 013a 9B1A     	 sub r3,r3,r2
 711 013c BB61     	 str r3,[r7,#24]
 712 013e 05E0     	 b .L35
 713              	.L34:
 267:../Libraries/XMCLib/src/xmc_can.c ****   }
 268:../Libraries/XMCLib/src/xmc_can.c ****   else
 269:../Libraries/XMCLib/src/xmc_can.c ****   {
 270:../Libraries/XMCLib/src/xmc_can.c ****     error = can_bit_time->sample_point  - tempSamplePoint;
 714              	 .loc 2 270 0
 715 0140 3B68     	 ldr r3,[r7]
 716 0142 1B89     	 ldrh r3,[r3,#8]
 717 0144 1A1C     	 mov r2,r3
 718 0146 FB68     	 ldr r3,[r7,#12]
 719 0148 D31A     	 sub r3,r2,r3
 720 014a BB61     	 str r3,[r7,#24]
 721              	.L35:
 271:../Libraries/XMCLib/src/xmc_can.c ****   }
 272:../Libraries/XMCLib/src/xmc_can.c ****     if (best_error > error)
 722              	 .loc 2 272 0
 723 014c BA6A     	 ldr r2,[r7,#40]
 724 014e BB69     	 ldr r3,[r7,#24]
 725 0150 9A42     	 cmp r2,r3
 726 0152 03D9     	 bls .L36
 273:../Libraries/XMCLib/src/xmc_can.c ****     {
 274:../Libraries/XMCLib/src/xmc_can.c ****       best_tseg1 = temp_tseg1;
 727              	 .loc 2 274 0
 728 0154 BB6B     	 ldr r3,[r7,#56]
 729 0156 3B63     	 str r3,[r7,#48]
 275:../Libraries/XMCLib/src/xmc_can.c ****       best_error = error;
 730              	 .loc 2 275 0
 731 0158 BB69     	 ldr r3,[r7,#24]
 732 015a BB62     	 str r3,[r7,#40]
 733              	.L36:
 276:../Libraries/XMCLib/src/xmc_can.c ****     }
 277:../Libraries/XMCLib/src/xmc_can.c ****     if (tempSamplePoint < (can_bit_time->sample_point))
 734              	 .loc 2 277 0
 735 015c 3B68     	 ldr r3,[r7]
 736 015e 1B89     	 ldrh r3,[r3,#8]
 737 0160 1A1E     	 sub r2,r3,#0
 738 0162 FB68     	 ldr r3,[r7,#12]
 739 0164 9A42     	 cmp r2,r3
 740 0166 00D9     	 bls .L37
 278:../Libraries/XMCLib/src/xmc_can.c ****     {
 279:../Libraries/XMCLib/src/xmc_can.c ****       break;
 741              	 .loc 2 279 0
 742 0168 05E0     	 b .L38
 743              	.L37:
 744              	.LBE5:
 260:../Libraries/XMCLib/src/xmc_can.c ****   {
 745              	 .loc 2 260 0 discriminator 2
 746 016a BB6B     	 ldr r3,[r7,#56]
 747 016c 013B     	 sub r3,r3,#1
 748 016e BB63     	 str r3,[r7,#56]
 749              	.L33:
 260:../Libraries/XMCLib/src/xmc_can.c ****   {
 750              	 .loc 2 260 0 is_stmt 0 discriminator 1
 751 0170 BB6B     	 ldr r3,[r7,#56]
 752 0172 022B     	 cmp r3,#2
 753 0174 CDD8     	 bhi .L39
 754              	.L38:
 280:../Libraries/XMCLib/src/xmc_can.c ****     }
 281:../Libraries/XMCLib/src/xmc_can.c ****   }
 282:../Libraries/XMCLib/src/xmc_can.c **** 
 283:../Libraries/XMCLib/src/xmc_can.c ****   best_tseg2 = best_tbaud - best_tseg1 - 1U;
 755              	 .loc 2 283 0 is_stmt 1
 756 0176 FA6A     	 ldr r2,[r7,#44]
 757 0178 3B6B     	 ldr r3,[r7,#48]
 758 017a D31A     	 sub r3,r2,r3
 759 017c 013B     	 sub r3,r3,#1
 760 017e 7B61     	 str r3,[r7,#20]
 284:../Libraries/XMCLib/src/xmc_can.c **** 
 285:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_NODE_EnableConfigurationChange(can_node);
 761              	 .loc 2 285 0
 762 0180 7B68     	 ldr r3,[r7,#4]
 763 0182 181C     	 mov r0,r3
 764 0184 FFF7FEFF 	 bl XMC_CAN_NODE_EnableConfigurationChange
 286:../Libraries/XMCLib/src/xmc_can.c ****   /* Configure bit timing register */
 287:../Libraries/XMCLib/src/xmc_can.c ****   can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_N
 765              	 .loc 2 287 0
 766 0188 7B69     	 ldr r3,[r7,#20]
 767 018a 013B     	 sub r3,r3,#1
 768 018c 1A03     	 lsl r2,r3,#12
 769 018e E023     	 mov r3,#224
 770 0190 DB01     	 lsl r3,r3,#7
 771 0192 1A40     	 and r2,r3
 288:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 772              	 .loc 2 288 0
 773 0194 3B68     	 ldr r3,[r7]
 774 0196 5B89     	 ldrh r3,[r3,#10]
 775 0198 013B     	 sub r3,r3,#1
 776 019a 9B01     	 lsl r3,r3,#6
 777 019c FF21     	 mov r1,#255
 778 019e 0B40     	 and r3,r1
 287:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 779              	 .loc 2 287 0
 780 01a0 1A43     	 orr r2,r3
 289:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBT
 781              	 .loc 2 289 0
 782 01a2 3B6B     	 ldr r3,[r7,#48]
 783 01a4 013B     	 sub r3,r3,#1
 784 01a6 1902     	 lsl r1,r3,#8
 785 01a8 F023     	 mov r3,#240
 786 01aa 1B01     	 lsl r3,r3,#4
 787 01ac 0B40     	 and r3,r1
 288:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 788              	 .loc 2 288 0
 789 01ae 1A43     	 orr r2,r3
 290:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_
 790              	 .loc 2 290 0
 791 01b0 7B6B     	 ldr r3,[r7,#52]
 792 01b2 013B     	 sub r3,r3,#1
 793 01b4 3F21     	 mov r1,#63
 794 01b6 0B40     	 and r3,r1
 795 01b8 1A43     	 orr r2,r3
 287:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 796              	 .loc 2 287 0
 797 01ba 7B68     	 ldr r3,[r7,#4]
 798 01bc 1A61     	 str r2,[r3,#16]
 291:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 292:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_NODE_DisableConfigurationChange(can_node);
 799              	 .loc 2 292 0
 800 01be 7B68     	 ldr r3,[r7,#4]
 801 01c0 181C     	 mov r0,r3
 802 01c2 FFF7FEFF 	 bl XMC_CAN_NODE_DisableConfigurationChange
 293:../Libraries/XMCLib/src/xmc_can.c **** }
 803              	 .loc 2 293 0
 804 01c6 BD46     	 mov sp,r7
 805 01c8 10B0     	 add sp,sp,#64
 806              	 
 807 01ca 80BD     	 pop {r7,pc}
 808              	.L41:
 809              	 .align 2
 810              	.L40:
 811 01cc 10270000 	 .word 10000
 812 01d0 E7030000 	 .word 999
 813              	 .cfi_endproc
 814              	.LFE117:
 816              	 .section .text.XMC_CAN_AllocateMOtoNodeList,"ax",%progbits
 817              	 .align 2
 818              	 .global XMC_CAN_AllocateMOtoNodeList
 819              	 .code 16
 820              	 .thumb_func
 822              	XMC_CAN_AllocateMOtoNodeList:
 823              	.LFB118:
 294:../Libraries/XMCLib/src/xmc_can.c **** /* Function to allocate message object from free list to node list */
 295:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 296:../Libraries/XMCLib/src/xmc_can.c **** {
 824              	 .loc 2 296 0
 825              	 .cfi_startproc
 826 0000 90B5     	 push {r4,r7,lr}
 827              	.LCFI24:
 828              	 .cfi_def_cfa_offset 12
 829              	 .cfi_offset 4,-12
 830              	 .cfi_offset 7,-8
 831              	 .cfi_offset 14,-4
 832 0002 83B0     	 sub sp,sp,#12
 833              	.LCFI25:
 834              	 .cfi_def_cfa_offset 24
 835 0004 00AF     	 add r7,sp,#0
 836              	.LCFI26:
 837              	 .cfi_def_cfa_register 7
 838 0006 7860     	 str r0,[r7,#4]
 839 0008 081C     	 mov r0,r1
 840 000a 111C     	 mov r1,r2
 841 000c FB1C     	 add r3,r7,#3
 842 000e 021C     	 add r2,r0,#0
 843 0010 1A70     	 strb r2,[r3]
 844 0012 BB1C     	 add r3,r7,#2
 845 0014 0A1C     	 add r2,r1,#0
 846 0016 1A70     	 strb r2,[r3]
 297:../Libraries/XMCLib/src/xmc_can.c ****   /* wait while panel operation is in progress. */
 298:../Libraries/XMCLib/src/xmc_can.c ****   while (XMC_CAN_IsPanelControlReady(obj) == false)
 847              	 .loc 2 298 0
 848 0018 C046     	 mov r8,r8
 849              	.L43:
 850              	 .loc 2 298 0 is_stmt 0 discriminator 1
 851 001a 7B68     	 ldr r3,[r7,#4]
 852 001c 181C     	 mov r0,r3
 853 001e FFF7FEFF 	 bl XMC_CAN_IsPanelControlReady
 854 0022 031C     	 mov r3,r0
 855 0024 1A1C     	 mov r2,r3
 856 0026 0123     	 mov r3,#1
 857 0028 5340     	 eor r3,r2
 858 002a DBB2     	 uxtb r3,r3
 859 002c 002B     	 cmp r3,#0
 860 002e F4D1     	 bne .L43
 299:../Libraries/XMCLib/src/xmc_can.c ****   {
 300:../Libraries/XMCLib/src/xmc_can.c ****     /*Do nothing*/
 301:../Libraries/XMCLib/src/xmc_can.c ****   };
 302:../Libraries/XMCLib/src/xmc_can.c **** 
 303:../Libraries/XMCLib/src/xmc_can.c ****   /* Panel Command for  allocation of MO to node list */
 304:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE,mo_num,(node_num + 1U));
 861              	 .loc 2 304 0 is_stmt 1
 862 0030 FB1C     	 add r3,r7,#3
 863 0032 1B78     	 ldrb r3,[r3]
 864 0034 0133     	 add r3,r3,#1
 865 0036 DCB2     	 uxtb r4,r3
 866 0038 7A68     	 ldr r2,[r7,#4]
 867 003a BB1C     	 add r3,r7,#2
 868 003c 1B78     	 ldrb r3,[r3]
 869 003e 101C     	 mov r0,r2
 870 0040 0221     	 mov r1,#2
 871 0042 1A1C     	 mov r2,r3
 872 0044 231C     	 mov r3,r4
 873 0046 FFF7FEFF 	 bl XMC_CAN_PanelControl
 305:../Libraries/XMCLib/src/xmc_can.c **** }
 874              	 .loc 2 305 0
 875 004a BD46     	 mov sp,r7
 876 004c 03B0     	 add sp,sp,#12
 877              	 
 878 004e 90BD     	 pop {r4,r7,pc}
 879              	 .cfi_endproc
 880              	.LFE118:
 882              	 .section .text.XMC_CAN_Disable,"ax",%progbits
 883              	 .align 2
 884              	 .global XMC_CAN_Disable
 885              	 .code 16
 886              	 .thumb_func
 888              	XMC_CAN_Disable:
 889              	.LFB119:
 306:../Libraries/XMCLib/src/xmc_can.c **** 
 307:../Libraries/XMCLib/src/xmc_can.c **** /* Disable XMC_CAN Peripheral */
 308:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Disable(XMC_CAN_t *const obj)
 309:../Libraries/XMCLib/src/xmc_can.c **** {
 890              	 .loc 2 309 0
 891              	 .cfi_startproc
 892 0000 80B5     	 push {r7,lr}
 893              	.LCFI27:
 894              	 .cfi_def_cfa_offset 8
 895              	 .cfi_offset 7,-8
 896              	 .cfi_offset 14,-4
 897 0002 82B0     	 sub sp,sp,#8
 898              	.LCFI28:
 899              	 .cfi_def_cfa_offset 16
 900 0004 00AF     	 add r7,sp,#0
 901              	.LCFI29:
 902              	 .cfi_def_cfa_register 7
 903 0006 7860     	 str r0,[r7,#4]
 310:../Libraries/XMCLib/src/xmc_can.c ****   /* Disable CAN Module */
 311:../Libraries/XMCLib/src/xmc_can.c ****   obj->CLC = CAN_CLC_DISR_Msk;
 904              	 .loc 2 311 0
 905 0008 7B68     	 ldr r3,[r7,#4]
 906 000a 0122     	 mov r2,#1
 907 000c 1A60     	 str r2,[r3]
 312:../Libraries/XMCLib/src/xmc_can.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 313:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 314:../Libraries/XMCLib/src/xmc_can.c **** #endif
 315:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CLOCK_GATING_SUPPORTED)
 316:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 908              	 .loc 2 316 0
 909 000e 8023     	 mov r3,#128
 910 0010 9B03     	 lsl r3,r3,#14
 911 0012 181C     	 mov r0,r3
 912 0014 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 317:../Libraries/XMCLib/src/xmc_can.c **** #endif
 318:../Libraries/XMCLib/src/xmc_can.c **** }
 913              	 .loc 2 318 0
 914 0018 BD46     	 mov sp,r7
 915 001a 02B0     	 add sp,sp,#8
 916              	 
 917 001c 80BD     	 pop {r7,pc}
 918              	 .cfi_endproc
 919              	.LFE119:
 921 001e C046     	 .section .text.XMC_CAN_Enable,"ax",%progbits
 922              	 .align 2
 923              	 .global XMC_CAN_Enable
 924              	 .code 16
 925              	 .thumb_func
 927              	XMC_CAN_Enable:
 928              	.LFB120:
 319:../Libraries/XMCLib/src/xmc_can.c **** 
 320:../Libraries/XMCLib/src/xmc_can.c **** /* Enable XMC_CAN Peripheral */
 321:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Enable(XMC_CAN_t *const obj)
 322:../Libraries/XMCLib/src/xmc_can.c **** {
 929              	 .loc 2 322 0
 930              	 .cfi_startproc
 931 0000 80B5     	 push {r7,lr}
 932              	.LCFI30:
 933              	 .cfi_def_cfa_offset 8
 934              	 .cfi_offset 7,-8
 935              	 .cfi_offset 14,-4
 936 0002 82B0     	 sub sp,sp,#8
 937              	.LCFI31:
 938              	 .cfi_def_cfa_offset 16
 939 0004 00AF     	 add r7,sp,#0
 940              	.LCFI32:
 941              	 .cfi_def_cfa_register 7
 942 0006 7860     	 str r0,[r7,#4]
 323:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CLOCK_GATING_SUPPORTED)
 324:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 943              	 .loc 2 324 0
 944 0008 8023     	 mov r3,#128
 945 000a 9B03     	 lsl r3,r3,#14
 946 000c 181C     	 mov r0,r3
 947 000e FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 325:../Libraries/XMCLib/src/xmc_can.c **** #endif
 326:../Libraries/XMCLib/src/xmc_can.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 327:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 328:../Libraries/XMCLib/src/xmc_can.c **** #endif
 329:../Libraries/XMCLib/src/xmc_can.c ****   /* Enable CAN Module */
 330:../Libraries/XMCLib/src/xmc_can.c ****   obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 948              	 .loc 2 330 0
 949 0012 7B68     	 ldr r3,[r7,#4]
 950 0014 1B68     	 ldr r3,[r3]
 951 0016 0122     	 mov r2,#1
 952 0018 9343     	 bic r3,r2
 953 001a 1A1C     	 mov r2,r3
 954 001c 7B68     	 ldr r3,[r7,#4]
 955 001e 1A60     	 str r2,[r3]
 331:../Libraries/XMCLib/src/xmc_can.c ****   while (obj->CLC & CAN_CLC_DISS_Msk)
 956              	 .loc 2 331 0
 957 0020 C046     	 mov r8,r8
 958              	.L46:
 959              	 .loc 2 331 0 is_stmt 0 discriminator 1
 960 0022 7B68     	 ldr r3,[r7,#4]
 961 0024 1B68     	 ldr r3,[r3]
 962 0026 0222     	 mov r2,#2
 963 0028 1340     	 and r3,r2
 964 002a FAD1     	 bne .L46
 332:../Libraries/XMCLib/src/xmc_can.c ****   {
 333:../Libraries/XMCLib/src/xmc_can.c ****     /*Do nothing*/
 334:../Libraries/XMCLib/src/xmc_can.c ****   };
 335:../Libraries/XMCLib/src/xmc_can.c **** }
 965              	 .loc 2 335 0 is_stmt 1
 966 002c BD46     	 mov sp,r7
 967 002e 02B0     	 add sp,sp,#8
 968              	 
 969 0030 80BD     	 pop {r7,pc}
 970              	 .cfi_endproc
 971              	.LFE120:
 973 0032 C046     	 .section .text.XMC_CAN_Init,"ax",%progbits
 974              	 .align 2
 975              	 .global XMC_CAN_Init
 976              	 .code 16
 977              	 .thumb_func
 979              	XMC_CAN_Init:
 980              	.LFB121:
 336:../Libraries/XMCLib/src/xmc_can.c **** 
 337:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 338:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
 339:../Libraries/XMCLib/src/xmc_can.c **** {
 981              	 .loc 2 339 0
 982              	 .cfi_startproc
 983 0000 80B5     	 push {r7,lr}
 984              	.LCFI33:
 985              	 .cfi_def_cfa_offset 8
 986              	 .cfi_offset 7,-8
 987              	 .cfi_offset 14,-4
 988 0002 8EB0     	 sub sp,sp,#56
 989              	.LCFI34:
 990              	 .cfi_def_cfa_offset 64
 991 0004 00AF     	 add r7,sp,#0
 992              	.LCFI35:
 993              	 .cfi_def_cfa_register 7
 994 0006 F860     	 str r0,[r7,#12]
 995 0008 7A60     	 str r2,[r7,#4]
 996 000a 0B23     	 mov r3,#11
 997 000c FB18     	 add r3,r7,r3
 998 000e 0A1C     	 add r2,r1,#0
 999 0010 1A70     	 strb r2,[r3]
 340:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t  step_n, step_f;
 341:../Libraries/XMCLib/src/xmc_can.c ****   bool normal_divider;
 342:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n, freq_f;
 343:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step;
 344:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t can_frequency_khz;
 345:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency_khz;
 346:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_DM_t can_divider_mode;
 347:../Libraries/XMCLib/src/xmc_can.c **** 
 348:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency;
 349:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 350:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 1000              	 .loc 2 350 0
 1001 0012 FB68     	 ldr r3,[r7,#12]
 1002 0014 181C     	 mov r0,r3
 1003 0016 FFF7FEFF 	 bl XMC_CAN_Enable
 351:../Libraries/XMCLib/src/xmc_can.c **** 
 352:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 1004              	 .loc 2 352 0
 1005 001a FA68     	 ldr r2,[r7,#12]
 1006 001c 0B23     	 mov r3,#11
 1007 001e FB18     	 add r3,r7,r3
 1008 0020 1B78     	 ldrb r3,[r3]
 1009 0022 101C     	 mov r0,r2
 1010 0024 191C     	 mov r1,r3
 1011 0026 FFF7FEFF 	 bl XMC_CAN_SetBaudrateClockSource
 353:../Libraries/XMCLib/src/xmc_can.c **** 
 354:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 1012              	 .loc 2 354 0
 1013 002a FB68     	 ldr r3,[r7,#12]
 1014 002c 181C     	 mov r0,r3
 1015 002e FFF7FEFF 	 bl XMC_CAN_GetBaudrateClockFrequency
 1016 0032 031C     	 mov r3,r0
 1017 0034 7B63     	 str r3,[r7,#52]
 355:../Libraries/XMCLib/src/xmc_can.c **** 
 356:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 357:../Libraries/XMCLib/src/xmc_can.c **** 
 358:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 359:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 1018              	 .loc 2 359 0
 1019 0036 786B     	 ldr r0,[r7,#52]
 1020 0038 7968     	 ldr r1,[r7,#4]
 1021 003a FFF7FEFF 	 bl __aeabi_uidiv
 1022 003e 031C     	 mov r3,r0
 1023 0040 1A1C     	 mov r2,r3
 1024 0042 8023     	 mov r3,#128
 1025 0044 DB00     	 lsl r3,r3,#3
 1026 0046 9B1A     	 sub r3,r3,r2
 1027 0048 0020     	 mov r0,#0
 1028 004a 191C     	 mov r1,r3
 1029 004c FFF7FEFF 	 bl max
 1030 0050 021C     	 mov r2,r0
 1031 0052 314B     	 ldr r3,.L52
 1032 0054 101C     	 mov r0,r2
 1033 0056 191C     	 mov r1,r3
 1034 0058 FFF7FEFF 	 bl min
 1035 005c 031C     	 mov r3,r0
 1036 005e 3B63     	 str r3,[r7,#48]
 360:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 1037              	 .loc 2 360 0
 1038 0060 3B6B     	 ldr r3,[r7,#48]
 1039 0062 8022     	 mov r2,#128
 1040 0064 D200     	 lsl r2,r2,#3
 1041 0066 D31A     	 sub r3,r2,r3
 1042 0068 786B     	 ldr r0,[r7,#52]
 1043 006a 191C     	 mov r1,r3
 1044 006c FFF7FEFF 	 bl __aeabi_uidiv
 1045 0070 031C     	 mov r3,r0
 1046 0072 FB62     	 str r3,[r7,#44]
 361:../Libraries/XMCLib/src/xmc_can.c **** 
 362:../Libraries/XMCLib/src/xmc_can.c ****   /* Fractional divider mode */
 363:../Libraries/XMCLib/src/xmc_can.c ****   can_frequency_khz = (uint32_t) (can_frequency >> 6);
 1047              	 .loc 2 363 0
 1048 0074 7B68     	 ldr r3,[r7,#4]
 1049 0076 9B09     	 lsr r3,r3,#6
 1050 0078 BB62     	 str r3,[r7,#40]
 364:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 1051              	 .loc 2 364 0
 1052 007a 7B6B     	 ldr r3,[r7,#52]
 1053 007c 9B09     	 lsr r3,r3,#6
 1054 007e 7B62     	 str r3,[r7,#36]
 365:../Libraries/XMCLib/src/xmc_can.c **** 
 366:../Libraries/XMCLib/src/xmc_can.c ****   step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 1055              	 .loc 2 366 0
 1056 0080 BB6A     	 ldr r3,[r7,#40]
 1057 0082 9B02     	 lsl r3,r3,#10
 1058 0084 181C     	 mov r0,r3
 1059 0086 796A     	 ldr r1,[r7,#36]
 1060 0088 FFF7FEFF 	 bl __aeabi_uidiv
 1061 008c 031C     	 mov r3,r0
 1062 008e 1A1C     	 mov r2,r3
 1063 0090 214B     	 ldr r3,.L52
 1064 0092 101C     	 mov r0,r2
 1065 0094 191C     	 mov r1,r3
 1066 0096 FFF7FEFF 	 bl min
 1067 009a 031C     	 mov r3,r0
 1068 009c 3B62     	 str r3,[r7,#32]
 367:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 1069              	 .loc 2 367 0
 1070 009e 7B6A     	 ldr r3,[r7,#36]
 1071 00a0 3A6A     	 ldr r2,[r7,#32]
 1072 00a2 5343     	 mul r3,r2
 1073 00a4 9B0A     	 lsr r3,r3,#10
 1074 00a6 FB61     	 str r3,[r7,#28]
 368:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = freq_f << 6;
 1075              	 .loc 2 368 0
 1076 00a8 FB69     	 ldr r3,[r7,#28]
 1077 00aa 9B01     	 lsl r3,r3,#6
 1078 00ac FB61     	 str r3,[r7,#28]
 369:../Libraries/XMCLib/src/xmc_can.c **** 
 370:../Libraries/XMCLib/src/xmc_can.c ****   normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 1079              	 .loc 2 370 0
 1080 00ae 7A68     	 ldr r2,[r7,#4]
 1081 00b0 FB6A     	 ldr r3,[r7,#44]
 1082 00b2 D11A     	 sub r1,r2,r3
 1083 00b4 7A68     	 ldr r2,[r7,#4]
 1084 00b6 FB69     	 ldr r3,[r7,#28]
 1085 00b8 D01A     	 sub r0,r2,r3
 1086 00ba 1B23     	 mov r3,#27
 1087 00bc FA18     	 add r2,r7,r3
 1088 00be 0023     	 mov r3,#0
 1089 00c0 8842     	 cmp r0,r1
 1090 00c2 5B41     	 adc r3,r3,r3
 1091 00c4 1370     	 strb r3,[r2]
 371:../Libraries/XMCLib/src/xmc_can.c **** 
 372:../Libraries/XMCLib/src/xmc_can.c ****   step   = (normal_divider != 0U) ? step_n : step_f;
 1092              	 .loc 2 372 0
 1093 00c6 1B23     	 mov r3,#27
 1094 00c8 FB18     	 add r3,r7,r3
 1095 00ca 1B78     	 ldrb r3,[r3]
 1096 00cc 002B     	 cmp r3,#0
 1097 00ce 01D0     	 beq .L48
 1098              	 .loc 2 372 0 is_stmt 0 discriminator 1
 1099 00d0 3B6B     	 ldr r3,[r7,#48]
 1100 00d2 00E0     	 b .L49
 1101              	.L48:
 1102              	 .loc 2 372 0 discriminator 2
 1103 00d4 3B6A     	 ldr r3,[r7,#32]
 1104              	.L49:
 1105              	 .loc 2 372 0 discriminator 4
 1106 00d6 7B61     	 str r3,[r7,#20]
 373:../Libraries/XMCLib/src/xmc_can.c ****   can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 1107              	 .loc 2 373 0 is_stmt 1 discriminator 4
 1108 00d8 1B23     	 mov r3,#27
 1109 00da FB18     	 add r3,r7,r3
 1110 00dc 1B78     	 ldrb r3,[r3]
 1111 00de 002B     	 cmp r3,#0
 1112 00e0 01D0     	 beq .L50
 1113              	 .loc 2 373 0 is_stmt 0 discriminator 1
 1114 00e2 0122     	 mov r2,#1
 1115 00e4 00E0     	 b .L51
 1116              	.L50:
 1117              	 .loc 2 373 0 discriminator 2
 1118 00e6 0222     	 mov r2,#2
 1119              	.L51:
 1120              	 .loc 2 373 0 discriminator 4
 1121 00e8 1323     	 mov r3,#19
 1122 00ea FB18     	 add r3,r7,r3
 1123 00ec 1A70     	 strb r2,[r3]
 374:../Libraries/XMCLib/src/xmc_can.c **** 
 375:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 1124              	 .loc 2 375 0 is_stmt 1 discriminator 4
 1125 00ee FB68     	 ldr r3,[r7,#12]
 1126 00f0 DB68     	 ldr r3,[r3,#12]
 1127 00f2 0A4A     	 ldr r2,.L52+4
 1128 00f4 1A40     	 and r2,r3
 1129 00f6 FB68     	 ldr r3,[r7,#12]
 1130 00f8 DA60     	 str r2,[r3,#12]
 376:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos)
 1131              	 .loc 2 376 0 discriminator 4
 1132 00fa FB68     	 ldr r3,[r7,#12]
 1133 00fc DA68     	 ldr r2,[r3,#12]
 1134 00fe 1323     	 mov r3,#19
 1135 0100 FB18     	 add r3,r7,r3
 1136 0102 1B78     	 ldrb r3,[r3]
 1137 0104 9903     	 lsl r1,r3,#14
 1138 0106 7B69     	 ldr r3,[r7,#20]
 1139 0108 0B43     	 orr r3,r1
 1140 010a 1A43     	 orr r2,r3
 1141 010c FB68     	 ldr r3,[r7,#12]
 1142 010e DA60     	 str r2,[r3,#12]
 377:../Libraries/XMCLib/src/xmc_can.c **** 
 378:../Libraries/XMCLib/src/xmc_can.c **** }
 1143              	 .loc 2 378 0 discriminator 4
 1144 0110 BD46     	 mov sp,r7
 1145 0112 0EB0     	 add sp,sp,#56
 1146              	 
 1147 0114 80BD     	 pop {r7,pc}
 1148              	.L53:
 1149 0116 C046     	 .align 2
 1150              	.L52:
 1151 0118 FF030000 	 .word 1023
 1152 011c 003CFFFF 	 .word -50176
 1153              	 .cfi_endproc
 1154              	.LFE121:
 1156              	 .section .text.XMC_CAN_SetBaudrateClockSource,"ax",%progbits
 1157              	 .align 2
 1158              	 .global XMC_CAN_SetBaudrateClockSource
 1159              	 .code 16
 1160              	 .thumb_func
 1162              	XMC_CAN_SetBaudrateClockSource:
 1163              	.LFB122:
 379:../Libraries/XMCLib/src/xmc_can.c **** 
 380:../Libraries/XMCLib/src/xmc_can.c **** #else
 381:../Libraries/XMCLib/src/xmc_can.c **** /* Initialization of XMC_CAN GLOBAL Object */
 382:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency)
 383:../Libraries/XMCLib/src/xmc_can.c **** {
 384:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t  step_n, step_f;
 385:../Libraries/XMCLib/src/xmc_can.c ****   bool normal_divider;
 386:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n, freq_f;
 387:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step;
 388:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t can_frequency_khz;
 389:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency_khz;
 390:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_DM_t can_divider_mode;
 391:../Libraries/XMCLib/src/xmc_can.c **** 
 392:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency = (XMC_SCU_CLOCK_GetPeripheralClockFrequency());
 393:../Libraries/XMCLib/src/xmc_can.c **** 
 394:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 395:../Libraries/XMCLib/src/xmc_can.c **** 
 396:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 397:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 398:../Libraries/XMCLib/src/xmc_can.c **** 
 399:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 400:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 401:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 402:../Libraries/XMCLib/src/xmc_can.c **** 
 403:../Libraries/XMCLib/src/xmc_can.c ****   /* Fractional divider mode */
 404:../Libraries/XMCLib/src/xmc_can.c ****   can_frequency_khz = (uint32_t) (can_frequency >> 6);
 405:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 406:../Libraries/XMCLib/src/xmc_can.c **** 
 407:../Libraries/XMCLib/src/xmc_can.c ****   step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 408:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 409:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = freq_f << 6;
 410:../Libraries/XMCLib/src/xmc_can.c **** 
 411:../Libraries/XMCLib/src/xmc_can.c ****   normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 412:../Libraries/XMCLib/src/xmc_can.c **** 
 413:../Libraries/XMCLib/src/xmc_can.c ****   step   = (normal_divider != 0U) ? step_n : step_f;
 414:../Libraries/XMCLib/src/xmc_can.c ****   can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 415:../Libraries/XMCLib/src/xmc_can.c **** 
 416:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 417:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos)
 418:../Libraries/XMCLib/src/xmc_can.c **** }
 419:../Libraries/XMCLib/src/xmc_can.c **** #endif
 420:../Libraries/XMCLib/src/xmc_can.c **** 
 421:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source)
 422:../Libraries/XMCLib/src/xmc_can.c **** {
 1164              	 .loc 2 422 0
 1165              	 .cfi_startproc
 1166 0000 80B5     	 push {r7,lr}
 1167              	.LCFI36:
 1168              	 .cfi_def_cfa_offset 8
 1169              	 .cfi_offset 7,-8
 1170              	 .cfi_offset 14,-4
 1171 0002 82B0     	 sub sp,sp,#8
 1172              	.LCFI37:
 1173              	 .cfi_def_cfa_offset 16
 1174 0004 00AF     	 add r7,sp,#0
 1175              	.LCFI38:
 1176              	 .cfi_def_cfa_register 7
 1177 0006 7860     	 str r0,[r7,#4]
 1178 0008 0A1C     	 mov r2,r1
 1179 000a FB1C     	 add r3,r7,#3
 1180 000c 1A70     	 strb r2,[r3]
 423:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 424:../Libraries/XMCLib/src/xmc_can.c ****   obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
 1181              	 .loc 2 424 0
 1182 000e 7A68     	 ldr r2,[r7,#4]
 1183 0010 E423     	 mov r3,#228
 1184 0012 5B00     	 lsl r3,r3,#1
 1185 0014 D358     	 ldr r3,[r2,r3]
 1186 0016 0F22     	 mov r2,#15
 1187 0018 9343     	 bic r3,r2
 1188 001a 1A1C     	 mov r2,r3
 1189 001c FB1C     	 add r3,r7,#3
 1190 001e 1B78     	 ldrb r3,[r3]
 1191 0020 1A43     	 orr r2,r3
 1192 0022 111C     	 mov r1,r2
 1193 0024 7A68     	 ldr r2,[r7,#4]
 1194 0026 E423     	 mov r3,#228
 1195 0028 5B00     	 lsl r3,r3,#1
 1196 002a D150     	 str r1,[r2,r3]
 425:../Libraries/XMCLib/src/xmc_can.c **** #endif  
 426:../Libraries/XMCLib/src/xmc_can.c **** }
 1197              	 .loc 2 426 0
 1198 002c BD46     	 mov sp,r7
 1199 002e 02B0     	 add sp,sp,#8
 1200              	 
 1201 0030 80BD     	 pop {r7,pc}
 1202              	 .cfi_endproc
 1203              	.LFE122:
 1205 0032 C046     	 .section .text.XMC_CAN_GetBaudrateClockSource,"ax",%progbits
 1206              	 .align 2
 1207              	 .global XMC_CAN_GetBaudrateClockSource
 1208              	 .code 16
 1209              	 .thumb_func
 1211              	XMC_CAN_GetBaudrateClockSource:
 1212              	.LFB123:
 427:../Libraries/XMCLib/src/xmc_can.c **** 
 428:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
 429:../Libraries/XMCLib/src/xmc_can.c **** {
 1213              	 .loc 2 429 0
 1214              	 .cfi_startproc
 1215 0000 80B5     	 push {r7,lr}
 1216              	.LCFI39:
 1217              	 .cfi_def_cfa_offset 8
 1218              	 .cfi_offset 7,-8
 1219              	 .cfi_offset 14,-4
 1220 0002 82B0     	 sub sp,sp,#8
 1221              	.LCFI40:
 1222              	 .cfi_def_cfa_offset 16
 1223 0004 00AF     	 add r7,sp,#0
 1224              	.LCFI41:
 1225              	 .cfi_def_cfa_register 7
 1226 0006 7860     	 str r0,[r7,#4]
 430:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 431:../Libraries/XMCLib/src/xmc_can.c ****   return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
 1227              	 .loc 2 431 0
 1228 0008 7A68     	 ldr r2,[r7,#4]
 1229 000a E423     	 mov r3,#228
 1230 000c 5B00     	 lsl r3,r3,#1
 1231 000e D358     	 ldr r3,[r2,r3]
 1232 0010 DBB2     	 uxtb r3,r3
 1233 0012 0F22     	 mov r2,#15
 1234 0014 1340     	 and r3,r2
 1235 0016 DBB2     	 uxtb r3,r3
 432:../Libraries/XMCLib/src/xmc_can.c **** #elif (UC_FAMILY == XMC4) 
 433:../Libraries/XMCLib/src/xmc_can.c ****   return XMC_CAN_CANCLKSRC_FPERI;
 434:../Libraries/XMCLib/src/xmc_can.c **** #endif    
 435:../Libraries/XMCLib/src/xmc_can.c **** }
 1236              	 .loc 2 435 0
 1237 0018 181C     	 mov r0,r3
 1238 001a BD46     	 mov sp,r7
 1239 001c 02B0     	 add sp,sp,#8
 1240              	 
 1241 001e 80BD     	 pop {r7,pc}
 1242              	 .cfi_endproc
 1243              	.LFE123:
 1245              	 .section .text.XMC_CAN_GetBaudrateClockFrequency,"ax",%progbits
 1246              	 .align 2
 1247              	 .global XMC_CAN_GetBaudrateClockFrequency
 1248              	 .code 16
 1249              	 .thumb_func
 1251              	XMC_CAN_GetBaudrateClockFrequency:
 1252              	.LFB124:
 436:../Libraries/XMCLib/src/xmc_can.c **** 
 437:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
 438:../Libraries/XMCLib/src/xmc_can.c **** {
 1253              	 .loc 2 438 0
 1254              	 .cfi_startproc
 1255 0000 80B5     	 push {r7,lr}
 1256              	.LCFI42:
 1257              	 .cfi_def_cfa_offset 8
 1258              	 .cfi_offset 7,-8
 1259              	 .cfi_offset 14,-4
 1260 0002 84B0     	 sub sp,sp,#16
 1261              	.LCFI43:
 1262              	 .cfi_def_cfa_offset 24
 1263 0004 00AF     	 add r7,sp,#0
 1264              	.LCFI44:
 1265              	 .cfi_def_cfa_register 7
 1266 0006 7860     	 str r0,[r7,#4]
 439:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t frequency;
 440:../Libraries/XMCLib/src/xmc_can.c **** 
 441:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 442:../Libraries/XMCLib/src/xmc_can.c ****   switch(XMC_CAN_GetBaudrateClockSource(obj))
 1267              	 .loc 2 442 0
 1268 0008 7B68     	 ldr r3,[r7,#4]
 1269 000a 181C     	 mov r0,r3
 1270 000c FFF7FEFF 	 bl XMC_CAN_GetBaudrateClockSource
 1271 0010 031E     	 sub r3,r0,#0
 1272 0012 012B     	 cmp r3,#1
 1273 0014 02D0     	 beq .L59
 1274 0016 022B     	 cmp r3,#2
 1275 0018 05D0     	 beq .L60
 1276 001a 09E0     	 b .L63
 1277              	.L59:
 443:../Libraries/XMCLib/src/xmc_can.c ****   {
 444:../Libraries/XMCLib/src/xmc_can.c **** #if UC_FAMILY == XMC4
 445:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_FPERI:
 446:../Libraries/XMCLib/src/xmc_can.c ****       frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 447:../Libraries/XMCLib/src/xmc_can.c ****       break;
 448:../Libraries/XMCLib/src/xmc_can.c **** #else
 449:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_MCLK:
 450:../Libraries/XMCLib/src/xmc_can.c ****       frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 1278              	 .loc 2 450 0
 1279 001c FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 1280 0020 031C     	 mov r3,r0
 1281 0022 FB60     	 str r3,[r7,#12]
 451:../Libraries/XMCLib/src/xmc_can.c ****       break;
 1282              	 .loc 2 451 0
 1283 0024 07E0     	 b .L61
 1284              	.L60:
 452:../Libraries/XMCLib/src/xmc_can.c **** #endif
 453:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_FOHP:
 454:../Libraries/XMCLib/src/xmc_can.c ****       frequency = OSCHP_GetFrequency();
 1285              	 .loc 2 454 0
 1286 0026 FFF7FEFF 	 bl OSCHP_GetFrequency
 1287 002a 031C     	 mov r3,r0
 1288 002c FB60     	 str r3,[r7,#12]
 455:../Libraries/XMCLib/src/xmc_can.c ****       break;
 1289              	 .loc 2 455 0
 1290 002e 02E0     	 b .L61
 1291              	.L63:
 456:../Libraries/XMCLib/src/xmc_can.c **** 
 457:../Libraries/XMCLib/src/xmc_can.c ****     default:
 458:../Libraries/XMCLib/src/xmc_can.c ****       frequency = 0;
 1292              	 .loc 2 458 0
 1293 0030 0023     	 mov r3,#0
 1294 0032 FB60     	 str r3,[r7,#12]
 459:../Libraries/XMCLib/src/xmc_can.c ****       break;
 1295              	 .loc 2 459 0
 1296 0034 C046     	 mov r8,r8
 1297              	.L61:
 460:../Libraries/XMCLib/src/xmc_can.c ****   }
 461:../Libraries/XMCLib/src/xmc_can.c **** #else
 462:../Libraries/XMCLib/src/xmc_can.c ****   frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 463:../Libraries/XMCLib/src/xmc_can.c **** #endif  
 464:../Libraries/XMCLib/src/xmc_can.c **** 
 465:../Libraries/XMCLib/src/xmc_can.c ****   return frequency;
 1298              	 .loc 2 465 0
 1299 0036 FB68     	 ldr r3,[r7,#12]
 466:../Libraries/XMCLib/src/xmc_can.c **** }
 1300              	 .loc 2 466 0
 1301 0038 181C     	 mov r0,r3
 1302 003a BD46     	 mov sp,r7
 1303 003c 04B0     	 add sp,sp,#16
 1304              	 
 1305 003e 80BD     	 pop {r7,pc}
 1306              	 .cfi_endproc
 1307              	.LFE124:
 1309              	 .section .text.XMC_CAN_InitEx,"ax",%progbits
 1310              	 .align 2
 1311              	 .global XMC_CAN_InitEx
 1312              	 .code 16
 1313              	 .thumb_func
 1315              	XMC_CAN_InitEx:
 1316              	.LFB125:
 467:../Libraries/XMCLib/src/xmc_can.c **** 
 468:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
 469:../Libraries/XMCLib/src/xmc_can.c **** {
 1317              	 .loc 2 469 0
 1318              	 .cfi_startproc
 1319 0000 80B5     	 push {r7,lr}
 1320              	.LCFI45:
 1321              	 .cfi_def_cfa_offset 8
 1322              	 .cfi_offset 7,-8
 1323              	 .cfi_offset 14,-4
 1324 0002 88B0     	 sub sp,sp,#32
 1325              	.LCFI46:
 1326              	 .cfi_def_cfa_offset 40
 1327 0004 00AF     	 add r7,sp,#0
 1328              	.LCFI47:
 1329              	 .cfi_def_cfa_register 7
 1330 0006 F860     	 str r0,[r7,#12]
 1331 0008 7A60     	 str r2,[r7,#4]
 1332 000a 0B23     	 mov r3,#11
 1333 000c FB18     	 add r3,r7,r3
 1334 000e 0A1C     	 add r2,r1,#0
 1335 0010 1A70     	 strb r2,[r3]
 470:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step_n;
 471:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n;
 472:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency;
 473:../Libraries/XMCLib/src/xmc_can.c **** 
 474:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 475:../Libraries/XMCLib/src/xmc_can.c **** 
 476:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 477:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 1336              	 .loc 2 477 0
 1337 0012 FB68     	 ldr r3,[r7,#12]
 1338 0014 181C     	 mov r0,r3
 1339 0016 FFF7FEFF 	 bl XMC_CAN_Enable
 478:../Libraries/XMCLib/src/xmc_can.c **** 
 479:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 1340              	 .loc 2 479 0
 1341 001a FA68     	 ldr r2,[r7,#12]
 1342 001c 0B23     	 mov r3,#11
 1343 001e FB18     	 add r3,r7,r3
 1344 0020 1B78     	 ldrb r3,[r3]
 1345 0022 101C     	 mov r0,r2
 1346 0024 191C     	 mov r1,r3
 1347 0026 FFF7FEFF 	 bl XMC_CAN_SetBaudrateClockSource
 480:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 1348              	 .loc 2 480 0
 1349 002a FB68     	 ldr r3,[r7,#12]
 1350 002c 181C     	 mov r0,r3
 1351 002e FFF7FEFF 	 bl XMC_CAN_GetBaudrateClockFrequency
 1352 0032 031C     	 mov r3,r0
 1353 0034 FB61     	 str r3,[r7,#28]
 481:../Libraries/XMCLib/src/xmc_can.c **** 
 482:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 483:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 1354              	 .loc 2 483 0
 1355 0036 F869     	 ldr r0,[r7,#28]
 1356 0038 7968     	 ldr r1,[r7,#4]
 1357 003a FFF7FEFF 	 bl __aeabi_uidiv
 1358 003e 031C     	 mov r3,r0
 1359 0040 1A1C     	 mov r2,r3
 1360 0042 8023     	 mov r3,#128
 1361 0044 DB00     	 lsl r3,r3,#3
 1362 0046 9B1A     	 sub r3,r3,r2
 1363 0048 0020     	 mov r0,#0
 1364 004a 191C     	 mov r1,r3
 1365 004c FFF7FEFF 	 bl max
 1366 0050 021C     	 mov r2,r0
 1367 0052 124B     	 ldr r3,.L66
 1368 0054 101C     	 mov r0,r2
 1369 0056 191C     	 mov r1,r3
 1370 0058 FFF7FEFF 	 bl min
 1371 005c 031C     	 mov r3,r0
 1372 005e BB61     	 str r3,[r7,#24]
 484:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 1373              	 .loc 2 484 0
 1374 0060 BB69     	 ldr r3,[r7,#24]
 1375 0062 8022     	 mov r2,#128
 1376 0064 D200     	 lsl r2,r2,#3
 1377 0066 D31A     	 sub r3,r2,r3
 1378 0068 F869     	 ldr r0,[r7,#28]
 1379 006a 191C     	 mov r1,r3
 1380 006c FFF7FEFF 	 bl __aeabi_uidiv
 1381 0070 031C     	 mov r3,r0
 1382 0072 7B61     	 str r3,[r7,#20]
 485:../Libraries/XMCLib/src/xmc_can.c **** 
 486:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 1383              	 .loc 2 486 0
 1384 0074 FB68     	 ldr r3,[r7,#12]
 1385 0076 DB68     	 ldr r3,[r3,#12]
 1386 0078 094A     	 ldr r2,.L66+4
 1387 007a 1A40     	 and r2,r3
 1388 007c FB68     	 ldr r3,[r7,#12]
 1389 007e DA60     	 str r2,[r3,#12]
 487:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_P
 1390              	 .loc 2 487 0
 1391 0080 FB68     	 ldr r3,[r7,#12]
 1392 0082 DA68     	 ldr r2,[r3,#12]
 1393 0084 BB69     	 ldr r3,[r7,#24]
 1394 0086 1343     	 orr r3,r2
 1395 0088 8022     	 mov r2,#128
 1396 008a D201     	 lsl r2,r2,#7
 1397 008c 1A43     	 orr r2,r3
 1398 008e FB68     	 ldr r3,[r7,#12]
 1399 0090 DA60     	 str r2,[r3,#12]
 488:../Libraries/XMCLib/src/xmc_can.c **** 
 489:../Libraries/XMCLib/src/xmc_can.c ****   return freq_n;
 1400              	 .loc 2 489 0
 1401 0092 7B69     	 ldr r3,[r7,#20]
 490:../Libraries/XMCLib/src/xmc_can.c **** }
 1402              	 .loc 2 490 0
 1403 0094 181C     	 mov r0,r3
 1404 0096 BD46     	 mov sp,r7
 1405 0098 08B0     	 add sp,sp,#32
 1406              	 
 1407 009a 80BD     	 pop {r7,pc}
 1408              	.L67:
 1409              	 .align 2
 1410              	.L66:
 1411 009c FF030000 	 .word 1023
 1412 00a0 003CFFFF 	 .word -50176
 1413              	 .cfi_endproc
 1414              	.LFE125:
 1416              	 .section .text.XMC_CAN_MO_SetIdentifier,"ax",%progbits
 1417              	 .align 2
 1418              	 .global XMC_CAN_MO_SetIdentifier
 1419              	 .code 16
 1420              	 .thumb_func
 1422              	XMC_CAN_MO_SetIdentifier:
 1423              	.LFB126:
 491:../Libraries/XMCLib/src/xmc_can.c **** 
 492:../Libraries/XMCLib/src/xmc_can.c **** /* Sets the Identifier of the MO */
 493:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_SetIdentifier(XMC_CAN_MO_t *const can_mo, const uint32_t can_identifier)
 494:../Libraries/XMCLib/src/xmc_can.c **** {
 1424              	 .loc 2 494 0
 1425              	 .cfi_startproc
 1426 0000 80B5     	 push {r7,lr}
 1427              	.LCFI48:
 1428              	 .cfi_def_cfa_offset 8
 1429              	 .cfi_offset 7,-8
 1430              	 .cfi_offset 14,-4
 1431 0002 82B0     	 sub sp,sp,#8
 1432              	.LCFI49:
 1433              	 .cfi_def_cfa_offset 16
 1434 0004 00AF     	 add r7,sp,#0
 1435              	.LCFI50:
 1436              	 .cfi_def_cfa_register 7
 1437 0006 7860     	 str r0,[r7,#4]
 1438 0008 3960     	 str r1,[r7]
 495:../Libraries/XMCLib/src/xmc_can.c ****   if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 1439              	 .loc 2 495 0
 1440 000a 7B68     	 ldr r3,[r7,#4]
 1441 000c 1B68     	 ldr r3,[r3]
 1442 000e 9A69     	 ldr r2,[r3,#24]
 1443 0010 8023     	 mov r3,#128
 1444 0012 9B05     	 lsl r3,r3,#22
 1445 0014 1340     	 and r3,r2
 1446 0016 0DD1     	 bne .L69
 496:../Libraries/XMCLib/src/xmc_can.c ****   {
 497:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 1447              	 .loc 2 497 0
 1448 0018 7B68     	 ldr r3,[r7,#4]
 1449 001a 1B68     	 ldr r3,[r3]
 1450 001c 7A68     	 ldr r2,[r7,#4]
 1451 001e 1268     	 ldr r2,[r2]
 1452 0020 9269     	 ldr r2,[r2,#24]
 1453 0022 520F     	 lsr r2,r2,#29
 1454 0024 5107     	 lsl r1,r2,#29
 498:../Libraries/XMCLib/src/xmc_can.c ****                              ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR
 1455              	 .loc 2 498 0
 1456 0026 3A68     	 ldr r2,[r7]
 1457 0028 9204     	 lsl r2,r2,#18
 1458 002a D200     	 lsl r2,r2,#3
 1459 002c D208     	 lsr r2,r2,#3
 497:../Libraries/XMCLib/src/xmc_can.c ****                              ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR
 1460              	 .loc 2 497 0
 1461 002e 0A43     	 orr r2,r1
 1462 0030 9A61     	 str r2,[r3,#24]
 1463 0032 0BE0     	 b .L70
 1464              	.L69:
 499:../Libraries/XMCLib/src/xmc_can.c ****   }
 500:../Libraries/XMCLib/src/xmc_can.c ****   else
 501:../Libraries/XMCLib/src/xmc_can.c ****   {
 502:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 1465              	 .loc 2 502 0
 1466 0034 7B68     	 ldr r3,[r7,#4]
 1467 0036 1B68     	 ldr r3,[r3]
 1468 0038 7A68     	 ldr r2,[r7,#4]
 1469 003a 1268     	 ldr r2,[r2]
 1470 003c 9269     	 ldr r2,[r2,#24]
 1471 003e 520F     	 lsr r2,r2,#29
 1472 0040 5107     	 lsl r1,r2,#29
 503:../Libraries/XMCLib/src/xmc_can.c ****                            (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
 1473              	 .loc 2 503 0
 1474 0042 3A68     	 ldr r2,[r7]
 1475 0044 D200     	 lsl r2,r2,#3
 1476 0046 D208     	 lsr r2,r2,#3
 502:../Libraries/XMCLib/src/xmc_can.c ****                            (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
 1477              	 .loc 2 502 0
 1478 0048 0A43     	 orr r2,r1
 1479 004a 9A61     	 str r2,[r3,#24]
 1480              	.L70:
 504:../Libraries/XMCLib/src/xmc_can.c ****   }
 505:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_identifier = can_identifier;
 1481              	 .loc 2 505 0
 1482 004c 3B68     	 ldr r3,[r7]
 1483 004e DB00     	 lsl r3,r3,#3
 1484 0050 DA08     	 lsr r2,r3,#3
 1485 0052 7B68     	 ldr r3,[r7,#4]
 1486 0054 D200     	 lsl r2,r2,#3
 1487 0056 D208     	 lsr r2,r2,#3
 1488 0058 5968     	 ldr r1,[r3,#4]
 1489 005a 490F     	 lsr r1,r1,#29
 1490 005c 4907     	 lsl r1,r1,#29
 1491 005e 0A43     	 orr r2,r1
 1492 0060 5A60     	 str r2,[r3,#4]
 506:../Libraries/XMCLib/src/xmc_can.c **** }
 1493              	 .loc 2 506 0
 1494 0062 BD46     	 mov sp,r7
 1495 0064 02B0     	 add sp,sp,#8
 1496              	 
 1497 0066 80BD     	 pop {r7,pc}
 1498              	 .cfi_endproc
 1499              	.LFE126:
 1501              	 .section .text.XMC_CAN_MO_GetIdentifier,"ax",%progbits
 1502              	 .align 2
 1503              	 .global XMC_CAN_MO_GetIdentifier
 1504              	 .code 16
 1505              	 .thumb_func
 1507              	XMC_CAN_MO_GetIdentifier:
 1508              	.LFB127:
 507:../Libraries/XMCLib/src/xmc_can.c **** 
 508:../Libraries/XMCLib/src/xmc_can.c **** 
 509:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the Identifier of the MO */
 510:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_MO_GetIdentifier(const XMC_CAN_MO_t *const can_mo)
 511:../Libraries/XMCLib/src/xmc_can.c **** {
 1509              	 .loc 2 511 0
 1510              	 .cfi_startproc
 1511 0000 80B5     	 push {r7,lr}
 1512              	.LCFI51:
 1513              	 .cfi_def_cfa_offset 8
 1514              	 .cfi_offset 7,-8
 1515              	 .cfi_offset 14,-4
 1516 0002 84B0     	 sub sp,sp,#16
 1517              	.LCFI52:
 1518              	 .cfi_def_cfa_offset 24
 1519 0004 00AF     	 add r7,sp,#0
 1520              	.LCFI53:
 1521              	 .cfi_def_cfa_register 7
 1522 0006 7860     	 str r0,[r7,#4]
 512:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t identifier;
 513:../Libraries/XMCLib/src/xmc_can.c ****   if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 1523              	 .loc 2 513 0
 1524 0008 7B68     	 ldr r3,[r7,#4]
 1525 000a 1B68     	 ldr r3,[r3]
 1526 000c 9A69     	 ldr r2,[r3,#24]
 1527 000e 8023     	 mov r3,#128
 1528 0010 9B05     	 lsl r3,r3,#22
 1529 0012 1340     	 and r3,r2
 1530 0014 07D1     	 bne .L72
 514:../Libraries/XMCLib/src/xmc_can.c ****   {
 515:../Libraries/XMCLib/src/xmc_can.c ****   identifier = ((can_mo->can_mo_ptr->MOAR) & (uint32_t)(CAN_MO_MOAR_ID_Msk)) >> XMC_CAN_MO_MOAR_STD
 1531              	 .loc 2 515 0
 1532 0016 7B68     	 ldr r3,[r7,#4]
 1533 0018 1B68     	 ldr r3,[r3]
 1534 001a 9B69     	 ldr r3,[r3,#24]
 1535 001c DB00     	 lsl r3,r3,#3
 1536 001e DB08     	 lsr r3,r3,#3
 1537 0020 9B0C     	 lsr r3,r3,#18
 1538 0022 FB60     	 str r3,[r7,#12]
 1539 0024 05E0     	 b .L73
 1540              	.L72:
 516:../Libraries/XMCLib/src/xmc_can.c ****   }
 517:../Libraries/XMCLib/src/xmc_can.c ****   else
 518:../Libraries/XMCLib/src/xmc_can.c ****   {
 519:../Libraries/XMCLib/src/xmc_can.c ****   identifier = ((can_mo->can_mo_ptr->MOAR) & (uint32_t)(CAN_MO_MOAR_ID_Msk));
 1541              	 .loc 2 519 0
 1542 0026 7B68     	 ldr r3,[r7,#4]
 1543 0028 1B68     	 ldr r3,[r3]
 1544 002a 9B69     	 ldr r3,[r3,#24]
 1545 002c DB00     	 lsl r3,r3,#3
 1546 002e DB08     	 lsr r3,r3,#3
 1547 0030 FB60     	 str r3,[r7,#12]
 1548              	.L73:
 520:../Libraries/XMCLib/src/xmc_can.c ****   }
 521:../Libraries/XMCLib/src/xmc_can.c ****   return identifier;
 1549              	 .loc 2 521 0
 1550 0032 FB68     	 ldr r3,[r7,#12]
 522:../Libraries/XMCLib/src/xmc_can.c **** }
 1551              	 .loc 2 522 0
 1552 0034 181C     	 mov r0,r3
 1553 0036 BD46     	 mov sp,r7
 1554 0038 04B0     	 add sp,sp,#16
 1555              	 
 1556 003a 80BD     	 pop {r7,pc}
 1557              	 .cfi_endproc
 1558              	.LFE127:
 1560              	 .section .text.XMC_CAN_MO_GetAcceptanceMask,"ax",%progbits
 1561              	 .align 2
 1562              	 .global XMC_CAN_MO_GetAcceptanceMask
 1563              	 .code 16
 1564              	 .thumb_func
 1566              	XMC_CAN_MO_GetAcceptanceMask:
 1567              	.LFB128:
 523:../Libraries/XMCLib/src/xmc_can.c **** 
 524:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the acceptance mask for the CAN MO. */
 525:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_MO_GetAcceptanceMask(const XMC_CAN_MO_t *const can_mo)
 526:../Libraries/XMCLib/src/xmc_can.c **** {
 1568              	 .loc 2 526 0
 1569              	 .cfi_startproc
 1570 0000 80B5     	 push {r7,lr}
 1571              	.LCFI54:
 1572              	 .cfi_def_cfa_offset 8
 1573              	 .cfi_offset 7,-8
 1574              	 .cfi_offset 14,-4
 1575 0002 84B0     	 sub sp,sp,#16
 1576              	.LCFI55:
 1577              	 .cfi_def_cfa_offset 24
 1578 0004 00AF     	 add r7,sp,#0
 1579              	.LCFI56:
 1580              	 .cfi_def_cfa_register 7
 1581 0006 7860     	 str r0,[r7,#4]
 527:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t identifier_mask;
 528:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != (uint32_t)CAN_MO_MOAMR_MIDE_Msk)
 1582              	 .loc 2 528 0
 1583 0008 7B68     	 ldr r3,[r7,#4]
 1584 000a 1B68     	 ldr r3,[r3]
 1585 000c DA68     	 ldr r2,[r3,#12]
 1586 000e 8023     	 mov r3,#128
 1587 0010 9B05     	 lsl r3,r3,#22
 1588 0012 1340     	 and r3,r2
 1589 0014 0ED1     	 bne .L76
 529:../Libraries/XMCLib/src/xmc_can.c ****             && ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk))
 1590              	 .loc 2 529 0
 1591 0016 7B68     	 ldr r3,[r7,#4]
 1592 0018 1B68     	 ldr r3,[r3]
 1593 001a 9A69     	 ldr r2,[r3,#24]
 1594 001c 8023     	 mov r3,#128
 1595 001e 9B05     	 lsl r3,r3,#22
 1596 0020 1340     	 and r3,r2
 1597 0022 07D1     	 bne .L76
 530:../Libraries/XMCLib/src/xmc_can.c ****   {
 531:../Libraries/XMCLib/src/xmc_can.c ****     identifier_mask = ((can_mo->can_mo_ptr->MOAMR) & (uint32_t)(CAN_MO_MOAMR_AM_Msk)) >> XMC_CAN_MO
 1598              	 .loc 2 531 0
 1599 0024 7B68     	 ldr r3,[r7,#4]
 1600 0026 1B68     	 ldr r3,[r3]
 1601 0028 DB68     	 ldr r3,[r3,#12]
 1602 002a DB00     	 lsl r3,r3,#3
 1603 002c DB08     	 lsr r3,r3,#3
 1604 002e 9B0C     	 lsr r3,r3,#18
 1605 0030 FB60     	 str r3,[r7,#12]
 1606 0032 05E0     	 b .L77
 1607              	.L76:
 532:../Libraries/XMCLib/src/xmc_can.c ****   }
 533:../Libraries/XMCLib/src/xmc_can.c ****   else
 534:../Libraries/XMCLib/src/xmc_can.c ****   {
 535:../Libraries/XMCLib/src/xmc_can.c ****     identifier_mask = ((can_mo->can_mo_ptr->MOAMR) & (uint32_t)(CAN_MO_MOAMR_AM_Msk));
 1608              	 .loc 2 535 0
 1609 0034 7B68     	 ldr r3,[r7,#4]
 1610 0036 1B68     	 ldr r3,[r3]
 1611 0038 DB68     	 ldr r3,[r3,#12]
 1612 003a DB00     	 lsl r3,r3,#3
 1613 003c DB08     	 lsr r3,r3,#3
 1614 003e FB60     	 str r3,[r7,#12]
 1615              	.L77:
 536:../Libraries/XMCLib/src/xmc_can.c ****   }
 537:../Libraries/XMCLib/src/xmc_can.c ****   return identifier_mask;
 1616              	 .loc 2 537 0
 1617 0040 FB68     	 ldr r3,[r7,#12]
 538:../Libraries/XMCLib/src/xmc_can.c **** }
 1618              	 .loc 2 538 0
 1619 0042 181C     	 mov r0,r3
 1620 0044 BD46     	 mov sp,r7
 1621 0046 04B0     	 add sp,sp,#16
 1622              	 
 1623 0048 80BD     	 pop {r7,pc}
 1624              	 .cfi_endproc
 1625              	.LFE128:
 1627 004a C046     	 .section .text.XMC_CAN_MO_SetAcceptanceMask,"ax",%progbits
 1628              	 .align 2
 1629              	 .global XMC_CAN_MO_SetAcceptanceMask
 1630              	 .code 16
 1631              	 .thumb_func
 1633              	XMC_CAN_MO_SetAcceptanceMask:
 1634              	.LFB129:
 539:../Libraries/XMCLib/src/xmc_can.c **** 
 540:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the acceptance mask of the MO */
 541:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_SetAcceptanceMask(XMC_CAN_MO_t *const can_mo,const uint32_t can_id_mask)
 542:../Libraries/XMCLib/src/xmc_can.c **** {
 1635              	 .loc 2 542 0
 1636              	 .cfi_startproc
 1637 0000 80B5     	 push {r7,lr}
 1638              	.LCFI57:
 1639              	 .cfi_def_cfa_offset 8
 1640              	 .cfi_offset 7,-8
 1641              	 .cfi_offset 14,-4
 1642 0002 82B0     	 sub sp,sp,#8
 1643              	.LCFI58:
 1644              	 .cfi_def_cfa_offset 16
 1645 0004 00AF     	 add r7,sp,#0
 1646              	.LCFI59:
 1647              	 .cfi_def_cfa_register 7
 1648 0006 7860     	 str r0,[r7,#4]
 1649 0008 3960     	 str r1,[r7]
 543:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != (uint32_t)CAN_MO_MOAMR_MIDE_Msk)
 1650              	 .loc 2 543 0
 1651 000a 7B68     	 ldr r3,[r7,#4]
 1652 000c 1B68     	 ldr r3,[r3]
 1653 000e DA68     	 ldr r2,[r3,#12]
 1654 0010 8023     	 mov r3,#128
 1655 0012 9B05     	 lsl r3,r3,#22
 1656 0014 1340     	 and r3,r2
 1657 0016 12D1     	 bne .L80
 544:../Libraries/XMCLib/src/xmc_can.c ****           && ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk))
 1658              	 .loc 2 544 0
 1659 0018 7B68     	 ldr r3,[r7,#4]
 1660 001a 1B68     	 ldr r3,[r3]
 1661 001c 9A69     	 ldr r2,[r3,#24]
 1662 001e 8023     	 mov r3,#128
 1663 0020 9B05     	 lsl r3,r3,#22
 1664 0022 1340     	 and r3,r2
 1665 0024 0BD1     	 bne .L80
 545:../Libraries/XMCLib/src/xmc_can.c ****   {
 546:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 1666              	 .loc 2 546 0
 1667 0026 7B68     	 ldr r3,[r7,#4]
 1668 0028 1B68     	 ldr r3,[r3]
 1669 002a 7A68     	 ldr r2,[r7,#4]
 1670 002c 1268     	 ldr r2,[r2]
 1671 002e D268     	 ldr r2,[r2,#12]
 1672 0030 520F     	 lsr r2,r2,#29
 1673 0032 5107     	 lsl r1,r2,#29
 547:../Libraries/XMCLib/src/xmc_can.c ****                   (can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 1674              	 .loc 2 547 0
 1675 0034 3A68     	 ldr r2,[r7]
 1676 0036 9204     	 lsl r2,r2,#18
 546:../Libraries/XMCLib/src/xmc_can.c ****                   (can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 1677              	 .loc 2 546 0
 1678 0038 0A43     	 orr r2,r1
 1679 003a DA60     	 str r2,[r3,#12]
 1680 003c 0BE0     	 b .L81
 1681              	.L80:
 548:../Libraries/XMCLib/src/xmc_can.c ****   }
 549:../Libraries/XMCLib/src/xmc_can.c ****   else
 550:../Libraries/XMCLib/src/xmc_can.c ****   {
 551:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 1682              	 .loc 2 551 0
 1683 003e 7B68     	 ldr r3,[r7,#4]
 1684 0040 1B68     	 ldr r3,[r3]
 1685 0042 7A68     	 ldr r2,[r7,#4]
 1686 0044 1268     	 ldr r2,[r2]
 1687 0046 D268     	 ldr r2,[r2,#12]
 1688 0048 520F     	 lsr r2,r2,#29
 1689 004a 5107     	 lsl r1,r2,#29
 552:../Libraries/XMCLib/src/xmc_can.c ****                   (can_id_mask & (uint32_t)CAN_MO_MOAMR_AM_Msk);
 1690              	 .loc 2 552 0
 1691 004c 3A68     	 ldr r2,[r7]
 1692 004e D200     	 lsl r2,r2,#3
 1693 0050 D208     	 lsr r2,r2,#3
 551:../Libraries/XMCLib/src/xmc_can.c ****                   (can_id_mask & (uint32_t)CAN_MO_MOAMR_AM_Msk);
 1694              	 .loc 2 551 0
 1695 0052 0A43     	 orr r2,r1
 1696 0054 DA60     	 str r2,[r3,#12]
 1697              	.L81:
 553:../Libraries/XMCLib/src/xmc_can.c ****   }
 554:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_id_mask = can_id_mask;
 1698              	 .loc 2 554 0
 1699 0056 3B68     	 ldr r3,[r7]
 1700 0058 DB00     	 lsl r3,r3,#3
 1701 005a DA08     	 lsr r2,r3,#3
 1702 005c 7B68     	 ldr r3,[r7,#4]
 1703 005e D200     	 lsl r2,r2,#3
 1704 0060 D208     	 lsr r2,r2,#3
 1705 0062 9968     	 ldr r1,[r3,#8]
 1706 0064 490F     	 lsr r1,r1,#29
 1707 0066 4907     	 lsl r1,r1,#29
 1708 0068 0A43     	 orr r2,r1
 1709 006a 9A60     	 str r2,[r3,#8]
 555:../Libraries/XMCLib/src/xmc_can.c **** }
 1710              	 .loc 2 555 0
 1711 006c BD46     	 mov sp,r7
 1712 006e 02B0     	 add sp,sp,#8
 1713              	 
 1714 0070 80BD     	 pop {r7,pc}
 1715              	 .cfi_endproc
 1716              	.LFE129:
 1718 0072 C046     	 .section .text.XMC_CAN_MO_Config,"ax",%progbits
 1719              	 .align 2
 1720              	 .global XMC_CAN_MO_Config
 1721              	 .code 16
 1722              	 .thumb_func
 1724              	XMC_CAN_MO_Config:
 1725              	.LFB130:
 556:../Libraries/XMCLib/src/xmc_can.c **** 
 557:../Libraries/XMCLib/src/xmc_can.c **** /* Initialization of XMC_CAN MO Object */
 558:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
 559:../Libraries/XMCLib/src/xmc_can.c **** {
 1726              	 .loc 2 559 0
 1727              	 .cfi_startproc
 1728 0000 80B5     	 push {r7,lr}
 1729              	.LCFI60:
 1730              	 .cfi_def_cfa_offset 8
 1731              	 .cfi_offset 7,-8
 1732              	 .cfi_offset 14,-4
 1733 0002 86B0     	 sub sp,sp,#24
 1734              	.LCFI61:
 1735              	 .cfi_def_cfa_offset 32
 1736 0004 00AF     	 add r7,sp,#0
 1737              	.LCFI62:
 1738              	 .cfi_def_cfa_register 7
 1739 0006 7860     	 str r0,[r7,#4]
 560:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t reg;
 561:../Libraries/XMCLib/src/xmc_can.c ****   
 562:../Libraries/XMCLib/src/xmc_can.c ****   /* Configure MPN */
 563:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
 1740              	 .loc 2 563 0
 1741 0008 7B68     	 ldr r3,[r7,#4]
 1742 000a 1B68     	 ldr r3,[r3]
 1743 000c 484A     	 ldr r2,.L89
 1744 000e 9446     	 mov ip,r2
 1745 0010 6344     	 add r3,r3,ip
 1746 0012 5B09     	 lsr r3,r3,#5
 1747 0014 7B61     	 str r3,[r7,#20]
 564:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_
 1748              	 .loc 2 564 0
 1749 0016 7B69     	 ldr r3,[r7,#20]
 1750 0018 5B09     	 lsr r3,r3,#5
 1751 001a 5A03     	 lsl r2,r3,#13
 1752 001c 7B69     	 ldr r3,[r7,#20]
 1753 001e 1F21     	 mov r1,#31
 1754 0020 0B40     	 and r3,r1
 1755 0022 1B02     	 lsl r3,r3,#8
 1756 0024 1343     	 orr r3,r2
 1757 0026 3B61     	 str r3,[r7,#16]
 565:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 1758              	 .loc 2 565 0
 1759 0028 7B68     	 ldr r3,[r7,#4]
 1760 002a 1B68     	 ldr r3,[r3]
 1761 002c 7A68     	 ldr r2,[r7,#4]
 1762 002e 1268     	 ldr r2,[r2]
 1763 0030 9268     	 ldr r2,[r2,#8]
 1764 0032 4049     	 ldr r1,.L89+4
 1765 0034 0A40     	 and r2,r1
 1766 0036 9A60     	 str r2,[r3,#8]
 566:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOIPR |= set;
 1767              	 .loc 2 566 0
 1768 0038 7B68     	 ldr r3,[r7,#4]
 1769 003a 1B68     	 ldr r3,[r3]
 1770 003c 7A68     	 ldr r2,[r7,#4]
 1771 003e 1268     	 ldr r2,[r2]
 1772 0040 9168     	 ldr r1,[r2,#8]
 1773 0042 3A69     	 ldr r2,[r7,#16]
 1774 0044 0A43     	 orr r2,r1
 1775 0046 9A60     	 str r2,[r3,#8]
 567:../Libraries/XMCLib/src/xmc_can.c ****   
 568:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 1776              	 .loc 2 568 0
 1777 0048 7B68     	 ldr r3,[r7,#4]
 1778 004a DB79     	 ldrb r3,[r3,#7]
 1779 004c 2022     	 mov r2,#32
 1780 004e 1340     	 and r3,r2
 1781 0050 DBB2     	 uxtb r3,r3
 1782 0052 002B     	 cmp r3,#0
 1783 0054 07D0     	 beq .L83
 569:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1784              	 .loc 2 569 0 discriminator 1
 1785 0056 7B68     	 ldr r3,[r7,#4]
 1786 0058 DB79     	 ldrb r3,[r3,#7]
 1787 005a 2022     	 mov r2,#32
 1788 005c 1340     	 and r3,r2
 1789 005e DBB2     	 uxtb r3,r3
 568:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1790              	 .loc 2 568 0 discriminator 1
 1791 0060 002B     	 cmp r3,#0
 1792 0062 00D1     	 bne .L83
 568:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1793              	 .loc 2 568 0 is_stmt 0
 1794 0064 61E0     	 b .L82
 1795              	.L83:
 570:../Libraries/XMCLib/src/xmc_can.c ****       ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 1796              	 .loc 2 570 0 is_stmt 1
 1797 0066 7B68     	 ldr r3,[r7,#4]
 1798 0068 1B7E     	 ldrb r3,[r3,#24]
 569:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1799              	 .loc 2 569 0
 1800 006a 002B     	 cmp r3,#0
 1801 006c 04D0     	 beq .L85
 571:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 1802              	 .loc 2 571 0
 1803 006e 7B68     	 ldr r3,[r7,#4]
 1804 0070 1B7E     	 ldrb r3,[r3,#24]
 570:../Libraries/XMCLib/src/xmc_can.c ****       ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 1805              	 .loc 2 570 0
 1806 0072 012B     	 cmp r3,#1
 1807 0074 00D0     	 beq .L85
 1808 0076 58E0     	 b .L82
 1809              	.L85:
 572:../Libraries/XMCLib/src/xmc_can.c ****   {
 573:../Libraries/XMCLib/src/xmc_can.c ****     ; /*Do nothing*/
 574:../Libraries/XMCLib/src/xmc_can.c ****   }
 575:../Libraries/XMCLib/src/xmc_can.c ****   else
 576:../Libraries/XMCLib/src/xmc_can.c ****   {
 577:../Libraries/XMCLib/src/xmc_can.c **** 
 578:../Libraries/XMCLib/src/xmc_can.c ****     /* Disable Message object */
 579:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 1810              	 .loc 2 579 0
 1811 0078 7B68     	 ldr r3,[r7,#4]
 1812 007a 1B68     	 ldr r3,[r3]
 1813 007c 2022     	 mov r2,#32
 1814 007e DA61     	 str r2,[r3,#28]
 580:../Libraries/XMCLib/src/xmc_can.c ****     if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 1815              	 .loc 2 580 0
 1816 0080 7B68     	 ldr r3,[r7,#4]
 1817 0082 DB79     	 ldrb r3,[r3,#7]
 1818 0084 2022     	 mov r2,#32
 1819 0086 1340     	 and r3,r2
 1820 0088 DBB2     	 uxtb r3,r3
 1821 008a 002B     	 cmp r3,#0
 1822 008c 28D1     	 bne .L86
 581:../Libraries/XMCLib/src/xmc_can.c ****     {
 582:../Libraries/XMCLib/src/xmc_can.c ****       reg = can_mo->mo_ar;
 1823              	 .loc 2 582 0
 1824 008e 7B68     	 ldr r3,[r7,#4]
 1825 0090 5B68     	 ldr r3,[r3,#4]
 1826 0092 FB60     	 str r3,[r7,#12]
 583:../Libraries/XMCLib/src/xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 1827              	 .loc 2 583 0
 1828 0094 FB68     	 ldr r3,[r7,#12]
 1829 0096 5B0F     	 lsr r3,r3,#29
 1830 0098 5B07     	 lsl r3,r3,#29
 1831 009a FB60     	 str r3,[r7,#12]
 584:../Libraries/XMCLib/src/xmc_can.c ****       reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 1832              	 .loc 2 584 0
 1833 009c 7B68     	 ldr r3,[r7,#4]
 1834 009e 5B68     	 ldr r3,[r3,#4]
 1835 00a0 DB00     	 lsl r3,r3,#3
 1836 00a2 DB08     	 lsr r3,r3,#3
 1837 00a4 9B04     	 lsl r3,r3,#18
 1838 00a6 1A1C     	 mov r2,r3
 1839 00a8 FB68     	 ldr r3,[r7,#12]
 1840 00aa 1343     	 orr r3,r2
 1841 00ac FB60     	 str r3,[r7,#12]
 585:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAR = reg;
 1842              	 .loc 2 585 0
 1843 00ae 7B68     	 ldr r3,[r7,#4]
 1844 00b0 1B68     	 ldr r3,[r3]
 1845 00b2 FA68     	 ldr r2,[r7,#12]
 1846 00b4 9A61     	 str r2,[r3,#24]
 586:../Libraries/XMCLib/src/xmc_can.c **** 
 587:../Libraries/XMCLib/src/xmc_can.c ****       reg = can_mo->mo_amr;
 1847              	 .loc 2 587 0
 1848 00b6 7B68     	 ldr r3,[r7,#4]
 1849 00b8 9B68     	 ldr r3,[r3,#8]
 1850 00ba FB60     	 str r3,[r7,#12]
 588:../Libraries/XMCLib/src/xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 1851              	 .loc 2 588 0
 1852 00bc FB68     	 ldr r3,[r7,#12]
 1853 00be 5B0F     	 lsr r3,r3,#29
 1854 00c0 5B07     	 lsl r3,r3,#29
 1855 00c2 FB60     	 str r3,[r7,#12]
 589:../Libraries/XMCLib/src/xmc_can.c ****       reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 1856              	 .loc 2 589 0
 1857 00c4 7B68     	 ldr r3,[r7,#4]
 1858 00c6 9B68     	 ldr r3,[r3,#8]
 1859 00c8 DB00     	 lsl r3,r3,#3
 1860 00ca DB08     	 lsr r3,r3,#3
 1861 00cc 9B04     	 lsl r3,r3,#18
 1862 00ce 1A1C     	 mov r2,r3
 1863 00d0 FB68     	 ldr r3,[r7,#12]
 1864 00d2 1343     	 orr r3,r2
 1865 00d4 FB60     	 str r3,[r7,#12]
 590:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = reg;
 1866              	 .loc 2 590 0
 1867 00d6 7B68     	 ldr r3,[r7,#4]
 1868 00d8 1B68     	 ldr r3,[r3]
 1869 00da FA68     	 ldr r2,[r7,#12]
 1870 00dc DA60     	 str r2,[r3,#12]
 1871 00de 09E0     	 b .L87
 1872              	.L86:
 591:../Libraries/XMCLib/src/xmc_can.c ****     }
 592:../Libraries/XMCLib/src/xmc_can.c ****     else
 593:../Libraries/XMCLib/src/xmc_can.c ****     {
 594:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 1873              	 .loc 2 594 0
 1874 00e0 7B68     	 ldr r3,[r7,#4]
 1875 00e2 1B68     	 ldr r3,[r3]
 1876 00e4 7A68     	 ldr r2,[r7,#4]
 1877 00e6 5268     	 ldr r2,[r2,#4]
 1878 00e8 9A61     	 str r2,[r3,#24]
 595:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 1879              	 .loc 2 595 0
 1880 00ea 7B68     	 ldr r3,[r7,#4]
 1881 00ec 1B68     	 ldr r3,[r3]
 1882 00ee 7A68     	 ldr r2,[r7,#4]
 1883 00f0 9268     	 ldr r2,[r2,#8]
 1884 00f2 DA60     	 str r2,[r3,#12]
 1885              	.L87:
 596:../Libraries/XMCLib/src/xmc_can.c ****     }
 597:../Libraries/XMCLib/src/xmc_can.c ****     /* Check whether message object is transmit message object */
 598:../Libraries/XMCLib/src/xmc_can.c ****     if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 1886              	 .loc 2 598 0
 1887 00f4 7B68     	 ldr r3,[r7,#4]
 1888 00f6 1B7E     	 ldrb r3,[r3,#24]
 1889 00f8 012B     	 cmp r3,#1
 1890 00fa 0DD1     	 bne .L88
 599:../Libraries/XMCLib/src/xmc_can.c ****     {
 600:../Libraries/XMCLib/src/xmc_can.c ****       /* Set MO as Transmit message object  */
 601:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_MO_UpdateData(can_mo);
 1891              	 .loc 2 601 0
 1892 00fc 7B68     	 ldr r3,[r7,#4]
 1893 00fe 181C     	 mov r0,r3
 1894 0100 FFF7FEFF 	 bl XMC_CAN_MO_UpdateData
 602:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 1895              	 .loc 2 602 0
 1896 0104 7B68     	 ldr r3,[r7,#4]
 1897 0106 1B68     	 ldr r3,[r3]
 1898 0108 8022     	 mov r2,#128
 1899 010a 1205     	 lsl r2,r2,#20
 1900 010c DA61     	 str r2,[r3,#28]
 603:../Libraries/XMCLib/src/xmc_can.c **** 
 604:../Libraries/XMCLib/src/xmc_can.c ****       /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
 605:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_M
 1901              	 .loc 2 605 0
 1902 010e 7B68     	 ldr r3,[r7,#4]
 1903 0110 1B68     	 ldr r3,[r3]
 1904 0112 094A     	 ldr r2,.L89+8
 1905 0114 DA61     	 str r2,[r3,#28]
 1906 0116 08E0     	 b .L82
 1907              	.L88:
 606:../Libraries/XMCLib/src/xmc_can.c ****                                    CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
 607:../Libraries/XMCLib/src/xmc_can.c ****     }
 608:../Libraries/XMCLib/src/xmc_can.c ****     else
 609:../Libraries/XMCLib/src/xmc_can.c ****     {
 610:../Libraries/XMCLib/src/xmc_can.c ****       /* Set MO as Receive message object and set RXEN bit */
 611:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 1908              	 .loc 2 611 0
 1909 0118 7B68     	 ldr r3,[r7,#4]
 1910 011a 1B68     	 ldr r3,[r3]
 1911 011c 8022     	 mov r2,#128
 1912 011e 1201     	 lsl r2,r2,#4
 1913 0120 DA61     	 str r2,[r3,#28]
 612:../Libraries/XMCLib/src/xmc_can.c **** 
 613:../Libraries/XMCLib/src/xmc_can.c ****       /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
 614:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_M
 1914              	 .loc 2 614 0
 1915 0122 7B68     	 ldr r3,[r7,#4]
 1916 0124 1B68     	 ldr r3,[r3]
 1917 0126 054A     	 ldr r2,.L89+12
 1918 0128 DA61     	 str r2,[r3,#28]
 1919              	.L82:
 615:../Libraries/XMCLib/src/xmc_can.c ****                                    CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
 616:../Libraries/XMCLib/src/xmc_can.c ****     }
 617:../Libraries/XMCLib/src/xmc_can.c **** 
 618:../Libraries/XMCLib/src/xmc_can.c ****   }
 619:../Libraries/XMCLib/src/xmc_can.c **** }
 1920              	 .loc 2 619 0
 1921 012a BD46     	 mov sp,r7
 1922 012c 06B0     	 add sp,sp,#24
 1923              	 
 1924 012e 80BD     	 pop {r7,pc}
 1925              	.L90:
 1926              	 .align 2
 1927              	.L89:
 1928 0130 00F0FBAF 	 .word -1342443520
 1929 0134 FF00FFFF 	 .word -65281
 1930 0138 C0002006 	 .word 102760640
 1931 013c 4006A000 	 .word 10487360
 1932              	 .cfi_endproc
 1933              	.LFE130:
 1935              	 .section .text.XMC_CAN_MO_UpdateData,"ax",%progbits
 1936              	 .align 2
 1937              	 .global XMC_CAN_MO_UpdateData
 1938              	 .code 16
 1939              	 .thumb_func
 1941              	XMC_CAN_MO_UpdateData:
 1942              	.LFB131:
 620:../Libraries/XMCLib/src/xmc_can.c **** 
 621:../Libraries/XMCLib/src/xmc_can.c **** /* Update of XMC_CAN Object */
 622:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
 623:../Libraries/XMCLib/src/xmc_can.c **** {
 1943              	 .loc 2 623 0
 1944              	 .cfi_startproc
 1945 0000 80B5     	 push {r7,lr}
 1946              	.LCFI63:
 1947              	 .cfi_def_cfa_offset 8
 1948              	 .cfi_offset 7,-8
 1949              	 .cfi_offset 14,-4
 1950 0002 84B0     	 sub sp,sp,#16
 1951              	.LCFI64:
 1952              	 .cfi_def_cfa_offset 24
 1953 0004 00AF     	 add r7,sp,#0
 1954              	.LCFI65:
 1955              	 .cfi_def_cfa_register 7
 1956 0006 7860     	 str r0,[r7,#4]
 624:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 1957              	 .loc 2 624 0
 1958 0008 0F23     	 mov r3,#15
 1959 000a FB18     	 add r3,r7,r3
 1960 000c 0322     	 mov r2,#3
 1961 000e 1A70     	 strb r2,[r3]
 625:../Libraries/XMCLib/src/xmc_can.c ****   /* Check whether message object is transmit message object */
 626:../Libraries/XMCLib/src/xmc_can.c ****   if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 1962              	 .loc 2 626 0
 1963 0010 7B68     	 ldr r3,[r7,#4]
 1964 0012 1B7E     	 ldrb r3,[r3,#24]
 1965 0014 012B     	 cmp r3,#1
 1966 0016 25D1     	 bne .L92
 627:../Libraries/XMCLib/src/xmc_can.c ****   {
 628:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 1967              	 .loc 2 628 0
 1968 0018 7B68     	 ldr r3,[r7,#4]
 1969 001a 1B68     	 ldr r3,[r3]
 1970 001c 2022     	 mov r2,#32
 1971 001e DA61     	 str r2,[r3,#28]
 629:../Libraries/XMCLib/src/xmc_can.c ****     /* Configure data length */
 630:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 1972              	 .loc 2 630 0
 1973 0020 7B68     	 ldr r3,[r7,#4]
 1974 0022 1B68     	 ldr r3,[r3]
 1975 0024 7A68     	 ldr r2,[r7,#4]
 1976 0026 1268     	 ldr r2,[r2]
 1977 0028 1268     	 ldr r2,[r2]
 1978 002a 1449     	 ldr r1,.L95
 1979 002c 1140     	 and r1,r2
 631:../Libraries/XMCLib/src/xmc_can.c ****                                 (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (ui
 1980              	 .loc 2 631 0
 1981 002e 7A68     	 ldr r2,[r7,#4]
 1982 0030 127B     	 ldrb r2,[r2,#12]
 1983 0032 1006     	 lsl r0,r2,#24
 1984 0034 F022     	 mov r2,#240
 1985 0036 1205     	 lsl r2,r2,#20
 1986 0038 0240     	 and r2,r0
 630:../Libraries/XMCLib/src/xmc_can.c ****                                 (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (ui
 1987              	 .loc 2 630 0
 1988 003a 0A43     	 orr r2,r1
 1989 003c 1A60     	 str r2,[r3]
 632:../Libraries/XMCLib/src/xmc_can.c ****     /* Configure Data registers*/
 633:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 1990              	 .loc 2 633 0
 1991 003e 7B68     	 ldr r3,[r7,#4]
 1992 0040 1B68     	 ldr r3,[r3]
 1993 0042 7A68     	 ldr r2,[r7,#4]
 1994 0044 1269     	 ldr r2,[r2,#16]
 1995 0046 1A61     	 str r2,[r3,#16]
 634:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 1996              	 .loc 2 634 0
 1997 0048 7B68     	 ldr r3,[r7,#4]
 1998 004a 1B68     	 ldr r3,[r3]
 1999 004c 7A68     	 ldr r2,[r7,#4]
 2000 004e 5269     	 ldr r2,[r2,#20]
 2001 0050 5A61     	 str r2,[r3,#20]
 635:../Libraries/XMCLib/src/xmc_can.c ****     /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
 636:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk| CAN_MO_MOCTR_SETMSGVAL_Msk |CAN_MO_MOC
 2002              	 .loc 2 636 0
 2003 0052 7B68     	 ldr r3,[r7,#4]
 2004 0054 1B68     	 ldr r3,[r3]
 2005 0056 0A4A     	 ldr r2,.L95+4
 2006 0058 DA61     	 str r2,[r3,#28]
 637:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2007              	 .loc 2 637 0
 2008 005a 0F23     	 mov r3,#15
 2009 005c FB18     	 add r3,r7,r3
 2010 005e 0022     	 mov r2,#0
 2011 0060 1A70     	 strb r2,[r3]
 2012 0062 03E0     	 b .L93
 2013              	.L92:
 638:../Libraries/XMCLib/src/xmc_can.c ****   }
 639:../Libraries/XMCLib/src/xmc_can.c ****   else
 640:../Libraries/XMCLib/src/xmc_can.c ****   {
 641:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2014              	 .loc 2 641 0
 2015 0064 0F23     	 mov r3,#15
 2016 0066 FB18     	 add r3,r7,r3
 2017 0068 0322     	 mov r2,#3
 2018 006a 1A70     	 strb r2,[r3]
 2019              	.L93:
 642:../Libraries/XMCLib/src/xmc_can.c ****   }
 643:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2020              	 .loc 2 643 0
 2021 006c 0F23     	 mov r3,#15
 2022 006e FB18     	 add r3,r7,r3
 2023 0070 1B78     	 ldrb r3,[r3]
 644:../Libraries/XMCLib/src/xmc_can.c **** }
 2024              	 .loc 2 644 0
 2025 0072 181C     	 mov r0,r3
 2026 0074 BD46     	 mov sp,r7
 2027 0076 04B0     	 add sp,sp,#16
 2028              	 
 2029 0078 80BD     	 pop {r7,pc}
 2030              	.L96:
 2031 007a C046     	 .align 2
 2032              	.L95:
 2033 007c FFFFFFF0 	 .word -251658241
 2034 0080 40002800 	 .word 2621504
 2035              	 .cfi_endproc
 2036              	.LFE131:
 2038              	 .section .text.XMC_CAN_MO_Transmit,"ax",%progbits
 2039              	 .align 2
 2040              	 .global XMC_CAN_MO_Transmit
 2041              	 .code 16
 2042              	 .thumb_func
 2044              	XMC_CAN_MO_Transmit:
 2045              	.LFB132:
 645:../Libraries/XMCLib/src/xmc_can.c **** 
 646:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will put a transmit request to transmit message object */
 647:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
 648:../Libraries/XMCLib/src/xmc_can.c **** {
 2046              	 .loc 2 648 0
 2047              	 .cfi_startproc
 2048 0000 80B5     	 push {r7,lr}
 2049              	.LCFI66:
 2050              	 .cfi_def_cfa_offset 8
 2051              	 .cfi_offset 7,-8
 2052              	 .cfi_offset 14,-4
 2053 0002 86B0     	 sub sp,sp,#24
 2054              	.LCFI67:
 2055              	 .cfi_def_cfa_offset 32
 2056 0004 00AF     	 add r7,sp,#0
 2057              	.LCFI68:
 2058              	 .cfi_def_cfa_register 7
 2059 0006 7860     	 str r0,[r7,#4]
 649:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2060              	 .loc 2 649 0
 2061 0008 1723     	 mov r3,#23
 2062 000a FB18     	 add r3,r7,r3
 2063 000c 0122     	 mov r2,#1
 2064 000e 1A70     	 strb r2,[r3]
 650:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO
 2065              	 .loc 2 650 0
 2066 0010 7B68     	 ldr r3,[r7,#4]
 2067 0012 1B68     	 ldr r3,[r3]
 2068 0014 DB69     	 ldr r3,[r3,#28]
 2069 0016 2022     	 mov r2,#32
 2070 0018 1340     	 and r3,r2
 2071 001a 5B09     	 lsr r3,r3,#5
 2072 001c 3B61     	 str r3,[r7,#16]
 651:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_
 2073              	 .loc 2 651 0
 2074 001e 7B68     	 ldr r3,[r7,#4]
 2075 0020 1B68     	 ldr r3,[r3]
 2076 0022 DA69     	 ldr r2,[r3,#28]
 2077 0024 8023     	 mov r3,#128
 2078 0026 5B00     	 lsl r3,r3,#1
 2079 0028 1340     	 and r3,r2
 2080 002a 1B0A     	 lsr r3,r3,#8
 2081 002c FB60     	 str r3,[r7,#12]
 652:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message is disabled */
 653:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type == 0U)
 2082              	 .loc 2 653 0
 2083 002e 3B69     	 ldr r3,[r7,#16]
 2084 0030 002B     	 cmp r3,#0
 2085 0032 04D1     	 bne .L98
 654:../Libraries/XMCLib/src/xmc_can.c ****   {
 655:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_DISABLED;
 2086              	 .loc 2 655 0
 2087 0034 1723     	 mov r3,#23
 2088 0036 FB18     	 add r3,r7,r3
 2089 0038 0422     	 mov r2,#4
 2090 003a 1A70     	 strb r2,[r3]
 2091 003c 10E0     	 b .L99
 2092              	.L98:
 656:../Libraries/XMCLib/src/xmc_can.c ****   }
 657:../Libraries/XMCLib/src/xmc_can.c ****   /* check if transmission is ongoing on message object */
 658:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_transmission_ongoing == 1U)
 2093              	 .loc 2 658 0
 2094 003e FB68     	 ldr r3,[r7,#12]
 2095 0040 012B     	 cmp r3,#1
 2096 0042 04D1     	 bne .L100
 659:../Libraries/XMCLib/src/xmc_can.c ****   {
 660:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2097              	 .loc 2 660 0
 2098 0044 1723     	 mov r3,#23
 2099 0046 FB18     	 add r3,r7,r3
 2100 0048 0222     	 mov r2,#2
 2101 004a 1A70     	 strb r2,[r3]
 2102 004c 08E0     	 b .L99
 2103              	.L100:
 661:../Libraries/XMCLib/src/xmc_can.c ****   }
 662:../Libraries/XMCLib/src/xmc_can.c ****   else
 663:../Libraries/XMCLib/src/xmc_can.c ****   {
 664:../Libraries/XMCLib/src/xmc_can.c ****     /* set TXRQ bit */
 665:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCT
 2104              	 .loc 2 665 0
 2105 004e 7B68     	 ldr r3,[r7,#4]
 2106 0050 1B68     	 ldr r3,[r3]
 2107 0052 E022     	 mov r2,#224
 2108 0054 D204     	 lsl r2,r2,#19
 2109 0056 DA61     	 str r2,[r3,#28]
 666:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2110              	 .loc 2 666 0
 2111 0058 1723     	 mov r3,#23
 2112 005a FB18     	 add r3,r7,r3
 2113 005c 0022     	 mov r2,#0
 2114 005e 1A70     	 strb r2,[r3]
 2115              	.L99:
 667:../Libraries/XMCLib/src/xmc_can.c ****   }
 668:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2116              	 .loc 2 668 0
 2117 0060 1723     	 mov r3,#23
 2118 0062 FB18     	 add r3,r7,r3
 2119 0064 1B78     	 ldrb r3,[r3]
 669:../Libraries/XMCLib/src/xmc_can.c **** }
 2120              	 .loc 2 669 0
 2121 0066 181C     	 mov r0,r3
 2122 0068 BD46     	 mov sp,r7
 2123 006a 06B0     	 add sp,sp,#24
 2124              	 
 2125 006c 80BD     	 pop {r7,pc}
 2126              	 .cfi_endproc
 2127              	.LFE132:
 2129 006e C046     	 .section .text.XMC_CAN_MO_ReceiveData,"ax",%progbits
 2130              	 .align 2
 2131              	 .global XMC_CAN_MO_ReceiveData
 2132              	 .code 16
 2133              	 .thumb_func
 2135              	XMC_CAN_MO_ReceiveData:
 2136              	.LFB133:
 670:../Libraries/XMCLib/src/xmc_can.c **** 
 671:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will read the message object data bytes */
 672:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_ReceiveData (XMC_CAN_MO_t *can_mo)
 673:../Libraries/XMCLib/src/xmc_can.c **** {
 2137              	 .loc 2 673 0
 2138              	 .cfi_startproc
 2139 0000 80B5     	 push {r7,lr}
 2140              	.LCFI69:
 2141              	 .cfi_def_cfa_offset 8
 2142              	 .cfi_offset 7,-8
 2143              	 .cfi_offset 14,-4
 2144 0002 86B0     	 sub sp,sp,#24
 2145              	.LCFI70:
 2146              	 .cfi_def_cfa_offset 32
 2147 0004 00AF     	 add r7,sp,#0
 2148              	.LCFI71:
 2149              	 .cfi_def_cfa_register 7
 2150 0006 7860     	 str r0,[r7,#4]
 674:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2151              	 .loc 2 674 0
 2152 0008 1723     	 mov r3,#23
 2153 000a FB18     	 add r3,r7,r3
 2154 000c 0122     	 mov r2,#1
 2155 000e 1A70     	 strb r2,[r3]
 675:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t rx_pnd = 0U;
 2156              	 .loc 2 675 0
 2157 0010 1623     	 mov r3,#22
 2158 0012 FB18     	 add r3,r7,r3
 2159 0014 0022     	 mov r2,#0
 2160 0016 1A70     	 strb r2,[r3]
 676:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t new_data = 0U;
 2161              	 .loc 2 676 0
 2162 0018 1523     	 mov r3,#21
 2163 001a FB18     	 add r3,r7,r3
 2164 001c 0022     	 mov r2,#0
 2165 001e 1A70     	 strb r2,[r3]
 677:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOS
 2166              	 .loc 2 677 0
 2167 0020 7B68     	 ldr r3,[r7,#4]
 2168 0022 1B68     	 ldr r3,[r3]
 2169 0024 DA69     	 ldr r2,[r3,#28]
 2170 0026 8023     	 mov r3,#128
 2171 0028 1B01     	 lsl r3,r3,#4
 2172 002a 1340     	 and r3,r2
 2173 002c DB0A     	 lsr r3,r3,#11
 2174 002e 3B61     	 str r3,[r7,#16]
 678:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk
 2175              	 .loc 2 678 0
 2176 0030 7B68     	 ldr r3,[r7,#4]
 2177 0032 1B68     	 ldr r3,[r3]
 2178 0034 DB69     	 ldr r3,[r3,#28]
 2179 0036 0422     	 mov r2,#4
 2180 0038 1340     	 and r3,r2
 2181 003a 9B08     	 lsr r3,r3,#2
 2182 003c FB60     	 str r3,[r7,#12]
 679:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message object is a receive message object */
 680:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 2183              	 .loc 2 680 0
 2184 003e 3B69     	 ldr r3,[r7,#16]
 2185 0040 002B     	 cmp r3,#0
 2186 0042 04D0     	 beq .L103
 681:../Libraries/XMCLib/src/xmc_can.c ****   {
 682:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2187              	 .loc 2 682 0
 2188 0044 1723     	 mov r3,#23
 2189 0046 FB18     	 add r3,r7,r3
 2190 0048 0322     	 mov r2,#3
 2191 004a 1A70     	 strb r2,[r3]
 2192 004c 31E0     	 b .L104
 2193              	.L103:
 683:../Libraries/XMCLib/src/xmc_can.c ****   }
 684:../Libraries/XMCLib/src/xmc_can.c ****   /* check if reception is ongoing on message object */
 685:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_recepcion_ongoing == 1U)
 2194              	 .loc 2 685 0
 2195 004e FB68     	 ldr r3,[r7,#12]
 2196 0050 012B     	 cmp r3,#1
 2197 0052 04D1     	 bne .L105
 686:../Libraries/XMCLib/src/xmc_can.c ****   {
 687:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2198              	 .loc 2 687 0
 2199 0054 1723     	 mov r3,#23
 2200 0056 FB18     	 add r3,r7,r3
 2201 0058 0222     	 mov r2,#2
 2202 005a 1A70     	 strb r2,[r3]
 2203 005c 29E0     	 b .L104
 2204              	.L105:
 688:../Libraries/XMCLib/src/xmc_can.c ****   }
 689:../Libraries/XMCLib/src/xmc_can.c ****   else
 690:../Libraries/XMCLib/src/xmc_can.c ****   {
 691:../Libraries/XMCLib/src/xmc_can.c ****     /* read message parameters */
 692:../Libraries/XMCLib/src/xmc_can.c ****     do
 693:../Libraries/XMCLib/src/xmc_can.c ****     {
 694:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 2205              	 .loc 2 694 0 discriminator 2
 2206 005e 7B68     	 ldr r3,[r7,#4]
 2207 0060 1B68     	 ldr r3,[r3]
 2208 0062 1A69     	 ldr r2,[r3,#16]
 2209 0064 7B68     	 ldr r3,[r7,#4]
 2210 0066 1A61     	 str r2,[r3,#16]
 695:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 2211              	 .loc 2 695 0 discriminator 2
 2212 0068 7B68     	 ldr r3,[r7,#4]
 2213 006a 1B68     	 ldr r3,[r3]
 2214 006c 5A69     	 ldr r2,[r3,#20]
 2215 006e 7B68     	 ldr r3,[r7,#4]
 2216 0070 5A61     	 str r2,[r3,#20]
 696:../Libraries/XMCLib/src/xmc_can.c **** 
 697:../Libraries/XMCLib/src/xmc_can.c ****       rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_
 2217              	 .loc 2 697 0 discriminator 2
 2218 0072 7B68     	 ldr r3,[r7,#4]
 2219 0074 1B68     	 ldr r3,[r3]
 2220 0076 DB69     	 ldr r3,[r3,#28]
 2221 0078 0422     	 mov r2,#4
 2222 007a 1340     	 and r3,r2
 2223 007c 9A08     	 lsr r2,r3,#2
 2224 007e 1623     	 mov r3,#22
 2225 0080 FB18     	 add r3,r7,r3
 2226 0082 1A70     	 strb r2,[r3]
 698:../Libraries/XMCLib/src/xmc_can.c ****       new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> C
 2227              	 .loc 2 698 0 discriminator 2
 2228 0084 7B68     	 ldr r3,[r7,#4]
 2229 0086 1B68     	 ldr r3,[r3]
 2230 0088 DB69     	 ldr r3,[r3,#28]
 2231 008a 0822     	 mov r2,#8
 2232 008c 1340     	 and r3,r2
 2233 008e DA08     	 lsr r2,r3,#3
 2234 0090 1523     	 mov r3,#21
 2235 0092 FB18     	 add r3,r7,r3
 2236 0094 1A70     	 strb r2,[r3]
 699:../Libraries/XMCLib/src/xmc_can.c ****     } while ((rx_pnd != 0U) && (new_data != 0U));
 2237              	 .loc 2 699 0 discriminator 2
 2238 0096 1623     	 mov r3,#22
 2239 0098 FB18     	 add r3,r7,r3
 2240 009a 1B78     	 ldrb r3,[r3]
 2241 009c 002B     	 cmp r3,#0
 2242 009e 04D0     	 beq .L106
 2243              	 .loc 2 699 0 is_stmt 0 discriminator 1
 2244 00a0 1523     	 mov r3,#21
 2245 00a2 FB18     	 add r3,r7,r3
 2246 00a4 1B78     	 ldrb r3,[r3]
 2247 00a6 002B     	 cmp r3,#0
 2248 00a8 D9D1     	 bne .L105
 2249              	.L106:
 700:../Libraries/XMCLib/src/xmc_can.c **** 
 701:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2250              	 .loc 2 701 0 is_stmt 1
 2251 00aa 1723     	 mov r3,#23
 2252 00ac FB18     	 add r3,r7,r3
 2253 00ae 0022     	 mov r2,#0
 2254 00b0 1A70     	 strb r2,[r3]
 2255              	.L104:
 702:../Libraries/XMCLib/src/xmc_can.c ****   }
 703:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2256              	 .loc 2 703 0
 2257 00b2 1723     	 mov r3,#23
 2258 00b4 FB18     	 add r3,r7,r3
 2259 00b6 1B78     	 ldrb r3,[r3]
 704:../Libraries/XMCLib/src/xmc_can.c **** }
 2260              	 .loc 2 704 0
 2261 00b8 181C     	 mov r0,r3
 2262 00ba BD46     	 mov sp,r7
 2263 00bc 06B0     	 add sp,sp,#24
 2264              	 
 2265 00be 80BD     	 pop {r7,pc}
 2266              	 .cfi_endproc
 2267              	.LFE133:
 2269              	 .section .text.XMC_CAN_MO_Receive,"ax",%progbits
 2270              	 .align 2
 2271              	 .global XMC_CAN_MO_Receive
 2272              	 .code 16
 2273              	 .thumb_func
 2275              	XMC_CAN_MO_Receive:
 2276              	.LFB134:
 705:../Libraries/XMCLib/src/xmc_can.c **** 
 706:../Libraries/XMCLib/src/xmc_can.c **** 
 707:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will read the message object data bytes */
 708:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
 709:../Libraries/XMCLib/src/xmc_can.c **** {
 2277              	 .loc 2 709 0
 2278              	 .cfi_startproc
 2279 0000 80B5     	 push {r7,lr}
 2280              	.LCFI72:
 2281              	 .cfi_def_cfa_offset 8
 2282              	 .cfi_offset 7,-8
 2283              	 .cfi_offset 14,-4
 2284 0002 86B0     	 sub sp,sp,#24
 2285              	.LCFI73:
 2286              	 .cfi_def_cfa_offset 32
 2287 0004 00AF     	 add r7,sp,#0
 2288              	.LCFI74:
 2289              	 .cfi_def_cfa_register 7
 2290 0006 7860     	 str r0,[r7,#4]
 710:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2291              	 .loc 2 710 0
 2292 0008 1723     	 mov r3,#23
 2293 000a FB18     	 add r3,r7,r3
 2294 000c 0122     	 mov r2,#1
 2295 000e 1A70     	 strb r2,[r3]
 711:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t rx_pnd = 0U;
 2296              	 .loc 2 711 0
 2297 0010 1623     	 mov r3,#22
 2298 0012 FB18     	 add r3,r7,r3
 2299 0014 0022     	 mov r2,#0
 2300 0016 1A70     	 strb r2,[r3]
 712:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t new_data = 0U;
 2301              	 .loc 2 712 0
 2302 0018 1523     	 mov r3,#21
 2303 001a FB18     	 add r3,r7,r3
 2304 001c 0022     	 mov r2,#0
 2305 001e 1A70     	 strb r2,[r3]
 713:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOS
 2306              	 .loc 2 713 0
 2307 0020 7B68     	 ldr r3,[r7,#4]
 2308 0022 1B68     	 ldr r3,[r3]
 2309 0024 DA69     	 ldr r2,[r3,#28]
 2310 0026 8023     	 mov r3,#128
 2311 0028 1B01     	 lsl r3,r3,#4
 2312 002a 1340     	 and r3,r2
 2313 002c DB0A     	 lsr r3,r3,#11
 2314 002e 3B61     	 str r3,[r7,#16]
 714:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk
 2315              	 .loc 2 714 0
 2316 0030 7B68     	 ldr r3,[r7,#4]
 2317 0032 1B68     	 ldr r3,[r3]
 2318 0034 DB69     	 ldr r3,[r3,#28]
 2319 0036 0422     	 mov r2,#4
 2320 0038 1340     	 and r3,r2
 2321 003a 9B08     	 lsr r3,r3,#2
 2322 003c FB60     	 str r3,[r7,#12]
 715:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message object is a receive message object */
 716:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 2323              	 .loc 2 716 0
 2324 003e 3B69     	 ldr r3,[r7,#16]
 2325 0040 002B     	 cmp r3,#0
 2326 0042 04D0     	 beq .L109
 717:../Libraries/XMCLib/src/xmc_can.c ****   {
 718:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2327              	 .loc 2 718 0
 2328 0044 1723     	 mov r3,#23
 2329 0046 FB18     	 add r3,r7,r3
 2330 0048 0322     	 mov r2,#3
 2331 004a 1A70     	 strb r2,[r3]
 2332 004c D3E0     	 b .L110
 2333              	.L109:
 719:../Libraries/XMCLib/src/xmc_can.c ****   }
 720:../Libraries/XMCLib/src/xmc_can.c ****   /* check if reception is ongoing on message object */
 721:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_recepcion_ongoing == 1U)
 2334              	 .loc 2 721 0
 2335 004e FB68     	 ldr r3,[r7,#12]
 2336 0050 012B     	 cmp r3,#1
 2337 0052 04D1     	 bne .L111
 722:../Libraries/XMCLib/src/xmc_can.c ****   {
 723:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2338              	 .loc 2 723 0
 2339 0054 1723     	 mov r3,#23
 2340 0056 FB18     	 add r3,r7,r3
 2341 0058 0222     	 mov r2,#2
 2342 005a 1A70     	 strb r2,[r3]
 2343 005c CBE0     	 b .L110
 2344              	.L111:
 724:../Libraries/XMCLib/src/xmc_can.c ****   }
 725:../Libraries/XMCLib/src/xmc_can.c ****   else
 726:../Libraries/XMCLib/src/xmc_can.c ****   {
 727:../Libraries/XMCLib/src/xmc_can.c ****     /* read message parameters */
 728:../Libraries/XMCLib/src/xmc_can.c ****     do
 729:../Libraries/XMCLib/src/xmc_can.c ****     {
 730:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 2345              	 .loc 2 730 0
 2346 005e 7B68     	 ldr r3,[r7,#4]
 2347 0060 1B68     	 ldr r3,[r3]
 2348 0062 0822     	 mov r2,#8
 2349 0064 DA61     	 str r2,[r3,#28]
 731:../Libraries/XMCLib/src/xmc_can.c ****       if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 2350              	 .loc 2 731 0
 2351 0066 7B68     	 ldr r3,[r7,#4]
 2352 0068 1B68     	 ldr r3,[r3]
 2353 006a 9A69     	 ldr r2,[r3,#24]
 2354 006c 8023     	 mov r3,#128
 2355 006e 9B05     	 lsl r3,r3,#22
 2356 0070 1340     	 and r3,r2
 2357 0072 5B0F     	 lsr r3,r3,#29
 2358 0074 51D1     	 bne .L112
 732:../Libraries/XMCLib/src/xmc_can.c ****       {
 733:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 2359              	 .loc 2 733 0
 2360 0076 7B68     	 ldr r3,[r7,#4]
 2361 0078 DA79     	 ldrb r2,[r3,#7]
 2362 007a 2021     	 mov r1,#32
 2363 007c 8A43     	 bic r2,r1
 2364 007e DA71     	 strb r2,[r3,#7]
 734:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_
 2365              	 .loc 2 734 0
 2366 0080 7B68     	 ldr r3,[r7,#4]
 2367 0082 1B68     	 ldr r3,[r3]
 2368 0084 9B69     	 ldr r3,[r3,#24]
 2369 0086 5F4A     	 ldr r2,.L118
 2370 0088 1340     	 and r3,r2
 2371 008a 9B0C     	 lsr r3,r3,#18
 2372 008c DB00     	 lsl r3,r3,#3
 2373 008e DA08     	 lsr r2,r3,#3
 2374 0090 7B68     	 ldr r3,[r7,#4]
 2375 0092 D200     	 lsl r2,r2,#3
 2376 0094 D208     	 lsr r2,r2,#3
 2377 0096 5968     	 ldr r1,[r3,#4]
 2378 0098 490F     	 lsr r1,r1,#29
 2379 009a 4907     	 lsl r1,r1,#29
 2380 009c 0A43     	 orr r2,r1
 2381 009e 5A60     	 str r2,[r3,#4]
 735:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN
 2382              	 .loc 2 735 0
 2383 00a0 7B68     	 ldr r3,[r7,#4]
 2384 00a2 1B68     	 ldr r3,[r3]
 2385 00a4 DA68     	 ldr r2,[r3,#12]
 2386 00a6 8023     	 mov r3,#128
 2387 00a8 9B05     	 lsl r3,r3,#22
 2388 00aa 1340     	 and r3,r2
 2389 00ac 5B0F     	 lsr r3,r3,#29
 2390 00ae DBB2     	 uxtb r3,r3
 2391 00b0 1A1C     	 add r2,r3,#0
 2392 00b2 0123     	 mov r3,#1
 2393 00b4 1340     	 and r3,r2
 2394 00b6 DAB2     	 uxtb r2,r3
 2395 00b8 7B68     	 ldr r3,[r7,#4]
 2396 00ba 0121     	 mov r1,#1
 2397 00bc 0A40     	 and r2,r1
 2398 00be 5001     	 lsl r0,r2,#5
 2399 00c0 DA7A     	 ldrb r2,[r3,#11]
 2400 00c2 2021     	 mov r1,#32
 2401 00c4 8A43     	 bic r2,r1
 2402 00c6 111C     	 add r1,r2,#0
 2403 00c8 021C     	 add r2,r0,#0
 2404 00ca 0A43     	 orr r2,r1
 2405 00cc DA72     	 strb r2,[r3,#11]
 736:../Libraries/XMCLib/src/xmc_can.c ****         if(can_mo->can_ide_mask == 1U)
 2406              	 .loc 2 736 0
 2407 00ce 7B68     	 ldr r3,[r7,#4]
 2408 00d0 DB7A     	 ldrb r3,[r3,#11]
 2409 00d2 2022     	 mov r2,#32
 2410 00d4 1340     	 and r3,r2
 2411 00d6 DBB2     	 uxtb r3,r3
 2412 00d8 002B     	 cmp r3,#0
 2413 00da 10D0     	 beq .L113
 737:../Libraries/XMCLib/src/xmc_can.c ****         {
 738:../Libraries/XMCLib/src/xmc_can.c ****           can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >
 2414              	 .loc 2 738 0
 2415 00dc 7B68     	 ldr r3,[r7,#4]
 2416 00de 1B68     	 ldr r3,[r3]
 2417 00e0 DB68     	 ldr r3,[r3,#12]
 2418 00e2 484A     	 ldr r2,.L118
 2419 00e4 1340     	 and r3,r2
 2420 00e6 9B0C     	 lsr r3,r3,#18
 2421 00e8 DB00     	 lsl r3,r3,#3
 2422 00ea DA08     	 lsr r2,r3,#3
 2423 00ec 7B68     	 ldr r3,[r7,#4]
 2424 00ee D200     	 lsl r2,r2,#3
 2425 00f0 D208     	 lsr r2,r2,#3
 2426 00f2 9968     	 ldr r1,[r3,#8]
 2427 00f4 490F     	 lsr r1,r1,#29
 2428 00f6 4907     	 lsl r1,r1,#29
 2429 00f8 0A43     	 orr r2,r1
 2430 00fa 9A60     	 str r2,[r3,#8]
 2431 00fc 43E0     	 b .L115
 2432              	.L113:
 739:../Libraries/XMCLib/src/xmc_can.c ****         }
 740:../Libraries/XMCLib/src/xmc_can.c ****         else
 741:../Libraries/XMCLib/src/xmc_can.c ****         {
 742:../Libraries/XMCLib/src/xmc_can.c ****           can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 2433              	 .loc 2 742 0
 2434 00fe 7B68     	 ldr r3,[r7,#4]
 2435 0100 1B68     	 ldr r3,[r3]
 2436 0102 DB68     	 ldr r3,[r3,#12]
 2437 0104 DB00     	 lsl r3,r3,#3
 2438 0106 DA08     	 lsr r2,r3,#3
 2439 0108 7B68     	 ldr r3,[r7,#4]
 2440 010a D200     	 lsl r2,r2,#3
 2441 010c D208     	 lsr r2,r2,#3
 2442 010e 9968     	 ldr r1,[r3,#8]
 2443 0110 490F     	 lsr r1,r1,#29
 2444 0112 4907     	 lsl r1,r1,#29
 2445 0114 0A43     	 orr r2,r1
 2446 0116 9A60     	 str r2,[r3,#8]
 2447 0118 35E0     	 b .L115
 2448              	.L112:
 743:../Libraries/XMCLib/src/xmc_can.c ****         }
 744:../Libraries/XMCLib/src/xmc_can.c ****       }
 745:../Libraries/XMCLib/src/xmc_can.c ****       else
 746:../Libraries/XMCLib/src/xmc_can.c ****       {
 747:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 2449              	 .loc 2 747 0
 2450 011a 7B68     	 ldr r3,[r7,#4]
 2451 011c DA79     	 ldrb r2,[r3,#7]
 2452 011e 2021     	 mov r1,#32
 2453 0120 0A43     	 orr r2,r1
 2454 0122 DA71     	 strb r2,[r3,#7]
 748:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 2455              	 .loc 2 748 0
 2456 0124 7B68     	 ldr r3,[r7,#4]
 2457 0126 1B68     	 ldr r3,[r3]
 2458 0128 9B69     	 ldr r3,[r3,#24]
 2459 012a DB00     	 lsl r3,r3,#3
 2460 012c DA08     	 lsr r2,r3,#3
 2461 012e 7B68     	 ldr r3,[r7,#4]
 2462 0130 D200     	 lsl r2,r2,#3
 2463 0132 D208     	 lsr r2,r2,#3
 2464 0134 5968     	 ldr r1,[r3,#4]
 2465 0136 490F     	 lsr r1,r1,#29
 2466 0138 4907     	 lsl r1,r1,#29
 2467 013a 0A43     	 orr r2,r1
 2468 013c 5A60     	 str r2,[r3,#4]
 749:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 2469              	 .loc 2 749 0
 2470 013e 7B68     	 ldr r3,[r7,#4]
 2471 0140 1B68     	 ldr r3,[r3]
 2472 0142 DB68     	 ldr r3,[r3,#12]
 2473 0144 DB00     	 lsl r3,r3,#3
 2474 0146 DA08     	 lsr r2,r3,#3
 2475 0148 7B68     	 ldr r3,[r7,#4]
 2476 014a D200     	 lsl r2,r2,#3
 2477 014c D208     	 lsr r2,r2,#3
 2478 014e 9968     	 ldr r1,[r3,#8]
 2479 0150 490F     	 lsr r1,r1,#29
 2480 0152 4907     	 lsl r1,r1,#29
 2481 0154 0A43     	 orr r2,r1
 2482 0156 9A60     	 str r2,[r3,#8]
 750:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN
 2483              	 .loc 2 750 0
 2484 0158 7B68     	 ldr r3,[r7,#4]
 2485 015a 1B68     	 ldr r3,[r3]
 2486 015c DA68     	 ldr r2,[r3,#12]
 2487 015e 8023     	 mov r3,#128
 2488 0160 9B05     	 lsl r3,r3,#22
 2489 0162 1340     	 and r3,r2
 2490 0164 5B0F     	 lsr r3,r3,#29
 2491 0166 DBB2     	 uxtb r3,r3
 2492 0168 1A1C     	 add r2,r3,#0
 2493 016a 0123     	 mov r3,#1
 2494 016c 1340     	 and r3,r2
 2495 016e DAB2     	 uxtb r2,r3
 2496 0170 7B68     	 ldr r3,[r7,#4]
 2497 0172 0121     	 mov r1,#1
 2498 0174 0A40     	 and r2,r1
 2499 0176 5001     	 lsl r0,r2,#5
 2500 0178 DA7A     	 ldrb r2,[r3,#11]
 2501 017a 2021     	 mov r1,#32
 2502 017c 8A43     	 bic r2,r1
 2503 017e 111C     	 add r1,r2,#0
 2504 0180 021C     	 add r2,r0,#0
 2505 0182 0A43     	 orr r2,r1
 2506 0184 DA72     	 strb r2,[r3,#11]
 2507              	.L115:
 751:../Libraries/XMCLib/src/xmc_can.c ****       }
 752:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC
 2508              	 .loc 2 752 0
 2509 0186 7B68     	 ldr r3,[r7,#4]
 2510 0188 1B68     	 ldr r3,[r3]
 2511 018a 1A68     	 ldr r2,[r3]
 2512 018c F023     	 mov r3,#240
 2513 018e 1B05     	 lsl r3,r3,#20
 2514 0190 1340     	 and r3,r2
 2515 0192 1B0E     	 lsr r3,r3,#24
 2516 0194 DAB2     	 uxtb r2,r3
 2517 0196 7B68     	 ldr r3,[r7,#4]
 2518 0198 1A73     	 strb r2,[r3,#12]
 753:../Libraries/XMCLib/src/xmc_can.c **** 
 754:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 2519              	 .loc 2 754 0
 2520 019a 7B68     	 ldr r3,[r7,#4]
 2521 019c 1B68     	 ldr r3,[r3]
 2522 019e 1A69     	 ldr r2,[r3,#16]
 2523 01a0 7B68     	 ldr r3,[r7,#4]
 2524 01a2 1A61     	 str r2,[r3,#16]
 755:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 2525              	 .loc 2 755 0
 2526 01a4 7B68     	 ldr r3,[r7,#4]
 2527 01a6 1B68     	 ldr r3,[r3]
 2528 01a8 5A69     	 ldr r2,[r3,#20]
 2529 01aa 7B68     	 ldr r3,[r7,#4]
 2530 01ac 5A61     	 str r2,[r3,#20]
 756:../Libraries/XMCLib/src/xmc_can.c **** 
 757:../Libraries/XMCLib/src/xmc_can.c ****       rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_
 2531              	 .loc 2 757 0
 2532 01ae 7B68     	 ldr r3,[r7,#4]
 2533 01b0 1B68     	 ldr r3,[r3]
 2534 01b2 DB69     	 ldr r3,[r3,#28]
 2535 01b4 0422     	 mov r2,#4
 2536 01b6 1340     	 and r3,r2
 2537 01b8 9A08     	 lsr r2,r3,#2
 2538 01ba 1623     	 mov r3,#22
 2539 01bc FB18     	 add r3,r7,r3
 2540 01be 1A70     	 strb r2,[r3]
 758:../Libraries/XMCLib/src/xmc_can.c ****       new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> C
 2541              	 .loc 2 758 0
 2542 01c0 7B68     	 ldr r3,[r7,#4]
 2543 01c2 1B68     	 ldr r3,[r3]
 2544 01c4 DB69     	 ldr r3,[r3,#28]
 2545 01c6 0822     	 mov r2,#8
 2546 01c8 1340     	 and r3,r2
 2547 01ca DA08     	 lsr r2,r3,#3
 2548 01cc 1523     	 mov r3,#21
 2549 01ce FB18     	 add r3,r7,r3
 2550 01d0 1A70     	 strb r2,[r3]
 759:../Libraries/XMCLib/src/xmc_can.c ****     } while ((rx_pnd != 0U) && (new_data != 0U));
 2551              	 .loc 2 759 0
 2552 01d2 1623     	 mov r3,#22
 2553 01d4 FB18     	 add r3,r7,r3
 2554 01d6 1B78     	 ldrb r3,[r3]
 2555 01d8 002B     	 cmp r3,#0
 2556 01da 05D0     	 beq .L116
 2557              	 .loc 2 759 0 is_stmt 0 discriminator 1
 2558 01dc 1523     	 mov r3,#21
 2559 01de FB18     	 add r3,r7,r3
 2560 01e0 1B78     	 ldrb r3,[r3]
 2561 01e2 002B     	 cmp r3,#0
 2562 01e4 00D0     	 beq .LCB2291
 2563 01e6 3AE7     	 b .L111
 2564              	.LCB2291:
 2565              	.L116:
 760:../Libraries/XMCLib/src/xmc_can.c **** 
 761:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 2566              	 .loc 2 761 0 is_stmt 1
 2567 01e8 7B68     	 ldr r3,[r7,#4]
 2568 01ea 0022     	 mov r2,#0
 2569 01ec 1A76     	 strb r2,[r3,#24]
 762:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2570              	 .loc 2 762 0
 2571 01ee 1723     	 mov r3,#23
 2572 01f0 FB18     	 add r3,r7,r3
 2573 01f2 0022     	 mov r2,#0
 2574 01f4 1A70     	 strb r2,[r3]
 2575              	.L110:
 763:../Libraries/XMCLib/src/xmc_can.c ****   }
 764:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2576              	 .loc 2 764 0
 2577 01f6 1723     	 mov r3,#23
 2578 01f8 FB18     	 add r3,r7,r3
 2579 01fa 1B78     	 ldrb r3,[r3]
 765:../Libraries/XMCLib/src/xmc_can.c **** }
 2580              	 .loc 2 765 0
 2581 01fc 181C     	 mov r0,r3
 2582 01fe BD46     	 mov sp,r7
 2583 0200 06B0     	 add sp,sp,#24
 2584              	 
 2585 0202 80BD     	 pop {r7,pc}
 2586              	.L119:
 2587              	 .align 2
 2588              	.L118:
 2589 0204 0000FC1F 	 .word 536608768
 2590              	 .cfi_endproc
 2591              	.LFE134:
 2593              	 .section .text.XMC_CAN_NODE_EnableEvent,"ax",%progbits
 2594              	 .align 2
 2595              	 .global XMC_CAN_NODE_EnableEvent
 2596              	 .code 16
 2597              	 .thumb_func
 2599              	XMC_CAN_NODE_EnableEvent:
 2600              	.LFB135:
 766:../Libraries/XMCLib/src/xmc_can.c **** 
 767:../Libraries/XMCLib/src/xmc_can.c **** /* Function to enable node event */
 768:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
 769:../Libraries/XMCLib/src/xmc_can.c **** {
 2601              	 .loc 2 769 0
 2602              	 .cfi_startproc
 2603 0000 80B5     	 push {r7,lr}
 2604              	.LCFI75:
 2605              	 .cfi_def_cfa_offset 8
 2606              	 .cfi_offset 7,-8
 2607              	 .cfi_offset 14,-4
 2608 0002 82B0     	 sub sp,sp,#8
 2609              	.LCFI76:
 2610              	 .cfi_def_cfa_offset 16
 2611 0004 00AF     	 add r7,sp,#0
 2612              	.LCFI77:
 2613              	 .cfi_def_cfa_register 7
 2614 0006 7860     	 str r0,[r7,#4]
 2615 0008 3960     	 str r1,[r7]
 770:../Libraries/XMCLib/src/xmc_can.c ****   if(event != XMC_CAN_NODE_EVENT_CFCIE)
 2616              	 .loc 2 770 0
 2617 000a 3A68     	 ldr r2,[r7]
 2618 000c 8023     	 mov r3,#128
 2619 000e DB03     	 lsl r3,r3,#15
 2620 0010 9A42     	 cmp r2,r3
 2621 0012 06D0     	 beq .L121
 771:../Libraries/XMCLib/src/xmc_can.c ****   {
 772:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NCR |= (uint32_t)event;
 2622              	 .loc 2 772 0
 2623 0014 7B68     	 ldr r3,[r7,#4]
 2624 0016 1A68     	 ldr r2,[r3]
 2625 0018 3B68     	 ldr r3,[r7]
 2626 001a 1A43     	 orr r2,r3
 2627 001c 7B68     	 ldr r3,[r7,#4]
 2628 001e 1A60     	 str r2,[r3]
 2629 0020 05E0     	 b .L120
 2630              	.L121:
 773:../Libraries/XMCLib/src/xmc_can.c ****   }
 774:../Libraries/XMCLib/src/xmc_can.c ****   else
 775:../Libraries/XMCLib/src/xmc_can.c ****   {
 776:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NFCR |= (uint32_t)event;
 2631              	 .loc 2 776 0
 2632 0022 7B68     	 ldr r3,[r7,#4]
 2633 0024 9A69     	 ldr r2,[r3,#24]
 2634 0026 3B68     	 ldr r3,[r7]
 2635 0028 1A43     	 orr r2,r3
 2636 002a 7B68     	 ldr r3,[r7,#4]
 2637 002c 9A61     	 str r2,[r3,#24]
 2638              	.L120:
 777:../Libraries/XMCLib/src/xmc_can.c ****   }
 778:../Libraries/XMCLib/src/xmc_can.c **** }
 2639              	 .loc 2 778 0
 2640 002e BD46     	 mov sp,r7
 2641 0030 02B0     	 add sp,sp,#8
 2642              	 
 2643 0032 80BD     	 pop {r7,pc}
 2644              	 .cfi_endproc
 2645              	.LFE135:
 2647              	 .section .text.XMC_CAN_NODE_DisableEvent,"ax",%progbits
 2648              	 .align 2
 2649              	 .global XMC_CAN_NODE_DisableEvent
 2650              	 .code 16
 2651              	 .thumb_func
 2653              	XMC_CAN_NODE_DisableEvent:
 2654              	.LFB136:
 779:../Libraries/XMCLib/src/xmc_can.c **** 
 780:../Libraries/XMCLib/src/xmc_can.c **** /* Function to disable node event */
 781:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
 782:../Libraries/XMCLib/src/xmc_can.c **** {
 2655              	 .loc 2 782 0
 2656              	 .cfi_startproc
 2657 0000 80B5     	 push {r7,lr}
 2658              	.LCFI78:
 2659              	 .cfi_def_cfa_offset 8
 2660              	 .cfi_offset 7,-8
 2661              	 .cfi_offset 14,-4
 2662 0002 82B0     	 sub sp,sp,#8
 2663              	.LCFI79:
 2664              	 .cfi_def_cfa_offset 16
 2665 0004 00AF     	 add r7,sp,#0
 2666              	.LCFI80:
 2667              	 .cfi_def_cfa_register 7
 2668 0006 7860     	 str r0,[r7,#4]
 2669 0008 3960     	 str r1,[r7]
 783:../Libraries/XMCLib/src/xmc_can.c ****   if(event != XMC_CAN_NODE_EVENT_CFCIE)
 2670              	 .loc 2 783 0
 2671 000a 3A68     	 ldr r2,[r7]
 2672 000c 8023     	 mov r3,#128
 2673 000e DB03     	 lsl r3,r3,#15
 2674 0010 9A42     	 cmp r2,r3
 2675 0012 07D0     	 beq .L124
 784:../Libraries/XMCLib/src/xmc_can.c ****   {
 785:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NCR &= ~(uint32_t)event;
 2676              	 .loc 2 785 0
 2677 0014 7B68     	 ldr r3,[r7,#4]
 2678 0016 1B68     	 ldr r3,[r3]
 2679 0018 3A68     	 ldr r2,[r7]
 2680 001a D243     	 mvn r2,r2
 2681 001c 1A40     	 and r2,r3
 2682 001e 7B68     	 ldr r3,[r7,#4]
 2683 0020 1A60     	 str r2,[r3]
 2684 0022 06E0     	 b .L123
 2685              	.L124:
 786:../Libraries/XMCLib/src/xmc_can.c ****   }
 787:../Libraries/XMCLib/src/xmc_can.c ****   else
 788:../Libraries/XMCLib/src/xmc_can.c ****   {
 789:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NFCR &= ~(uint32_t)event;
 2686              	 .loc 2 789 0
 2687 0024 7B68     	 ldr r3,[r7,#4]
 2688 0026 9B69     	 ldr r3,[r3,#24]
 2689 0028 3A68     	 ldr r2,[r7]
 2690 002a D243     	 mvn r2,r2
 2691 002c 1A40     	 and r2,r3
 2692 002e 7B68     	 ldr r3,[r7,#4]
 2693 0030 9A61     	 str r2,[r3,#24]
 2694              	.L123:
 790:../Libraries/XMCLib/src/xmc_can.c ****   }
 791:../Libraries/XMCLib/src/xmc_can.c **** }
 2695              	 .loc 2 791 0
 2696 0032 BD46     	 mov sp,r7
 2697 0034 02B0     	 add sp,sp,#8
 2698              	 
 2699 0036 80BD     	 pop {r7,pc}
 2700              	 .cfi_endproc
 2701              	.LFE136:
 2703              	 .section .text.XMC_CAN_TXFIFO_Transmit,"ax",%progbits
 2704              	 .align 2
 2705              	 .global XMC_CAN_TXFIFO_Transmit
 2706              	 .code 16
 2707              	 .thumb_func
 2709              	XMC_CAN_TXFIFO_Transmit:
 2710              	.LFB137:
 792:../Libraries/XMCLib/src/xmc_can.c **** /* Function to transmit MO from the FIFO */
 793:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_TXFIFO_Transmit(const XMC_CAN_MO_t *const can_mo)
 794:../Libraries/XMCLib/src/xmc_can.c **** {
 2711              	 .loc 2 794 0
 2712              	 .cfi_startproc
 2713 0000 80B5     	 push {r7,lr}
 2714              	.LCFI81:
 2715              	 .cfi_def_cfa_offset 8
 2716              	 .cfi_offset 7,-8
 2717              	 .cfi_offset 14,-4
 2718 0002 88B0     	 sub sp,sp,#32
 2719              	.LCFI82:
 2720              	 .cfi_def_cfa_offset 40
 2721 0004 00AF     	 add r7,sp,#0
 2722              	.LCFI83:
 2723              	 .cfi_def_cfa_register 7
 2724 0006 7860     	 str r0,[r7,#4]
 795:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2725              	 .loc 2 795 0
 2726 0008 1F23     	 mov r3,#31
 2727 000a FB18     	 add r3,r7,r3
 2728 000c 0122     	 mov r2,#1
 2729 000e 1A70     	 strb r2,[r3]
 796:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = ((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO
 2730              	 .loc 2 796 0
 2731 0010 7B68     	 ldr r3,[r7,#4]
 2732 0012 1B68     	 ldr r3,[r3]
 2733 0014 DB69     	 ldr r3,[r3,#28]
 2734 0016 2022     	 mov r2,#32
 2735 0018 1340     	 and r3,r2
 2736 001a 5B09     	 lsr r3,r3,#5
 2737 001c BB61     	 str r3,[r7,#24]
 797:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_transmission_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_M
 2738              	 .loc 2 797 0
 2739 001e 7B68     	 ldr r3,[r7,#4]
 2740 0020 1B68     	 ldr r3,[r3]
 2741 0022 DA69     	 ldr r2,[r3,#28]
 2742 0024 8023     	 mov r3,#128
 2743 0026 5B00     	 lsl r3,r3,#1
 2744 0028 1340     	 and r3,r2
 2745 002a 1B0A     	 lsr r3,r3,#8
 2746 002c 7B61     	 str r3,[r7,#20]
 798:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_cur =  (uint32_t)(can_mo->can_mo_ptr-> MOFGPR & CAN_MO_MOFGPR_CUR_Msk) >> CAN_MO_MOFG
 2747              	 .loc 2 798 0
 2748 002e 7B68     	 ldr r3,[r7,#4]
 2749 0030 1B68     	 ldr r3,[r3]
 2750 0032 5A68     	 ldr r2,[r3,#4]
 2751 0034 FF23     	 mov r3,#255
 2752 0036 1B04     	 lsl r3,r3,#16
 2753 0038 1340     	 and r3,r2
 2754 003a 1B0C     	 lsr r3,r3,#16
 2755 003c 3B61     	 str r3,[r7,#16]
 799:../Libraries/XMCLib/src/xmc_can.c ****   CAN_MO_TypeDef*  mo = (CAN_MO_TypeDef *)(CAN_BASE + 0x1000UL + (mo_cur * 0x0020UL));
 2756              	 .loc 2 799 0
 2757 003e 3B69     	 ldr r3,[r7,#16]
 2758 0040 114A     	 ldr r2,.L131
 2759 0042 9446     	 mov ip,r2
 2760 0044 6344     	 add r3,r3,ip
 2761 0046 5B01     	 lsl r3,r3,#5
 2762 0048 FB60     	 str r3,[r7,#12]
 800:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message is disabled */
 801:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type == 0U)
 2763              	 .loc 2 801 0
 2764 004a BB69     	 ldr r3,[r7,#24]
 2765 004c 002B     	 cmp r3,#0
 2766 004e 04D1     	 bne .L127
 802:../Libraries/XMCLib/src/xmc_can.c ****   {
 803:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_DISABLED;
 2767              	 .loc 2 803 0
 2768 0050 1F23     	 mov r3,#31
 2769 0052 FB18     	 add r3,r7,r3
 2770 0054 0422     	 mov r2,#4
 2771 0056 1A70     	 strb r2,[r3]
 2772 0058 0FE0     	 b .L128
 2773              	.L127:
 804:../Libraries/XMCLib/src/xmc_can.c ****   }
 805:../Libraries/XMCLib/src/xmc_can.c ****   /* check if transmission is ongoing on message object */
 806:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_transmission_ongoing == 1U)
 2774              	 .loc 2 806 0
 2775 005a 7B69     	 ldr r3,[r7,#20]
 2776 005c 012B     	 cmp r3,#1
 2777 005e 04D1     	 bne .L129
 807:../Libraries/XMCLib/src/xmc_can.c ****   {
 808:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2778              	 .loc 2 808 0
 2779 0060 1F23     	 mov r3,#31
 2780 0062 FB18     	 add r3,r7,r3
 2781 0064 0222     	 mov r2,#2
 2782 0066 1A70     	 strb r2,[r3]
 2783 0068 07E0     	 b .L128
 2784              	.L129:
 809:../Libraries/XMCLib/src/xmc_can.c ****   }
 810:../Libraries/XMCLib/src/xmc_can.c ****   else
 811:../Libraries/XMCLib/src/xmc_can.c ****   {
 812:../Libraries/XMCLib/src/xmc_can.c ****     mo->MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 2785              	 .loc 2 812 0
 2786 006a FB68     	 ldr r3,[r7,#12]
 2787 006c E022     	 mov r2,#224
 2788 006e D204     	 lsl r2,r2,#19
 2789 0070 DA61     	 str r2,[r3,#28]
 813:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2790              	 .loc 2 813 0
 2791 0072 1F23     	 mov r3,#31
 2792 0074 FB18     	 add r3,r7,r3
 2793 0076 0022     	 mov r2,#0
 2794 0078 1A70     	 strb r2,[r3]
 2795              	.L128:
 814:../Libraries/XMCLib/src/xmc_can.c ****   }
 815:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2796              	 .loc 2 815 0
 2797 007a 1F23     	 mov r3,#31
 2798 007c FB18     	 add r3,r7,r3
 2799 007e 1B78     	 ldrb r3,[r3]
 816:../Libraries/XMCLib/src/xmc_can.c **** }
 2800              	 .loc 2 816 0
 2801 0080 181C     	 mov r0,r3
 2802 0082 BD46     	 mov sp,r7
 2803 0084 08B0     	 add sp,sp,#32
 2804              	 
 2805 0086 80BD     	 pop {r7,pc}
 2806              	.L132:
 2807              	 .align 2
 2808              	.L131:
 2809 0088 80208002 	 .word 41951360
 2810              	 .cfi_endproc
 2811              	.LFE137:
 2813              	 .section .text.XMC_CAN_TXFIFO_ConfigMOBaseObject,"ax",%progbits
 2814              	 .align 2
 2815              	 .global XMC_CAN_TXFIFO_ConfigMOBaseObject
 2816              	 .code 16
 2817              	 .thumb_func
 2819              	XMC_CAN_TXFIFO_ConfigMOBaseObject:
 2820              	.LFB138:
 817:../Libraries/XMCLib/src/xmc_can.c **** 
 818:../Libraries/XMCLib/src/xmc_can.c **** /* Function to initialize the transmit FIFO MO base object */
 819:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_TXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_t
 820:../Libraries/XMCLib/src/xmc_can.c **** {
 2821              	 .loc 2 820 0
 2822              	 .cfi_startproc
 2823 0000 80B5     	 push {r7,lr}
 2824              	.LCFI84:
 2825              	 .cfi_def_cfa_offset 8
 2826              	 .cfi_offset 7,-8
 2827              	 .cfi_offset 14,-4
 2828 0002 82B0     	 sub sp,sp,#8
 2829              	.LCFI85:
 2830              	 .cfi_def_cfa_offset 16
 2831 0004 00AF     	 add r7,sp,#0
 2832              	.LCFI86:
 2833              	 .cfi_def_cfa_register 7
 2834 0006 7860     	 str r0,[r7,#4]
 2835 0008 3B1C     	 mov r3,r7
 2836 000a 1960     	 str r1,[r3]
 821:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 2837              	 .loc 2 821 0
 2838 000c 7B68     	 ldr r3,[r7,#4]
 2839 000e 1B68     	 ldr r3,[r3]
 2840 0010 7A68     	 ldr r2,[r7,#4]
 2841 0012 1268     	 ldr r2,[r2]
 2842 0014 1268     	 ldr r2,[r2]
 2843 0016 0F21     	 mov r1,#15
 2844 0018 8A43     	 bic r2,r1
 2845 001a 0221     	 mov r1,#2
 2846 001c 0A43     	 orr r2,r1
 2847 001e 1A60     	 str r2,[r3]
 822:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x2U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 823:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_BOT_Msk |
 2848              	 .loc 2 823 0
 2849 0020 7B68     	 ldr r3,[r7,#4]
 2850 0022 1B68     	 ldr r3,[r3]
 2851 0024 7A68     	 ldr r2,[r7,#4]
 2852 0026 1268     	 ldr r2,[r2]
 2853 0028 5268     	 ldr r2,[r2,#4]
 2854 002a 120E     	 lsr r2,r2,#24
 2855 002c 1206     	 lsl r2,r2,#24
 824:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 825:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_CUR_Msk)) |
 826:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2856              	 .loc 2 826 0
 2857 002e 391C     	 mov r1,r7
 2858 0030 0978     	 ldrb r1,[r1]
 825:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2859              	 .loc 2 825 0
 2860 0032 1143     	 orr r1,r2
 827:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2861              	 .loc 2 827 0
 2862 0034 3A1C     	 mov r2,r7
 2863 0036 9278     	 ldrb r2,[r2,#2]
 2864 0038 1004     	 lsl r0,r2,#16
 2865 003a FF22     	 mov r2,#255
 2866 003c 1204     	 lsl r2,r2,#16
 2867 003e 0240     	 and r2,r0
 826:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2868              	 .loc 2 826 0
 2869 0040 1143     	 orr r1,r2
 828:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)
 2870              	 .loc 2 828 0
 2871 0042 3A1C     	 mov r2,r7
 2872 0044 5278     	 ldrb r2,[r2,#1]
 2873 0046 1202     	 lsl r2,r2,#8
 2874 0048 1204     	 lsl r2,r2,#16
 2875 004a 120C     	 lsr r2,r2,#16
 827:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2876              	 .loc 2 827 0
 2877 004c 0A43     	 orr r2,r1
 823:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 2878              	 .loc 2 823 0
 2879 004e 5A60     	 str r2,[r3,#4]
 829:../Libraries/XMCLib/src/xmc_can.c **** }
 2880              	 .loc 2 829 0
 2881 0050 BD46     	 mov sp,r7
 2882 0052 02B0     	 add sp,sp,#8
 2883              	 
 2884 0054 80BD     	 pop {r7,pc}
 2885              	 .cfi_endproc
 2886              	.LFE138:
 2888 0056 C046     	 .section .text.XMC_CAN_RXFIFO_ConfigMOBaseObject,"ax",%progbits
 2889              	 .align 2
 2890              	 .global XMC_CAN_RXFIFO_ConfigMOBaseObject
 2891              	 .code 16
 2892              	 .thumb_func
 2894              	XMC_CAN_RXFIFO_ConfigMOBaseObject:
 2895              	.LFB139:
 830:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the receive FIFO MO base object */
 831:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_RXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_t
 832:../Libraries/XMCLib/src/xmc_can.c **** {
 2896              	 .loc 2 832 0
 2897              	 .cfi_startproc
 2898 0000 80B5     	 push {r7,lr}
 2899              	.LCFI87:
 2900              	 .cfi_def_cfa_offset 8
 2901              	 .cfi_offset 7,-8
 2902              	 .cfi_offset 14,-4
 2903 0002 82B0     	 sub sp,sp,#8
 2904              	.LCFI88:
 2905              	 .cfi_def_cfa_offset 16
 2906 0004 00AF     	 add r7,sp,#0
 2907              	.LCFI89:
 2908              	 .cfi_def_cfa_register 7
 2909 0006 7860     	 str r0,[r7,#4]
 2910 0008 3B1C     	 mov r3,r7
 2911 000a 1960     	 str r1,[r3]
 833:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 2912              	 .loc 2 833 0
 2913 000c 7B68     	 ldr r3,[r7,#4]
 2914 000e 1B68     	 ldr r3,[r3]
 2915 0010 7A68     	 ldr r2,[r7,#4]
 2916 0012 1268     	 ldr r2,[r2]
 2917 0014 1268     	 ldr r2,[r2]
 2918 0016 0F21     	 mov r1,#15
 2919 0018 8A43     	 bic r2,r1
 2920 001a 0121     	 mov r1,#1
 2921 001c 0A43     	 orr r2,r1
 2922 001e 1A60     	 str r2,[r3]
 834:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x1U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 835:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~( uint32_t)(CAN_MO_MOFGPR_BOT_Msk 
 2923              	 .loc 2 835 0
 2924 0020 7B68     	 ldr r3,[r7,#4]
 2925 0022 1B68     	 ldr r3,[r3]
 2926 0024 7A68     	 ldr r2,[r7,#4]
 2927 0026 1268     	 ldr r2,[r2]
 2928 0028 5268     	 ldr r2,[r2,#4]
 2929 002a 120E     	 lsr r2,r2,#24
 2930 002c 1206     	 lsl r2,r2,#24
 836:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 837:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_CUR_Msk)) |
 838:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2931              	 .loc 2 838 0
 2932 002e 391C     	 mov r1,r7
 2933 0030 0978     	 ldrb r1,[r1]
 837:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2934              	 .loc 2 837 0
 2935 0032 1143     	 orr r1,r2
 839:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2936              	 .loc 2 839 0
 2937 0034 3A1C     	 mov r2,r7
 2938 0036 9278     	 ldrb r2,[r2,#2]
 2939 0038 1004     	 lsl r0,r2,#16
 2940 003a FF22     	 mov r2,#255
 2941 003c 1204     	 lsl r2,r2,#16
 2942 003e 0240     	 and r2,r0
 838:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2943              	 .loc 2 838 0
 2944 0040 1143     	 orr r1,r2
 840:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)
 2945              	 .loc 2 840 0
 2946 0042 3A1C     	 mov r2,r7
 2947 0044 5278     	 ldrb r2,[r2,#1]
 2948 0046 1202     	 lsl r2,r2,#8
 2949 0048 1204     	 lsl r2,r2,#16
 2950 004a 120C     	 lsr r2,r2,#16
 839:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2951              	 .loc 2 839 0
 2952 004c 0A43     	 orr r2,r1
 835:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 2953              	 .loc 2 835 0
 2954 004e 5A60     	 str r2,[r3,#4]
 841:../Libraries/XMCLib/src/xmc_can.c **** }
 2955              	 .loc 2 841 0
 2956 0050 BD46     	 mov sp,r7
 2957 0052 02B0     	 add sp,sp,#8
 2958              	 
 2959 0054 80BD     	 pop {r7,pc}
 2960              	 .cfi_endproc
 2961              	.LFE139:
 2963 0056 C046     	 .section .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject,"ax",%progbits
 2964              	 .align 2
 2965              	 .global XMC_CAN_TXFIFO_ConfigMOSlaveObject
 2966              	 .code 16
 2967              	 .thumb_func
 2969              	XMC_CAN_TXFIFO_ConfigMOSlaveObject:
 2970              	.LFB140:
 842:../Libraries/XMCLib/src/xmc_can.c **** 
 843:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the FIFO MO slave object */
 844:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_TXFIFO_ConfigMOSlaveObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_
 845:../Libraries/XMCLib/src/xmc_can.c **** {
 2971              	 .loc 2 845 0
 2972              	 .cfi_startproc
 2973 0000 80B5     	 push {r7,lr}
 2974              	.LCFI90:
 2975              	 .cfi_def_cfa_offset 8
 2976              	 .cfi_offset 7,-8
 2977              	 .cfi_offset 14,-4
 2978 0002 82B0     	 sub sp,sp,#8
 2979              	.LCFI91:
 2980              	 .cfi_def_cfa_offset 16
 2981 0004 00AF     	 add r7,sp,#0
 2982              	.LCFI92:
 2983              	 .cfi_def_cfa_register 7
 2984 0006 7860     	 str r0,[r7,#4]
 2985 0008 3B1C     	 mov r3,r7
 2986 000a 1960     	 str r1,[r3]
 846:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 2987              	 .loc 2 846 0
 2988 000c 7B68     	 ldr r3,[r7,#4]
 2989 000e 1B68     	 ldr r3,[r3]
 2990 0010 7A68     	 ldr r2,[r7,#4]
 2991 0012 1268     	 ldr r2,[r2]
 2992 0014 1268     	 ldr r2,[r2]
 2993 0016 0F21     	 mov r1,#15
 2994 0018 8A43     	 bic r2,r1
 2995 001a 0321     	 mov r1,#3
 2996 001c 0A43     	 orr r2,r1
 2997 001e 1A60     	 str r2,[r3]
 847:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x3U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 848:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_CUR_Msk))
 2998              	 .loc 2 848 0
 2999 0020 7B68     	 ldr r3,[r7,#4]
 3000 0022 1B68     	 ldr r3,[r3]
 3001 0024 7A68     	 ldr r2,[r7,#4]
 3002 0026 1268     	 ldr r2,[r2]
 3003 0028 5268     	 ldr r2,[r2,#4]
 3004 002a 0849     	 ldr r1,.L136
 3005 002c 1140     	 and r1,r2
 849:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 3006              	 .loc 2 849 0
 3007 002e 3A1C     	 mov r2,r7
 3008 0030 9278     	 ldrb r2,[r2,#2]
 3009 0032 1004     	 lsl r0,r2,#16
 3010 0034 FF22     	 mov r2,#255
 3011 0036 1204     	 lsl r2,r2,#16
 3012 0038 0240     	 and r2,r0
 848:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 3013              	 .loc 2 848 0
 3014 003a 0A43     	 orr r2,r1
 3015 003c 5A60     	 str r2,[r3,#4]
 850:../Libraries/XMCLib/src/xmc_can.c **** 
 851:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOCTR  = CAN_MO_MOCTR_SETTXEN0_Msk|
 3016              	 .loc 2 851 0
 3017 003e 7B68     	 ldr r3,[r7,#4]
 3018 0040 1B68     	 ldr r3,[r3]
 3019 0042 034A     	 ldr r2,.L136+4
 3020 0044 DA61     	 str r2,[r3,#28]
 852:../Libraries/XMCLib/src/xmc_can.c ****                                CAN_MO_MOCTR_RESTXEN1_Msk;
 853:../Libraries/XMCLib/src/xmc_can.c **** }
 3021              	 .loc 2 853 0
 3022 0046 BD46     	 mov sp,r7
 3023 0048 02B0     	 add sp,sp,#8
 3024              	 
 3025 004a 80BD     	 pop {r7,pc}
 3026              	.L137:
 3027              	 .align 2
 3028              	.L136:
 3029 004c FFFF00FF 	 .word -16711681
 3030 0050 00040002 	 .word 33555456
 3031              	 .cfi_endproc
 3032              	.LFE140:
 3034              	 .section .text.XMC_CAN_GATEWAY_InitSourceObject,"ax",%progbits
 3035              	 .align 2
 3036              	 .global XMC_CAN_GATEWAY_InitSourceObject
 3037              	 .code 16
 3038              	 .thumb_func
 3040              	XMC_CAN_GATEWAY_InitSourceObject:
 3041              	.LFB141:
 854:../Libraries/XMCLib/src/xmc_can.c **** 
 855:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the Gateway Source Object */
 856:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_GATEWAY_InitSourceObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_GATEWAY_CONFIG
 857:../Libraries/XMCLib/src/xmc_can.c **** {
 3042              	 .loc 2 857 0
 3043              	 .cfi_startproc
 3044 0000 80B5     	 push {r7,lr}
 3045              	.LCFI93:
 3046              	 .cfi_def_cfa_offset 8
 3047              	 .cfi_offset 7,-8
 3048              	 .cfi_offset 14,-4
 3049 0002 84B0     	 sub sp,sp,#16
 3050              	.LCFI94:
 3051              	 .cfi_def_cfa_offset 24
 3052 0004 00AF     	 add r7,sp,#0
 3053              	.LCFI95:
 3054              	 .cfi_def_cfa_register 7
 3055 0006 F860     	 str r0,[r7,#12]
 3056 0008 3B1D     	 add r3,r7,#4
 3057 000a 1960     	 str r1,[r3]
 3058 000c 5A60     	 str r2,[r3,#4]
 858:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = (((uint32_t)0x4U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 3059              	 .loc 2 858 0
 3060 000e FB68     	 ldr r3,[r7,#12]
 3061 0010 1B68     	 ldr r3,[r3]
 859:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 3062              	 .loc 2 859 0
 3063 0012 3A1D     	 add r2,r7,#4
 3064 0014 D278     	 ldrb r2,[r2,#3]
 3065 0016 1102     	 lsl r1,r2,#8
 3066 0018 8022     	 mov r2,#128
 3067 001a 5200     	 lsl r2,r2,#1
 3068 001c 1140     	 and r1,r2
 860:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOF
 3069              	 .loc 2 860 0
 3070 001e 3A1D     	 add r2,r7,#4
 3071 0020 5279     	 ldrb r2,[r2,#5]
 3072 0022 9002     	 lsl r0,r2,#10
 3073 0024 8022     	 mov r2,#128
 3074 0026 D200     	 lsl r2,r2,#3
 3075 0028 0240     	 and r2,r0
 859:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 3076              	 .loc 2 859 0
 3077 002a 1143     	 orr r1,r2
 861:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC
 3078              	 .loc 2 861 0
 3079 002c 3A1D     	 add r2,r7,#4
 3080 002e 1279     	 ldrb r2,[r2,#4]
 3081 0030 5002     	 lsl r0,r2,#9
 3082 0032 8022     	 mov r2,#128
 3083 0034 9200     	 lsl r2,r2,#2
 3084 0036 0240     	 and r2,r0
 860:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOF
 3085              	 .loc 2 860 0
 3086 0038 1143     	 orr r1,r2
 862:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_copy) << CAN_MO_MOFCR_DATC_Pos)
 3087              	 .loc 2 862 0
 3088 003a 3A1D     	 add r2,r7,#4
 3089 003c 9279     	 ldrb r2,[r2,#6]
 3090 003e D002     	 lsl r0,r2,#11
 3091 0040 8022     	 mov r2,#128
 3092 0042 1201     	 lsl r2,r2,#4
 3093 0044 0240     	 and r2,r0
 861:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC
 3094              	 .loc 2 861 0
 3095 0046 0A43     	 orr r2,r1
 3096 0048 0421     	 mov r1,#4
 3097 004a 0A43     	 orr r2,r1
 858:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 3098              	 .loc 2 858 0
 3099 004c 1A60     	 str r2,[r3]
 863:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 3100              	 .loc 2 863 0
 3101 004e FB68     	 ldr r3,[r7,#12]
 3102 0050 1B68     	 ldr r3,[r3]
 3103 0052 3A1D     	 add r2,r7,#4
 3104 0054 1278     	 ldrb r2,[r2]
 3105 0056 101C     	 mov r0,r2
 864:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_gateway.gateway_base << CAN_MO_MOFGPR_CUR_Pos) & (ui
 3106              	 .loc 2 864 0
 3107 0058 3A1D     	 add r2,r7,#4
 3108 005a 9278     	 ldrb r2,[r2,#2]
 3109 005c 1104     	 lsl r1,r2,#16
 3110 005e FF22     	 mov r2,#255
 3111 0060 1204     	 lsl r2,r2,#16
 3112 0062 0A40     	 and r2,r1
 863:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 3113              	 .loc 2 863 0
 3114 0064 011C     	 mov r1,r0
 3115 0066 1143     	 orr r1,r2
 865:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_gateway.gateway_top << CAN_MO_MOFGPR_TOP_Pos) & (uin
 3116              	 .loc 2 865 0
 3117 0068 3A1D     	 add r2,r7,#4
 3118 006a 5278     	 ldrb r2,[r2,#1]
 3119 006c 1202     	 lsl r2,r2,#8
 3120 006e 1204     	 lsl r2,r2,#16
 3121 0070 120C     	 lsr r2,r2,#16
 863:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 3122              	 .loc 2 863 0
 3123 0072 0A43     	 orr r2,r1
 3124 0074 5A60     	 str r2,[r3,#4]
 866:../Libraries/XMCLib/src/xmc_can.c **** }
 3125              	 .loc 2 866 0
 3126 0076 BD46     	 mov sp,r7
 3127 0078 04B0     	 add sp,sp,#16
 3128              	 
 3129 007a 80BD     	 pop {r7,pc}
 3130              	 .cfi_endproc
 3131              	.LFE141:
 3133              	 .text
 3134              	.Letext0:
 3135              	 .file 3 "d:\\software\\dave_4-4-2_64bit_2018-02-23\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3136              	 .file 4 "d:\\software\\dave_4-4-2_64bit_2018-02-23\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3137              	 .file 5 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Infineon/XMC1400_series/Include/XMC1400.h"
 3138              	 .file 6 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc/xmc1_scu.h"
 3139              	 .file 7 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Infineon/XMC1400_series/Include/system_XMC1400.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_can.c
    {standard input}:18     .text.XMC_CAN_IsPanelControlReady:00000000 $t
    {standard input}:22     .text.XMC_CAN_IsPanelControlReady:00000000 XMC_CAN_IsPanelControlReady
    {standard input}:60     .text.XMC_CAN_PanelControl:00000000 $t
    {standard input}:64     .text.XMC_CAN_PanelControl:00000000 XMC_CAN_PanelControl
    {standard input}:126    .text.XMC_CAN_NODE_EnableConfigurationChange:00000000 $t
    {standard input}:130    .text.XMC_CAN_NODE_EnableConfigurationChange:00000000 XMC_CAN_NODE_EnableConfigurationChange
    {standard input}:162    .text.XMC_CAN_NODE_DisableConfigurationChange:00000000 $t
    {standard input}:166    .text.XMC_CAN_NODE_DisableConfigurationChange:00000000 XMC_CAN_NODE_DisableConfigurationChange
    {standard input}:199    .text.max:00000000 $t
    {standard input}:203    .text.max:00000000 max
    {standard input}:238    .text.min:00000000 $t
    {standard input}:242    .text.min:00000000 min
    {standard input}:278    .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:00000000 $t
    {standard input}:283    .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:00000000 XMC_CAN_NODE_NominalBitTimeConfigureEx
    {standard input}:495    .text.XMC_CAN_NODE_NominalBitTimeConfigure:00000000 $t
    {standard input}:500    .text.XMC_CAN_NODE_NominalBitTimeConfigure:00000000 XMC_CAN_NODE_NominalBitTimeConfigure
    {standard input}:811    .text.XMC_CAN_NODE_NominalBitTimeConfigure:000001cc $d
    {standard input}:817    .text.XMC_CAN_AllocateMOtoNodeList:00000000 $t
    {standard input}:822    .text.XMC_CAN_AllocateMOtoNodeList:00000000 XMC_CAN_AllocateMOtoNodeList
    {standard input}:883    .text.XMC_CAN_Disable:00000000 $t
    {standard input}:888    .text.XMC_CAN_Disable:00000000 XMC_CAN_Disable
    {standard input}:922    .text.XMC_CAN_Enable:00000000 $t
    {standard input}:927    .text.XMC_CAN_Enable:00000000 XMC_CAN_Enable
    {standard input}:974    .text.XMC_CAN_Init:00000000 $t
    {standard input}:979    .text.XMC_CAN_Init:00000000 XMC_CAN_Init
    {standard input}:1162   .text.XMC_CAN_SetBaudrateClockSource:00000000 XMC_CAN_SetBaudrateClockSource
    {standard input}:1251   .text.XMC_CAN_GetBaudrateClockFrequency:00000000 XMC_CAN_GetBaudrateClockFrequency
    {standard input}:1151   .text.XMC_CAN_Init:00000118 $d
    {standard input}:1157   .text.XMC_CAN_SetBaudrateClockSource:00000000 $t
    {standard input}:1206   .text.XMC_CAN_GetBaudrateClockSource:00000000 $t
    {standard input}:1211   .text.XMC_CAN_GetBaudrateClockSource:00000000 XMC_CAN_GetBaudrateClockSource
    {standard input}:1246   .text.XMC_CAN_GetBaudrateClockFrequency:00000000 $t
    {standard input}:1310   .text.XMC_CAN_InitEx:00000000 $t
    {standard input}:1315   .text.XMC_CAN_InitEx:00000000 XMC_CAN_InitEx
    {standard input}:1411   .text.XMC_CAN_InitEx:0000009c $d
    {standard input}:1417   .text.XMC_CAN_MO_SetIdentifier:00000000 $t
    {standard input}:1422   .text.XMC_CAN_MO_SetIdentifier:00000000 XMC_CAN_MO_SetIdentifier
    {standard input}:1502   .text.XMC_CAN_MO_GetIdentifier:00000000 $t
    {standard input}:1507   .text.XMC_CAN_MO_GetIdentifier:00000000 XMC_CAN_MO_GetIdentifier
    {standard input}:1561   .text.XMC_CAN_MO_GetAcceptanceMask:00000000 $t
    {standard input}:1566   .text.XMC_CAN_MO_GetAcceptanceMask:00000000 XMC_CAN_MO_GetAcceptanceMask
    {standard input}:1628   .text.XMC_CAN_MO_SetAcceptanceMask:00000000 $t
    {standard input}:1633   .text.XMC_CAN_MO_SetAcceptanceMask:00000000 XMC_CAN_MO_SetAcceptanceMask
    {standard input}:1719   .text.XMC_CAN_MO_Config:00000000 $t
    {standard input}:1724   .text.XMC_CAN_MO_Config:00000000 XMC_CAN_MO_Config
    {standard input}:1941   .text.XMC_CAN_MO_UpdateData:00000000 XMC_CAN_MO_UpdateData
    {standard input}:1928   .text.XMC_CAN_MO_Config:00000130 $d
    {standard input}:1936   .text.XMC_CAN_MO_UpdateData:00000000 $t
    {standard input}:2033   .text.XMC_CAN_MO_UpdateData:0000007c $d
    {standard input}:2039   .text.XMC_CAN_MO_Transmit:00000000 $t
    {standard input}:2044   .text.XMC_CAN_MO_Transmit:00000000 XMC_CAN_MO_Transmit
    {standard input}:2130   .text.XMC_CAN_MO_ReceiveData:00000000 $t
    {standard input}:2135   .text.XMC_CAN_MO_ReceiveData:00000000 XMC_CAN_MO_ReceiveData
    {standard input}:2270   .text.XMC_CAN_MO_Receive:00000000 $t
    {standard input}:2275   .text.XMC_CAN_MO_Receive:00000000 XMC_CAN_MO_Receive
    {standard input}:2589   .text.XMC_CAN_MO_Receive:00000204 $d
    {standard input}:2594   .text.XMC_CAN_NODE_EnableEvent:00000000 $t
    {standard input}:2599   .text.XMC_CAN_NODE_EnableEvent:00000000 XMC_CAN_NODE_EnableEvent
    {standard input}:2648   .text.XMC_CAN_NODE_DisableEvent:00000000 $t
    {standard input}:2653   .text.XMC_CAN_NODE_DisableEvent:00000000 XMC_CAN_NODE_DisableEvent
    {standard input}:2704   .text.XMC_CAN_TXFIFO_Transmit:00000000 $t
    {standard input}:2709   .text.XMC_CAN_TXFIFO_Transmit:00000000 XMC_CAN_TXFIFO_Transmit
    {standard input}:2809   .text.XMC_CAN_TXFIFO_Transmit:00000088 $d
    {standard input}:2814   .text.XMC_CAN_TXFIFO_ConfigMOBaseObject:00000000 $t
    {standard input}:2819   .text.XMC_CAN_TXFIFO_ConfigMOBaseObject:00000000 XMC_CAN_TXFIFO_ConfigMOBaseObject
    {standard input}:2889   .text.XMC_CAN_RXFIFO_ConfigMOBaseObject:00000000 $t
    {standard input}:2894   .text.XMC_CAN_RXFIFO_ConfigMOBaseObject:00000000 XMC_CAN_RXFIFO_ConfigMOBaseObject
    {standard input}:2964   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:00000000 $t
    {standard input}:2969   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:00000000 XMC_CAN_TXFIFO_ConfigMOSlaveObject
    {standard input}:3029   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:0000004c $d
    {standard input}:3035   .text.XMC_CAN_GATEWAY_InitSourceObject:00000000 $t
    {standard input}:3040   .text.XMC_CAN_GATEWAY_InitSourceObject:00000000 XMC_CAN_GATEWAY_InitSourceObject
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uidivmod
__aeabi_uidiv
XMC_SCU_CLOCK_GatePeripheralClock
XMC_SCU_CLOCK_UngatePeripheralClock
XMC_SCU_CLOCK_GetPeripheralClockFrequency
OSCHP_GetFrequency
