   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "xmc_ccu4.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_CCU4_StartPrescaler,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	XMC_CCU4_StartPrescaler:
  23              	.LFB43:
  24              	 .file 1 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc/xmc_ccu4.h"
   1:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
   2:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @file xmc_ccu4.h
   3:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @date 2017-09-15
   4:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
   5:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @cond
   6:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
   7:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
   9:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * All rights reserved.                        
  11:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                             
  12:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * following conditions are met:   
  14:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                                                              
  15:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * disclaimer.                        
  17:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
  18:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
  21:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                                                              
  24:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                                                              
  32:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
  35:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  36:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Change History
  37:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * --------------
  38:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  39:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-02-20:
  40:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Initial <br>
  41:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Documentation updates <br>
  42:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  43:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-06-20:
  44:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  45:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  46:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-07-22:
  47:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent() is updated to support XMC14 device. <br>
  48:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  49:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-08-17:
  50:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_PRESCALER_t enum is added to set the prescaler divider. <br>
  51:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_t enum item names are updated according to the guideli
  52:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_EnableShadowTransfer() API is made as inline, to improve the speed. <br>
  53:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  54:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-09-29:
  55:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - In XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t, two more enum items are added to support exte
  56:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *       settings.
  57:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  58:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-10-07:
  59:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_GetEvent() is made as inline.
  60:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_MULTI_IRQ_ID_t is added to support the XMC_CCU4_SLICE_EnableMultipleEvents(
  61:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *       XMC_CCU4_SLICE_DisableMultipleEvents() APIs.
  62:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - DOC updates for the newly added APIs.
  63:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  64:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2016-03-09:
  65:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Optimization of write only registers 
  66:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  67:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2016-05-20:
  68:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Added XMC_CCU4_SLICE_StopClearTimer()
  69:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Changed implementation of XMC_CCU4_SLICE_StopTimer() and XMC_CCU4_SLICE_ClearTimer() to av
  70:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  71:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2017-04-27:
  72:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_SetPrescaler() changed div_val parameter to type XMC_CCU4_SLICE_PRESCALER_t
  73:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
  74:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2017-09-15:
  75:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Fix XMC_CCU4_SLICE_SetShadowTransferMode()
  76:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  77:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @endcond
  78:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
  79:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
  80:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #ifndef XMC_CCU4_H
  81:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #define XMC_CCU4_H
  82:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  
  83:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
  84:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * HEADER FILES
  85:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
  86:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #include "xmc_common.h"
  87:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40)
  88:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
  89:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #if UC_FAMILY == XMC1
  90:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  #include "xmc1_ccu4_map.h"
  91:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
  92:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
  93:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #if UC_FAMILY == XMC4
  94:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  #include "xmc4_ccu4_map.h"
  95:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
  96:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
  97:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
  98:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @addtogroup XMClib XMC Peripheral Library
  99:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @{
 100:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 101:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  
 102:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 103:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @addtogroup CCU4
 104:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @brief Capture Compare Unit 4 (CCU4) low level driver for XMC family of microcontrollers<br>
 105:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 106:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The CCU4 peripheral is a major component for systems that need general purpose timers for signal
 107:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * monitoring/conditioning and Pulse Width Modulation (PWM) signal generation. Power electronic con
 108:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * switched mode power supplies or interruptible power supplies, can easily be implemented with the
 109:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CCU4 peripheral.\n
 110:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Each CCU4 module is comprised of four identical 16 bit Capture/Compare Timer slices, CC4y (where
 111:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * timer slice can work in compare mode or in capture mode.
 112:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 113:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * APIs provided in this file cover the following functional blocks of CCU4:\n
 114:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -- Timer configuration, Capture configuration, Function/Event configuration, Interrupt configura
 115:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Note:
 116:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 1. SLICE (APIs prefixed with e.g. XMC_CCU4_SLICE_)
 117:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2. Module (APIs are not having any prefix e.g. XMC_CCU4_)
 118:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 119:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Timer(Compare mode) configuration:
 120:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_COMPARE_CONFIG_t and
 121:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * function XMC_CCU4_SLICE_CompareInit().
 122:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 123:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It can be used to:
 124:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Start and Stop the timer. (XMC_CCU4_SLICE_StartTimer(), XMC_CCU4_SLICE_StopTimer())
 125:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Update the period, compare, Dither, Prescaler  and Passive values. (XMC_CCU4_SLICE_SetTimerPe
 126:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_SetTimerCompareMatch(), XMC_CCU4_SLICE_SetPrescaler(), XMC_CCU4_SLICE_SetDithe
 127:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_SetPassiveLevel())
 128:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Enable the slices to support multichannel mode. (XMC_CCU4_SLICE_EnableMultiChannelMode())
 129:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 130:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Capture configuration:
 131:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_CAPTURE_CONFIG_t and
 132:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * function XMC_CCU4_SLICE_CaptureInit().
 133:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 134:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It can be used to:
 135:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Configure the capture functionality. (XMC_CCU4_SLICE_Capture0Config(), XMC_CCU4_SLICE_Capture
 136:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Read the captured values along with the status, which indicate the value is latest or not.
 137:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    (XMC_CCU4_SLICE_GetCaptureRegisterValue())
 138:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 139:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Function/Event configuration:
 140:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_EVENT_CONFIG_t.\n
 141:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It can be used to:
 143:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Enable and Disable the events. (XMC_CCU4_SLICE_EnableEvent(), XMC_CCU4_SLICE_DisableEvent())
 144:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Configure to start and stop the timer on external events.(XMC_CCU4_SLICE_StartConfig(), XMC_C
 145:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Modulation, external load and Gating of the timer output.(XMC_CCU4_SLICE_ModulationConfig(), 
 146:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_LoadConfig(), XMC_CCU4_SLICE_GateConfig())
 147:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Control the count direction of the timer based on the external event. (XMC_CCU4_SLICE_Directi
 148:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Count the external events.(XMC_CCU4_SLICE_CountConfig())
 149:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# External Trap. Which can be used as protective feature.(XMC_CCU4_SLICE_EnableTrap(), XMC_CCU4
 150:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_TrapConfig())
 151:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 152:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Interrupt configuration:
 153:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the function to configure the interrupt node to each event (XMC
 154:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @{
 155:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 156:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  
 157:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 158:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * MACROS
 159:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 160:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /* Macro to check if the interrupt enum passed is valid */
 161:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #define XMC_CCU4_SLICE_CHECK_INTERRUPT(interrupt) \
 162:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****     ((interrupt == XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH)           || \
 163:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH)              || \
 164:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP)  || \
 165:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN)|| \
 166:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT0)                 || \
 167:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT1)                 || \
 168:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT2)                 || \
 169:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_TRAP))
 170:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 171:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 172:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * ENUMS
 173:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 174:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 175:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 176:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Typedef for CCU4 Global data structure
 177:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 178:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef CCU4_GLOBAL_TypeDef XMC_CCU4_MODULE_t;
 179:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 180:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 181:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Typedef for CCU4 Slice data structure
 182:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 183:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef CCU4_CC4_TypeDef XMC_CCU4_SLICE_t;
 184:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 185:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 186:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Return Value of an API
 187:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 188:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_STATUS
 189:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 190:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_OK      = 0U, /**< API fulfils request */
 191:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_ERROR       , /**< API cannot fulfil the request */
 192:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_RUNNING     , /**< The timer slice is currently running */
 193:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_IDLE          /**< The timer slice is currently idle */
 194:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_STATUS_t;
 195:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 196:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 197:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  CCU4 module clock
 198:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 199:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_CLOCK
 200:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 201:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_SCU        = 0U, /**< Select the fCCU as the clock */
 202:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_A     , /**< External clock-A */
 203:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_B     , /**< External clock-B */
 204:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_C       /**< External clock-C */
 205:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_CLOCK_t;
 206:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 207:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 208:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CCU4 set the shadow transfer type for multichannel mode
 209:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 210:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER
 211:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 212:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE0       = (uint32_t)0x4000000, /**< Shadow transfe
 213:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      only for slice
 214:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE0  = (uint32_t)0x4000400, /**< Shadow transfe
 215:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      and hardware f
 216:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE1       = (uint32_t)0x8000000, /**< Shadow transfe
 217:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      only for slice
 218:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE1  = (uint32_t)0x8000800, /**< Shadow transfe
 219:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      and hardware f
 220:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE2       = (uint32_t)0x10000000, /**< Shadow transf
 221:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       only for slic
 222:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE2  = (uint32_t)0x10001000, /**< Shadow transf
 223:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       and hardware 
 224:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE3       = (uint32_t)0x20000000, /**< Shadow transf
 225:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       only for slic
 226:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE3  = (uint32_t)0x20002000  /**< Shadow transf
 227:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       and hardware 
 228:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_t;
 229:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 230:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 231:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Operational modes of CCU4 slice
 232:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 233:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MODE
 234:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 235:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODE_COMPARE  = 0U, /**< slice(CC4y) operates in Compare Mode */
 236:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODE_CAPTURE        /**< slice(CC4y) operates in Capture Mode */
 237:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MODE_t;
 238:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 239:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 240:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer counting modes for the slice
 241:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 242:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_COUNT_MODE
 243:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 244:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA  = 0U, /**< Edge Aligned Mode */
 245:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA        /**< Center Aligned Mode */
 246:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_COUNT_MODE_t;
 247:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 248:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 249:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer repetition mode for the slice
 250:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 251:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_REPEAT_MODE
 252:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 253:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT = 0U,  /**< Repetitive mode: continuous mode of operation
 254:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE        /**< Single shot mode: Once a Period match/One mat
 255:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                       occurs timer goes to idle state */
 256:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t;
 257:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 258:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 259:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Timer counting direction for the CCU4 slice
 260:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 261:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_COUNT_DIR
 262:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 263:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_DIR_UP   = 0U, /**< Counting up */
 264:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_DIR_DOWN       /**< Counting down */
 265:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_COUNT_DIR_t;
 266:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 267:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 268:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Capture mode register sets
 269:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 270:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_CAP_REG_SET
 271:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 272:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_CAP_REG_SET_LOW  = 0U, /**< Capture register-0, Capture register-1 used */
 273:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_CAP_REG_SET_HIGH       /**< Capture register-2, Capture register-3 used */
 274:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_CAP_REG_SET_t;
 275:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 276:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 277:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Prescaler mode
 278:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 279:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_PRESCALER_MODE
 280:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 281:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_MODE_NORMAL = 0U, /**< Fixed division of module clock */
 282:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_MODE_FLOAT        /**< Floating divider. */
 283:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_PRESCALER_MODE_t;
 284:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 285:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 286:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer output passive level
 287:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 288:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL
 289:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 290:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_LOW  = 0U, /**< Passive level = Low */
 291:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH       /**< Passive level = High */
 292:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t;
 293:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 294:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 295:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Timer clock Divider
 296:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 297:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_PRESCALER
 298:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 299:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_1  = 0U, /**< Slice Clock = fccu4 */
 300:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_2      , /**< Slice Clock = fccu4/2 */
 301:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_4      , /**< Slice Clock = fccu4/4 */
 302:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_8      , /**< Slice Clock = fccu4/8 */
 303:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_16     , /**< Slice Clock = fccu4/16 */
 304:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_32     , /**< Slice Clock = fccu4/32 */
 305:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_64     , /**< Slice Clock = fccu4/64 */
 306:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_128    , /**< Slice Clock = fccu4/128 */
 307:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_256    , /**< Slice Clock = fccu4/256 */
 308:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_512    , /**< Slice Clock = fccu4/512 */
 309:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_1024   , /**< Slice Clock = fccu4/1024 */
 310:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_2048   , /**< Slice Clock = fccu4/2048 */
 311:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_4096   , /**< Slice Clock = fccu4/4096 */
 312:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_8192   , /**< Slice Clock = fccu4/8192 */
 313:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_16384  , /**< Slice Clock = fccu4/16384 */
 314:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_32768    /**< Slice Clock = fccu4/32768 */
 315:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_PRESCALER_t;
 316:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 317:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 318:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Function list
 319:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 320:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_FUNCTION
 321:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 322:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_START           = 0U, /**< Start function */
 323:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_STOP                , /**< Stop function */
 324:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_CAPTURE_EVENT0      , /**< Capture Event-0 function, CCycapt0 signal is u
 325:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                      generation */
 326:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_CAPTURE_EVENT1      , /**< Capture Event-1 function, CCycapt1 signal is u
 327:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                      generation */
 328:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_GATING              , /**< Gating function */
 329:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_DIRECTION           , /**< Direction function */
 330:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_LOAD                , /**< Load function */
 331:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_COUNT               , /**< Counting function */
 332:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_OVERRIDE            , /**< Override function */
 333:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_MODULATION          , /**< Modulation function */
 334:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_TRAP                  /**< Trap function */
 335:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_FUNCTION_t;
 336:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 337:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 338:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event list
 339:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 340:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT
 341:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 342:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_NONE  = 0U, /**< None */
 343:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_0         , /**< Event-0 */
 344:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_1         , /**< Event-1 */
 345:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_2           /**< Event-2 */
 346:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_t;
 347:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 348:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 349:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event trigger criteria  - Edge sensitivity
 350:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 351:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY
 352:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 353:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_NONE         = 0U, /**< None */
 354:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE      , /**< Rising Edge of the input signal gen
 355:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_FALLING_EDGE     , /**< Falling Edge of the input signal ge
 356:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 trigger */
 357:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_DUAL_EDGE          /**< Both Rising and Falling edges cause
 358:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_t;
 359:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 360:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 361:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event trigger criteria  - Level sensitivity
 362:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 363:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY
 364:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 365:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH = 0U, /**< Level sensitive functions react to 
 366:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW  = 1U, /**< Level sensitive functions react to 
 367:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   /* Below enum items can be utilised specific to the functionality */
 368:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_LOW = 0U, /**< Timer counts up, during Low sta
 369:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_HIGH = 1U /**< Timer counts up, during High st
 370:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t;
 371:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 372:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 373:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Low pass filter Configuration. The External Event input should be stable for a selected number 
 374:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 375:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_FILTER
 376:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 377:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_DISABLED  = 0U, /**< No Low Pass Filter */
 378:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_3_CYCLES      , /**< 3 clock cycles */
 379:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_5_CYCLES      , /**< 5 clock cycles */
 380:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_7_CYCLES        /**< 7 clock cycles */
 381:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_FILTER_t;
 382:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 383:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 384:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event Input list. This list depicts the possible input connections to the CCU4 slice.
 385:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Interconnects are specific to each device.
 386:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 387:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef uint8_t XMC_CCU4_SLICE_INPUT_t;
 388:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 389:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 390:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Actions that can be performed upon detection of an external Timer STOP event
 391:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 392:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_END_MODE
 393:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 394:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_STOP       = 0U, /**< Stops the timer, without clearing TIMER regis
 395:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_CLEAR          , /**< Without stopping timer, clears the TIMER regi
 396:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_STOP_CLEAR       /**< Stops the timer and clears the TIMER register
 397:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_END_MODE_t;
 398:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 399:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 400:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Actions that can be performed upon detection of an external Timer START event
 401:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 402:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_START_MODE
 403:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 404:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_START_MODE_TIMER_START       = 0U, /**< Start the timer from the current count of 
 405:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR       /**< Clears the TIMER register and start the ti
 406:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_START_MODE_t;
 407:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 408:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 409:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Modulation of timer output signals
 410:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 411:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MODULATION_MODE
 412:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 413:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT  = 0U, /**< Clear ST and OUT signals */
 414:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT           /**< Clear only the OUT signal */
 415:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MODULATION_MODE_t;
 416:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 417:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 418:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Trap exit mode
 419:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 420:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TRAP_EXIT_MODE
 421:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 422:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC = 0U, /**< Clear trap state as soon as the trap signal is
 423:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW              /**< Clear only when acknowledged by software */
 424:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TRAP_EXIT_MODE_t;
 425:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 426:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 427:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer clear on capture
 428:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 429:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_CLEAR_MODE
 430:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 431:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_NEVER    = 0U, /**< Never clear the timer on any capture event */
 432:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_CAP_HIGH     , /**< Clear only when timer value has been captured
 433:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_CAP_LOW      , /**< Clear only when timer value has been captured
 434:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_ALWAYS         /**< Always clear the timer upon detection of any 
 435:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_CLEAR_MODE_t;
 436:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 437:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 438:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Multi Channel Shadow transfer request configuration options
 439:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 440:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MCMS_ACTION
 441:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 442:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR          = 0U, /**< Transfer Compare and Period Shadow 
 443:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 the actual registers upon MCS xfer 
 444:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP     = 1U, /**< Transfer Compare, Period and Presca
 445:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 register values to the actual regis
 446:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 request */
 447:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP_DIT = 3U  /**< Transfer Compare, Period ,Prescaler
 448:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 Compare register values to the actu
 449:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 MCS xfer request */
 450:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MCMS_ACTION_t;
 451:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 452:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 453:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Available Interrupt Event Ids
 454:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 455:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_IRQ_ID
 456:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 457:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH       = 0U , /**< Period match counting up */
 458:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH          = 1U , /**< Period match -> One match counting down */
 459:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP   = 2U , /**< Compare match counting up */
 460:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN = 3U , /**< Compare match counting down */
 461:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT0             = 8U , /**< Event-0 occurrence */
 462:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT1             = 9U , /**< Event-1 occurrence */
 463:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT2             = 10U, /**< Event-2 occurrence */
 464:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_TRAP               = 11U  /**< Trap occurrence */
 465:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_IRQ_ID_t;
 466:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 467:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 468:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Available Interrupt Event Ids, which is added to support multi event APIs
 469:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 470:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MULTI_IRQ_ID
 471:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 472:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_PERIOD_MATCH       = 0x1U,   /**< Period match counting up */
 473:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_ONE_MATCH          = 0x2U,   /**< Period match -> One match counting 
 474:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_UP   = 0x4U,   /**< Compare match counting up */
 475:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_DOWN = 0x8U,   /**< Compare match counting down */
 476:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT0             = 0x100U, /**< Event-0 occurrence */
 477:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT1             = 0x200U, /**< Event-1 occurrence */
 478:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT2             = 0x400U, /**< Event-2 occurrence */
 479:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MULTI_IRQ_ID_t;
 480:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 481:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 482:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Service Request Lines for CCU4. Event are mapped to these SR lines and these are used to generat
 483:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 484:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_SR_ID
 485:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 486:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_0    = 0U, /**< Service Request Line-0 selected  */
 487:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_1        , /**< Service Request Line-1 selected  */
 488:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_2        , /**< Service Request Line-2 selected  */
 489:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_3          /**< Service Request Line-3 selected  */
 490:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_SR_ID_t;
 491:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 492:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 493:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Slice shadow transfer options.
 494:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 495:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SHADOW_TRANSFER
 496:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 497:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_0            = CCU4_GCSS_S0SE_Msk, /**< Transfer Period, Compare a
 498:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 499:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-0 */
 500:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_0     = CCU4_GCSS_S0DSE_Msk, /**< Transfer Dither compare s
 501:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual register for SL
 502:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_0  = CCU4_GCSS_S0PSE_Msk, /**< Transfer Prescaler shadow
 503:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 504:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_1            = CCU4_GCSS_S1SE_Msk, /**< Transfer Period, Compare a
 505:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 506:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-1 */
 507:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_1     = CCU4_GCSS_S1DSE_Msk, /**< Transfer Dither compare s
 508:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual registers for S
 509:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_1  = CCU4_GCSS_S1PSE_Msk, /**< Transfer Prescaler shadow
 510:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 511:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_2            = CCU4_GCSS_S2SE_Msk, /**< Transfer Period, Compare a
 512:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 513:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-2 */
 514:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_2     = CCU4_GCSS_S2DSE_Msk, /**< Transfer Dither compare s
 515:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual register for SL
 516:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_2  = CCU4_GCSS_S2PSE_Msk, /**< Transfer Prescaler shadow
 517:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 518:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_3            = CCU4_GCSS_S3SE_Msk, /**< Transfer Period, Compare a
 519:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 520:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-3 */
 521:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_3     = CCU4_GCSS_S3DSE_Msk, /**< Transfer Dither compare s
 522:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual register for SL
 523:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_3  = CCU4_GCSS_S3PSE_Msk  /**< Transfer Prescaler shadow
 524:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 525:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SHADOW_TRANSFER_t;
 526:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 527:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU4V3) || defined(DOXYGEN)/* Defined for XMC1400 devices only */
 528:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 529:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Slice shadow transfer mode options.
 530:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @note Only available for XMC1400 series
 531:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 532:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE
 533:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 534:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_IN_PERIOD_MATCH_AND_ONE_MATCH = 0U,  /**< Shadow transfer is 
 535:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                 One match. */
 536:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_PERIOD_MATCH = 1U,  /**< Shadow transfer is done only
 537:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_ONE_MATCH = 2U  /**< Shadow transfer is done only in 
 538:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_t; 
 539:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 540:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 541:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 542:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Immediate write into configuration register
 543:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  @note Only available for XMC1400 series
 544:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 545:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_WRITE_INTO
 546:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 547:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_PERIOD_CONFIGURATION = CCU4_CC4_STC_IRPC_Msk,                  /**< Imm
 548:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 549:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Con
 550:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_COMPARE_CONFIGURATION = CCU4_CC4_STC_IRCC_Msk,                 /**< Imm
 551:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 552:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Con
 553:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_PASSIVE_LEVEL_CONFIGURATION = CCU4_CC4_STC_IRLC_Msk,           /**< Imm
 554:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 555:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                            Config
 556:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_DITHER_VALUE_CONFIGURATION = CCU4_CC4_STC_IRDC_Msk,            /**< Imm
 557:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 558:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                            Config
 559:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_FLOATING_PRESCALER_VALUE_CONFIGURATION = CCU4_CC4_STC_IRFC_Msk /**< Imm
 560:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 561:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Val
 562:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_WRITE_INTO_t;
 563:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 564:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 565:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 566:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Automatic Shadow Transfer request when writing into shadow register
 567:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  @note Only available for XMC1400 series
 568:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 569:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO
 570:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 571:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PERIOD_SHADOW = CCU4_CC4_STC_ASPC_Msk,        
 572:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 573:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 574:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 575:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_COMPARE_SHADOW = CCU4_CC4_STC_ASCC_Msk,       
 576:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 577:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 578:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 579:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PASSIVE_LEVEL = CCU4_CC4_STC_ASLC_Msk,        
 580:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 581:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 582:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_DITHER_SHADOW = CCU4_CC4_STC_ASDC_Msk,        
 583:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 584:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 585:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_FLOATING_PRESCALER_SHADOW = CCU4_CC4_STC_ASFC_
 586:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 587:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 588:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 589:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 590:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_t;
 591:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 592:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 593:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Used to create Mask needed for Multi-channel Shadow transfer enable/disable
 594:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 595:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MASK
 596:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 597:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_0  = 1U , /**< SLICE-0 */
 598:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_1  = 2U , /**< SLICE-1 */
 599:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_2  = 4U , /**< SLICE-2 */
 600:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_3  = 8U   /**< SLICE-3 */
 601:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MASK_t;
 602:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 603:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 604:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 605:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * DATA STRUCTURES
 606:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 607:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 608:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 609:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configuration data structure of an External Event(Event-0/1/2).
 610:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Needed to configure the various aspects of an External Event.
 611:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  This structure will not connect the external event with an external function.
 612:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 613:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_EVENT_CONFIG
 614:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 615:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_INPUT_t                   mapped_input; /**< Required input signal for the Event *
 616:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_t  edge;         /**< Select the event edge of the input si
 617:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                               This is needed for an edge sensitive 
 618:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t level;        /**< Select the event level of the input s
 619:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                               This is needed for an level sensitive
 620:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_t            duration;     /**< Low Pass filter duration in terms of 
 621:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_CONFIG_t;
 622:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 623:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /*Anonymous structure/union guard start*/
 624:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(__CC_ARM)
 625:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma push
 626:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma anon_unions
 627:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #elif defined(__TASKING__)
 628:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma warning 586
 629:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 630:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 631:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 632:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configuration data structure for CCU4 slice. Specifically configures the CCU4 slice to compare 
 633:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  This excludes event and function configuration.
 634:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 635:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_COMPARE_CONFIG
 636:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 637:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   union
 638:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   {
 639:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****     struct
 640:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****     {
 641:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t timer_mode : 1;         /**< Edge aligned or Centre Aligned.
 642:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum ::XMC_CCU4_SLICE_TIMER_COUNT_MODE_t */
 643:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t monoshot : 1;           /**< Single shot or Continuous mode .
 644:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t*/
 645:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t shadow_xfer_clear : 1;  /**< Should PR and CR shadow xfer happen when timer is clear
 646:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 10;
 647:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t dither_timer_period: 1; /**< Can the period of the timer dither? */
 648:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t dither_duty_cycle : 1;  /**< Can the compare match of the timer dither? */
 649:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 1;
 650:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t prescaler_mode: 1;      /**< Normal or floating prescaler mode.
 651:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_PRESCALER_MODE_t*/
 652:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 8;
 653:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t mcm_enable : 1;         /**< Multi-Channel mode enable? */
 654:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 6;
 655:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****     };
 656:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****     uint32_t tc;
 657:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   };
 658:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t prescaler_initval : 4;      /**< Initial prescaler divider value 
 659:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                             Accepts enum :: XMC_CCU4_SLICE_PRESCALER_t */
 660:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t float_limit : 4;            /**< The max value which the prescaler divider can increment
 661:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t dither_limit : 4;           /**< The value that determines the spreading of dithering */
 662:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t passive_level : 1;          /**< Configuration of ST and OUT passive levels.
 663:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t*
 664:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t timer_concatenation : 1;    /**< Enables the concatenation of the timer if true.*/
 665:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_COMPARE_CONFIG_t;
 666:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 667:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 668:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configuration data structure for CCU4 slice. Specifically configures the CCU4 slice to capture 
 669:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  This excludes event and function configuration.
 670:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 671:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_CAPTURE_CONFIG
 672:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 673:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   union
 674:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   {
 675:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****     struct
 676:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****     {
 677:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 4;
 678:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t fifo_enable : 1;      /**< Should the capture registers be setup as a FIFO?(Extended
 679:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t timer_clear_mode : 2; /**< How should the timer register be cleared upon detection o
 680:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                           Accepts enum ::XMC_CCU4_SLICE_TIMER_CLEAR_MODE_t*/
 681:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 4;
 682:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t same_event : 1;       /**< Should the capture event for C1V/C0V and C3V/C2V be same 
 683:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t ignore_full_flag : 1; /**< Should updates to capture registers follow full flag rule
 684:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 3;
 685:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t prescaler_mode: 1;    /**< Normal or floating prescaler Accepts enum :: XMC_CCU4_SLI
 686:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 15;
 687:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****     };
 688:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****     uint32_t tc;
 689:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   };
 690:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t prescaler_initval : 4;    /**< Prescaler divider value */
 691:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t float_limit : 4;          /**< The max value which the prescaler divider can increment t
 692:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t timer_concatenation : 1;  /**< Enables the concatenation of the timer */
 693:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_CAPTURE_CONFIG_t;
 694:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /*Anonymous structure/union guard end*/
 695:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(__CC_ARM)
 696:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma pop
 697:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #elif defined(__TASKING__)
 698:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma warning restore
 699:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 700:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 701:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * API Prototypes
 702:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 703:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 704:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #ifdef __cplusplus
 705:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** extern "C" {
 706:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 707:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 708:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsValidModule(const XMC_CCU4_MODULE_t *const module)
 709:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 710:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   bool tmp = false;
 711:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 712:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = (module == CCU40);
 713:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 714:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41) 
 715:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (module == CCU41);
 716:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 717:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 718:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42)
 719:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (module == CCU42);
 720:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 721:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 722:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43)
 723:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (module == CCU43);
 724:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 725:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 726:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   return tmp;  
 727:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } 
 728:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 729:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsValidSlice(const XMC_CCU4_SLICE_t *const slice)
 730:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 731:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   bool tmp = false;
 732:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 733:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = (slice == CCU40_CC40);
 734:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40_CC41)  
 735:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC41);
 736:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 737:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40_CC42)  
 738:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC42);
 739:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 740:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40_CC43)  
 741:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC43);
 742:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 743:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41)  
 744:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC40);
 745:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41_CC41)  
 746:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC41);
 747:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 748:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41_CC42)  
 749:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC42);
 750:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 751:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41_CC43)  
 752:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC43);
 753:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 754:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif 
 755:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42)  
 756:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC40);
 757:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42_CC41)  
 758:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC41);
 759:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 760:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42_CC42)  
 761:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC42);
 762:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 763:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42_CC43)  
 764:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC43);
 765:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 766:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 767:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43)  
 768:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC40);
 769:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43_CC41)  
 770:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC41);
 771:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 772:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43_CC42)  
 773:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC42);
 774:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 775:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43_CC43)  
 776:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC43);
 777:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 778:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif 
 779:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 780:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   return tmp;  
 781:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** } 
 782:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 783:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 784:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 785:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mcs_action multi-channel shadow transfer request configuration
 786:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 787:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 788:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 789:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 790:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Initialization of global register GCTRL.<br>\n
 791:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  As part of module initialization, behaviour of the module upon detection
 792:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Multi-Channel Mode trigger is configured. Will also invoke the XMC_CCU4_EnableModule().
 793:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  The API call would bring up the required CCU4 module and also initialize the module for
 794:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  the required multi-channel shadow transfer.
 795:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 796:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 797:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_CompareInit()<BR> XMC_CCU4_SLICE_CaptureInit().
 798:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 799:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action);
 800:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 801:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 802:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 803:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param clock Choice of input clock to the module
 804:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 805:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 806:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 807:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 808:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Selects the Module Clock by configuring GCTRL.PCIS bits.<BR>\n
 809:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  There are 3 potential clock sources. This API helps to select the required clock source.
 810:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Call to this API is valid after the XMC_CCU4_Init().
 811:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 812:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 813:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * None.<BR>
 814:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 815:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock);
 816:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 817:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 818:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 819:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 820:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 821:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 822:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 823:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the CCU4 module and brings it to active state.<BR>\n
 824:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Also disables the gating of the clock signal (if applicable depending on the device being select
 825:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Invoke this API before any operations are done on the CCU4 module. Invoked from  XMC_CCU4_Init()
 826:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 827:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 828:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SetModuleClock()<BR> XMC_CCU4_DisableModule()<BR> XMC_CCU4_StartPrescaler().
 829:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 830:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module);
 831:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 832:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 833:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 834:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 835:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 836:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 837:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 838:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Brings the CCU4 module to reset state and enables gating of the clock signal(if applicable depen
 839:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * on the device being selected).<BR>\n
 840:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Invoke this API when a CCU4 module needs to be disabled completely.
 841:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Any operation on the CCU4 module will have no effect after this API is called.
 842:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 843:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 844:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableModule()<BR> XMC_CCU4_DisableModule().
 845:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 846:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_DisableModule(XMC_CCU4_MODULE_t *const module);
 847:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 848:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 849:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 850:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 851:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 852:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 853:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 854:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Starts the prescaler and restores clocks to the timer slices, by setting GIDLC.SPRB bit.<BR>\n
 855:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Once the input to the prescaler has been chosen and the prescaler divider of all slices program
 856:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  the prescaler itself may be started. Invoke this  API after XMC_CCU4_Init()
 857:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  (Mandatory to fully initialize the module).Directly accessed register is GIDLC.
 858:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 859:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 860:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescal
 861:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_StopPrescaler().
 862:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 863:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
 864:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
  25              	 .loc 1 864 0
  26              	 .cfi_startproc
  27 0000 80B5     	 push {r7,lr}
  28              	.LCFI0:
  29              	 .cfi_def_cfa_offset 8
  30              	 .cfi_offset 7,-8
  31              	 .cfi_offset 14,-4
  32 0002 82B0     	 sub sp,sp,#8
  33              	.LCFI1:
  34              	 .cfi_def_cfa_offset 16
  35 0004 00AF     	 add r7,sp,#0
  36              	.LCFI2:
  37              	 .cfi_def_cfa_register 7
  38 0006 7860     	 str r0,[r7,#4]
 865:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 866:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
  39              	 .loc 1 866 0
  40 0008 7B68     	 ldr r3,[r7,#4]
  41 000a DB68     	 ldr r3,[r3,#12]
  42 000c 8022     	 mov r2,#128
  43 000e 5200     	 lsl r2,r2,#1
  44 0010 1A43     	 orr r2,r3
  45 0012 7B68     	 ldr r3,[r7,#4]
  46 0014 DA60     	 str r2,[r3,#12]
 867:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
  47              	 .loc 1 867 0
  48 0016 BD46     	 mov sp,r7
  49 0018 02B0     	 add sp,sp,#8
  50              	 
  51 001a 80BD     	 pop {r7,pc}
  52              	 .cfi_endproc
  53              	.LFE43:
  55              	 .section .text.XMC_CCU4_SLICE_SetDitherCompareValue,"ax",%progbits
  56              	 .align 2
  57              	 .code 16
  58              	 .thumb_func
  60              	XMC_CCU4_SLICE_SetDitherCompareValue:
  61              	.LFB71:
 868:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 869:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 870:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 871:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 872:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 873:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 874:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 875:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stops the prescaler and blocks clocks to the timer slices, by setting GIDLS.CPRB bit.<BR>\n
 876:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Opposite of the StartPrescaler routine.
 877:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Clears the run bit of the prescaler. Ensures that the module clock is not supplied to
 878:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the slices of the module.Registers directly accessed is GIDLS.
 879:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 880:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 881:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_St
 882:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 883:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_StopPrescaler(XMC_CCU4_MODULE_t *const module)
 884:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 885:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_StopPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 886:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLS |= (uint32_t) CCU4_GIDLS_CPRB_Msk;
 887:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 888:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 889:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 890:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 891:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 892:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 893:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 894:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 895:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Returns the state of the prescaler, by reading GSTAT.PRB bit.<BR>\n
 896:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This will return true if the prescaler is running. If clock is being supplied to the slices of t
 897:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * module then returns as true.
 898:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 899:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 900:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_D
 901:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 902:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsPrescalerRunning(XMC_CCU4_MODULE_t *const module)
 903:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 904:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_IsPrescalerRunning:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 905:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((bool)((module->GSTAT & (uint32_t) CCU4_GSTAT_PRB_Msk) == (uint32_t)CCU4_GSTAT_PRB_Msk));
 906:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 907:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 908:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 909:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 910:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param clock_mask Slices whose clocks are to be enabled simultaneously.
 911:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Bit location 0/1/2/3 represents slice-0/1/2/3 respectively.
 912:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Range: [0x1 to 0xF]
 913:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 914:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 915:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 916:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 917:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables clocks of multiple slices at a time, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
 918:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * GIDLC.CS3I bits.\n\n
 919:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Takes an input clock_mask, which determines the slices that would receive the clock. Bring them 
 920:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * of the idle state simultaneously.
 921:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 922:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 923:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock().
 924:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 925:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableMultipleClocks(XMC_CCU4_MODULE_t *const module, const uint8_t c
 926:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 927:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableMultipleClocks:Invalid Module Pointer", XMC_CCU4_IsValidModule(module)
 928:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableMultipleClocks:Wrong clock mask", (clock_mask < 16U));
 929:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 930:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLC |= (uint32_t) clock_mask;
 931:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 932:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 933:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 934:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 935:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice_number Slice for which the clock should be Enabled.
 936:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Range: [0x0 to 0x3]
 937:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 938:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 939:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 940:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 941:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Enables the slice timer clock, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
 942:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  GIDLC.CS3I bits according to the selected \a slice_number.\n\n
 943:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  It is possible to enable/disable clock at slice level. This uses the \b slice_number to indicat
 944:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  slice whose clock needs to be enabled.
 945:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 946:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 947:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XM
 948:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 949:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_numb
 950:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 951:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 952:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));
 953:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 954:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLC |= ((uint32_t) 1) << slice_number;
 955:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 956:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 957:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 958:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 959:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice_number Slice for which the clock should be disabled.
 960:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Range: [0x0 to 0x3]
 961:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 962:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 963:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 964:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 965:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the slice timer clock, by configuring GIDLS.SS0I, GIDLS.SSS1I, GIDLS.SSS2I, 
 966:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * GIDLS.SSS3I bits according to the selected \a slice_number .\n\n
 967:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is possible to disable clock at slice level using the module pointer.
 968:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \b slice_number is used to disable the clock to a given slice of the module.
 969:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Directly accessed Register is GIDLS.
 970:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 971:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 972:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC
 973:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 974:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_DisableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_num
 975:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 976:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_DisableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 977:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_DisableClock:Invalid Slice Number", (slice_number < 4U));
 978:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 979:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLS |= ((uint32_t) 1) << slice_number;
 980:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 981:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 982:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 983:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
 984:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param compare_init Pointer to slice configuration structure
 985:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 986:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 987:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 988:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 989:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Initialization of a CC4 slice to compare mode, by configuring CC4yTC, CC4yCMC, CC4yPSC, CC4yDITH
 990:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yFPCS, CC4yCHC registers.\n\n 
 991:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4 slice is configured with Timer configurations in this routine.
 992:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * After initialization user has to explicitly enable the shadow transfer for the required values b
 993:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableShadowTransfer() with appropriate mask.
 994:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 995:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 996:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * None.
 997:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 998:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
 999:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init);
1000:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1001:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1002:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1003:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param capture_init Pointer to slice configuration structure
1004:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1005:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1006:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1007:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1008:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Initialization of a CC4 slice to capture mode, by configuring CC4yTC, CC4yCMC, CC4yPSC,CC4yFPCS 
1009:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4 slice is configured with Capture configurations in  this routine.After initialization user h
1010:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * enable the shadow transfer for the required  values by calling XMC_CCU4_EnableShadowTransfer()
1011:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * with appropriate mask.
1012:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1013:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1014:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config().
1015:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1016:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_CaptureInit(XMC_CCU4_SLICE_t *const slice,
1017:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_CAPTURE_CONFIG_t *const capture_init);
1018:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1019:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1020:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1021:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1022:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Start Function
1023:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param start_mode Behavior of slice when the start function is activated
1024:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1025:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1026:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1027:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1028:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configures the Start Function of the slice, by configuring CC4yCMC.ENDS and CC4yTC.ENDM bits.\n
1029:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Start function is mapped with one of the 3 events. An external signal can control when a CC4 ti
1030:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Additionally, the behaviour of the slice upon activation of the start function is configured as
1031:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1032:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1033:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1034:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1035:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
1036:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_EVENT_t event,
1037:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_START_MODE_t start_mode);
1038:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1039:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1040:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1041:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Stop Function
1042:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param end_mode Behavior of slice when the stop function is activated
1043:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1044:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1045:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1046:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1047:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Stop function for the slice, by configuring CC4yCMC.STRTS and CC4yTC.STRM bits.\n
1048:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stop function is mapped with one of the 3 events. An external signal can control when a CCU4 tim
1049:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Additionally, the behaviour of the slice upon activation of the stop function is configured as w
1050:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1051:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1052:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1053:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1054:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
1055:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                const XMC_CCU4_SLICE_EVENT_t event,
1056:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                const XMC_CCU4_SLICE_END_MODE_t end_mode);
1057:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1058:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1059:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1060:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External load Function
1061:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1062:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1063:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1064:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1065:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configures the Load Function for the slice, by configuring CC4yCMC.LDS bit.\n\n
1066:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Load function is mapped with one of the 3 events. Up on occurrence of the event,\n
1067:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  if CC4yTCST.CDIR set to 0,CC4yTIMER register is reloaded with the value from compare register\n
1068:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  if CC4yTCST.CDIR set to 1,CC4yTIMER register is reloaded with the value from period register\n
1069:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1070:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1071:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1072:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1073:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1074:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1075:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1076:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1077:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1078:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Modulation Function
1079:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mod_mode Desired Modulation mode
1080:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param synch_with_pwm Option to synchronize modulation with PWM start
1081:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                       Pass \b true if the modulation needs to be synchronized with PWM signal.
1082:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1083:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1084:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1085:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1086:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Output Modulation Function of the slice, by configuring CCeyCMC.MOS, CC4yTC.EMT a
1087:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yTC.EMS bits.\n\n
1088:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Modulation function is mapped with one of the 3 events. The output signal of the CCU can
1089:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * be modulated according to a external input.  Additionally, the behaviour of the slice upon activ
1090:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * of the modulation function is configured as well.
1091:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1092:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1093:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1094:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1095:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
1096:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                      const XMC_CCU4_SLICE_EVENT_t event,
1097:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                      const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
1098:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                      const bool synch_with_pwm);
1099:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1100:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1101:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1102:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Count Function
1103:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1104:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1105:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1106:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1107:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Count Function of the slice, by configuring CC4yCMC.CNTS bit.\n\n
1108:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Count function is mapped with one of the 3 events. CCU4 slice can take an external
1109:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * signal to act as the counting event. The CCU4 slice would count the
1110:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * edges present on the \b event selected.
1111:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1112:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1113:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1114:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1115:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1116:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1117:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1118:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1119:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event  Map an External event to the External Gating Function
1120:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1121:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1122:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1123:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1124:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Gating Function of the slice, by configuring CC4yCMC.GATES bit.\n\n
1125:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Gating function is mapped with one of the 3 events.  A CCU4 slice can use an input signal that w
1126:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * operate as counter gating. If the configured Active level is detected the counter will gate all 
1127:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1128:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1129:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1130:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1131:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1132:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1133:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1134:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1135:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the Capture-0 Function
1136:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1137:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1138:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1139:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1140:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Capture-0 Function of the slice, by configuring CC4yCMC.CAP0S bit.\n\n
1141:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Capture function is mapped with one of the 3 events.  A CCU4 slice can be configured into captur
1142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * with the selected \b event. In this mode the CCU4 will capture the timer value into CC4yC0V and 
1143:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1144:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1145:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1146:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1147:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_Capture0Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
1148:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1149:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1150:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1151:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the Capture-1 Function
1152:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1153:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1154:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1155:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1156:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Capture-1 Function of the slice, by configuring CC4yCMC.CAP1S bit.\n\n
1157:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Capture function is mapped with one of the 3 events. A CCU4 slice can be configured into capture
1158:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * mode with the selected \b event. In this mode the CCU4 will capture the timer value into CC4yC2V
1159:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1160:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1161:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1162:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1163:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_Capture1Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
1164:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1165:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1166:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1167:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1168:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    bool would return true if the extended capture read back mode is enabled<BR>
1169:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1170:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1171:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Checks if Extended capture mode read is enabled for particular slice or not, by reading CC4yTC.E
1172:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * In this mode the there is only one associated read address for all the capture registers.
1173:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Individual capture registers can still be accessed in this mode.
1174:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1175:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1176:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_GetCapturedValueFromFifo().
1177:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1178:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_SLICE_IsExtendedCapReadEnabled(const XMC_CCU4_SLICE_t *const slice)
1179:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1180:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_IsExtendedCapReadEnabled:Invalid Module Pointer", XMC_CCU4_IsValidSlic
1181:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((bool)((slice->TC & (uint32_t) CCU4_CC4_TC_ECM_Msk) == (uint32_t)CCU4_CC4_TC_ECM_Msk));
1182:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1183:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1184:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU4V1) /* Defined for XMC4500, XMC4400, XMC4200, XMC4100 devices only */
1185:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1186:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
1187:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice_number to check whether read value belongs to required slice or not
1188:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1189:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   int32_t   Returns -1 if the FIFO value being retrieved is not from the \b slice_number.
1190:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *             Returns the value captured in the \b slice_number, if captured value is from the cor
1191:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                     Range: [0x0 to 0xFFFF]
1192:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1193:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1194:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Read captured value from FIFO(ECRD register).\n\n
1195:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1196:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1197:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1198:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * derived/inferred from the captured values.
1199:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1200:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1201:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_IsExtendedCapReadEnabled().
1202:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  @note Only available for XMC4500, XMC4400, XMC4200 and XMC4100 series 
1203:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1204:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** int32_t XMC_CCU4_GetCapturedValueFromFifo(const XMC_CCU4_MODULE_t *const module, const uint8_t slic
1205:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #else
1206:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1207:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1208:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param set The capture register set from which the captured value is to be retrieved
1209:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1210:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    uint32_t Returns the value captured in the \b slice_number
1211:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *             Range: [0x0 to 0xFFFF]
1212:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1213:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1214:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Read captured value from FIFO(CC4yECRD0 and CC4yECRD1).\n\n
1215:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1216:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1217:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1218:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * derived/inferred from the captured values.
1219:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1220:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1221:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_IsExtendedCapReadEnabled().
1222:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @note Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices only. For other d
1223:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1224:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** uint32_t XMC_CCU4_SLICE_GetCapturedValueFromFifo(const XMC_CCU4_SLICE_t *const slice,
1225:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 		                                             const XMC_CCU4_SLICE_CAP_REG_SET_t set);
1226:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
1227:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1228:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1229:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1230:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Count Direction Function
1231:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1232:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1233:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1234:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1235:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Count Direction of the slice, by configuring CC4yCMC.UDS bit.\n\n
1236:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Count direction function is mapped with one of the 3 events. A slice can be configured to change
1237:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yTIMER count direction depending on an external signal.
1238:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1239:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1240:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1241:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1242:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t eve
1243:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1244:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1245:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1246:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1247:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1248:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1249:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1250:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the status bit override Function of the slice, by configuring CC4yCMC.OFS bit.\n\n
1251:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Status bit override function is mapped with one of the 3 events. A slice can be configured to ch
1252:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * output of the timer's CC4yST signal depending on an external signal. 
1253:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1254:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1255:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent().
1256:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1257:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice);
1258:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1259:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1260:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1261:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param exit_mode How should a previously logged trap state be exited?
1262:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param synch_with_pwm Should exit of trap state be synchronized with PWM cycle start?
1263:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1264:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1265:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1266:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1267:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Trap Function of the slice, by configuring CC4yCMC.TS, CC4yTC.TRPSE, and CC4yTC.T
1268:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Trap function is mapped with Event-2. Criteria for exiting the trap state is configured.
1269:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This trap function allows PWM outputs to react on the state of an input pin.
1270:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Thus PWM output can be forced to inactive state upon detection of a trap.
1271:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is also possible to synchronize the trap function with the PWM signal using the \b synch_with
1272:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1273:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1274:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1275:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1276:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
1277:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
1278:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                bool synch_with_pwm);
1279:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1280:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1281:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1282:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1283:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param ev1_config Pointer to event 1 configuration data
1284:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param ev2_config Pointer to event 2 configuration data
1285:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1286:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1287:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1288:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1289:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1290:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Map Status bit override function with an Event1 & Event 2 of the slice and configure CC4yINS reg
1291:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Details such as the input mapped to the event, event detection criteria and Low Pass filter opti
1292:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * by this routine for the events 1 & 2.  Event-1 input would be the trigger to override the value.
1293:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Event-2 input would be the override value.
1294:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1295:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1296:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig().
1297:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1298:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
1299:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_
1300:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_
1301:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1302:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1303:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1304:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event The External Event which needs to be configured.
1305:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param config Pointer to event configuration data.
1306:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1307:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1308:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1309:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1310:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures an External Event of the slice, by updating CC4yINS register .\n\n
1311:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Details such as the input mapped to the event, event detection criteria and low pass filter
1312:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * options are programmed by this routine. The Event \b config  will configure the input selection,
1313:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the edge selection, the level selection and the Low pass filter for the  event.
1314:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1315:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1316:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_LoadConfig()<BR
1317:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ModulationConfig()<BR> XMC_CCU4_SLICE_CountConfig()<BR> XMC_CCU4_SLICE_GateConfi
1318:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config()<BR> XMC_CCU4_SLICE_Directio
1319:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig()<BR> XMC_CCU4_SLICE_TrapConfig().
1320:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1321:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
1322:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                    const XMC_CCU4_SLICE_EVENT_t event,
1323:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config);
1324:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1325:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1326:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1327:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event The External Event which needs to be configured.
1328:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param input One of the 16 inputs meant to be mapped to the desired event
1329:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1330:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1331:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1332:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1333:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1334:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Selects an input for an external event, by configuring CC4yINS register.\n\n
1335:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is possible to select one of the possible 16 input signals for a given Event.
1336:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This configures the CC4yINS.EVxIS for the selected event.
1337:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1338:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1339:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_LoadConfig()<BR
1340:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ModulationConfig()<BR> XMC_CCU4_SLICE_CountConfig()<BR> XMC_CCU4_SLICE_GateConfi
1341:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config()<BR> XMC_CCU4_SLICE_Directio
1342:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig()<BR> XMC_CCU4_SLICE_TrapConfig().
1343:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1344:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetInput(XMC_CCU4_SLICE_t *const slice,
1345:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                              const XMC_CCU4_SLICE_EVENT_t event,
1346:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                              const XMC_CCU4_SLICE_INPUT_t input);
1347:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1348:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1349:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1350:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1351:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1352:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1353:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1354:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the trap feature, by setting CC4yTC.TRAPE0, CC4yTC.TRAPE1, CC4yTC.TRAPE2 and CC4yTC.TRAP
1355:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \a out_mask.\n\n
1356:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * A particularly useful feature where the PWM output can be forced inactive upon detection of a tr
1357:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * can be the output of a sensing element which has just detected an abnormal electrical condition.
1358:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1359:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1360:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_TrapConfig()<BR> XMC_CCU4_SLICE_DisableTrap()<BR> XMC_CCU4_SLICE_ConfigureEvent(
1361:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetInput().
1362:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1363:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_EnableTrap(XMC_CCU4_SLICE_t *const slice)
1364:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1365:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1366:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC |= (uint32_t) CCU4_CC4_TC_TRAPE_Msk;
1367:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1368:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1369:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1370:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1371:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1372:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1373:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1374:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1375:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the trap feature, by clearing CC4yTC.TRAPE0, CC4yTC.TRAPE1, CC4yTC.TRAPE2 and CC4yTC.TR
1376:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \a out_mask.\n\n.\n\n
1377:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This API will revert the changes done by XMC_CCU4_SLICE_EnableTrap().
1378:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This Ensures that the TRAP function has no effect on the output of the CCU4 slice.
1379:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1380:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1381:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableTrap().
1382:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1383:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableTrap(XMC_CCU4_SLICE_t *const slice)
1384:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1385:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1386:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC &= ~((uint32_t) CCU4_CC4_TC_TRAPE_Msk);
1387:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1388:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1389:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1390:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1391:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1392:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    bool returns \b true if the Timer is running else it returns \b false.
1393:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1394:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1395:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Returns the state of the timer (Either Running or stopped(idle)), by reading CC4yTCST.TRB bit.
1396:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1397:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1398:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
1399:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1400:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
1401:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1402:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1403:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
1404:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1405:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1406:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1407:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1408:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1409:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   ::XMC_CCU4_SLICE_TIMER_COUNT_DIR_t returns the direction in which the timer is counting.
1410:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1411:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1412:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Returns the timer counting direction, by reading CC4yTCST.CDIR bit.\n\n
1413:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This API will return the direction in which the timer is currently
1414:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * incrementing(XMC_CCU4_SLICE_TIMER_COUNT_DIR_UP) or decrementing (XMC_CCU4_SLICE_TIMER_COUNT_DIR_
1415:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1416:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1417:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  None.
1418:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1419:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_COUNT_DIR_t XMC_CCU4_SLICE_GetCountingDir(const XMC_CCU4_SLICE
1420:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1421:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetCountingDir:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1422:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_TIMER_COUNT_DIR_t)(((slice->TCST) & CCU4_CC4_TCST_CDIR_Msk) >> CCU4_CC4_TC
1423:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1424:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1425:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1426:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1427:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1428:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1429:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1430:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1431:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Starts the timer counting operation, by setting CC4yTCSET.TRBS bit.\n\n
1432:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is necessary to have configured the CC4 slice before starting its timer.
1433:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Before the Timer is started ensure that the clock is provided to the slice.
1434:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1435:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1436:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StopTimer().
1437:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1438:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
1439:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1440:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1441:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
1442:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1443:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1444:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1445:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1446:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1447:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1448:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1449:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1450:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stops the Timer.<BR>\n
1451:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Timer counting operation can be stopped by invoking this API, by setting CC4yTCCLR.TRBC bit.
1452:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1453:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1454:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1455:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1456:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
1457:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1458:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1459:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
1460:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1461:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1462:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1463:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1464:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1465:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1466:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1467:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1468:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Resets the timer count to zero, by setting CC4yTCCLR.TCC bit.\n\n
1469:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * A timer which has been stopped can still retain the last counted value.
1470:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * After invoking this API the timer value will be cleared.
1471:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1472:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1473:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1474:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1475:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
1476:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1477:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1478:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
1479:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1480:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1481:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1482:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1483:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1484:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1485:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1486:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1487:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stops and resets the timer count to zero, by setting CC4yTCCLR.TCC and CC4yTCCLR.TRBC bit.\n\n
1488:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1489:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1490:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1491:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1492:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StopClearTimer(XMC_CCU4_SLICE_t *const slice)
1493:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1494:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StopClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1495:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCCLR = CCU4_CC4_TCCLR_TRBC_Msk | CCU4_CC4_TCCLR_TCC_Msk;
1496:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1497:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1498:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1499:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1500:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1501:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    ::XMC_CCU4_SLICE_MODE_t returns XMC_CCU4_SLICE_MODE_COMPARE if the slice is operating in comp
1502:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                          returns XMC_CCU4_SLICE_MODE_CAPTURE if the slice is operating in captur
1503:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1504:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1505:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the current mode of operation in the slice (either Capture mode or Compare mode), by r
1506:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yTC.CMOD bit.\n\n
1507:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Ensure that before invoking this API the CCU4 slice should be configured otherwise the output of
1508:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * invalid.
1509:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1510:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1511:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  None.
1512:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1513:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_MODE_t XMC_CCU4_SLICE_GetSliceMode(const XMC_CCU4_SLICE_t *const sli
1514:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1515:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetSliceMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1516:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_MODE_t)(((slice->TC) & CCU4_CC4_TC_CMOD_Msk) >> CCU4_CC4_TC_CMOD_Pos));
1517:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1518:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1519:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1520:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mode Desired repetition mode (Either single shot or Continuous)
1521:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1522:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1523:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1524:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1525:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Timer to either Single shot mode or continuous mode, by configuring CC4yTC.TSSM b
1526:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The timer will count up to the terminal count as specified in the period register and stops imme
1527:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * mode has been set to single shot. In the continuous mode of operation, the timer starts counting
1528:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * reaching the terminal count.
1529:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1530:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1531:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerRepeatMode().
1532:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1533:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetTimerRepeatMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_RE
1534:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1535:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1536:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1537:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <br>
1538:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  ::XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t returns XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT if continu
1539:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                     returns XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE if single sh
1540:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1541:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1542:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the Timer repeat mode, either Single shot mode or continuous mode, by reading CC4yTC.T
1543:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The timer will count up to the terminal count as specified in the period register and stops imme
1544:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * mode has been set to single shot mode. In the continuous mode of operation, the timer starts cou
1545:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * all over again after reaching the terminal count.
1546:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1547:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1548:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerRepeatMode().
1549:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1550:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t XMC_CCU4_SLICE_GetTimerRepeatMode(
1551:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 		                                                                            const XMC_CCU4_SLICE_
1552:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1553:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice
1554:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t)(((slice->TC) & CCU4_CC4_TC_TSSM_Msk) >> CCU4_CC4_TC_T
1555:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1556:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1557:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1558:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mode Desired counting mode (Either Edge Aligned or Center Aligned)
1559:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1560:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1561:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1562:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1563:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the timer counting mode either Edge Aligned or Center Aligned, by configuring CC4yTC.
1564:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * In the edge aligned mode, the timer counts from 0 to the terminal count. Once the timer count ha
1565:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * compare value, the timer status output asserts itself. It will now deassert only after the timer
1566:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * terminal count.\n In the center aligned mode, the timer first counts from 0 to the terminal coun
1567:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * During this upward and downward counting, the timer status output stays asserted as long as the 
1568:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * greater than the compare value.
1569:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1570:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1571:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerCountingMode().
1572:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1573:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetTimerCountingMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_
1574:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1575:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1576:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1577:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <br>
1578:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  ::XMC_CCU4_SLICE_TIMER_COUNT_MODE_t returns XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA if edge aligned 
1579:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                     returns XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA if center aligned
1580:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1581:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1582:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves timer counting mode either Edge aligned or Center Aligned, by reading CC4yTC.TCM bit.\
1583:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1584:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1585:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerCountingMode().
1586:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1587:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_COUNT_MODE_t XMC_CCU4_SLICE_GetTimerCountingMode(
1588:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 		                                                                           const XMC_CCU4_SLICE_t
1589:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1590:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerCountingMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1591:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_TIMER_COUNT_MODE_t)(((slice->TC) & CCU4_CC4_TC_TCM_Msk) >> CCU4_CC4_TC_TCM
1592:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1593:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1594:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1595:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param period_val Timer period value
1596:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *        Range: [0x0 to 0xFFFF]
1597:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1598:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1599:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1600:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1601:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Programs the timer period, by writing CC4yPRS register.\n\n
1602:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The frequency of counting/ PWM frequency is determined by this value. The period value is writte
1603:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * register. Explicitly enable the shadow transfer for the the period value by calling
1604:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableShadowTransfer() with appropriate mask. If shadow transfer is enabled and the tim
1605:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * a period match transfers the value from the shadow register to the actual period register.
1606:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1607:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1608:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
1609:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1610:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16
1611:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1612:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slic
1613:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->PRS = (uint32_t) period_val;
1614:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1615:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1616:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1617:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1618:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1619:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   uint16_t returns the current timer period value
1620:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *            Range: [0x0 to 0xFFFF]
1621:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1622:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1623:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the timer period value currently effective, by reading CC4yPR register.\n\n
1624:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * If the timer is active then the value being returned is currently being used for the PWM period.
1625:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1626:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1627:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The XMC_CCU4_SLICE_SetTimerPeriodMatch() would set the new period value to a shadow register.
1628:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This would only transfer the new values into the actual period register if the shadow transfer r
1629:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU4_SLICE_GetTimerPeri
1630:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * would not reflect the new values until the shadow transfer completes.
1631:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1632:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1633:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerPeriodMatch().
1634:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1635:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerPeriodMatch(const XMC_CCU4_SLICE_t *const slice)
1636:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1637:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slic
1638:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((uint16_t)slice->PR);
1639:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1640:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1641:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1642:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1643:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param compare_val Timer compare value
1644:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1645:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1646:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1647:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1648:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Programs the timer compare value, by writing CC4yCRS register.<BR>\n
1649:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  The PWM duty cycle is determined by this value.
1650:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
1651:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the the period/compare value by calling XMC_CCU4_EnableShadowTransfer() with
1652:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * appropriate mask.If shadow transfer is enabled and the timer is running,
1653:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * a period match transfers the value from the shadow register to the actual compare register.
1654:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1655:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1656:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
1657:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1658:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint1
1659:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1660:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1661:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->CRS = (uint32_t) compare_val;
1662:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1663:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1664:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1665:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1666:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1667:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   uint16_t returns the current timer compare value
1668:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *            Range: [0x0 to 0xFFFF]
1669:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1670:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1671:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the timer compare value currently effective, by reading CC4yCRS register.\n\n
1672:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * If the timer is active then the value being returned is currently being for the PWM duty cycle( 
1673:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1674:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1675:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The XMC_CCU4_SLICE_SetTimerCompareMatch() would set the new compare value to a shadow register.
1676:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This would only transfer the new values into the actual compare register if the shadow transfer 
1677:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU4_SLICE_GetTimerComp
1678:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * would not reflect the new values until the shadow transfer completes.
1679:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Directly accessed Register is CC4yCR.
1680:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1681:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1682:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerCompareMatch().
1683:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1684:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerCompareMatch(const XMC_CCU4_SLICE_t *const slice)
1685:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1686:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1687:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((uint16_t)slice->CR);
1688:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1689:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1690:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1691:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
1692:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param shadow_transfer_msk Shadow transfer request mask for various transfers.
1693:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                             Use ::XMC_CCU4_SHADOW_TRANSFER_t enum items to create a mask of choi
1694:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                              using a bit wise OR operation.
1695:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1696:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1697:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1698:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1699:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Requests of shadow transfer for Period, Compare, Passive level, dither and prescaler, by configu
1700:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the GCSS register.\n\n
1701:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The transfer from the shadow registers to the actual registers is done in the immediate next occ
1702:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * shadow transfer trigger after the API is called.
1703:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1704:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Any call to XMC_CCU4_SLICE_SetTimerPeriodMatch()<BR> XMC_CCU4_SLICE_SetTimerCompareMatch()<BR>
1705:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_SetPrescaler()<BR> XMC_CCU4_SLICE_CompareInit()<BR> XMC_CCU4_SLICE_CaptureInit().
1706:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * must be succeeded by this API.
1707:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Directly accessed Register is GCSS.
1708:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1709:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1710:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  None.
1711:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1712:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t 
1713:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1714:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module))
1715:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GCSS = (uint32_t)shadow_transfer_msk;  
1716:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1717:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1718:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1719:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1720:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1721:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   uint16_t returns the current timer value
1722:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *            Range: [0x0 to 0xFFFF]
1723:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1724:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1725:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the latest timer value, from CC4yTIMER register.\n\n
1726:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1727:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1728:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerValue().
1729:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1730:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerValue(const XMC_CCU4_SLICE_t *const slice)
1731:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1732:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1733:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((uint16_t)slice->TIMER);
1734:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1735:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1736:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1737:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param timer_val The new timer value that has to be loaded into the TIMER register.
1738:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                  Range: [0x0 to 0xFFFF]
1739:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1740:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1741:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1742:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1743:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Loads a new timer value, by setting CC4yTIMER register.\n\n
1744:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1745:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1746:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Request to load is ignored if the timer is running.
1747:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1748:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1749:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerValue().
1750:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1751:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetTimerValue(XMC_CCU4_SLICE_t *const slice, const uint16_t tim
1752:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1753:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1754:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TIMER = (uint32_t) timer_val;
1755:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1756:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1757:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1758:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param period_dither Boolean instruction on dithering of period match
1759:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param duty_dither Boolean instruction on dithering of compare match
1760:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param spread Dither compare value
1761:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1762:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1763:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1764:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1765:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables dithering of PWM frequency and duty cycle, by configuring CC4yTC.DITHE and CC4yDITS bits
1766:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Some control loops are slow in updating PWM frequency and duty cycle. In such a case, a Bresenha
1767:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * can help reduce long term errors. Dithering can be applied to period and duty individually,
1768:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * this can be selected using the parameter \b period_dither and \b duty_dither.
1769:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The \b spread would provide the dither compare value. If the dither counter value is less than t
1770:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the period/compare values would be dithered according to the dither mode selected. This API woul
1771:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_SetDitherCompareValue().
1772:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1773:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1774:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * After this API call, XMC_CCU4_EnableShadowTransfer() has to be called with appropriate mask
1775:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * to transfer the dither value.
1776:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1777:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1778:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_DisableDithering().
1779:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1780:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_EnableDithering(XMC_CCU4_SLICE_t *const slice,
1781:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                     const bool period_dither,
1782:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                     const bool duty_dither,
1783:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****                                     const uint8_t spread);
1784:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1785:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1786:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1787:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1788:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1789:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1790:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1791:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables dithering of PWM frequency and duty cycle, by clearing CC4yTC.DITHE bits.\n\n
1792:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This disables the Dither mode that was set in XMC_CCU4_SLICE_EnableDithering().
1793:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This API will not clear the dither compare value.
1794:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1795:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1796:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableDithering().
1797:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1798:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableDithering(XMC_CCU4_SLICE_t *const slice)
1799:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1800:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableDithering:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice))
1801:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC &= ~((uint32_t) CCU4_CC4_TC_DITHE_Msk);
1802:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1803:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1804:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1805:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1806:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1807:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1808:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1809:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1810:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the floating prescaler, by setting CC4yTC.FPE bit.\n\n
1811:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The prescaler divider starts with an initial value and increments upon every period match. It ke
1812:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * until a ceiling (prescaler compare value) is hit and thereafter rolls back to the original presc
1813:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is necessary to have programmed an initial divider value and a compare value before the featu
1814:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1815:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1816:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetFloatingPrescalerCompareValue()<BR> XMC_CCU4_SLICE_DisableFloatingPrescaler()
1817:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetPrescaler().
1818:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1819:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_EnableFloatingPrescaler(XMC_CCU4_SLICE_t *const slice)
1820:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1821:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(
1822:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC |= (uint32_t) CCU4_CC4_TC_FPE_Msk;
1823:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1824:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1825:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1826:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1827:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1828:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1829:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1830:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1831:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the floating prescaler, by clearing CC4yTC.FPE bit.\n\n
1832:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This would return the prescaler to the normal mode.
1833:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The prescaler that would be applied is the value present in CC4yPSC.
1834:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1835:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   * \par<b>Related APIs:</b><br>
1836:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableFloatingPrescaler().
1837:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1838:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableFloatingPrescaler(XMC_CCU4_SLICE_t *const slice)
1839:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1840:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice
1841:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC &= ~((uint32_t) CCU4_CC4_TC_FPE_Msk);
1842:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1843:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1844:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1845:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1846:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param comp_val Dither compare value
1847:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                 Range: [0x0 to 0xF]
1848:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1849:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1850:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1851:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1852:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Sets the dither spread/compare value, by setting CC4yDITS.DCVS bits.\n\n
1853:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This value is the cornerstone of PWM dithering feature. Dithering is applied/done when the value
1854:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * dithering counter is less than this compare/spread value. For all dithering counter values great
1855:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the spread value, there is no dithering. After setting the value XMC_CCU4_EnableShadowTransfer()
1856:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  * called with appropriate mask.
1857:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1858:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   * \par<b>Related APIs:</b><br>
1859:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableDithering().
1860:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1861:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetDitherCompareValue(XMC_CCU4_SLICE_t *const slice, const uint
1862:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** {
  62              	 .loc 1 1862 0
  63              	 .cfi_startproc
  64 0000 80B5     	 push {r7,lr}
  65              	.LCFI3:
  66              	 .cfi_def_cfa_offset 8
  67              	 .cfi_offset 7,-8
  68              	 .cfi_offset 14,-4
  69 0002 82B0     	 sub sp,sp,#8
  70              	.LCFI4:
  71              	 .cfi_def_cfa_offset 16
  72 0004 00AF     	 add r7,sp,#0
  73              	.LCFI5:
  74              	 .cfi_def_cfa_register 7
  75 0006 7860     	 str r0,[r7,#4]
  76 0008 0A1C     	 mov r2,r1
  77 000a FB1C     	 add r3,r7,#3
  78 000c 1A70     	 strb r2,[r3]
1863:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetDitherCompareValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sl
1864:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->DITS = comp_val;
  79              	 .loc 1 1864 0
  80 000e FB1C     	 add r3,r7,#3
  81 0010 1A78     	 ldrb r2,[r3]
  82 0012 7B68     	 ldr r3,[r7,#4]
  83 0014 1A62     	 str r2,[r3,#32]
1865:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_ccu4.h **** }
  84              	 .loc 1 1865 0
  85 0016 BD46     	 mov sp,r7
  86 0018 02B0     	 add sp,sp,#8
  87              	 
  88 001a 80BD     	 pop {r7,pc}
  89              	 .cfi_endproc
  90              	.LFE71:
  92              	 .section .text.XMC_CCU4_lGateClock,"ax",%progbits
  93              	 .align 2
  94              	 .code 16
  95              	 .thumb_func
  97              	XMC_CCU4_lGateClock:
  98              	.LFB109:
  99              	 .file 2 "../Libraries/XMCLib/src/xmc_ccu4.c"
   1:../Libraries/XMCLib/src/xmc_ccu4.c **** /**
   2:../Libraries/XMCLib/src/xmc_ccu4.c ****  * @file xmc_ccu4.c
   3:../Libraries/XMCLib/src/xmc_ccu4.c ****  * @date 2017-04-27
   4:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
   5:../Libraries/XMCLib/src/xmc_ccu4.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_ccu4.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_ccu4.c ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
   9:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_ccu4.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_ccu4.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_ccu4.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_ccu4.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_ccu4.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 
  18:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_ccu4.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 
  21:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_ccu4.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_ccu4.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_ccu4.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_ccu4.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_ccu4.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_ccu4.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_ccu4.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_ccu4.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_ccu4.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_ccu4.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_ccu4.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_ccu4.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  36:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_ccu4.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  39:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  42:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2015-06-20:
  43:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - Removed definition of GetDriverVersion API <br>
  44:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  45:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2015-07-01:
  46:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - In XMC_CCU4_SLICE_StartConfig(), Options in XMC_ASSERT check for start mode is corrected. 
  47:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  48:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2015-07-24:
  49:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent() is updated to support XMC14 device. <br>
  50:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  51:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2015-08-17:
  52:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - Start of prescaler XMC_CCU4_StartPrescaler() is invoked in XMC_CCU4_Init() API. <br>
  53:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - Bug fix XMC_CCU4_SLICE_ConfigureEvent() during the level setting for XMC14 devices. <br>
  54:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - XMC_CCU4_EnableShadowTransfer() definition is removed, since the API is made as inline. <b
  55:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  56:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2015-10-07:
  57:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - XMC_CCU4_SLICE_GetEvent() is made as inline.
  58:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - DOC updates for the newly added APIs.
  59:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  60:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2017-02-25:
  61:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - XMC_CCU4_lAssertReset(), XMC_CCU4_lDeassertReset(), XMC_CCU4_lGateClock() and XMC_CCU4_lUn
  62:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  63:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2017-04-27:
  64:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - XMC_CCU4_SLICE_SetPrescaler() changed div_val parameter to type XMC_CCU4_SLICE_PRESCALER_t
  65:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  66:../Libraries/XMCLib/src/xmc_ccu4.c ****  * @endcond
  67:../Libraries/XMCLib/src/xmc_ccu4.c ****  */
  68:../Libraries/XMCLib/src/xmc_ccu4.c ****  
  69:../Libraries/XMCLib/src/xmc_ccu4.c **** /**************************************************************************************************
  70:../Libraries/XMCLib/src/xmc_ccu4.c ****  * HEADER FILES
  71:../Libraries/XMCLib/src/xmc_ccu4.c ****  **************************************************************************************************
  72:../Libraries/XMCLib/src/xmc_ccu4.c **** #include "xmc_ccu4.h"
  73:../Libraries/XMCLib/src/xmc_ccu4.c **** 
  74:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU40)
  75:../Libraries/XMCLib/src/xmc_ccu4.c **** #include "xmc_scu.h"
  76:../Libraries/XMCLib/src/xmc_ccu4.c **** /**************************************************************************************************
  77:../Libraries/XMCLib/src/xmc_ccu4.c ****  * MACROS
  78:../Libraries/XMCLib/src/xmc_ccu4.c ****  **************************************************************************************************
  79:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_NUM_SLICES_PER_MODULE          (4U)
  80:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_DITHER_PERIOD_MASK       (1U)
  81:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_DITHER_DUTYCYCLE_MASK    (2U)
  82:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK   (3U)
  83:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK  (1U)
  84:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK (3U)
  85:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU4V3) /* Defined for XMC1400 devices only */
  86:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK  CCU4_CC4_INS1_EV0IS_Msk
  87:../Libraries/XMCLib/src/xmc_ccu4.c **** #else
  88:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK  CCU4_CC4_INS_EV0IS_Msk
  89:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
  90:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_GIDLC_CLOCK_MASK               (15U)
  91:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_GCSS_SLICE0_MASK               (1U)
  92:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_GCSS_SLICE1_MASK               (16U)
  93:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_GCSS_SLICE2_MASK               (256U)
  94:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_GCSS_SLICE3_MASK               (4096U)
  95:../Libraries/XMCLib/src/xmc_ccu4.c **** 
  96:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro to check if the clock selected enum passed is valid */
  97:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_CHECK_CLOCK(clock) \
  98:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((clock == XMC_CCU4_CLOCK_SCU)        || \
  99:../Libraries/XMCLib/src/xmc_ccu4.c ****      (clock == XMC_CCU4_CLOCK_EXTERNAL_A) || \
 100:../Libraries/XMCLib/src/xmc_ccu4.c ****      (clock == XMC_CCU4_CLOCK_EXTERNAL_B) || \
 101:../Libraries/XMCLib/src/xmc_ccu4.c ****      (clock == XMC_CCU4_CLOCK_EXTERNAL_C))
 102:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 103:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro used to check if the event ID is valid*/
 104:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_CHECK_EVENT_ID(event_id) \
 105:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((event_id == XMC_CCU4_SLICE_EVENT_NONE)|| \
 106:../Libraries/XMCLib/src/xmc_ccu4.c ****      (event_id == XMC_CCU4_SLICE_EVENT_0)   || \
 107:../Libraries/XMCLib/src/xmc_ccu4.c ****      (event_id == XMC_CCU4_SLICE_EVENT_1)   || \
 108:../Libraries/XMCLib/src/xmc_ccu4.c ****      (event_id == XMC_CCU4_SLICE_EVENT_2))
 109:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 110:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro used to check if the edge sensitivity is valid*/
 111:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_CHECK_EDGE_SENSITIVITY(edge) \
 112:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((edge == XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_NONE)        || \
 113:../Libraries/XMCLib/src/xmc_ccu4.c ****      (edge == XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE) || \
 114:../Libraries/XMCLib/src/xmc_ccu4.c ****      (edge == XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_FALLING_EDGE)|| \
 115:../Libraries/XMCLib/src/xmc_ccu4.c ****      (edge == XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_DUAL_EDGE))
 116:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 117:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro used to check if the filter clock cycles are valid */
 118:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_CHECK_EVENT_FILTER(cycles) \
 119:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((cycles == XMC_CCU4_SLICE_EVENT_FILTER_DISABLED) || \
 120:../Libraries/XMCLib/src/xmc_ccu4.c ****      (cycles == XMC_CCU4_SLICE_EVENT_FILTER_3_CYCLES) || \
 121:../Libraries/XMCLib/src/xmc_ccu4.c ****      (cycles == XMC_CCU4_SLICE_EVENT_FILTER_5_CYCLES) || \
 122:../Libraries/XMCLib/src/xmc_ccu4.c ****      (cycles == XMC_CCU4_SLICE_EVENT_FILTER_7_CYCLES))
 123:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 124:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro used to check if the Multi-channel input related action is valid*/
 125:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action) \
 126:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((mcs_action == XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR)      || \
 127:../Libraries/XMCLib/src/xmc_ccu4.c ****      (mcs_action == XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP) || \
 128:../Libraries/XMCLib/src/xmc_ccu4.c ****      (mcs_action == XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP_DIT))
 129:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 130:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro used to check if the SR line is valid*/
 131:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_CHECK_SR_ID(id) \
 132:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((id == XMC_CCU4_SLICE_SR_ID_0) || \
 133:../Libraries/XMCLib/src/xmc_ccu4.c ****      (id == XMC_CCU4_SLICE_SR_ID_1) || \
 134:../Libraries/XMCLib/src/xmc_ccu4.c ****      (id == XMC_CCU4_SLICE_SR_ID_2) || \
 135:../Libraries/XMCLib/src/xmc_ccu4.c ****      (id == XMC_CCU4_SLICE_SR_ID_3))
 136:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 137:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro to check if the end mode enum passed is valid */
 138:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_CHECK_END_MODE(end_mode) \
 139:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((end_mode == XMC_CCU4_SLICE_END_MODE_TIMER_STOP) || \
 140:../Libraries/XMCLib/src/xmc_ccu4.c ****      (end_mode == XMC_CCU4_SLICE_END_MODE_TIMER_CLEAR) || \
 141:../Libraries/XMCLib/src/xmc_ccu4.c ****      (end_mode == XMC_CCU4_SLICE_END_MODE_TIMER_STOP_CLEAR))
 142:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 143:../Libraries/XMCLib/src/xmc_ccu4.c **** /**************************************************************************************************
 144:../Libraries/XMCLib/src/xmc_ccu4.c ****  * LOCAL ROUTINES
 145:../Libraries/XMCLib/src/xmc_ccu4.c ****  **************************************************************************************************
 146:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 147:../Libraries/XMCLib/src/xmc_ccu4.c **** __STATIC_INLINE void XMC_CCU4_lAssertReset(const XMC_CCU4_MODULE_t *const module)
 148:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 149:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (module == CCU40)
 150:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 151:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 152:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 153:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU41)
 154:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU41)
 155:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 156:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 157:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 158:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 159:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU42)
 160:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU42)
 161:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 162:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 163:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 164:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 165:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU43)
 166:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU43)
 167:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 168:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 169:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 170:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 171:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 172:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 173:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
 174:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 175:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 176:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 177:../Libraries/XMCLib/src/xmc_ccu4.c **** __STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
 178:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 179:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (module == CCU40)
 180:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 181:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 182:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 183:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU41)
 184:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU41)
 185:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 186:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 187:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 188:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 189:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU42)
 190:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU42)
 191:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 192:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 193:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 194:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 195:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU43)
 196:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU43)
 197:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 198:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 199:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 200:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 201:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 202:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 203:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
 204:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 205:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 206:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 207:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 208:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CLOCK_GATING_SUPPORTED)
 209:../Libraries/XMCLib/src/xmc_ccu4.c **** __STATIC_INLINE void XMC_CCU4_lGateClock(const XMC_CCU4_MODULE_t *const module)
 210:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 100              	 .loc 2 210 0
 101              	 .cfi_startproc
 102 0000 80B5     	 push {r7,lr}
 103              	.LCFI6:
 104              	 .cfi_def_cfa_offset 8
 105              	 .cfi_offset 7,-8
 106              	 .cfi_offset 14,-4
 107 0002 82B0     	 sub sp,sp,#8
 108              	.LCFI7:
 109              	 .cfi_def_cfa_offset 16
 110 0004 00AF     	 add r7,sp,#0
 111              	.LCFI8:
 112              	 .cfi_def_cfa_register 7
 113 0006 7860     	 str r0,[r7,#4]
 211:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 212:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (module == CCU40)
 114              	 .loc 2 212 0
 115 0008 7B68     	 ldr r3,[r7,#4]
 116 000a 094A     	 ldr r2,.L6
 117 000c 9342     	 cmp r3,r2
 118 000e 03D1     	 bne .L4
 213:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 214:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 119              	 .loc 2 214 0
 120 0010 0420     	 mov r0,#4
 121 0012 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 122 0016 08E0     	 b .L3
 123              	.L4:
 215:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 216:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU41)
 217:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU41)
 124              	 .loc 2 217 0
 125 0018 7B68     	 ldr r3,[r7,#4]
 126 001a 064A     	 ldr r2,.L6+4
 127 001c 9342     	 cmp r3,r2
 128 001e 04D1     	 bne .L3
 218:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 219:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 129              	 .loc 2 219 0
 130 0020 8023     	 mov r3,#128
 131 0022 9B02     	 lsl r3,r3,#10
 132 0024 181C     	 mov r0,r3
 133 0026 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 134              	.L3:
 220:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 221:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 222:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU42)
 223:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU42)
 224:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 225:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 226:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 227:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 228:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU43)
 229:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU43)
 230:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 231:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 232:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 233:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 234:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 235:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 236:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
 237:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 238:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 135              	 .loc 2 238 0
 136 002a BD46     	 mov sp,r7
 137 002c 02B0     	 add sp,sp,#8
 138              	 
 139 002e 80BD     	 pop {r7,pc}
 140              	.L7:
 141              	 .align 2
 142              	.L6:
 143 0030 00000448 	 .word 1208221696
 144 0034 00400448 	 .word 1208238080
 145              	 .cfi_endproc
 146              	.LFE109:
 148              	 .section .text.XMC_CCU4_lUngateClock,"ax",%progbits
 149              	 .align 2
 150              	 .code 16
 151              	 .thumb_func
 153              	XMC_CCU4_lUngateClock:
 154              	.LFB110:
 239:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 240:../Libraries/XMCLib/src/xmc_ccu4.c **** __STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
 241:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 155              	 .loc 2 241 0
 156              	 .cfi_startproc
 157 0000 80B5     	 push {r7,lr}
 158              	.LCFI9:
 159              	 .cfi_def_cfa_offset 8
 160              	 .cfi_offset 7,-8
 161              	 .cfi_offset 14,-4
 162 0002 82B0     	 sub sp,sp,#8
 163              	.LCFI10:
 164              	 .cfi_def_cfa_offset 16
 165 0004 00AF     	 add r7,sp,#0
 166              	.LCFI11:
 167              	 .cfi_def_cfa_register 7
 168 0006 7860     	 str r0,[r7,#4]
 242:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (module == CCU40)
 169              	 .loc 2 242 0
 170 0008 7B68     	 ldr r3,[r7,#4]
 171 000a 094A     	 ldr r2,.L11
 172 000c 9342     	 cmp r3,r2
 173 000e 03D1     	 bne .L9
 243:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 244:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 174              	 .loc 2 244 0
 175 0010 0420     	 mov r0,#4
 176 0012 FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 177 0016 08E0     	 b .L8
 178              	.L9:
 245:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 246:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU41)
 247:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU41)
 179              	 .loc 2 247 0
 180 0018 7B68     	 ldr r3,[r7,#4]
 181 001a 064A     	 ldr r2,.L11+4
 182 001c 9342     	 cmp r3,r2
 183 001e 04D1     	 bne .L8
 248:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 249:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 184              	 .loc 2 249 0
 185 0020 8023     	 mov r3,#128
 186 0022 9B02     	 lsl r3,r3,#10
 187 0024 181C     	 mov r0,r3
 188 0026 FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 189              	.L8:
 250:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 251:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 252:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU42)
 253:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU42)
 254:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 255:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 256:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 257:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 258:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU43)
 259:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU43)
 260:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 261:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 262:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 263:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 264:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 265:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 266:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
 267:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 268:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 190              	 .loc 2 268 0
 191 002a BD46     	 mov sp,r7
 192 002c 02B0     	 add sp,sp,#8
 193              	 
 194 002e 80BD     	 pop {r7,pc}
 195              	.L12:
 196              	 .align 2
 197              	.L11:
 198 0030 00000448 	 .word 1208221696
 199 0034 00400448 	 .word 1208238080
 200              	 .cfi_endproc
 201              	.LFE110:
 203              	 .section .text.XMC_CCU4_EnableModule,"ax",%progbits
 204              	 .align 2
 205              	 .global XMC_CCU4_EnableModule
 206              	 .code 16
 207              	 .thumb_func
 209              	XMC_CCU4_EnableModule:
 210              	.LFB111:
 269:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 270:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 271:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined (XMC_ASSERT_ENABLE)
 272:../Libraries/XMCLib/src/xmc_ccu4.c **** __STATIC_INLINE bool XMC_CCU4_SLICE_IsInputvalid(XMC_CCU4_SLICE_INPUT_t input)
 273:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 274:../Libraries/XMCLib/src/xmc_ccu4.c **** #if (UC_SERIES == XMC14)
 275:../Libraries/XMCLib/src/xmc_ccu4.c ****   return (input < 48U);
 276:../Libraries/XMCLib/src/xmc_ccu4.c **** #else
 277:../Libraries/XMCLib/src/xmc_ccu4.c ****   return (input < 16U);
 278:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 279:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 280:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 281:../Libraries/XMCLib/src/xmc_ccu4.c **** /**************************************************************************************************
 282:../Libraries/XMCLib/src/xmc_ccu4.c ****  * API IMPLEMENTATION
 283:../Libraries/XMCLib/src/xmc_ccu4.c ****  **************************************************************************************************
 284:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 285:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
 286:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 211              	 .loc 2 286 0
 212              	 .cfi_startproc
 213 0000 80B5     	 push {r7,lr}
 214              	.LCFI12:
 215              	 .cfi_def_cfa_offset 8
 216              	 .cfi_offset 7,-8
 217              	 .cfi_offset 14,-4
 218 0002 82B0     	 sub sp,sp,#8
 219              	.LCFI13:
 220              	 .cfi_def_cfa_offset 16
 221 0004 00AF     	 add r7,sp,#0
 222              	.LCFI14:
 223              	 .cfi_def_cfa_register 7
 224 0006 7860     	 str r0,[r7,#4]
 287:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 288:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 289:../Libraries/XMCLib/src/xmc_ccu4.c **** #if UC_FAMILY == XMC4
 290:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Enable CCU4 module clock */
 291:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 292:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 293:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 294:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CLOCK_GATING_SUPPORTED)
 295:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_lUngateClock(module);
 225              	 .loc 2 295 0
 226 0008 7B68     	 ldr r3,[r7,#4]
 227 000a 181C     	 mov r0,r3
 228 000c FFF7FEFF 	 bl XMC_CCU4_lUngateClock
 296:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 297:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 298:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 299:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_lDeassertReset(module);
 300:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 301:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 229              	 .loc 2 301 0
 230 0010 BD46     	 mov sp,r7
 231 0012 02B0     	 add sp,sp,#8
 232              	 
 233 0014 80BD     	 pop {r7,pc}
 234              	 .cfi_endproc
 235              	.LFE111:
 237 0016 C046     	 .section .text.XMC_CCU4_DisableModule,"ax",%progbits
 238              	 .align 2
 239              	 .global XMC_CCU4_DisableModule
 240              	 .code 16
 241              	 .thumb_func
 243              	XMC_CCU4_DisableModule:
 244              	.LFB112:
 302:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 303:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_DisableModule(XMC_CCU4_MODULE_t *const module)
 304:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 245              	 .loc 2 304 0
 246              	 .cfi_startproc
 247 0000 80B5     	 push {r7,lr}
 248              	.LCFI15:
 249              	 .cfi_def_cfa_offset 8
 250              	 .cfi_offset 7,-8
 251              	 .cfi_offset 14,-4
 252 0002 82B0     	 sub sp,sp,#8
 253              	.LCFI16:
 254              	 .cfi_def_cfa_offset 16
 255 0004 00AF     	 add r7,sp,#0
 256              	.LCFI17:
 257              	 .cfi_def_cfa_register 7
 258 0006 7860     	 str r0,[r7,#4]
 305:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_DisableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 306:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 307:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 308:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_lAssertReset(module);
 309:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 310:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 311:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CLOCK_GATING_SUPPORTED)
 312:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_lGateClock(module);
 259              	 .loc 2 312 0
 260 0008 7B68     	 ldr r3,[r7,#4]
 261 000a 181C     	 mov r0,r3
 262 000c FFF7FEFF 	 bl XMC_CCU4_lGateClock
 313:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 314:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 263              	 .loc 2 314 0
 264 0010 BD46     	 mov sp,r7
 265 0012 02B0     	 add sp,sp,#8
 266              	 
 267 0014 80BD     	 pop {r7,pc}
 268              	 .cfi_endproc
 269              	.LFE112:
 271 0016 C046     	 .section .text.XMC_CCU4_Init,"ax",%progbits
 272              	 .align 2
 273              	 .global XMC_CCU4_Init
 274              	 .code 16
 275              	 .thumb_func
 277              	XMC_CCU4_Init:
 278              	.LFB113:
 315:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 316:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to initialize CCU4 global resources  */
 317:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
 318:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 279              	 .loc 2 318 0
 280              	 .cfi_startproc
 281 0000 80B5     	 push {r7,lr}
 282              	.LCFI18:
 283              	 .cfi_def_cfa_offset 8
 284              	 .cfi_offset 7,-8
 285              	 .cfi_offset 14,-4
 286 0002 84B0     	 sub sp,sp,#16
 287              	.LCFI19:
 288              	 .cfi_def_cfa_offset 24
 289 0004 00AF     	 add r7,sp,#0
 290              	.LCFI20:
 291              	 .cfi_def_cfa_register 7
 292 0006 7860     	 str r0,[r7,#4]
 293 0008 0A1C     	 mov r2,r1
 294 000a FB1C     	 add r3,r7,#3
 295 000c 1A70     	 strb r2,[r3]
 319:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t gctrl;
 320:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 321:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
 322:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));
 323:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 324:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Enable CCU4 module */
 325:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_EnableModule(module);
 296              	 .loc 2 325 0
 297 000e 7B68     	 ldr r3,[r7,#4]
 298 0010 181C     	 mov r0,r3
 299 0012 FFF7FEFF 	 bl XMC_CCU4_EnableModule
 326:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Start the prescaler */
 327:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_StartPrescaler(module);
 300              	 .loc 2 327 0
 301 0016 7B68     	 ldr r3,[r7,#4]
 302 0018 181C     	 mov r0,r3
 303 001a FFF7FEFF 	 bl XMC_CCU4_StartPrescaler
 328:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 329:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl = module->GCTRL;
 304              	 .loc 2 329 0
 305 001e 7B68     	 ldr r3,[r7,#4]
 306 0020 1B68     	 ldr r3,[r3]
 307 0022 FB60     	 str r3,[r7,#12]
 330:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 308              	 .loc 2 330 0
 309 0024 FB68     	 ldr r3,[r7,#12]
 310 0026 074A     	 ldr r2,.L16
 311 0028 1340     	 and r3,r2
 312 002a FB60     	 str r3,[r7,#12]
 331:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 313              	 .loc 2 331 0
 314 002c FB1C     	 add r3,r7,#3
 315 002e 1B78     	 ldrb r3,[r3]
 316 0030 9B03     	 lsl r3,r3,#14
 317 0032 FA68     	 ldr r2,[r7,#12]
 318 0034 1343     	 orr r3,r2
 319 0036 FB60     	 str r3,[r7,#12]
 332:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 333:../Libraries/XMCLib/src/xmc_ccu4.c ****   module->GCTRL = gctrl;
 320              	 .loc 2 333 0
 321 0038 7B68     	 ldr r3,[r7,#4]
 322 003a FA68     	 ldr r2,[r7,#12]
 323 003c 1A60     	 str r2,[r3]
 334:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 324              	 .loc 2 334 0
 325 003e BD46     	 mov sp,r7
 326 0040 04B0     	 add sp,sp,#16
 327              	 
 328 0042 80BD     	 pop {r7,pc}
 329              	.L17:
 330              	 .align 2
 331              	.L16:
 332 0044 FF3FFFFF 	 .word -49153
 333              	 .cfi_endproc
 334              	.LFE113:
 336              	 .section .text.XMC_CCU4_SetModuleClock,"ax",%progbits
 337              	 .align 2
 338              	 .global XMC_CCU4_SetModuleClock
 339              	 .code 16
 340              	 .thumb_func
 342              	XMC_CCU4_SetModuleClock:
 343              	.LFB114:
 335:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 336:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to select CCU4 module clock */
 337:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock)
 338:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 344              	 .loc 2 338 0
 345              	 .cfi_startproc
 346 0000 80B5     	 push {r7,lr}
 347              	.LCFI21:
 348              	 .cfi_def_cfa_offset 8
 349              	 .cfi_offset 7,-8
 350              	 .cfi_offset 14,-4
 351 0002 84B0     	 sub sp,sp,#16
 352              	.LCFI22:
 353              	 .cfi_def_cfa_offset 24
 354 0004 00AF     	 add r7,sp,#0
 355              	.LCFI23:
 356              	 .cfi_def_cfa_register 7
 357 0006 7860     	 str r0,[r7,#4]
 358 0008 0A1C     	 mov r2,r1
 359 000a FB1C     	 add r3,r7,#3
 360 000c 1A70     	 strb r2,[r3]
 339:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t gctrl;
 340:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 341:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 342:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Clock", XMC_CCU4_SLICE_CHECK_CLOCK(clock));
 343:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 344:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl = module->GCTRL;
 361              	 .loc 2 344 0
 362 000e 7B68     	 ldr r3,[r7,#4]
 363 0010 1B68     	 ldr r3,[r3]
 364 0012 FB60     	 str r3,[r7,#12]
 345:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl &= ~((uint32_t) CCU4_GCTRL_PCIS_Msk);
 365              	 .loc 2 345 0
 366 0014 FB68     	 ldr r3,[r7,#12]
 367 0016 3022     	 mov r2,#48
 368 0018 9343     	 bic r3,r2
 369 001a FB60     	 str r3,[r7,#12]
 346:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl |= ((uint32_t) clock) << CCU4_GCTRL_PCIS_Pos;
 370              	 .loc 2 346 0
 371 001c FB1C     	 add r3,r7,#3
 372 001e 1B78     	 ldrb r3,[r3]
 373 0020 1B01     	 lsl r3,r3,#4
 374 0022 FA68     	 ldr r2,[r7,#12]
 375 0024 1343     	 orr r3,r2
 376 0026 FB60     	 str r3,[r7,#12]
 347:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 348:../Libraries/XMCLib/src/xmc_ccu4.c ****   module->GCTRL = gctrl;
 377              	 .loc 2 348 0
 378 0028 7B68     	 ldr r3,[r7,#4]
 379 002a FA68     	 ldr r2,[r7,#12]
 380 002c 1A60     	 str r2,[r3]
 349:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 381              	 .loc 2 349 0
 382 002e BD46     	 mov sp,r7
 383 0030 04B0     	 add sp,sp,#16
 384              	 
 385 0032 80BD     	 pop {r7,pc}
 386              	 .cfi_endproc
 387              	.LFE114:
 389              	 .section .text.XMC_CCU4_SetMultiChannelShadowTransferMode,"ax",%progbits
 390              	 .align 2
 391              	 .global XMC_CCU4_SetMultiChannelShadowTransferMode
 392              	 .code 16
 393              	 .thumb_func
 395              	XMC_CCU4_SetMultiChannelShadowTransferMode:
 396              	.LFB115:
 350:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 351:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure the multichannel shadow transfer request via SW and via the CCU4x.MCSS input. *
 352:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SetMultiChannelShadowTransferMode(XMC_CCU4_MODULE_t *const module, const uint32_t sli
 353:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 397              	 .loc 2 353 0
 398              	 .cfi_startproc
 399 0000 80B5     	 push {r7,lr}
 400              	.LCFI24:
 401              	 .cfi_def_cfa_offset 8
 402              	 .cfi_offset 7,-8
 403              	 .cfi_offset 14,-4
 404 0002 84B0     	 sub sp,sp,#16
 405              	.LCFI25:
 406              	 .cfi_def_cfa_offset 24
 407 0004 00AF     	 add r7,sp,#0
 408              	.LCFI26:
 409              	 .cfi_def_cfa_register 7
 410 0006 7860     	 str r0,[r7,#4]
 411 0008 3960     	 str r1,[r7]
 354:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t gctrl;
 355:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 356:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU4_IsValidM
 357:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 358:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl = module->GCTRL;
 412              	 .loc 2 358 0
 413 000a 7B68     	 ldr r3,[r7,#4]
 414 000c 1B68     	 ldr r3,[r3]
 415 000e FB60     	 str r3,[r7,#12]
 359:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 416              	 .loc 2 359 0
 417 0010 3B68     	 ldr r3,[r7]
 418 0012 1B0C     	 lsr r3,r3,#16
 419 0014 DA43     	 mvn r2,r3
 420 0016 FB68     	 ldr r3,[r7,#12]
 421 0018 1340     	 and r3,r2
 422 001a FB60     	 str r3,[r7,#12]
 360:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 423              	 .loc 2 360 0
 424 001c 3B68     	 ldr r3,[r7]
 425 001e 1B04     	 lsl r3,r3,#16
 426 0020 1B0C     	 lsr r3,r3,#16
 427 0022 FA68     	 ldr r2,[r7,#12]
 428 0024 1343     	 orr r3,r2
 429 0026 FB60     	 str r3,[r7,#12]
 361:../Libraries/XMCLib/src/xmc_ccu4.c ****   module->GCTRL = gctrl;
 430              	 .loc 2 361 0
 431 0028 7B68     	 ldr r3,[r7,#4]
 432 002a FA68     	 ldr r2,[r7,#12]
 433 002c 1A60     	 str r2,[r3]
 362:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 434              	 .loc 2 362 0
 435 002e BD46     	 mov sp,r7
 436 0030 04B0     	 add sp,sp,#16
 437              	 
 438 0032 80BD     	 pop {r7,pc}
 439              	 .cfi_endproc
 440              	.LFE115:
 442              	 .section .text.XMC_CCU4_SLICE_CompareInit,"ax",%progbits
 443              	 .align 2
 444              	 .global XMC_CCU4_SLICE_CompareInit
 445              	 .code 16
 446              	 .thumb_func
 448              	XMC_CCU4_SLICE_CompareInit:
 449              	.LFB116:
 363:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 364:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure CC4 Slice as Timer */
 365:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
 366:../Libraries/XMCLib/src/xmc_ccu4.c ****                                 const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
 367:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 450              	 .loc 2 367 0
 451              	 .cfi_startproc
 452 0000 80B5     	 push {r7,lr}
 453              	.LCFI27:
 454              	 .cfi_def_cfa_offset 8
 455              	 .cfi_offset 7,-8
 456              	 .cfi_offset 14,-4
 457 0002 82B0     	 sub sp,sp,#8
 458              	.LCFI28:
 459              	 .cfi_def_cfa_offset 16
 460 0004 00AF     	 add r7,sp,#0
 461              	.LCFI29:
 462              	 .cfi_def_cfa_register 7
 463 0006 7860     	 str r0,[r7,#4]
 464 0008 3960     	 str r1,[r7]
 368:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 369:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
 370:../Libraries/XMCLib/src/xmc_ccu4.c ****              (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
 371:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 372:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program the timer mode */
 373:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = compare_init->tc;
 465              	 .loc 2 373 0
 466 000a 3B68     	 ldr r3,[r7]
 467 000c 1A68     	 ldr r2,[r3]
 468 000e 7B68     	 ldr r3,[r7,#4]
 469 0010 5A61     	 str r2,[r3,#20]
 374:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Enable the timer concatenation */
 375:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 470              	 .loc 2 375 0
 471 0012 3B68     	 ldr r3,[r7]
 472 0014 5B79     	 ldrb r3,[r3,#5]
 473 0016 9B06     	 lsl r3,r3,#26
 474 0018 DB0F     	 lsr r3,r3,#31
 475 001a DBB2     	 uxtb r3,r3
 476 001c 1A05     	 lsl r2,r3,#20
 477 001e 7B68     	 ldr r3,[r7,#4]
 478 0020 5A60     	 str r2,[r3,#4]
 376:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program initial prescaler divider value */
 377:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->PSC = (uint32_t) compare_init->prescaler_initval;
 479              	 .loc 2 377 0
 480 0022 3B68     	 ldr r3,[r7]
 481 0024 1B79     	 ldrb r3,[r3,#4]
 482 0026 1B07     	 lsl r3,r3,#28
 483 0028 1B0F     	 lsr r3,r3,#28
 484 002a DBB2     	 uxtb r3,r3
 485 002c 1A1C     	 mov r2,r3
 486 002e 7B68     	 ldr r3,[r7,#4]
 487 0030 5A62     	 str r2,[r3,#36]
 378:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program the dither compare value */
 379:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->DITS = (uint32_t) compare_init->dither_limit;
 488              	 .loc 2 379 0
 489 0032 3B68     	 ldr r3,[r7]
 490 0034 5B79     	 ldrb r3,[r3,#5]
 491 0036 1B07     	 lsl r3,r3,#28
 492 0038 1B0F     	 lsr r3,r3,#28
 493 003a DBB2     	 uxtb r3,r3
 494 003c 1A1C     	 mov r2,r3
 495 003e 7B68     	 ldr r3,[r7,#4]
 496 0040 1A62     	 str r2,[r3,#32]
 380:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program timer output passive level */
 381:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->PSL = (uint32_t) compare_init->passive_level;
 497              	 .loc 2 381 0
 498 0042 3B68     	 ldr r3,[r7]
 499 0044 5B79     	 ldrb r3,[r3,#5]
 500 0046 DB06     	 lsl r3,r3,#27
 501 0048 DB0F     	 lsr r3,r3,#31
 502 004a DBB2     	 uxtb r3,r3
 503 004c 1A1C     	 mov r2,r3
 504 004e 7B68     	 ldr r3,[r7,#4]
 505 0050 9A61     	 str r2,[r3,#24]
 382:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program floating prescaler compare value */
 383:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->FPCS = (uint32_t) compare_init->float_limit;
 506              	 .loc 2 383 0
 507 0052 3B68     	 ldr r3,[r7]
 508 0054 1B79     	 ldrb r3,[r3,#4]
 509 0056 1B06     	 lsl r3,r3,#24
 510 0058 1B0F     	 lsr r3,r3,#28
 511 005a DBB2     	 uxtb r3,r3
 512 005c 1A1C     	 mov r2,r3
 513 005e 7B68     	 ldr r3,[r7,#4]
 514 0060 DA62     	 str r2,[r3,#44]
 384:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 515              	 .loc 2 384 0
 516 0062 BD46     	 mov sp,r7
 517 0064 02B0     	 add sp,sp,#8
 518              	 
 519 0066 80BD     	 pop {r7,pc}
 520              	 .cfi_endproc
 521              	.LFE116:
 523              	 .section .text.XMC_CCU4_SLICE_CaptureInit,"ax",%progbits
 524              	 .align 2
 525              	 .global XMC_CCU4_SLICE_CaptureInit
 526              	 .code 16
 527              	 .thumb_func
 529              	XMC_CCU4_SLICE_CaptureInit:
 530              	.LFB117:
 385:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 386:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure CC4 Slice for Capture */
 387:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_CaptureInit(XMC_CCU4_SLICE_t *const slice,
 388:../Libraries/XMCLib/src/xmc_ccu4.c ****                             const XMC_CCU4_SLICE_CAPTURE_CONFIG_t *const capture_init)
 389:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 531              	 .loc 2 389 0
 532              	 .cfi_startproc
 533 0000 80B5     	 push {r7,lr}
 534              	.LCFI30:
 535              	 .cfi_def_cfa_offset 8
 536              	 .cfi_offset 7,-8
 537              	 .cfi_offset 14,-4
 538 0002 82B0     	 sub sp,sp,#8
 539              	.LCFI31:
 540              	 .cfi_def_cfa_offset 16
 541 0004 00AF     	 add r7,sp,#0
 542              	.LCFI32:
 543              	 .cfi_def_cfa_register 7
 544 0006 7860     	 str r0,[r7,#4]
 545 0008 3960     	 str r1,[r7]
 390:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 391:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Capture Init Pointer is NULL",
 392:../Libraries/XMCLib/src/xmc_ccu4.c ****              (XMC_CCU4_SLICE_CAPTURE_CONFIG_t *) NULL != capture_init);
 393:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 394:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program the capture mode */
 395:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = capture_init->tc;
 546              	 .loc 2 395 0
 547 000a 3B68     	 ldr r3,[r7]
 548 000c 1A68     	 ldr r2,[r3]
 549 000e 7B68     	 ldr r3,[r7,#4]
 550 0010 5A61     	 str r2,[r3,#20]
 396:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Enable the timer concatenation */
 397:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = ((uint32_t)capture_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 551              	 .loc 2 397 0
 552 0012 3B68     	 ldr r3,[r7]
 553 0014 5B79     	 ldrb r3,[r3,#5]
 554 0016 DB07     	 lsl r3,r3,#31
 555 0018 DB0F     	 lsr r3,r3,#31
 556 001a DBB2     	 uxtb r3,r3
 557 001c 1A05     	 lsl r2,r3,#20
 558 001e 7B68     	 ldr r3,[r7,#4]
 559 0020 5A60     	 str r2,[r3,#4]
 398:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program initial prescaler divider value */
 399:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->PSC = (uint32_t) capture_init->prescaler_initval;
 560              	 .loc 2 399 0
 561 0022 3B68     	 ldr r3,[r7]
 562 0024 1B79     	 ldrb r3,[r3,#4]
 563 0026 1B07     	 lsl r3,r3,#28
 564 0028 1B0F     	 lsr r3,r3,#28
 565 002a DBB2     	 uxtb r3,r3
 566 002c 1A1C     	 mov r2,r3
 567 002e 7B68     	 ldr r3,[r7,#4]
 568 0030 5A62     	 str r2,[r3,#36]
 400:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program initial floating prescaler compare value */
 401:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->FPCS = (uint32_t) capture_init->float_limit;
 569              	 .loc 2 401 0
 570 0032 3B68     	 ldr r3,[r7]
 571 0034 1B79     	 ldrb r3,[r3,#4]
 572 0036 1B06     	 lsl r3,r3,#24
 573 0038 1B0F     	 lsr r3,r3,#28
 574 003a DBB2     	 uxtb r3,r3
 575 003c 1A1C     	 mov r2,r3
 576 003e 7B68     	 ldr r3,[r7,#4]
 577 0040 DA62     	 str r2,[r3,#44]
 402:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 578              	 .loc 2 402 0
 579 0042 BD46     	 mov sp,r7
 580 0044 02B0     	 add sp,sp,#8
 581              	 
 582 0046 80BD     	 pop {r7,pc}
 583              	 .cfi_endproc
 584              	.LFE117:
 586              	 .section .text.XMC_CCU4_SLICE_StartConfig,"ax",%progbits
 587              	 .align 2
 588              	 .global XMC_CCU4_SLICE_StartConfig
 589              	 .code 16
 590              	 .thumb_func
 592              	XMC_CCU4_SLICE_StartConfig:
 593              	.LFB118:
 403:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 404:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 405:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure the Start trigger function of a slice */
 406:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
 407:../Libraries/XMCLib/src/xmc_ccu4.c ****                             const XMC_CCU4_SLICE_EVENT_t event,
 408:../Libraries/XMCLib/src/xmc_ccu4.c ****                                 const XMC_CCU4_SLICE_START_MODE_t start_mode)
 409:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 594              	 .loc 2 409 0
 595              	 .cfi_startproc
 596 0000 80B5     	 push {r7,lr}
 597              	.LCFI33:
 598              	 .cfi_def_cfa_offset 8
 599              	 .cfi_offset 7,-8
 600              	 .cfi_offset 14,-4
 601 0002 84B0     	 sub sp,sp,#16
 602              	.LCFI34:
 603              	 .cfi_def_cfa_offset 24
 604 0004 00AF     	 add r7,sp,#0
 605              	.LCFI35:
 606              	 .cfi_def_cfa_register 7
 607 0006 7860     	 str r0,[r7,#4]
 608 0008 081C     	 mov r0,r1
 609 000a 111C     	 mov r1,r2
 610 000c FB1C     	 add r3,r7,#3
 611 000e 021C     	 add r2,r0,#0
 612 0010 1A70     	 strb r2,[r3]
 613 0012 BB1C     	 add r3,r7,#2
 614 0014 0A1C     	 add r2,r1,#0
 615 0016 1A70     	 strb r2,[r3]
 410:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 411:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t tc;
 412:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 413:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 414:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
 415:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
 416:../Libraries/XMCLib/src/xmc_ccu4.c ****              ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
 417:../Libraries/XMCLib/src/xmc_ccu4.c ****               (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
 418:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First, Bind the event with the stop function */
 419:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 616              	 .loc 2 419 0
 617 0018 7B68     	 ldr r3,[r7,#4]
 618 001a 5B68     	 ldr r3,[r3,#4]
 619 001c BB60     	 str r3,[r7,#8]
 420:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
 620              	 .loc 2 420 0
 621 001e BB68     	 ldr r3,[r7,#8]
 622 0020 0322     	 mov r2,#3
 623 0022 9343     	 bic r3,r2
 624 0024 BB60     	 str r3,[r7,#8]
 421:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
 625              	 .loc 2 421 0
 626 0026 FB1C     	 add r3,r7,#3
 627 0028 1B78     	 ldrb r3,[r3]
 628 002a BA68     	 ldr r2,[r7,#8]
 629 002c 1343     	 orr r3,r2
 630 002e BB60     	 str r3,[r7,#8]
 422:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 423:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 631              	 .loc 2 423 0
 632 0030 7B68     	 ldr r3,[r7,#4]
 633 0032 BA68     	 ldr r2,[r7,#8]
 634 0034 5A60     	 str r2,[r3,#4]
 424:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 425:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc  = slice->TC;
 635              	 .loc 2 425 0
 636 0036 7B68     	 ldr r3,[r7,#4]
 637 0038 5B69     	 ldr r3,[r3,#20]
 638 003a FB60     	 str r3,[r7,#12]
 426:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, Configure the start mode */
 427:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
 639              	 .loc 2 427 0
 640 003c BB1C     	 add r3,r7,#2
 641 003e 1B78     	 ldrb r3,[r3]
 642 0040 012B     	 cmp r3,#1
 643 0042 05D1     	 bne .L23
 428:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 429:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
 644              	 .loc 2 429 0
 645 0044 FB68     	 ldr r3,[r7,#12]
 646 0046 8022     	 mov r2,#128
 647 0048 D200     	 lsl r2,r2,#3
 648 004a 1343     	 orr r3,r2
 649 004c FB60     	 str r3,[r7,#12]
 650 004e 03E0     	 b .L24
 651              	.L23:
 430:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 431:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 432:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 433:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
 652              	 .loc 2 433 0
 653 0050 FB68     	 ldr r3,[r7,#12]
 654 0052 044A     	 ldr r2,.L25
 655 0054 1340     	 and r3,r2
 656 0056 FB60     	 str r3,[r7,#12]
 657              	.L24:
 434:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 435:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 436:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = tc;
 658              	 .loc 2 436 0
 659 0058 7B68     	 ldr r3,[r7,#4]
 660 005a FA68     	 ldr r2,[r7,#12]
 661 005c 5A61     	 str r2,[r3,#20]
 437:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 662              	 .loc 2 437 0
 663 005e BD46     	 mov sp,r7
 664 0060 04B0     	 add sp,sp,#16
 665              	 
 666 0062 80BD     	 pop {r7,pc}
 667              	.L26:
 668              	 .align 2
 669              	.L25:
 670 0064 FFFBFFFF 	 .word -1025
 671              	 .cfi_endproc
 672              	.LFE118:
 674              	 .section .text.XMC_CCU4_SLICE_StopConfig,"ax",%progbits
 675              	 .align 2
 676              	 .global XMC_CCU4_SLICE_StopConfig
 677              	 .code 16
 678              	 .thumb_func
 680              	XMC_CCU4_SLICE_StopConfig:
 681              	.LFB119:
 438:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 439:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure the Stop trigger function of a slice */
 440:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
 441:../Libraries/XMCLib/src/xmc_ccu4.c ****                            const XMC_CCU4_SLICE_EVENT_t event,
 442:../Libraries/XMCLib/src/xmc_ccu4.c ****                                const XMC_CCU4_SLICE_END_MODE_t end_mode)
 443:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 682              	 .loc 2 443 0
 683              	 .cfi_startproc
 684 0000 80B5     	 push {r7,lr}
 685              	.LCFI36:
 686              	 .cfi_def_cfa_offset 8
 687              	 .cfi_offset 7,-8
 688              	 .cfi_offset 14,-4
 689 0002 84B0     	 sub sp,sp,#16
 690              	.LCFI37:
 691              	 .cfi_def_cfa_offset 24
 692 0004 00AF     	 add r7,sp,#0
 693              	.LCFI38:
 694              	 .cfi_def_cfa_register 7
 695 0006 7860     	 str r0,[r7,#4]
 696 0008 081C     	 mov r0,r1
 697 000a 111C     	 mov r1,r2
 698 000c FB1C     	 add r3,r7,#3
 699 000e 021C     	 add r2,r0,#0
 700 0010 1A70     	 strb r2,[r3]
 701 0012 BB1C     	 add r3,r7,#2
 702 0014 0A1C     	 add r2,r1,#0
 703 0016 1A70     	 strb r2,[r3]
 444:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 445:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t tc;
 446:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 447:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 448:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
 449:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Start Mode", XMC_CCU4_CHECK_END_MODE(end_mode));
 450:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 451:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First, Bind the event with the stop function */
 452:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 704              	 .loc 2 452 0
 705 0018 7B68     	 ldr r3,[r7,#4]
 706 001a 5B68     	 ldr r3,[r3,#4]
 707 001c FB60     	 str r3,[r7,#12]
 453:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_ENDS_Msk);
 708              	 .loc 2 453 0
 709 001e FB68     	 ldr r3,[r7,#12]
 710 0020 0C22     	 mov r2,#12
 711 0022 9343     	 bic r3,r2
 712 0024 FB60     	 str r3,[r7,#12]
 454:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_ENDS_Pos;
 713              	 .loc 2 454 0
 714 0026 FB1C     	 add r3,r7,#3
 715 0028 1B78     	 ldrb r3,[r3]
 716 002a 9B00     	 lsl r3,r3,#2
 717 002c FA68     	 ldr r2,[r7,#12]
 718 002e 1343     	 orr r3,r2
 719 0030 FB60     	 str r3,[r7,#12]
 455:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 456:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 720              	 .loc 2 456 0
 721 0032 7B68     	 ldr r3,[r7,#4]
 722 0034 FA68     	 ldr r2,[r7,#12]
 723 0036 5A60     	 str r2,[r3,#4]
 457:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 458:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, Configure the stop mode */
 459:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc = slice->TC;
 724              	 .loc 2 459 0
 725 0038 7B68     	 ldr r3,[r7,#4]
 726 003a 5B69     	 ldr r3,[r3,#20]
 727 003c BB60     	 str r3,[r7,#8]
 460:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc &= ~((uint32_t) CCU4_CC4_TC_ENDM_Msk);
 728              	 .loc 2 460 0
 729 003e BB68     	 ldr r3,[r7,#8]
 730 0040 074A     	 ldr r2,.L28
 731 0042 1340     	 and r3,r2
 732 0044 BB60     	 str r3,[r7,#8]
 461:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc |= ((uint32_t) end_mode) << CCU4_CC4_TC_ENDM_Pos;
 733              	 .loc 2 461 0
 734 0046 BB1C     	 add r3,r7,#2
 735 0048 1B78     	 ldrb r3,[r3]
 736 004a 1B02     	 lsl r3,r3,#8
 737 004c BA68     	 ldr r2,[r7,#8]
 738 004e 1343     	 orr r3,r2
 739 0050 BB60     	 str r3,[r7,#8]
 462:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 463:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = tc;
 740              	 .loc 2 463 0
 741 0052 7B68     	 ldr r3,[r7,#4]
 742 0054 BA68     	 ldr r2,[r7,#8]
 743 0056 5A61     	 str r2,[r3,#20]
 464:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 744              	 .loc 2 464 0
 745 0058 BD46     	 mov sp,r7
 746 005a 04B0     	 add sp,sp,#16
 747              	 
 748 005c 80BD     	 pop {r7,pc}
 749              	.L29:
 750 005e C046     	 .align 2
 751              	.L28:
 752 0060 FFFCFFFF 	 .word -769
 753              	 .cfi_endproc
 754              	.LFE119:
 756              	 .section .text.XMC_CCU4_SLICE_LoadConfig,"ax",%progbits
 757              	 .align 2
 758              	 .global XMC_CCU4_SLICE_LoadConfig
 759              	 .code 16
 760              	 .thumb_func
 762              	XMC_CCU4_SLICE_LoadConfig:
 763              	.LFB120:
 465:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 466:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure the Load trigger function of a slice */
 467:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
 468:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 764              	 .loc 2 468 0
 765              	 .cfi_startproc
 766 0000 80B5     	 push {r7,lr}
 767              	.LCFI39:
 768              	 .cfi_def_cfa_offset 8
 769              	 .cfi_offset 7,-8
 770              	 .cfi_offset 14,-4
 771 0002 84B0     	 sub sp,sp,#16
 772              	.LCFI40:
 773              	 .cfi_def_cfa_offset 24
 774 0004 00AF     	 add r7,sp,#0
 775              	.LCFI41:
 776              	 .cfi_def_cfa_register 7
 777 0006 7860     	 str r0,[r7,#4]
 778 0008 0A1C     	 mov r2,r1
 779 000a FB1C     	 add r3,r7,#3
 780 000c 1A70     	 strb r2,[r3]
 469:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 470:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 471:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 472:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
 473:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 474:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the load function */
 475:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 781              	 .loc 2 475 0
 782 000e 7B68     	 ldr r3,[r7,#4]
 783 0010 5B68     	 ldr r3,[r3,#4]
 784 0012 FB60     	 str r3,[r7,#12]
 476:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_LDS_Msk);
 785              	 .loc 2 476 0
 786 0014 FB68     	 ldr r3,[r7,#12]
 787 0016 074A     	 ldr r2,.L31
 788 0018 1340     	 and r3,r2
 789 001a FB60     	 str r3,[r7,#12]
 477:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_LDS_Pos;
 790              	 .loc 2 477 0
 791 001c FB1C     	 add r3,r7,#3
 792 001e 1B78     	 ldrb r3,[r3]
 793 0020 1B03     	 lsl r3,r3,#12
 794 0022 FA68     	 ldr r2,[r7,#12]
 795 0024 1343     	 orr r3,r2
 796 0026 FB60     	 str r3,[r7,#12]
 478:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 479:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 797              	 .loc 2 479 0
 798 0028 7B68     	 ldr r3,[r7,#4]
 799 002a FA68     	 ldr r2,[r7,#12]
 800 002c 5A60     	 str r2,[r3,#4]
 480:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 801              	 .loc 2 480 0
 802 002e BD46     	 mov sp,r7
 803 0030 04B0     	 add sp,sp,#16
 804              	 
 805 0032 80BD     	 pop {r7,pc}
 806              	.L32:
 807              	 .align 2
 808              	.L31:
 809 0034 FFCFFFFF 	 .word -12289
 810              	 .cfi_endproc
 811              	.LFE120:
 813              	 .section .text.XMC_CCU4_SLICE_ModulationConfig,"ax",%progbits
 814              	 .align 2
 815              	 .global XMC_CCU4_SLICE_ModulationConfig
 816              	 .code 16
 817              	 .thumb_func
 819              	XMC_CCU4_SLICE_ModulationConfig:
 820              	.LFB121:
 481:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 482:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure the slice modulation function */
 483:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
 484:../Libraries/XMCLib/src/xmc_ccu4.c ****                                      const XMC_CCU4_SLICE_EVENT_t event,
 485:../Libraries/XMCLib/src/xmc_ccu4.c ****                                      const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
 486:../Libraries/XMCLib/src/xmc_ccu4.c ****                                      const bool synch_with_pwm)
 487:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 821              	 .loc 2 487 0
 822              	 .cfi_startproc
 823 0000 90B5     	 push {r4,r7,lr}
 824              	.LCFI42:
 825              	 .cfi_def_cfa_offset 12
 826              	 .cfi_offset 4,-12
 827              	 .cfi_offset 7,-8
 828              	 .cfi_offset 14,-4
 829 0002 85B0     	 sub sp,sp,#20
 830              	.LCFI43:
 831              	 .cfi_def_cfa_offset 32
 832 0004 00AF     	 add r7,sp,#0
 833              	.LCFI44:
 834              	 .cfi_def_cfa_register 7
 835 0006 7860     	 str r0,[r7,#4]
 836 0008 0C1C     	 mov r4,r1
 837 000a 101C     	 mov r0,r2
 838 000c 191C     	 mov r1,r3
 839 000e FB1C     	 add r3,r7,#3
 840 0010 221C     	 add r2,r4,#0
 841 0012 1A70     	 strb r2,[r3]
 842 0014 BB1C     	 add r3,r7,#2
 843 0016 021C     	 add r2,r0,#0
 844 0018 1A70     	 strb r2,[r3]
 845 001a 7B1C     	 add r3,r7,#1
 846 001c 0A1C     	 add r2,r1,#0
 847 001e 1A70     	 strb r2,[r3]
 488:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 489:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t tc;
 490:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 491:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice))
 492:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(even
 493:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Modulation Mode",
 494:../Libraries/XMCLib/src/xmc_ccu4.c ****              ((mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT) ||\
 495:../Libraries/XMCLib/src/xmc_ccu4.c ****               (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT)));
 496:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 497:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc  = slice->TC;
 848              	 .loc 2 497 0
 849 0020 7B68     	 ldr r3,[r7,#4]
 850 0022 5B69     	 ldr r3,[r3,#20]
 851 0024 FB60     	 str r3,[r7,#12]
 498:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 852              	 .loc 2 498 0
 853 0026 7B68     	 ldr r3,[r7,#4]
 854 0028 5B68     	 ldr r3,[r3,#4]
 855 002a BB60     	 str r3,[r7,#8]
 499:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 500:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First, Bind the event with the modulation function */
 501:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_MOS_Msk);
 856              	 .loc 2 501 0
 857 002c BB68     	 ldr r3,[r7,#8]
 858 002e 174A     	 ldr r2,.L38
 859 0030 1340     	 and r3,r2
 860 0032 BB60     	 str r3,[r7,#8]
 502:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_MOS_Pos;
 861              	 .loc 2 502 0
 862 0034 FB1C     	 add r3,r7,#3
 863 0036 1B78     	 ldrb r3,[r3]
 864 0038 9B04     	 lsl r3,r3,#18
 865 003a BA68     	 ldr r2,[r7,#8]
 866 003c 1343     	 orr r3,r2
 867 003e BB60     	 str r3,[r7,#8]
 503:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 868              	 .loc 2 503 0
 869 0040 7B68     	 ldr r3,[r7,#4]
 870 0042 BA68     	 ldr r2,[r7,#8]
 871 0044 5A60     	 str r2,[r3,#4]
 504:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 505:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, Modulation mode */
 506:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT)
 872              	 .loc 2 506 0
 873 0046 BB1C     	 add r3,r7,#2
 874 0048 1B78     	 ldrb r3,[r3]
 875 004a 012B     	 cmp r3,#1
 876 004c 05D1     	 bne .L34
 507:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 508:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (uint32_t) CCU4_CC4_TC_EMT_Msk;
 877              	 .loc 2 508 0
 878 004e FB68     	 ldr r3,[r7,#12]
 879 0050 8022     	 mov r2,#128
 880 0052 5204     	 lsl r2,r2,#17
 881 0054 1343     	 orr r3,r2
 882 0056 FB60     	 str r3,[r7,#12]
 883 0058 03E0     	 b .L35
 884              	.L34:
 509:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 510:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 511:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 512:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc &= ~((uint32_t) CCU4_CC4_TC_EMT_Msk);
 885              	 .loc 2 512 0
 886 005a FB68     	 ldr r3,[r7,#12]
 887 005c 0C4A     	 ldr r2,.L38+4
 888 005e 1340     	 and r3,r2
 889 0060 FB60     	 str r3,[r7,#12]
 890              	.L35:
 513:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 514:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 515:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Synchronization of modulation effect with PWM cycle */
 516:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (synch_with_pwm == (bool) true)
 891              	 .loc 2 516 0
 892 0062 7B1C     	 add r3,r7,#1
 893 0064 1B78     	 ldrb r3,[r3]
 894 0066 002B     	 cmp r3,#0
 895 0068 05D0     	 beq .L36
 517:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 518:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (uint32_t) CCU4_CC4_TC_EMS_Msk;
 896              	 .loc 2 518 0
 897 006a FB68     	 ldr r3,[r7,#12]
 898 006c 8022     	 mov r2,#128
 899 006e 1204     	 lsl r2,r2,#16
 900 0070 1343     	 orr r3,r2
 901 0072 FB60     	 str r3,[r7,#12]
 902 0074 03E0     	 b .L37
 903              	.L36:
 519:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 520:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 521:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 522:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc &= ~((uint32_t) CCU4_CC4_TC_EMS_Msk);
 904              	 .loc 2 522 0
 905 0076 FB68     	 ldr r3,[r7,#12]
 906 0078 064A     	 ldr r2,.L38+8
 907 007a 1340     	 and r3,r2
 908 007c FB60     	 str r3,[r7,#12]
 909              	.L37:
 523:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 524:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 525:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = tc;
 910              	 .loc 2 525 0
 911 007e 7B68     	 ldr r3,[r7,#4]
 912 0080 FA68     	 ldr r2,[r7,#12]
 913 0082 5A61     	 str r2,[r3,#20]
 526:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 914              	 .loc 2 526 0
 915 0084 BD46     	 mov sp,r7
 916 0086 05B0     	 add sp,sp,#20
 917              	 
 918 0088 90BD     	 pop {r4,r7,pc}
 919              	.L39:
 920 008a C046     	 .align 2
 921              	.L38:
 922 008c FFFFF3FF 	 .word -786433
 923 0090 FFFFFFFE 	 .word -16777217
 924 0094 FFFF7FFF 	 .word -8388609
 925              	 .cfi_endproc
 926              	.LFE121:
 928              	 .section .text.XMC_CCU4_SLICE_CountConfig,"ax",%progbits
 929              	 .align 2
 930              	 .global XMC_CCU4_SLICE_CountConfig
 931              	 .code 16
 932              	 .thumb_func
 934              	XMC_CCU4_SLICE_CountConfig:
 935              	.LFB122:
 527:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 528:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure the slice count function */
 529:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
 530:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 936              	 .loc 2 530 0
 937              	 .cfi_startproc
 938 0000 80B5     	 push {r7,lr}
 939              	.LCFI45:
 940              	 .cfi_def_cfa_offset 8
 941              	 .cfi_offset 7,-8
 942              	 .cfi_offset 14,-4
 943 0002 84B0     	 sub sp,sp,#16
 944              	.LCFI46:
 945              	 .cfi_def_cfa_offset 24
 946 0004 00AF     	 add r7,sp,#0
 947              	.LCFI47:
 948              	 .cfi_def_cfa_register 7
 949 0006 7860     	 str r0,[r7,#4]
 950 0008 0A1C     	 mov r2,r1
 951 000a FB1C     	 add r3,r7,#3
 952 000c 1A70     	 strb r2,[r3]
 531:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 532:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 533:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 534:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
 535:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 536:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the count function */
 537:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 953              	 .loc 2 537 0
 954 000e 7B68     	 ldr r3,[r7,#4]
 955 0010 5B68     	 ldr r3,[r3,#4]
 956 0012 FB60     	 str r3,[r7,#12]
 538:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_CNTS_Msk);
 957              	 .loc 2 538 0
 958 0014 FB68     	 ldr r3,[r7,#12]
 959 0016 074A     	 ldr r2,.L41
 960 0018 1340     	 and r3,r2
 961 001a FB60     	 str r3,[r7,#12]
 539:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CNTS_Pos;
 962              	 .loc 2 539 0
 963 001c FB1C     	 add r3,r7,#3
 964 001e 1B78     	 ldrb r3,[r3]
 965 0020 9B03     	 lsl r3,r3,#14
 966 0022 FA68     	 ldr r2,[r7,#12]
 967 0024 1343     	 orr r3,r2
 968 0026 FB60     	 str r3,[r7,#12]
 540:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 541:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 969              	 .loc 2 541 0
 970 0028 7B68     	 ldr r3,[r7,#4]
 971 002a FA68     	 ldr r2,[r7,#12]
 972 002c 5A60     	 str r2,[r3,#4]
 542:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 973              	 .loc 2 542 0
 974 002e BD46     	 mov sp,r7
 975 0030 04B0     	 add sp,sp,#16
 976              	 
 977 0032 80BD     	 pop {r7,pc}
 978              	.L42:
 979              	 .align 2
 980              	.L41:
 981 0034 FF3FFFFF 	 .word -49153
 982              	 .cfi_endproc
 983              	.LFE122:
 985              	 .section .text.XMC_CCU4_SLICE_GateConfig,"ax",%progbits
 986              	 .align 2
 987              	 .global XMC_CCU4_SLICE_GateConfig
 988              	 .code 16
 989              	 .thumb_func
 991              	XMC_CCU4_SLICE_GateConfig:
 992              	.LFB123:
 543:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 544:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure slice gate function */
 545:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
 546:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 993              	 .loc 2 546 0
 994              	 .cfi_startproc
 995 0000 80B5     	 push {r7,lr}
 996              	.LCFI48:
 997              	 .cfi_def_cfa_offset 8
 998              	 .cfi_offset 7,-8
 999              	 .cfi_offset 14,-4
 1000 0002 84B0     	 sub sp,sp,#16
 1001              	.LCFI49:
 1002              	 .cfi_def_cfa_offset 24
 1003 0004 00AF     	 add r7,sp,#0
 1004              	.LCFI50:
 1005              	 .cfi_def_cfa_register 7
 1006 0006 7860     	 str r0,[r7,#4]
 1007 0008 0A1C     	 mov r2,r1
 1008 000a FB1C     	 add r3,r7,#3
 1009 000c 1A70     	 strb r2,[r3]
 547:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 548:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 549:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 550:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
 551:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 552:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the gate function */
 553:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 1010              	 .loc 2 553 0
 1011 000e 7B68     	 ldr r3,[r7,#4]
 1012 0010 5B68     	 ldr r3,[r3,#4]
 1013 0012 FB60     	 str r3,[r7,#12]
 554:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_GATES_Msk);
 1014              	 .loc 2 554 0
 1015 0014 FB68     	 ldr r3,[r7,#12]
 1016 0016 074A     	 ldr r2,.L44
 1017 0018 1340     	 and r3,r2
 1018 001a FB60     	 str r3,[r7,#12]
 555:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_GATES_Pos;
 1019              	 .loc 2 555 0
 1020 001c FB1C     	 add r3,r7,#3
 1021 001e 1B78     	 ldrb r3,[r3]
 1022 0020 1B02     	 lsl r3,r3,#8
 1023 0022 FA68     	 ldr r2,[r7,#12]
 1024 0024 1343     	 orr r3,r2
 1025 0026 FB60     	 str r3,[r7,#12]
 556:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 557:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 1026              	 .loc 2 557 0
 1027 0028 7B68     	 ldr r3,[r7,#4]
 1028 002a FA68     	 ldr r2,[r7,#12]
 1029 002c 5A60     	 str r2,[r3,#4]
 558:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1030              	 .loc 2 558 0
 1031 002e BD46     	 mov sp,r7
 1032 0030 04B0     	 add sp,sp,#16
 1033              	 
 1034 0032 80BD     	 pop {r7,pc}
 1035              	.L45:
 1036              	 .align 2
 1037              	.L44:
 1038 0034 FFFCFFFF 	 .word -769
 1039              	 .cfi_endproc
 1040              	.LFE123:
 1042              	 .section .text.XMC_CCU4_SLICE_Capture0Config,"ax",%progbits
 1043              	 .align 2
 1044              	 .global XMC_CCU4_SLICE_Capture0Config
 1045              	 .code 16
 1046              	 .thumb_func
 1048              	XMC_CCU4_SLICE_Capture0Config:
 1049              	.LFB124:
 559:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 560:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure Capture-0 function */
 561:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_Capture0Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
 562:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1050              	 .loc 2 562 0
 1051              	 .cfi_startproc
 1052 0000 80B5     	 push {r7,lr}
 1053              	.LCFI51:
 1054              	 .cfi_def_cfa_offset 8
 1055              	 .cfi_offset 7,-8
 1056              	 .cfi_offset 14,-4
 1057 0002 84B0     	 sub sp,sp,#16
 1058              	.LCFI52:
 1059              	 .cfi_def_cfa_offset 24
 1060 0004 00AF     	 add r7,sp,#0
 1061              	.LCFI53:
 1062              	 .cfi_def_cfa_register 7
 1063 0006 7860     	 str r0,[r7,#4]
 1064 0008 0A1C     	 mov r2,r1
 1065 000a FB1C     	 add r3,r7,#3
 1066 000c 1A70     	 strb r2,[r3]
 563:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 564:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 565:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 566:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event)
 567:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 568:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the gate function */
 569:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 1067              	 .loc 2 569 0
 1068 000e 7B68     	 ldr r3,[r7,#4]
 1069 0010 5B68     	 ldr r3,[r3,#4]
 1070 0012 FB60     	 str r3,[r7,#12]
 570:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP0S_Msk);
 1071              	 .loc 2 570 0
 1072 0014 FB68     	 ldr r3,[r7,#12]
 1073 0016 3022     	 mov r2,#48
 1074 0018 9343     	 bic r3,r2
 1075 001a FB60     	 str r3,[r7,#12]
 571:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP0S_Pos;
 1076              	 .loc 2 571 0
 1077 001c FB1C     	 add r3,r7,#3
 1078 001e 1B78     	 ldrb r3,[r3]
 1079 0020 1B01     	 lsl r3,r3,#4
 1080 0022 FA68     	 ldr r2,[r7,#12]
 1081 0024 1343     	 orr r3,r2
 1082 0026 FB60     	 str r3,[r7,#12]
 572:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 573:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 1083              	 .loc 2 573 0
 1084 0028 7B68     	 ldr r3,[r7,#4]
 1085 002a FA68     	 ldr r2,[r7,#12]
 1086 002c 5A60     	 str r2,[r3,#4]
 574:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1087              	 .loc 2 574 0
 1088 002e BD46     	 mov sp,r7
 1089 0030 04B0     	 add sp,sp,#16
 1090              	 
 1091 0032 80BD     	 pop {r7,pc}
 1092              	 .cfi_endproc
 1093              	.LFE124:
 1095              	 .section .text.XMC_CCU4_SLICE_Capture1Config,"ax",%progbits
 1096              	 .align 2
 1097              	 .global XMC_CCU4_SLICE_Capture1Config
 1098              	 .code 16
 1099              	 .thumb_func
 1101              	XMC_CCU4_SLICE_Capture1Config:
 1102              	.LFB125:
 575:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 576:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure Capture-1 function */
 577:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_Capture1Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
 578:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1103              	 .loc 2 578 0
 1104              	 .cfi_startproc
 1105 0000 80B5     	 push {r7,lr}
 1106              	.LCFI54:
 1107              	 .cfi_def_cfa_offset 8
 1108              	 .cfi_offset 7,-8
 1109              	 .cfi_offset 14,-4
 1110 0002 84B0     	 sub sp,sp,#16
 1111              	.LCFI55:
 1112              	 .cfi_def_cfa_offset 24
 1113 0004 00AF     	 add r7,sp,#0
 1114              	.LCFI56:
 1115              	 .cfi_def_cfa_register 7
 1116 0006 7860     	 str r0,[r7,#4]
 1117 0008 0A1C     	 mov r2,r1
 1118 000a FB1C     	 add r3,r7,#3
 1119 000c 1A70     	 strb r2,[r3]
 579:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 580:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 581:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 582:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event)
 583:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 584:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the gate function */
 585:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 1120              	 .loc 2 585 0
 1121 000e 7B68     	 ldr r3,[r7,#4]
 1122 0010 5B68     	 ldr r3,[r3,#4]
 1123 0012 FB60     	 str r3,[r7,#12]
 586:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP1S_Msk);
 1124              	 .loc 2 586 0
 1125 0014 FB68     	 ldr r3,[r7,#12]
 1126 0016 C022     	 mov r2,#192
 1127 0018 9343     	 bic r3,r2
 1128 001a FB60     	 str r3,[r7,#12]
 587:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP1S_Pos;
 1129              	 .loc 2 587 0
 1130 001c FB1C     	 add r3,r7,#3
 1131 001e 1B78     	 ldrb r3,[r3]
 1132 0020 9B01     	 lsl r3,r3,#6
 1133 0022 FA68     	 ldr r2,[r7,#12]
 1134 0024 1343     	 orr r3,r2
 1135 0026 FB60     	 str r3,[r7,#12]
 588:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 589:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 1136              	 .loc 2 589 0
 1137 0028 7B68     	 ldr r3,[r7,#4]
 1138 002a FA68     	 ldr r2,[r7,#12]
 1139 002c 5A60     	 str r2,[r3,#4]
 590:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1140              	 .loc 2 590 0
 1141 002e BD46     	 mov sp,r7
 1142 0030 04B0     	 add sp,sp,#16
 1143              	 
 1144 0032 80BD     	 pop {r7,pc}
 1145              	 .cfi_endproc
 1146              	.LFE125:
 1148              	 .section .text.XMC_CCU4_SLICE_DirectionConfig,"ax",%progbits
 1149              	 .align 2
 1150              	 .global XMC_CCU4_SLICE_DirectionConfig
 1151              	 .code 16
 1152              	 .thumb_func
 1154              	XMC_CCU4_SLICE_DirectionConfig:
 1155              	.LFB126:
 591:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 592:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure direction function */
 593:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t eve
 594:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1156              	 .loc 2 594 0
 1157              	 .cfi_startproc
 1158 0000 80B5     	 push {r7,lr}
 1159              	.LCFI57:
 1160              	 .cfi_def_cfa_offset 8
 1161              	 .cfi_offset 7,-8
 1162              	 .cfi_offset 14,-4
 1163 0002 84B0     	 sub sp,sp,#16
 1164              	.LCFI58:
 1165              	 .cfi_def_cfa_offset 24
 1166 0004 00AF     	 add r7,sp,#0
 1167              	.LCFI59:
 1168              	 .cfi_def_cfa_register 7
 1169 0006 7860     	 str r0,[r7,#4]
 1170 0008 0A1C     	 mov r2,r1
 1171 000a FB1C     	 add r3,r7,#3
 1172 000c 1A70     	 strb r2,[r3]
 595:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 596:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 597:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 598:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event
 599:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 600:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the direction function */
 601:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 1173              	 .loc 2 601 0
 1174 000e 7B68     	 ldr r3,[r7,#4]
 1175 0010 5B68     	 ldr r3,[r3,#4]
 1176 0012 FB60     	 str r3,[r7,#12]
 602:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_UDS_Msk);
 1177              	 .loc 2 602 0
 1178 0014 FB68     	 ldr r3,[r7,#12]
 1179 0016 074A     	 ldr r2,.L49
 1180 0018 1340     	 and r3,r2
 1181 001a FB60     	 str r3,[r7,#12]
 603:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_UDS_Pos;
 1182              	 .loc 2 603 0
 1183 001c FB1C     	 add r3,r7,#3
 1184 001e 1B78     	 ldrb r3,[r3]
 1185 0020 9B02     	 lsl r3,r3,#10
 1186 0022 FA68     	 ldr r2,[r7,#12]
 1187 0024 1343     	 orr r3,r2
 1188 0026 FB60     	 str r3,[r7,#12]
 604:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 605:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 1189              	 .loc 2 605 0
 1190 0028 7B68     	 ldr r3,[r7,#4]
 1191 002a FA68     	 ldr r2,[r7,#12]
 1192 002c 5A60     	 str r2,[r3,#4]
 606:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1193              	 .loc 2 606 0
 1194 002e BD46     	 mov sp,r7
 1195 0030 04B0     	 add sp,sp,#16
 1196              	 
 1197 0032 80BD     	 pop {r7,pc}
 1198              	.L50:
 1199              	 .align 2
 1200              	.L49:
 1201 0034 FFF3FFFF 	 .word -3073
 1202              	 .cfi_endproc
 1203              	.LFE126:
 1205              	 .section .text.XMC_CCU4_SLICE_StatusBitOverrideConfig,"ax",%progbits
 1206              	 .align 2
 1207              	 .global XMC_CCU4_SLICE_StatusBitOverrideConfig
 1208              	 .code 16
 1209              	 .thumb_func
 1211              	XMC_CCU4_SLICE_StatusBitOverrideConfig:
 1212              	.LFB127:
 607:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 608:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure slice status bit override function */
 609:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice)
 610:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1213              	 .loc 2 610 0
 1214              	 .cfi_startproc
 1215 0000 80B5     	 push {r7,lr}
 1216              	.LCFI60:
 1217              	 .cfi_def_cfa_offset 8
 1218              	 .cfi_offset 7,-8
 1219              	 .cfi_offset 14,-4
 1220 0002 84B0     	 sub sp,sp,#16
 1221              	.LCFI61:
 1222              	 .cfi_def_cfa_offset 24
 1223 0004 00AF     	 add r7,sp,#0
 1224              	.LCFI62:
 1225              	 .cfi_def_cfa_register 7
 1226 0006 7860     	 str r0,[r7,#4]
 611:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 612:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 613:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(
 614:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 615:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the override function */
 616:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 1227              	 .loc 2 616 0
 1228 0008 7B68     	 ldr r3,[r7,#4]
 1229 000a 5B68     	 ldr r3,[r3,#4]
 1230 000c FB60     	 str r3,[r7,#12]
 617:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Map status bit trigger override to Event 1 & 
 618:../Libraries/XMCLib/src/xmc_ccu4.c ****          status bit value override to Event 2 */
 619:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_OFS_Msk);
 1231              	 .loc 2 619 0
 1232 000e FB68     	 ldr r3,[r7,#12]
 1233 0010 064A     	 ldr r2,.L52
 1234 0012 1340     	 and r3,r2
 1235 0014 FB60     	 str r3,[r7,#12]
 620:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_OFS_Pos;
 1236              	 .loc 2 620 0
 1237 0016 FB68     	 ldr r3,[r7,#12]
 1238 0018 8022     	 mov r2,#128
 1239 001a 5202     	 lsl r2,r2,#9
 1240 001c 1343     	 orr r3,r2
 1241 001e FB60     	 str r3,[r7,#12]
 621:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 622:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 1242              	 .loc 2 622 0
 1243 0020 7B68     	 ldr r3,[r7,#4]
 1244 0022 FA68     	 ldr r2,[r7,#12]
 1245 0024 5A60     	 str r2,[r3,#4]
 623:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1246              	 .loc 2 623 0
 1247 0026 BD46     	 mov sp,r7
 1248 0028 04B0     	 add sp,sp,#16
 1249              	 
 1250 002a 80BD     	 pop {r7,pc}
 1251              	.L53:
 1252              	 .align 2
 1253              	.L52:
 1254 002c FFFFFEFF 	 .word -65537
 1255              	 .cfi_endproc
 1256              	.LFE127:
 1258              	 .section .text.XMC_CCU4_SLICE_TrapConfig,"ax",%progbits
 1259              	 .align 2
 1260              	 .global XMC_CCU4_SLICE_TrapConfig
 1261              	 .code 16
 1262              	 .thumb_func
 1264              	XMC_CCU4_SLICE_TrapConfig:
 1265              	.LFB128:
 624:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 625:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure trap function */
 626:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
 627:../Libraries/XMCLib/src/xmc_ccu4.c ****                                const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
 628:../Libraries/XMCLib/src/xmc_ccu4.c ****                                const bool synch_with_pwm)
 629:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1266              	 .loc 2 629 0
 1267              	 .cfi_startproc
 1268 0000 80B5     	 push {r7,lr}
 1269              	.LCFI63:
 1270              	 .cfi_def_cfa_offset 8
 1271              	 .cfi_offset 7,-8
 1272              	 .cfi_offset 14,-4
 1273 0002 84B0     	 sub sp,sp,#16
 1274              	.LCFI64:
 1275              	 .cfi_def_cfa_offset 24
 1276 0004 00AF     	 add r7,sp,#0
 1277              	.LCFI65:
 1278              	 .cfi_def_cfa_register 7
 1279 0006 7860     	 str r0,[r7,#4]
 1280 0008 081C     	 mov r0,r1
 1281 000a 111C     	 mov r1,r2
 1282 000c FB1C     	 add r3,r7,#3
 1283 000e 021C     	 add r2,r0,#0
 1284 0010 1A70     	 strb r2,[r3]
 1285 0012 BB1C     	 add r3,r7,#2
 1286 0014 0A1C     	 add r2,r1,#0
 1287 0016 1A70     	 strb r2,[r3]
 630:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 631:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t tc;
 632:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 633:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 634:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU4_SLICE_TRAP_EXIT
 635:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                              (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT
 636:../Libraries/XMCLib/src/xmc_ccu4.c ****     
 637:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First, Map trap function to Event 2 */
 638:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 1288              	 .loc 2 638 0
 1289 0018 7B68     	 ldr r3,[r7,#4]
 1290 001a 5B68     	 ldr r3,[r3,#4]
 1291 001c BB60     	 str r3,[r7,#8]
 639:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_TS_Msk);
 1292              	 .loc 2 639 0
 1293 001e BB68     	 ldr r3,[r7,#8]
 1294 0020 174A     	 ldr r2,.L59
 1295 0022 1340     	 and r3,r2
 1296 0024 BB60     	 str r3,[r7,#8]
 640:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_TS_Pos;
 1297              	 .loc 2 640 0
 1298 0026 BB68     	 ldr r3,[r7,#8]
 1299 0028 8022     	 mov r2,#128
 1300 002a 9202     	 lsl r2,r2,#10
 1301 002c 1343     	 orr r3,r2
 1302 002e BB60     	 str r3,[r7,#8]
 641:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 1303              	 .loc 2 641 0
 1304 0030 7B68     	 ldr r3,[r7,#4]
 1305 0032 BA68     	 ldr r2,[r7,#8]
 1306 0034 5A60     	 str r2,[r3,#4]
 642:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 643:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, Configure synchronization option */
 644:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc = slice->TC;
 1307              	 .loc 2 644 0
 1308 0036 7B68     	 ldr r3,[r7,#4]
 1309 0038 5B69     	 ldr r3,[r3,#20]
 1310 003a FB60     	 str r3,[r7,#12]
 645:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 646:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (synch_with_pwm == (bool) true)
 1311              	 .loc 2 646 0
 1312 003c BB1C     	 add r3,r7,#2
 1313 003e 1B78     	 ldrb r3,[r3]
 1314 0040 002B     	 cmp r3,#0
 1315 0042 05D0     	 beq .L55
 647:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 648:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (uint32_t) CCU4_CC4_TC_TRPSE_Msk;
 1316              	 .loc 2 648 0
 1317 0044 FB68     	 ldr r3,[r7,#12]
 1318 0046 8022     	 mov r2,#128
 1319 0048 9203     	 lsl r2,r2,#14
 1320 004a 1343     	 orr r3,r2
 1321 004c FB60     	 str r3,[r7,#12]
 1322 004e 03E0     	 b .L56
 1323              	.L55:
 649:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 650:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 651:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 652:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc &= ~((uint32_t) CCU4_CC4_TC_TRPSE_Msk);
 1324              	 .loc 2 652 0
 1325 0050 FB68     	 ldr r3,[r7,#12]
 1326 0052 0C4A     	 ldr r2,.L59+4
 1327 0054 1340     	 and r3,r2
 1328 0056 FB60     	 str r3,[r7,#12]
 1329              	.L56:
 653:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 654:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 655:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure exit mode */
 656:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)
 1330              	 .loc 2 656 0
 1331 0058 FB1C     	 add r3,r7,#3
 1332 005a 1B78     	 ldrb r3,[r3]
 1333 005c 012B     	 cmp r3,#1
 1334 005e 05D1     	 bne .L57
 657:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 658:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (uint32_t) CCU4_CC4_TC_TRPSW_Msk;
 1335              	 .loc 2 658 0
 1336 0060 FB68     	 ldr r3,[r7,#12]
 1337 0062 8022     	 mov r2,#128
 1338 0064 D203     	 lsl r2,r2,#15
 1339 0066 1343     	 orr r3,r2
 1340 0068 FB60     	 str r3,[r7,#12]
 1341 006a 03E0     	 b .L58
 1342              	.L57:
 659:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 660:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 661:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 662:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc &= ~((uint32_t) CCU4_CC4_TC_TRPSW_Msk);
 1343              	 .loc 2 662 0
 1344 006c FB68     	 ldr r3,[r7,#12]
 1345 006e 064A     	 ldr r2,.L59+8
 1346 0070 1340     	 and r3,r2
 1347 0072 FB60     	 str r3,[r7,#12]
 1348              	.L58:
 663:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 664:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 665:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = tc;
 1349              	 .loc 2 665 0
 1350 0074 7B68     	 ldr r3,[r7,#4]
 1351 0076 FA68     	 ldr r2,[r7,#12]
 1352 0078 5A61     	 str r2,[r3,#20]
 666:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1353              	 .loc 2 666 0
 1354 007a BD46     	 mov sp,r7
 1355 007c 04B0     	 add sp,sp,#16
 1356              	 
 1357 007e 80BD     	 pop {r7,pc}
 1358              	.L60:
 1359              	 .align 2
 1360              	.L59:
 1361 0080 FFFFFDFF 	 .word -131073
 1362 0084 FFFFDFFF 	 .word -2097153
 1363 0088 FFFFBFFF 	 .word -4194305
 1364              	 .cfi_endproc
 1365              	.LFE128:
 1367              	 .section .text.XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent,"ax",%progbits
 1368              	 .align 2
 1369              	 .global XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent
 1370              	 .code 16
 1371              	 .thumb_func
 1373              	XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:
 1374              	.LFB129:
 667:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 668:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure a slice Status Bit Override event */
 669:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
 670:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_
 671:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_
 672:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1375              	 .loc 2 672 0
 1376              	 .cfi_startproc
 1377 0000 80B5     	 push {r7,lr}
 1378              	.LCFI66:
 1379              	 .cfi_def_cfa_offset 8
 1380              	 .cfi_offset 7,-8
 1381              	 .cfi_offset 14,-4
 1382 0002 86B0     	 sub sp,sp,#24
 1383              	.LCFI67:
 1384              	 .cfi_def_cfa_offset 32
 1385 0004 00AF     	 add r7,sp,#0
 1386              	.LCFI68:
 1387              	 .cfi_def_cfa_register 7
 1388 0006 F860     	 str r0,[r7,#12]
 1389 0008 B960     	 str r1,[r7,#8]
 1390 000a 7A60     	 str r2,[r7,#4]
 673:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t ins;
 674:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 675:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Slice Pointer", XMC_CCU4_IsVal
 676:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Input",
 677:../Libraries/XMCLib/src/xmc_ccu4.c ****          XMC_CCU4_SLICE_IsInputvalid(ev1_config->mapped_input));
 678:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Edge Sensitivity",
 679:../Libraries/XMCLib/src/xmc_ccu4.c ****              XMC_CCU4_SLICE_CHECK_EDGE_SENSITIVITY(ev1_config->edge));
 680:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Level Sensitivity",
 681:../Libraries/XMCLib/src/xmc_ccu4.c ****              ((ev1_config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
 682:../Libraries/XMCLib/src/xmc_ccu4.c ****               (ev1_config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
 683:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Debounce Period",
 684:../Libraries/XMCLib/src/xmc_ccu4.c ****              XMC_CCU4_SLICE_CHECK_EVENT_FILTER(ev1_config->duration));
 685:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Input",
 686:../Libraries/XMCLib/src/xmc_ccu4.c ****          XMC_CCU4_SLICE_IsInputvalid(ev2_config->mapped_input));
 687:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Edge Sensitivity",
 688:../Libraries/XMCLib/src/xmc_ccu4.c ****              XMC_CCU4_SLICE_CHECK_EDGE_SENSITIVITY(ev2_config->edge));
 689:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Level Sensitivity",
 690:../Libraries/XMCLib/src/xmc_ccu4.c ****              ((ev2_config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
 691:../Libraries/XMCLib/src/xmc_ccu4.c ****               (ev2_config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
 692:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Debounce Period", 
 693:../Libraries/XMCLib/src/xmc_ccu4.c ****              XMC_CCU4_SLICE_CHECK_EVENT_FILTER(ev2_config->duration));
 694:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU4V3) /* Defined for XMC1400 devices only */
 695:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS2;
 1391              	 .loc 2 695 0
 1392 000c FB68     	 ldr r3,[r7,#12]
 1393 000e 1B68     	 ldr r3,[r3]
 1394 0010 7B61     	 str r3,[r7,#20]
 696:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 697:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the edge sensitivity for event 1 */
 698:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS2_EV1EM_Pos);
 1395              	 .loc 2 698 0
 1396 0012 7B69     	 ldr r3,[r7,#20]
 1397 0014 3022     	 mov r2,#48
 1398 0016 9343     	 bic r3,r2
 1399 0018 7B61     	 str r3,[r7,#20]
 699:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS2_EV1EM_Pos;
 1400              	 .loc 2 699 0
 1401 001a BB68     	 ldr r3,[r7,#8]
 1402 001c 5B78     	 ldrb r3,[r3,#1]
 1403 001e 1B01     	 lsl r3,r3,#4
 1404 0020 7A69     	 ldr r2,[r7,#20]
 1405 0022 1343     	 orr r3,r2
 1406 0024 7B61     	 str r3,[r7,#20]
 700:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 701:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the edge sensitivity for event 2 */
 702:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS2_EV2EM_Pos);
 1407              	 .loc 2 702 0
 1408 0026 7B69     	 ldr r3,[r7,#20]
 1409 0028 294A     	 ldr r2,.L62
 1410 002a 1340     	 and r3,r2
 1411 002c 7B61     	 str r3,[r7,#20]
 703:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS2_EV2EM_Pos;
 1412              	 .loc 2 703 0
 1413 002e 7B68     	 ldr r3,[r7,#4]
 1414 0030 5B78     	 ldrb r3,[r3,#1]
 1415 0032 1B02     	 lsl r3,r3,#8
 1416 0034 7A69     	 ldr r2,[r7,#20]
 1417 0036 1343     	 orr r3,r2
 1418 0038 7B61     	 str r3,[r7,#20]
 704:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 705:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the level sensitivity for event 1 */
 706:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS2_EV1LM_Pos);
 1419              	 .loc 2 706 0
 1420 003a 7B69     	 ldr r3,[r7,#20]
 1421 003c 4022     	 mov r2,#64
 1422 003e 9343     	 bic r3,r2
 1423 0040 7B61     	 str r3,[r7,#20]
 707:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS2_EV1LM_Pos;
 1424              	 .loc 2 707 0
 1425 0042 BB68     	 ldr r3,[r7,#8]
 1426 0044 9B78     	 ldrb r3,[r3,#2]
 1427 0046 9B01     	 lsl r3,r3,#6
 1428 0048 7A69     	 ldr r2,[r7,#20]
 1429 004a 1343     	 orr r3,r2
 1430 004c 7B61     	 str r3,[r7,#20]
 708:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 709:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the level sensitivity for event 2 */
 710:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS2_EV2LM_Pos);
 1431              	 .loc 2 710 0
 1432 004e 7B69     	 ldr r3,[r7,#20]
 1433 0050 204A     	 ldr r2,.L62+4
 1434 0052 1340     	 and r3,r2
 1435 0054 7B61     	 str r3,[r7,#20]
 711:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS2_EV2LM_Pos;
 1436              	 .loc 2 711 0
 1437 0056 7B68     	 ldr r3,[r7,#4]
 1438 0058 9B78     	 ldrb r3,[r3,#2]
 1439 005a 9B02     	 lsl r3,r3,#10
 1440 005c 7A69     	 ldr r2,[r7,#20]
 1441 005e 1343     	 orr r3,r2
 1442 0060 7B61     	 str r3,[r7,#20]
 712:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 713:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the debounce filter for event 1 */
 714:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS2_LPF1M_Pos);
 1443              	 .loc 2 714 0
 1444 0062 7B69     	 ldr r3,[r7,#20]
 1445 0064 1C4A     	 ldr r2,.L62+8
 1446 0066 1340     	 and r3,r2
 1447 0068 7B61     	 str r3,[r7,#20]
 715:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS2_LPF1M_Pos;
 1448              	 .loc 2 715 0
 1449 006a BB68     	 ldr r3,[r7,#8]
 1450 006c DB78     	 ldrb r3,[r3,#3]
 1451 006e 1B05     	 lsl r3,r3,#20
 1452 0070 7A69     	 ldr r2,[r7,#20]
 1453 0072 1343     	 orr r3,r2
 1454 0074 7B61     	 str r3,[r7,#20]
 716:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 717:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the debounce filter for event 2 */
 718:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS2_LPF2M_Pos);
 1455              	 .loc 2 718 0
 1456 0076 7B69     	 ldr r3,[r7,#20]
 1457 0078 184A     	 ldr r2,.L62+12
 1458 007a 1340     	 and r3,r2
 1459 007c 7B61     	 str r3,[r7,#20]
 719:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS2_LPF2M_Pos;
 1460              	 .loc 2 719 0
 1461 007e 7B68     	 ldr r3,[r7,#4]
 1462 0080 DB78     	 ldrb r3,[r3,#3]
 1463 0082 1B06     	 lsl r3,r3,#24
 1464 0084 7A69     	 ldr r2,[r7,#20]
 1465 0086 1343     	 orr r3,r2
 1466 0088 7B61     	 str r3,[r7,#20]
 720:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 721:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS2 = ins;
 1467              	 .loc 2 721 0
 1468 008a FB68     	 ldr r3,[r7,#12]
 1469 008c 7A69     	 ldr r2,[r7,#20]
 1470 008e 1A60     	 str r2,[r3]
 722:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 723:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS1;
 1471              	 .loc 2 723 0
 1472 0090 FB68     	 ldr r3,[r7,#12]
 1473 0092 D822     	 mov r2,#216
 1474 0094 9B58     	 ldr r3,[r3,r2]
 1475 0096 7B61     	 str r3,[r7,#20]
 724:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 725:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, the input for Event1 */
 726:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV1IS_Pos);
 1476              	 .loc 2 726 0
 1477 0098 7B69     	 ldr r3,[r7,#20]
 1478 009a 114A     	 ldr r2,.L62+16
 1479 009c 1340     	 and r3,r2
 1480 009e 7B61     	 str r3,[r7,#20]
 727:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS1_EV1IS_Pos;
 1481              	 .loc 2 727 0
 1482 00a0 BB68     	 ldr r3,[r7,#8]
 1483 00a2 1B78     	 ldrb r3,[r3]
 1484 00a4 1B02     	 lsl r3,r3,#8
 1485 00a6 7A69     	 ldr r2,[r7,#20]
 1486 00a8 1343     	 orr r3,r2
 1487 00aa 7B61     	 str r3,[r7,#20]
 728:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 729:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Finally, the input for Event2 */
 730:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV2IS_Pos);
 1488              	 .loc 2 730 0
 1489 00ac 7B69     	 ldr r3,[r7,#20]
 1490 00ae 0D4A     	 ldr r2,.L62+20
 1491 00b0 1340     	 and r3,r2
 1492 00b2 7B61     	 str r3,[r7,#20]
 731:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS1_EV2IS_Pos;
 1493              	 .loc 2 731 0
 1494 00b4 7B68     	 ldr r3,[r7,#4]
 1495 00b6 1B78     	 ldrb r3,[r3]
 1496 00b8 1B04     	 lsl r3,r3,#16
 1497 00ba 7A69     	 ldr r2,[r7,#20]
 1498 00bc 1343     	 orr r3,r2
 1499 00be 7B61     	 str r3,[r7,#20]
 732:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 733:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS1 = ins;
 1500              	 .loc 2 733 0
 1501 00c0 FB68     	 ldr r3,[r7,#12]
 1502 00c2 D821     	 mov r1,#216
 1503 00c4 7A69     	 ldr r2,[r7,#20]
 1504 00c6 5A50     	 str r2,[r3,r1]
 734:../Libraries/XMCLib/src/xmc_ccu4.c **** #else
 735:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS;
 736:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 737:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the edge sensitivity for event 1 */
 738:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV1EM_Pos);
 739:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS_EV1EM_Pos;
 740:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 741:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the edge sensitivity for event 2 */
 742:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV2EM_Pos);
 743:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS_EV2EM_Pos;
 744:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 745:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the level sensitivity for event 1 */
 746:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV1LM_Pos);
 747:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS_EV1LM_Pos;
 748:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 749:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the level sensitivity for event 2 */
 750:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV2LM_Pos);
 751:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS_EV2LM_Pos;
 752:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 753:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the debounce filter for event 1 */
 754:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF1M_Pos);
 755:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS_LPF1M_Pos;
 756:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 757:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the debounce filter for event 2 */
 758:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF2M_Pos);
 759:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS_LPF2M_Pos;
 760:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 761:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, the input for Event1 */
 762:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV1IS_Pos);
 763:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS_EV1IS_Pos;
 764:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 765:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Finally, the input for Event2 */
 766:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV2IS_Pos);
 767:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS_EV2IS_Pos;
 768:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 769:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS = ins;
 770:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 771:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1505              	 .loc 2 771 0
 1506 00c8 BD46     	 mov sp,r7
 1507 00ca 06B0     	 add sp,sp,#24
 1508              	 
 1509 00cc 80BD     	 pop {r7,pc}
 1510              	.L63:
 1511 00ce C046     	 .align 2
 1512              	.L62:
 1513 00d0 FFFCFFFF 	 .word -769
 1514 00d4 FFFBFFFF 	 .word -1025
 1515 00d8 FFFFCFFF 	 .word -3145729
 1516 00dc FFFFFFFC 	 .word -50331649
 1517 00e0 FFC0FFFF 	 .word -16129
 1518 00e4 FFFFC0FF 	 .word -4128769
 1519              	 .cfi_endproc
 1520              	.LFE129:
 1522              	 .section .text.XMC_CCU4_SLICE_ConfigureEvent,"ax",%progbits
 1523              	 .align 2
 1524              	 .global XMC_CCU4_SLICE_ConfigureEvent
 1525              	 .code 16
 1526              	 .thumb_func
 1528              	XMC_CCU4_SLICE_ConfigureEvent:
 1529              	.LFB130:
 772:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 773:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure a slice trigger event */
 774:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
 775:../Libraries/XMCLib/src/xmc_ccu4.c ****                                    const XMC_CCU4_SLICE_EVENT_t event,
 776:../Libraries/XMCLib/src/xmc_ccu4.c ****                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
 777:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1530              	 .loc 2 777 0
 1531              	 .cfi_startproc
 1532 0000 80B5     	 push {r7,lr}
 1533              	.LCFI69:
 1534              	 .cfi_def_cfa_offset 8
 1535              	 .cfi_offset 7,-8
 1536              	 .cfi_offset 14,-4
 1537 0002 88B0     	 sub sp,sp,#32
 1538              	.LCFI70:
 1539              	 .cfi_def_cfa_offset 40
 1540 0004 00AF     	 add r7,sp,#0
 1541              	.LCFI71:
 1542              	 .cfi_def_cfa_register 7
 1543 0006 F860     	 str r0,[r7,#12]
 1544 0008 7A60     	 str r2,[r7,#4]
 1545 000a 0B23     	 mov r3,#11
 1546 000c FB18     	 add r3,r7,r3
 1547 000e 0A1C     	 add r2,r1,#0
 1548 0010 1A70     	 strb r2,[r3]
 778:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t ins;
 779:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t  pos;
 780:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t  offset;
 781:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 782:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 783:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event)
 784:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Input", XMC_CCU4_SLICE_IsInputvalid(config->map
 785:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Edge Sensitivity",
 786:../Libraries/XMCLib/src/xmc_ccu4.c ****              XMC_CCU4_SLICE_CHECK_EDGE_SENSITIVITY(config->edge));
 787:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Level Sensitivity",
 788:../Libraries/XMCLib/src/xmc_ccu4.c ****              ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
 789:../Libraries/XMCLib/src/xmc_ccu4.c ****               (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
 790:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period", 
 791:../Libraries/XMCLib/src/xmc_ccu4.c ****              XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
 792:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Calculate offset with reference to event */
 793:../Libraries/XMCLib/src/xmc_ccu4.c ****   offset = ((uint8_t) event) - 1U;
 1549              	 .loc 2 793 0
 1550 0012 1F23     	 mov r3,#31
 1551 0014 FB18     	 add r3,r7,r3
 1552 0016 0B22     	 mov r2,#11
 1553 0018 BA18     	 add r2,r7,r2
 1554 001a 1278     	 ldrb r2,[r2]
 1555 001c 013A     	 sub r2,r2,#1
 1556 001e 1A70     	 strb r2,[r3]
 794:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 795:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU4V3) /* Defined for XMC1400 devices only */
 796:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS2;
 1557              	 .loc 2 796 0
 1558 0020 FB68     	 ldr r3,[r7,#12]
 1559 0022 1B68     	 ldr r3,[r3]
 1560 0024 BB61     	 str r3,[r7,#24]
 797:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 798:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First, configure the edge sensitivity */
 799:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS2_EV0EM_Pos) + (uint8_t)(offset << 2U);
 1561              	 .loc 2 799 0
 1562 0026 1723     	 mov r3,#23
 1563 0028 FB18     	 add r3,r7,r3
 1564 002a 1F22     	 mov r2,#31
 1565 002c BA18     	 add r2,r7,r2
 1566 002e 1278     	 ldrb r2,[r2]
 1567 0030 9200     	 lsl r2,r2,#2
 1568 0032 1A70     	 strb r2,[r3]
 800:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 1569              	 .loc 2 800 0
 1570 0034 1723     	 mov r3,#23
 1571 0036 FB18     	 add r3,r7,r3
 1572 0038 1B78     	 ldrb r3,[r3]
 1573 003a 0322     	 mov r2,#3
 1574 003c 9A40     	 lsl r2,r2,r3
 1575 003e 131C     	 mov r3,r2
 1576 0040 DA43     	 mvn r2,r3
 1577 0042 BB69     	 ldr r3,[r7,#24]
 1578 0044 1340     	 and r3,r2
 1579 0046 BB61     	 str r3,[r7,#24]
 801:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->edge) << pos;
 1580              	 .loc 2 801 0
 1581 0048 7B68     	 ldr r3,[r7,#4]
 1582 004a 5B78     	 ldrb r3,[r3,#1]
 1583 004c 1A1C     	 mov r2,r3
 1584 004e 1723     	 mov r3,#23
 1585 0050 FB18     	 add r3,r7,r3
 1586 0052 1B78     	 ldrb r3,[r3]
 1587 0054 9A40     	 lsl r2,r2,r3
 1588 0056 131C     	 mov r3,r2
 1589 0058 BA69     	 ldr r2,[r7,#24]
 1590 005a 1343     	 orr r3,r2
 1591 005c BB61     	 str r3,[r7,#24]
 802:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 803:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, the level */
 804:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS2_EV0LM_Pos) + (uint8_t)(offset << 2U);
 1592              	 .loc 2 804 0
 1593 005e 1F23     	 mov r3,#31
 1594 0060 FB18     	 add r3,r7,r3
 1595 0062 1B78     	 ldrb r3,[r3]
 1596 0064 9B00     	 lsl r3,r3,#2
 1597 0066 DAB2     	 uxtb r2,r3
 1598 0068 1723     	 mov r3,#23
 1599 006a FB18     	 add r3,r7,r3
 1600 006c 0232     	 add r2,r2,#2
 1601 006e 1A70     	 strb r2,[r3]
 805:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 1602              	 .loc 2 805 0
 1603 0070 1723     	 mov r3,#23
 1604 0072 FB18     	 add r3,r7,r3
 1605 0074 1B78     	 ldrb r3,[r3]
 1606 0076 0122     	 mov r2,#1
 1607 0078 9A40     	 lsl r2,r2,r3
 1608 007a 131C     	 mov r3,r2
 1609 007c DA43     	 mvn r2,r3
 1610 007e BB69     	 ldr r3,[r7,#24]
 1611 0080 1340     	 and r3,r2
 1612 0082 BB61     	 str r3,[r7,#24]
 806:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->level) << pos;
 1613              	 .loc 2 806 0
 1614 0084 7B68     	 ldr r3,[r7,#4]
 1615 0086 9B78     	 ldrb r3,[r3,#2]
 1616 0088 1A1C     	 mov r2,r3
 1617 008a 1723     	 mov r3,#23
 1618 008c FB18     	 add r3,r7,r3
 1619 008e 1B78     	 ldrb r3,[r3]
 1620 0090 9A40     	 lsl r2,r2,r3
 1621 0092 131C     	 mov r3,r2
 1622 0094 BA69     	 ldr r2,[r7,#24]
 1623 0096 1343     	 orr r3,r2
 1624 0098 BB61     	 str r3,[r7,#24]
 807:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 808:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, the debounce filter */
 809:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS2_LPF0M_Pos) + (uint8_t)(offset << 2U);
 1625              	 .loc 2 809 0
 1626 009a 1F23     	 mov r3,#31
 1627 009c FB18     	 add r3,r7,r3
 1628 009e 1B78     	 ldrb r3,[r3]
 1629 00a0 9B00     	 lsl r3,r3,#2
 1630 00a2 DAB2     	 uxtb r2,r3
 1631 00a4 1723     	 mov r3,#23
 1632 00a6 FB18     	 add r3,r7,r3
 1633 00a8 1032     	 add r2,r2,#16
 1634 00aa 1A70     	 strb r2,[r3]
 810:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 1635              	 .loc 2 810 0
 1636 00ac 1723     	 mov r3,#23
 1637 00ae FB18     	 add r3,r7,r3
 1638 00b0 1B78     	 ldrb r3,[r3]
 1639 00b2 0322     	 mov r2,#3
 1640 00b4 9A40     	 lsl r2,r2,r3
 1641 00b6 131C     	 mov r3,r2
 1642 00b8 DA43     	 mvn r2,r3
 1643 00ba BB69     	 ldr r3,[r7,#24]
 1644 00bc 1340     	 and r3,r2
 1645 00be BB61     	 str r3,[r7,#24]
 811:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->duration) << pos;
 1646              	 .loc 2 811 0
 1647 00c0 7B68     	 ldr r3,[r7,#4]
 1648 00c2 DB78     	 ldrb r3,[r3,#3]
 1649 00c4 1A1C     	 mov r2,r3
 1650 00c6 1723     	 mov r3,#23
 1651 00c8 FB18     	 add r3,r7,r3
 1652 00ca 1B78     	 ldrb r3,[r3]
 1653 00cc 9A40     	 lsl r2,r2,r3
 1654 00ce 131C     	 mov r3,r2
 1655 00d0 BA69     	 ldr r2,[r7,#24]
 1656 00d2 1343     	 orr r3,r2
 1657 00d4 BB61     	 str r3,[r7,#24]
 812:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 813:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS2 = ins;
 1658              	 .loc 2 813 0
 1659 00d6 FB68     	 ldr r3,[r7,#12]
 1660 00d8 BA69     	 ldr r2,[r7,#24]
 1661 00da 1A60     	 str r2,[r3]
 814:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 815:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS1;
 1662              	 .loc 2 815 0
 1663 00dc FB68     	 ldr r3,[r7,#12]
 1664 00de D822     	 mov r2,#216
 1665 00e0 9B58     	 ldr r3,[r3,r2]
 1666 00e2 BB61     	 str r3,[r7,#24]
 816:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 817:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Finally the input */
 818:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS1_EV0IS_Pos) + (uint8_t)(offset << 3U);
 1667              	 .loc 2 818 0
 1668 00e4 1723     	 mov r3,#23
 1669 00e6 FB18     	 add r3,r7,r3
 1670 00e8 1F22     	 mov r2,#31
 1671 00ea BA18     	 add r2,r7,r2
 1672 00ec 1278     	 ldrb r2,[r2]
 1673 00ee D200     	 lsl r2,r2,#3
 1674 00f0 1A70     	 strb r2,[r3]
 819:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 1675              	 .loc 2 819 0
 1676 00f2 1723     	 mov r3,#23
 1677 00f4 FB18     	 add r3,r7,r3
 1678 00f6 1B78     	 ldrb r3,[r3]
 1679 00f8 3F22     	 mov r2,#63
 1680 00fa 9A40     	 lsl r2,r2,r3
 1681 00fc 131C     	 mov r3,r2
 1682 00fe DA43     	 mvn r2,r3
 1683 0100 BB69     	 ldr r3,[r7,#24]
 1684 0102 1340     	 and r3,r2
 1685 0104 BB61     	 str r3,[r7,#24]
 820:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->mapped_input) << pos;
 1686              	 .loc 2 820 0
 1687 0106 7B68     	 ldr r3,[r7,#4]
 1688 0108 1B78     	 ldrb r3,[r3]
 1689 010a 1A1C     	 mov r2,r3
 1690 010c 1723     	 mov r3,#23
 1691 010e FB18     	 add r3,r7,r3
 1692 0110 1B78     	 ldrb r3,[r3]
 1693 0112 9A40     	 lsl r2,r2,r3
 1694 0114 131C     	 mov r3,r2
 1695 0116 BA69     	 ldr r2,[r7,#24]
 1696 0118 1343     	 orr r3,r2
 1697 011a BB61     	 str r3,[r7,#24]
 821:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 822:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS1 = ins;
 1698              	 .loc 2 822 0
 1699 011c FB68     	 ldr r3,[r7,#12]
 1700 011e D821     	 mov r1,#216
 1701 0120 BA69     	 ldr r2,[r7,#24]
 1702 0122 5A50     	 str r2,[r3,r1]
 823:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 824:../Libraries/XMCLib/src/xmc_ccu4.c **** #else
 825:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS;
 826:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 827:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First, configure the edge sensitivity */
 828:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 829:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 830:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->edge) << pos;
 831:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 832:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, the level */
 833:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
 834:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 835:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->level) << pos;
 836:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 837:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, the debounce filter */
 838:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 839:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 840:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->duration) << pos;
 841:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 842:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Finally the input */
 843:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 844:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 845:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->mapped_input) << pos;
 846:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 847:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS = ins;
 848:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 849:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1703              	 .loc 2 849 0
 1704 0124 BD46     	 mov sp,r7
 1705 0126 08B0     	 add sp,sp,#32
 1706              	 
 1707 0128 80BD     	 pop {r7,pc}
 1708              	 .cfi_endproc
 1709              	.LFE130:
 1711 012a C046     	 .section .text.XMC_CCU4_SLICE_SetInput,"ax",%progbits
 1712              	 .align 2
 1713              	 .global XMC_CCU4_SLICE_SetInput
 1714              	 .code 16
 1715              	 .thumb_func
 1717              	XMC_CCU4_SLICE_SetInput:
 1718              	.LFB131:
 850:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 851:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to bind an input to a slice trigger event */
 852:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_SetInput(XMC_CCU4_SLICE_t *const slice,
 853:../Libraries/XMCLib/src/xmc_ccu4.c ****                          const XMC_CCU4_SLICE_EVENT_t event,
 854:../Libraries/XMCLib/src/xmc_ccu4.c ****                              const XMC_CCU4_SLICE_INPUT_t input)
 855:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1719              	 .loc 2 855 0
 1720              	 .cfi_startproc
 1721 0000 80B5     	 push {r7,lr}
 1722              	.LCFI72:
 1723              	 .cfi_def_cfa_offset 8
 1724              	 .cfi_offset 7,-8
 1725              	 .cfi_offset 14,-4
 1726 0002 84B0     	 sub sp,sp,#16
 1727              	.LCFI73:
 1728              	 .cfi_def_cfa_offset 24
 1729 0004 00AF     	 add r7,sp,#0
 1730              	.LCFI74:
 1731              	 .cfi_def_cfa_register 7
 1732 0006 7860     	 str r0,[r7,#4]
 1733 0008 081C     	 mov r0,r1
 1734 000a 111C     	 mov r1,r2
 1735 000c FB1C     	 add r3,r7,#3
 1736 000e 021C     	 add r2,r0,#0
 1737 0010 1A70     	 strb r2,[r3]
 1738 0012 BB1C     	 add r3,r7,#2
 1739 0014 0A1C     	 add r2,r1,#0
 1740 0016 1A70     	 strb r2,[r3]
 856:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t ins;
 857:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t  pos;
 858:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t  offset;
 859:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 860:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 861:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
 862:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Input", XMC_CCU4_SLICE_IsInputvalid(input));
 863:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 864:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Calculate offset with reference to event */
 865:../Libraries/XMCLib/src/xmc_ccu4.c ****   offset = ((uint8_t) event) - 1U;
 1741              	 .loc 2 865 0
 1742 0018 0F23     	 mov r3,#15
 1743 001a FB18     	 add r3,r7,r3
 1744 001c FA1C     	 add r2,r7,#3
 1745 001e 1278     	 ldrb r2,[r2]
 1746 0020 013A     	 sub r2,r2,#1
 1747 0022 1A70     	 strb r2,[r3]
 866:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 867:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU4V3) /* Defined for XMC1400 devices only */
 868:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS1_EV0IS_Pos) + (uint8_t) (offset << 3U);
 1748              	 .loc 2 868 0
 1749 0024 0E23     	 mov r3,#14
 1750 0026 FB18     	 add r3,r7,r3
 1751 0028 0F22     	 mov r2,#15
 1752 002a BA18     	 add r2,r7,r2
 1753 002c 1278     	 ldrb r2,[r2]
 1754 002e D200     	 lsl r2,r2,#3
 1755 0030 1A70     	 strb r2,[r3]
 869:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 870:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS1;
 1756              	 .loc 2 870 0
 1757 0032 7B68     	 ldr r3,[r7,#4]
 1758 0034 D822     	 mov r2,#216
 1759 0036 9B58     	 ldr r3,[r3,r2]
 1760 0038 BB60     	 str r3,[r7,#8]
 871:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 1761              	 .loc 2 871 0
 1762 003a 0E23     	 mov r3,#14
 1763 003c FB18     	 add r3,r7,r3
 1764 003e 1B78     	 ldrb r3,[r3]
 1765 0040 3F22     	 mov r2,#63
 1766 0042 9A40     	 lsl r2,r2,r3
 1767 0044 131C     	 mov r3,r2
 1768 0046 DA43     	 mvn r2,r3
 1769 0048 BB68     	 ldr r3,[r7,#8]
 1770 004a 1340     	 and r3,r2
 1771 004c BB60     	 str r3,[r7,#8]
 872:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) input) << pos;
 1772              	 .loc 2 872 0
 1773 004e BB1C     	 add r3,r7,#2
 1774 0050 1A78     	 ldrb r2,[r3]
 1775 0052 0E23     	 mov r3,#14
 1776 0054 FB18     	 add r3,r7,r3
 1777 0056 1B78     	 ldrb r3,[r3]
 1778 0058 9A40     	 lsl r2,r2,r3
 1779 005a 131C     	 mov r3,r2
 1780 005c BA68     	 ldr r2,[r7,#8]
 1781 005e 1343     	 orr r3,r2
 1782 0060 BB60     	 str r3,[r7,#8]
 873:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 874:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS1 = ins;
 1783              	 .loc 2 874 0
 1784 0062 7B68     	 ldr r3,[r7,#4]
 1785 0064 D821     	 mov r1,#216
 1786 0066 BA68     	 ldr r2,[r7,#8]
 1787 0068 5A50     	 str r2,[r3,r1]
 875:../Libraries/XMCLib/src/xmc_ccu4.c **** #else
 876:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t) (offset << 2U);
 877:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 878:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS;
 879:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 880:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) input) << pos;
 881:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 882:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS = ins;
 883:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 884:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1788              	 .loc 2 884 0
 1789 006a BD46     	 mov sp,r7
 1790 006c 04B0     	 add sp,sp,#16
 1791              	 
 1792 006e 80BD     	 pop {r7,pc}
 1793              	 .cfi_endproc
 1794              	.LFE131:
 1796              	 .section .text.XMC_CCU4_SLICE_SetTimerRepeatMode,"ax",%progbits
 1797              	 .align 2
 1798              	 .global XMC_CCU4_SLICE_SetTimerRepeatMode
 1799              	 .code 16
 1800              	 .thumb_func
 1802              	XMC_CCU4_SLICE_SetTimerRepeatMode:
 1803              	.LFB132:
 885:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 886:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to program timer repeat mode - Single shot vs repeat */
 887:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_SetTimerRepeatMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_RE
 888:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1804              	 .loc 2 888 0
 1805              	 .cfi_startproc
 1806 0000 80B5     	 push {r7,lr}
 1807              	.LCFI75:
 1808              	 .cfi_def_cfa_offset 8
 1809              	 .cfi_offset 7,-8
 1810              	 .cfi_offset 14,-4
 1811 0002 82B0     	 sub sp,sp,#8
 1812              	.LCFI76:
 1813              	 .cfi_def_cfa_offset 16
 1814 0004 00AF     	 add r7,sp,#0
 1815              	.LCFI77:
 1816              	 .cfi_def_cfa_register 7
 1817 0006 7860     	 str r0,[r7,#4]
 1818 0008 0A1C     	 mov r2,r1
 1819 000a FB1C     	 add r3,r7,#3
 1820 000c 1A70     	 strb r2,[r3]
 889:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice
 890:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerRepeatMode:Invalid Timer Repeat Mode",
 891:../Libraries/XMCLib/src/xmc_ccu4.c ****              ((mode == XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT) ||\
 892:../Libraries/XMCLib/src/xmc_ccu4.c ****           (mode == XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE)));
 893:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 894:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT == mode)
 1821              	 .loc 2 894 0
 1822 000e FB1C     	 add r3,r7,#3
 1823 0010 1B78     	 ldrb r3,[r3]
 1824 0012 002B     	 cmp r3,#0
 1825 0014 07D1     	 bne .L67
 895:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 896:../Libraries/XMCLib/src/xmc_ccu4.c ****     slice->TC &= ~((uint32_t) CCU4_CC4_TC_TSSM_Msk);
 1826              	 .loc 2 896 0
 1827 0016 7B68     	 ldr r3,[r7,#4]
 1828 0018 5B69     	 ldr r3,[r3,#20]
 1829 001a 0222     	 mov r2,#2
 1830 001c 9343     	 bic r3,r2
 1831 001e 1A1C     	 mov r2,r3
 1832 0020 7B68     	 ldr r3,[r7,#4]
 1833 0022 5A61     	 str r2,[r3,#20]
 1834 0024 05E0     	 b .L66
 1835              	.L67:
 897:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 898:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 899:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 900:../Libraries/XMCLib/src/xmc_ccu4.c ****     slice->TC |= (uint32_t) CCU4_CC4_TC_TSSM_Msk;
 1836              	 .loc 2 900 0
 1837 0026 7B68     	 ldr r3,[r7,#4]
 1838 0028 5B69     	 ldr r3,[r3,#20]
 1839 002a 0222     	 mov r2,#2
 1840 002c 1A43     	 orr r2,r3
 1841 002e 7B68     	 ldr r3,[r7,#4]
 1842 0030 5A61     	 str r2,[r3,#20]
 1843              	.L66:
 901:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 902:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1844              	 .loc 2 902 0
 1845 0032 BD46     	 mov sp,r7
 1846 0034 02B0     	 add sp,sp,#8
 1847              	 
 1848 0036 80BD     	 pop {r7,pc}
 1849              	 .cfi_endproc
 1850              	.LFE132:
 1852              	 .section .text.XMC_CCU4_SLICE_SetTimerCountingMode,"ax",%progbits
 1853              	 .align 2
 1854              	 .global XMC_CCU4_SLICE_SetTimerCountingMode
 1855              	 .code 16
 1856              	 .thumb_func
 1858              	XMC_CCU4_SLICE_SetTimerCountingMode:
 1859              	.LFB133:
 903:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 904:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Programs timer counting mode */
 905:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_SetTimerCountingMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_
 906:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1860              	 .loc 2 906 0
 1861              	 .cfi_startproc
 1862 0000 80B5     	 push {r7,lr}
 1863              	.LCFI78:
 1864              	 .cfi_def_cfa_offset 8
 1865              	 .cfi_offset 7,-8
 1866              	 .cfi_offset 14,-4
 1867 0002 82B0     	 sub sp,sp,#8
 1868              	.LCFI79:
 1869              	 .cfi_def_cfa_offset 16
 1870 0004 00AF     	 add r7,sp,#0
 1871              	.LCFI80:
 1872              	 .cfi_def_cfa_register 7
 1873 0006 7860     	 str r0,[r7,#4]
 1874 0008 0A1C     	 mov r2,r1
 1875 000a FB1C     	 add r3,r7,#3
 1876 000c 1A70     	 strb r2,[r3]
 907:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
 908:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Timer Count Mode", ((mode == XMC_CCU4_SLI
 909:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                                               (mode == XMC_CCU4_SLI
 910:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 911:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA == mode)
 1877              	 .loc 2 911 0
 1878 000e FB1C     	 add r3,r7,#3
 1879 0010 1B78     	 ldrb r3,[r3]
 1880 0012 002B     	 cmp r3,#0
 1881 0014 07D1     	 bne .L70
 912:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 913:../Libraries/XMCLib/src/xmc_ccu4.c ****     slice->TC &= ~((uint32_t) CCU4_CC4_TC_TCM_Msk);
 1882              	 .loc 2 913 0
 1883 0016 7B68     	 ldr r3,[r7,#4]
 1884 0018 5B69     	 ldr r3,[r3,#20]
 1885 001a 0122     	 mov r2,#1
 1886 001c 9343     	 bic r3,r2
 1887 001e 1A1C     	 mov r2,r3
 1888 0020 7B68     	 ldr r3,[r7,#4]
 1889 0022 5A61     	 str r2,[r3,#20]
 1890 0024 05E0     	 b .L69
 1891              	.L70:
 914:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 915:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 916:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 917:../Libraries/XMCLib/src/xmc_ccu4.c ****     slice->TC |= (uint32_t) CCU4_CC4_TC_TCM_Msk;
 1892              	 .loc 2 917 0
 1893 0026 7B68     	 ldr r3,[r7,#4]
 1894 0028 5B69     	 ldr r3,[r3,#20]
 1895 002a 0122     	 mov r2,#1
 1896 002c 1A43     	 orr r2,r3
 1897 002e 7B68     	 ldr r3,[r7,#4]
 1898 0030 5A61     	 str r2,[r3,#20]
 1899              	.L69:
 918:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 919:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1900              	 .loc 2 919 0
 1901 0032 BD46     	 mov sp,r7
 1902 0034 02B0     	 add sp,sp,#8
 1903              	 
 1904 0036 80BD     	 pop {r7,pc}
 1905              	 .cfi_endproc
 1906              	.LFE133:
 1908              	 .section .text.XMC_CCU4_SLICE_GetCaptureRegisterValue,"ax",%progbits
 1909              	 .align 2
 1910              	 .global XMC_CCU4_SLICE_GetCaptureRegisterValue
 1911              	 .code 16
 1912              	 .thumb_func
 1914              	XMC_CCU4_SLICE_GetCaptureRegisterValue:
 1915              	.LFB134:
 920:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 921:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Retrieves desired capture register value */
 922:../Libraries/XMCLib/src/xmc_ccu4.c **** uint32_t XMC_CCU4_SLICE_GetCaptureRegisterValue(const XMC_CCU4_SLICE_t *const slice, const uint8_t 
 923:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1916              	 .loc 2 923 0
 1917              	 .cfi_startproc
 1918 0000 80B5     	 push {r7,lr}
 1919              	.LCFI81:
 1920              	 .cfi_def_cfa_offset 8
 1921              	 .cfi_offset 7,-8
 1922              	 .cfi_offset 14,-4
 1923 0002 82B0     	 sub sp,sp,#8
 1924              	.LCFI82:
 1925              	 .cfi_def_cfa_offset 16
 1926 0004 00AF     	 add r7,sp,#0
 1927              	.LCFI83:
 1928              	 .cfi_def_cfa_register 7
 1929 0006 7860     	 str r0,[r7,#4]
 1930 0008 0A1C     	 mov r2,r1
 1931 000a FB1C     	 add r3,r7,#3
 1932 000c 1A70     	 strb r2,[r3]
 924:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GetCaptureRegisterValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(
 925:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GetCaptureRegisterValue:Invalid register number", (reg_num < 4U));
 926:../Libraries/XMCLib/src/xmc_ccu4.c ****   return(slice->CV[reg_num]);
 1933              	 .loc 2 926 0
 1934 000e FB1C     	 add r3,r7,#3
 1935 0010 1B78     	 ldrb r3,[r3]
 1936 0012 7A68     	 ldr r2,[r7,#4]
 1937 0014 1C33     	 add r3,r3,#28
 1938 0016 9B00     	 lsl r3,r3,#2
 1939 0018 D318     	 add r3,r2,r3
 1940 001a 5B68     	 ldr r3,[r3,#4]
 927:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1941              	 .loc 2 927 0
 1942 001c 181C     	 mov r0,r3
 1943 001e BD46     	 mov sp,r7
 1944 0020 02B0     	 add sp,sp,#8
 1945              	 
 1946 0022 80BD     	 pop {r7,pc}
 1947              	 .cfi_endproc
 1948              	.LFE134:
 1950              	 .section .text.XMC_CCU4_SLICE_GetLastCapturedTimerValue,"ax",%progbits
 1951              	 .align 2
 1952              	 .global XMC_CCU4_SLICE_GetLastCapturedTimerValue
 1953              	 .code 16
 1954              	 .thumb_func
 1956              	XMC_CCU4_SLICE_GetLastCapturedTimerValue:
 1957              	.LFB135:
 928:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 929:../Libraries/XMCLib/src/xmc_ccu4.c **** /* @brief Retrieves the latest captured timer value */
 930:../Libraries/XMCLib/src/xmc_ccu4.c **** XMC_CCU4_STATUS_t XMC_CCU4_SLICE_GetLastCapturedTimerValue(const XMC_CCU4_SLICE_t *const slice,
 931:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                            const XMC_CCU4_SLICE_CAP_REG_SET_t set,
 932:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                            uint32_t *val_ptr)
 933:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1958              	 .loc 2 933 0
 1959              	 .cfi_startproc
 1960 0000 80B5     	 push {r7,lr}
 1961              	.LCFI84:
 1962              	 .cfi_def_cfa_offset 8
 1963              	 .cfi_offset 7,-8
 1964              	 .cfi_offset 14,-4
 1965 0002 86B0     	 sub sp,sp,#24
 1966              	.LCFI85:
 1967              	 .cfi_def_cfa_offset 32
 1968 0004 00AF     	 add r7,sp,#0
 1969              	.LCFI86:
 1970              	 .cfi_def_cfa_register 7
 1971 0006 F860     	 str r0,[r7,#12]
 1972 0008 7A60     	 str r2,[r7,#4]
 1973 000a 0B23     	 mov r3,#11
 1974 000c FB18     	 add r3,r7,r3
 1975 000e 0A1C     	 add r2,r1,#0
 1976 0010 1A70     	 strb r2,[r3]
 934:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_STATUS_t retval;
 935:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t i;
 936:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t start;
 937:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t end;
 938:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 939:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GetLastCapturedTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlic
 940:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GetLastCapturedTimerValue:Invalid Register Set", ((set == XMC_CCU4_SLI
 941:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                                                (set == XMC_CCU4_SLI
 942:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 943:../Libraries/XMCLib/src/xmc_ccu4.c ****   retval = XMC_CCU4_STATUS_ERROR;
 1977              	 .loc 2 943 0
 1978 0012 1723     	 mov r3,#23
 1979 0014 FB18     	 add r3,r7,r3
 1980 0016 0122     	 mov r2,#1
 1981 0018 1A70     	 strb r2,[r3]
 944:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 945:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First check if extended capture mode is enabled */
 946:../Libraries/XMCLib/src/xmc_ccu4.c ****   if ((slice->TC) & CCU4_CC4_TC_ECM_Msk)
 1982              	 .loc 2 946 0
 1983 001a FB68     	 ldr r3,[r7,#12]
 1984 001c 5B69     	 ldr r3,[r3,#20]
 1985 001e 1022     	 mov r2,#16
 1986 0020 1340     	 and r3,r2
 1987 0022 08D0     	 beq .L75
 947:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 948:../Libraries/XMCLib/src/xmc_ccu4.c ****     /* Extended capture mode has been enabled. So start with the lowest capture register and work y
 949:../Libraries/XMCLib/src/xmc_ccu4.c ****     start = 0U;
 1988              	 .loc 2 949 0
 1989 0024 1523     	 mov r3,#21
 1990 0026 FB18     	 add r3,r7,r3
 1991 0028 0022     	 mov r2,#0
 1992 002a 1A70     	 strb r2,[r3]
 950:../Libraries/XMCLib/src/xmc_ccu4.c ****     end = XMC_CCU4_NUM_SLICES_PER_MODULE;
 1993              	 .loc 2 950 0
 1994 002c 1423     	 mov r3,#20
 1995 002e FB18     	 add r3,r7,r3
 1996 0030 0422     	 mov r2,#4
 1997 0032 1A70     	 strb r2,[r3]
 1998 0034 15E0     	 b .L76
 1999              	.L75:
 951:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 952:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 953:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 954:../Libraries/XMCLib/src/xmc_ccu4.c ****     /* Extended capture mode is not enabled */
 955:../Libraries/XMCLib/src/xmc_ccu4.c ****     if (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)
 2000              	 .loc 2 955 0
 2001 0036 0B23     	 mov r3,#11
 2002 0038 FB18     	 add r3,r7,r3
 2003 003a 1B78     	 ldrb r3,[r3]
 2004 003c 012B     	 cmp r3,#1
 2005 003e 08D1     	 bne .L77
 956:../Libraries/XMCLib/src/xmc_ccu4.c ****     {
 957:../Libraries/XMCLib/src/xmc_ccu4.c ****       start = ((uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE) >> 1U;
 2006              	 .loc 2 957 0
 2007 0040 1523     	 mov r3,#21
 2008 0042 FB18     	 add r3,r7,r3
 2009 0044 0222     	 mov r2,#2
 2010 0046 1A70     	 strb r2,[r3]
 958:../Libraries/XMCLib/src/xmc_ccu4.c ****       end   = (uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE;
 2011              	 .loc 2 958 0
 2012 0048 1423     	 mov r3,#20
 2013 004a FB18     	 add r3,r7,r3
 2014 004c 0422     	 mov r2,#4
 2015 004e 1A70     	 strb r2,[r3]
 2016 0050 07E0     	 b .L76
 2017              	.L77:
 959:../Libraries/XMCLib/src/xmc_ccu4.c ****     }
 960:../Libraries/XMCLib/src/xmc_ccu4.c ****     else
 961:../Libraries/XMCLib/src/xmc_ccu4.c ****     {
 962:../Libraries/XMCLib/src/xmc_ccu4.c ****       start = 0U;
 2018              	 .loc 2 962 0
 2019 0052 1523     	 mov r3,#21
 2020 0054 FB18     	 add r3,r7,r3
 2021 0056 0022     	 mov r2,#0
 2022 0058 1A70     	 strb r2,[r3]
 963:../Libraries/XMCLib/src/xmc_ccu4.c ****       end = ((uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE) >> 1U;
 2023              	 .loc 2 963 0
 2024 005a 1423     	 mov r3,#20
 2025 005c FB18     	 add r3,r7,r3
 2026 005e 0222     	 mov r2,#2
 2027 0060 1A70     	 strb r2,[r3]
 2028              	.L76:
 964:../Libraries/XMCLib/src/xmc_ccu4.c ****     }
 965:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 966:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 967:../Libraries/XMCLib/src/xmc_ccu4.c ****   for(i=start; i < end; i++)
 2029              	 .loc 2 967 0
 2030 0062 1623     	 mov r3,#22
 2031 0064 FB18     	 add r3,r7,r3
 2032 0066 1522     	 mov r2,#21
 2033 0068 BA18     	 add r2,r7,r2
 2034 006a 1278     	 ldrb r2,[r2]
 2035 006c 1A70     	 strb r2,[r3]
 2036 006e 21E0     	 b .L78
 2037              	.L81:
 968:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 969:../Libraries/XMCLib/src/xmc_ccu4.c ****     if ( (slice->CV[i]) & CCU4_CC4_CV_FFL_Msk )
 2038              	 .loc 2 969 0
 2039 0070 1623     	 mov r3,#22
 2040 0072 FB18     	 add r3,r7,r3
 2041 0074 1B78     	 ldrb r3,[r3]
 2042 0076 FA68     	 ldr r2,[r7,#12]
 2043 0078 1C33     	 add r3,r3,#28
 2044 007a 9B00     	 lsl r3,r3,#2
 2045 007c D318     	 add r3,r2,r3
 2046 007e 5A68     	 ldr r2,[r3,#4]
 2047 0080 8023     	 mov r3,#128
 2048 0082 5B03     	 lsl r3,r3,#13
 2049 0084 1340     	 and r3,r2
 2050 0086 0ED0     	 beq .L79
 970:../Libraries/XMCLib/src/xmc_ccu4.c ****     {
 971:../Libraries/XMCLib/src/xmc_ccu4.c ****       *val_ptr = slice->CV[i];
 2051              	 .loc 2 971 0
 2052 0088 1623     	 mov r3,#22
 2053 008a FB18     	 add r3,r7,r3
 2054 008c 1B78     	 ldrb r3,[r3]
 2055 008e FA68     	 ldr r2,[r7,#12]
 2056 0090 1C33     	 add r3,r3,#28
 2057 0092 9B00     	 lsl r3,r3,#2
 2058 0094 D318     	 add r3,r2,r3
 2059 0096 5A68     	 ldr r2,[r3,#4]
 2060 0098 7B68     	 ldr r3,[r7,#4]
 2061 009a 1A60     	 str r2,[r3]
 972:../Libraries/XMCLib/src/xmc_ccu4.c ****       retval = XMC_CCU4_STATUS_OK;
 2062              	 .loc 2 972 0
 2063 009c 1723     	 mov r3,#23
 2064 009e FB18     	 add r3,r7,r3
 2065 00a0 0022     	 mov r2,#0
 2066 00a2 1A70     	 strb r2,[r3]
 973:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 2067              	 .loc 2 973 0
 2068 00a4 0EE0     	 b .L80
 2069              	.L79:
 967:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 2070              	 .loc 2 967 0 discriminator 2
 2071 00a6 1623     	 mov r3,#22
 2072 00a8 FB18     	 add r3,r7,r3
 2073 00aa 1A78     	 ldrb r2,[r3]
 2074 00ac 1623     	 mov r3,#22
 2075 00ae FB18     	 add r3,r7,r3
 2076 00b0 0132     	 add r2,r2,#1
 2077 00b2 1A70     	 strb r2,[r3]
 2078              	.L78:
 967:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 2079              	 .loc 2 967 0 is_stmt 0 discriminator 1
 2080 00b4 1623     	 mov r3,#22
 2081 00b6 FA18     	 add r2,r7,r3
 2082 00b8 1423     	 mov r3,#20
 2083 00ba FB18     	 add r3,r7,r3
 2084 00bc 1278     	 ldrb r2,[r2]
 2085 00be 1B78     	 ldrb r3,[r3]
 2086 00c0 9A42     	 cmp r2,r3
 2087 00c2 D5D3     	 bcc .L81
 2088              	.L80:
 974:../Libraries/XMCLib/src/xmc_ccu4.c ****     }
 975:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 976:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 977:../Libraries/XMCLib/src/xmc_ccu4.c ****   return retval;
 2089              	 .loc 2 977 0 is_stmt 1
 2090 00c4 1723     	 mov r3,#23
 2091 00c6 FB18     	 add r3,r7,r3
 2092 00c8 1B78     	 ldrb r3,[r3]
 978:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 2093              	 .loc 2 978 0
 2094 00ca 181C     	 mov r0,r3
 2095 00cc BD46     	 mov sp,r7
 2096 00ce 06B0     	 add sp,sp,#24
 2097              	 
 2098 00d0 80BD     	 pop {r7,pc}
 2099              	 .cfi_endproc
 2100              	.LFE135:
 2102 00d2 C046     	 .section .text.XMC_CCU4_SLICE_GetCapturedValueFromFifo,"ax",%progbits
 2103              	 .align 2
 2104              	 .global XMC_CCU4_SLICE_GetCapturedValueFromFifo
 2105              	 .code 16
 2106              	 .thumb_func
 2108              	XMC_CCU4_SLICE_GetCapturedValueFromFifo:
 2109              	.LFB136:
 979:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 980:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Retrieves timer capture value from a FIFO made of capture registers */
 981:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU4V1) /* Defined for XMC4500, XMC400, XMC4200, XMC4100 devices only */
 982:../Libraries/XMCLib/src/xmc_ccu4.c **** int32_t XMC_CCU4_GetCapturedValueFromFifo(const XMC_CCU4_MODULE_t *const module, const uint8_t slic
 983:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 984:../Libraries/XMCLib/src/xmc_ccu4.c ****   int32_t   cap;
 985:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t  extracted_slice;
 986:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 987:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_GetCapturedValueFromFifo:Invalid Slice Pointer", XMC_CCU4_IsValidModule(modu
 988:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 989:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First read the global fifo register */
 990:../Libraries/XMCLib/src/xmc_ccu4.c ****   cap = (int32_t) module->ECRD;
 991:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 992:../Libraries/XMCLib/src/xmc_ccu4.c ****   extracted_slice = (((uint32_t) cap) & ((uint32_t) CCU4_ECRD_SPTR_Msk)) >> CCU4_ECRD_SPTR_Pos;
 993:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 994:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Return captured result only if it were applicable to this slice */
 995:../Libraries/XMCLib/src/xmc_ccu4.c ****   if(extracted_slice != ((uint32_t)slice_number))
 996:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 997:../Libraries/XMCLib/src/xmc_ccu4.c ****     cap = -1;
 998:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 999:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1000:../Libraries/XMCLib/src/xmc_ccu4.c ****   return (cap);
1001:../Libraries/XMCLib/src/xmc_ccu4.c **** }
1002:../Libraries/XMCLib/src/xmc_ccu4.c **** #else
1003:../Libraries/XMCLib/src/xmc_ccu4.c **** uint32_t XMC_CCU4_SLICE_GetCapturedValueFromFifo(const XMC_CCU4_SLICE_t *const slice,
1004:../Libraries/XMCLib/src/xmc_ccu4.c ****                                              const XMC_CCU4_SLICE_CAP_REG_SET_t set)
1005:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 2110              	 .loc 2 1005 0
 2111              	 .cfi_startproc
 2112 0000 80B5     	 push {r7,lr}
 2113              	.LCFI87:
 2114              	 .cfi_def_cfa_offset 8
 2115              	 .cfi_offset 7,-8
 2116              	 .cfi_offset 14,-4
 2117 0002 84B0     	 sub sp,sp,#16
 2118              	.LCFI88:
 2119              	 .cfi_def_cfa_offset 24
 2120 0004 00AF     	 add r7,sp,#0
 2121              	.LCFI89:
 2122              	 .cfi_def_cfa_register 7
 2123 0006 7860     	 str r0,[r7,#4]
 2124 0008 0A1C     	 mov r2,r1
 2125 000a FB1C     	 add r3,r7,#3
 2126 000c 1A70     	 strb r2,[r3]
1006:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cap;
1007:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1008:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GetCapturedValueFromFifo:Invalid Slice Pointer", XMC_CCU4_IsValidSlice
1009:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GetCapturedValueFromFifo:Invalid Register Set", 
1010:../Libraries/XMCLib/src/xmc_ccu4.c ****       ((set == XMC_CCU4_SLICE_CAP_REG_SET_LOW) ||\
1011:../Libraries/XMCLib/src/xmc_ccu4.c ****        (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)));
1012:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1013:../Libraries/XMCLib/src/xmc_ccu4.c ****   if(XMC_CCU4_SLICE_CAP_REG_SET_LOW == set)
 2127              	 .loc 2 1013 0
 2128 000e FB1C     	 add r3,r7,#3
 2129 0010 1B78     	 ldrb r3,[r3]
 2130 0012 002B     	 cmp r3,#0
 2131 0014 04D1     	 bne .L84
1014:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
1015:../Libraries/XMCLib/src/xmc_ccu4.c ****     cap = slice->ECRD0;
 2132              	 .loc 2 1015 0
 2133 0016 7B68     	 ldr r3,[r7,#4]
 2134 0018 B822     	 mov r2,#184
 2135 001a 9B58     	 ldr r3,[r3,r2]
 2136 001c FB60     	 str r3,[r7,#12]
 2137 001e 03E0     	 b .L85
 2138              	.L84:
1016:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
1017:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
1018:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
1019:../Libraries/XMCLib/src/xmc_ccu4.c ****     cap = slice->ECRD1;
 2139              	 .loc 2 1019 0
 2140 0020 7B68     	 ldr r3,[r7,#4]
 2141 0022 BC22     	 mov r2,#188
 2142 0024 9B58     	 ldr r3,[r3,r2]
 2143 0026 FB60     	 str r3,[r7,#12]
 2144              	.L85:
1020:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
1021:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1022:../Libraries/XMCLib/src/xmc_ccu4.c ****   return cap;
 2145              	 .loc 2 1022 0
 2146 0028 FB68     	 ldr r3,[r7,#12]
1023:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 2147              	 .loc 2 1023 0
 2148 002a 181C     	 mov r0,r3
 2149 002c BD46     	 mov sp,r7
 2150 002e 04B0     	 add sp,sp,#16
 2151              	 
 2152 0030 80BD     	 pop {r7,pc}
 2153              	 .cfi_endproc
 2154              	.LFE136:
 2156 0032 C046     	 .section .text.XMC_CCU4_SLICE_EnableDithering,"ax",%progbits
 2157              	 .align 2
 2158              	 .global XMC_CCU4_SLICE_EnableDithering
 2159              	 .code 16
 2160              	 .thumb_func
 2162              	XMC_CCU4_SLICE_EnableDithering:
 2163              	.LFB137:
1024:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
1025:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1026:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Enables PWM dithering feature */
1027:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_EnableDithering(XMC_CCU4_SLICE_t *const slice,
1028:../Libraries/XMCLib/src/xmc_ccu4.c ****                                     const bool period_dither,
1029:../Libraries/XMCLib/src/xmc_ccu4.c ****                                     const bool duty_dither,
1030:../Libraries/XMCLib/src/xmc_ccu4.c ****                                     const uint8_t spread)
1031:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 2164              	 .loc 2 1031 0
 2165              	 .cfi_startproc
 2166 0000 90B5     	 push {r4,r7,lr}
 2167              	.LCFI90:
 2168              	 .cfi_def_cfa_offset 12
 2169              	 .cfi_offset 4,-12
 2170              	 .cfi_offset 7,-8
 2171              	 .cfi_offset 14,-4
 2172 0002 85B0     	 sub sp,sp,#20
 2173              	.LCFI91:
 2174              	 .cfi_def_cfa_offset 32
 2175 0004 00AF     	 add r7,sp,#0
 2176              	.LCFI92:
 2177              	 .cfi_def_cfa_register 7
 2178 0006 7860     	 str r0,[r7,#4]
 2179 0008 0C1C     	 mov r4,r1
 2180 000a 101C     	 mov r0,r2
 2181 000c 191C     	 mov r1,r3
 2182 000e FB1C     	 add r3,r7,#3
 2183 0010 221C     	 add r2,r4,#0
 2184 0012 1A70     	 strb r2,[r3]
 2185 0014 BB1C     	 add r3,r7,#2
 2186 0016 021C     	 add r2,r0,#0
 2187 0018 1A70     	 strb r2,[r3]
 2188 001a 7B1C     	 add r3,r7,#1
 2189 001c 0A1C     	 add r2,r1,#0
 2190 001e 1A70     	 strb r2,[r3]
1032:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t tc;
1033:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1034:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableDithering:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1035:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1036:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc = slice->TC;
 2191              	 .loc 2 1036 0
 2192 0020 7B68     	 ldr r3,[r7,#4]
 2193 0022 5B69     	 ldr r3,[r3,#20]
 2194 0024 FB60     	 str r3,[r7,#12]
1037:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc &= ~((uint32_t) CCU4_CC4_TC_DITHE_Msk);
 2195              	 .loc 2 1037 0
 2196 0026 FB68     	 ldr r3,[r7,#12]
 2197 0028 104A     	 ldr r2,.L90
 2198 002a 1340     	 and r3,r2
 2199 002c FB60     	 str r3,[r7,#12]
1038:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1039:../Libraries/XMCLib/src/xmc_ccu4.c ****   if ((bool) true == period_dither)
 2200              	 .loc 2 1039 0
 2201 002e FB1C     	 add r3,r7,#3
 2202 0030 1B78     	 ldrb r3,[r3]
 2203 0032 002B     	 cmp r3,#0
 2204 0034 04D0     	 beq .L88
1040:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
1041:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (((uint32_t) XMC_CCU4_SLICE_DITHER_PERIOD_MASK) << CCU4_CC4_TC_DITHE_Pos);
 2205              	 .loc 2 1041 0
 2206 0036 FB68     	 ldr r3,[r7,#12]
 2207 0038 8022     	 mov r2,#128
 2208 003a 9201     	 lsl r2,r2,#6
 2209 003c 1343     	 orr r3,r2
 2210 003e FB60     	 str r3,[r7,#12]
 2211              	.L88:
1042:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
1043:../Libraries/XMCLib/src/xmc_ccu4.c ****   if ((bool) true == duty_dither)
 2212              	 .loc 2 1043 0
 2213 0040 BB1C     	 add r3,r7,#2
 2214 0042 1B78     	 ldrb r3,[r3]
 2215 0044 002B     	 cmp r3,#0
 2216 0046 04D0     	 beq .L89
1044:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
1045:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (((uint32_t) XMC_CCU4_SLICE_DITHER_DUTYCYCLE_MASK) << CCU4_CC4_TC_DITHE_Pos);
 2217              	 .loc 2 1045 0
 2218 0048 FB68     	 ldr r3,[r7,#12]
 2219 004a 8022     	 mov r2,#128
 2220 004c D201     	 lsl r2,r2,#7
 2221 004e 1343     	 orr r3,r2
 2222 0050 FB60     	 str r3,[r7,#12]
 2223              	.L89:
1046:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
1047:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1048:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = tc;
 2224              	 .loc 2 1048 0
 2225 0052 7B68     	 ldr r3,[r7,#4]
 2226 0054 FA68     	 ldr r2,[r7,#12]
 2227 0056 5A61     	 str r2,[r3,#20]
1049:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1050:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_SLICE_SetDitherCompareValue((XMC_CCU4_SLICE_t *)slice, (uint8_t)spread);
 2228              	 .loc 2 1050 0
 2229 0058 7A68     	 ldr r2,[r7,#4]
 2230 005a 7B1C     	 add r3,r7,#1
 2231 005c 1B78     	 ldrb r3,[r3]
 2232 005e 101C     	 mov r0,r2
 2233 0060 191C     	 mov r1,r3
 2234 0062 FFF7FEFF 	 bl XMC_CCU4_SLICE_SetDitherCompareValue
1051:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 2235              	 .loc 2 1051 0
 2236 0066 BD46     	 mov sp,r7
 2237 0068 05B0     	 add sp,sp,#20
 2238              	 
 2239 006a 90BD     	 pop {r4,r7,pc}
 2240              	.L91:
 2241              	 .align 2
 2242              	.L90:
 2243 006c FF9FFFFF 	 .word -24577
 2244              	 .cfi_endproc
 2245              	.LFE137:
 2247              	 .section .text.XMC_CCU4_SLICE_SetPrescaler,"ax",%progbits
 2248              	 .align 2
 2249              	 .global XMC_CCU4_SLICE_SetPrescaler
 2250              	 .code 16
 2251              	 .thumb_func
 2253              	XMC_CCU4_SLICE_SetPrescaler:
 2254              	.LFB138:
1052:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1053:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Programs Pre-scalar divider  */
1054:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_PRESCALER_t di
1055:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 2255              	 .loc 2 1055 0
 2256              	 .cfi_startproc
 2257 0000 80B5     	 push {r7,lr}
 2258              	.LCFI93:
 2259              	 .cfi_def_cfa_offset 8
 2260              	 .cfi_offset 7,-8
 2261              	 .cfi_offset 14,-4
 2262 0002 84B0     	 sub sp,sp,#16
 2263              	.LCFI94:
 2264              	 .cfi_def_cfa_offset 24
 2265 0004 00AF     	 add r7,sp,#0
 2266              	.LCFI95:
 2267              	 .cfi_def_cfa_register 7
 2268 0006 7860     	 str r0,[r7,#4]
 2269 0008 0A1C     	 mov r2,r1
 2270 000a FB1C     	 add r3,r7,#3
 2271 000c 1A70     	 strb r2,[r3]
1056:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t fpc;
1057:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1058:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1059:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1060:../Libraries/XMCLib/src/xmc_ccu4.c ****   fpc = slice->FPC;
 2272              	 .loc 2 1060 0
 2273 000e 7B68     	 ldr r3,[r7,#4]
 2274 0010 9B6A     	 ldr r3,[r3,#40]
 2275 0012 FB60     	 str r3,[r7,#12]
1061:../Libraries/XMCLib/src/xmc_ccu4.c ****   fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 2276              	 .loc 2 1061 0
 2277 0014 FB68     	 ldr r3,[r7,#12]
 2278 0016 094A     	 ldr r2,.L93
 2279 0018 1340     	 and r3,r2
 2280 001a FB60     	 str r3,[r7,#12]
1062:../Libraries/XMCLib/src/xmc_ccu4.c ****   fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 2281              	 .loc 2 1062 0
 2282 001c FB1C     	 add r3,r7,#3
 2283 001e 1B78     	 ldrb r3,[r3]
 2284 0020 1B02     	 lsl r3,r3,#8
 2285 0022 FA68     	 ldr r2,[r7,#12]
 2286 0024 1343     	 orr r3,r2
 2287 0026 FB60     	 str r3,[r7,#12]
1063:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->FPC = fpc;
 2288              	 .loc 2 1063 0
 2289 0028 7B68     	 ldr r3,[r7,#4]
 2290 002a FA68     	 ldr r2,[r7,#12]
 2291 002c 9A62     	 str r2,[r3,#40]
1064:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* 
1065:../Libraries/XMCLib/src/xmc_ccu4.c ****    * In any case, update the initial value of the divider which is to be loaded once the prescaler 
1066:../Libraries/XMCLib/src/xmc_ccu4.c ****    * compare value.
1067:../Libraries/XMCLib/src/xmc_ccu4.c ****    */
1068:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->PSC = (uint32_t) div_val;
 2292              	 .loc 2 1068 0
 2293 002e FB1C     	 add r3,r7,#3
 2294 0030 1A78     	 ldrb r2,[r3]
 2295 0032 7B68     	 ldr r3,[r7,#4]
 2296 0034 5A62     	 str r2,[r3,#36]
1069:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 2297              	 .loc 2 1069 0
 2298 0036 BD46     	 mov sp,r7
 2299 0038 04B0     	 add sp,sp,#16
 2300              	 
 2301 003a 80BD     	 pop {r7,pc}
 2302              	.L94:
 2303              	 .align 2
 2304              	.L93:
 2305 003c FFF0FFFF 	 .word -3841
 2306              	 .cfi_endproc
 2307              	.LFE138:
 2309              	 .section .text.XMC_CCU4_SLICE_SetInterruptNode,"ax",%progbits
 2310              	 .align 2
 2311              	 .global XMC_CCU4_SLICE_SetInterruptNode
 2312              	 .code 16
 2313              	 .thumb_func
 2315              	XMC_CCU4_SLICE_SetInterruptNode:
 2316              	.LFB139:
1070:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1071:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Binds a capcom event to an NVIC node  */
1072:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
1073:../Libraries/XMCLib/src/xmc_ccu4.c ****                                      const XMC_CCU4_SLICE_IRQ_ID_t event,
1074:../Libraries/XMCLib/src/xmc_ccu4.c ****                                      const XMC_CCU4_SLICE_SR_ID_t sr)
1075:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 2317              	 .loc 2 1075 0
 2318              	 .cfi_startproc
 2319 0000 80B5     	 push {r7,lr}
 2320              	.LCFI96:
 2321              	 .cfi_def_cfa_offset 8
 2322              	 .cfi_offset 7,-8
 2323              	 .cfi_offset 14,-4
 2324 0002 86B0     	 sub sp,sp,#24
 2325              	.LCFI97:
 2326              	 .cfi_def_cfa_offset 32
 2327 0004 00AF     	 add r7,sp,#0
 2328              	.LCFI98:
 2329              	 .cfi_def_cfa_register 7
 2330 0006 7860     	 str r0,[r7,#4]
 2331 0008 081C     	 mov r0,r1
 2332 000a 111C     	 mov r1,r2
 2333 000c FB1C     	 add r3,r7,#3
 2334 000e 021C     	 add r2,r0,#0
 2335 0010 1A70     	 strb r2,[r3]
 2336 0012 BB1C     	 add r3,r7,#2
 2337 0014 0A1C     	 add r2,r1,#0
 2338 0016 1A70     	 strb r2,[r3]
1076:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t srs;
1077:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t pos;
1078:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t mask;
1079:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1080:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice))
1081:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
1082:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event)
1083:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1084:../Libraries/XMCLib/src/xmc_ccu4.c ****   srs = slice->SRS;
 2339              	 .loc 2 1084 0
 2340 0018 7B68     	 ldr r3,[r7,#4]
 2341 001a A822     	 mov r2,#168
 2342 001c 9B58     	 ldr r3,[r3,r2]
 2343 001e FB60     	 str r3,[r7,#12]
1085:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1086:../Libraries/XMCLib/src/xmc_ccu4.c ****   switch(event)
 2344              	 .loc 2 1086 0
 2345 0020 FB1C     	 add r3,r7,#3
 2346 0022 1B78     	 ldrb r3,[r3]
 2347 0024 092B     	 cmp r3,#9
 2348 0026 1AD8     	 bhi .L96
 2349 0028 9A00     	 lsl r2,r3,#2
 2350 002a 1A4B     	 ldr r3,.L103
 2351 002c D318     	 add r3,r2,r3
 2352 002e 1B68     	 ldr r3,[r3]
 2353 0030 9F46     	 mov pc,r3
 2354              	 .section .rodata.XMC_CCU4_SLICE_SetInterruptNode,"a",%progbits
 2355              	 .align 2
 2356              	.L98:
 2357 0000 32000000 	 .word .L97
 2358 0004 32000000 	 .word .L97
 2359 0008 3C000000 	 .word .L99
 2360 000c 3C000000 	 .word .L99
 2361 0010 5E000000 	 .word .L96
 2362 0014 5E000000 	 .word .L96
 2363 0018 5E000000 	 .word .L96
 2364 001c 5E000000 	 .word .L96
 2365 0020 46000000 	 .word .L100
 2366 0024 52000000 	 .word .L101
 2367              	 .section .text.XMC_CCU4_SLICE_SetInterruptNode
 2368              	.L97:
1087:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
1088:../Libraries/XMCLib/src/xmc_ccu4.c ****     case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
1089:../Libraries/XMCLib/src/xmc_ccu4.c ****     case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
1090:../Libraries/XMCLib/src/xmc_ccu4.c ****       mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 2369              	 .loc 2 1090 0
 2370 0032 0323     	 mov r3,#3
 2371 0034 3B61     	 str r3,[r7,#16]
1091:../Libraries/XMCLib/src/xmc_ccu4.c ****       pos  = CCU4_CC4_SRS_POSR_Pos;
 2372              	 .loc 2 1091 0
 2373 0036 0023     	 mov r3,#0
 2374 0038 7B61     	 str r3,[r7,#20]
1092:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 2375              	 .loc 2 1092 0
 2376 003a 16E0     	 b .L102
 2377              	.L99:
1093:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1094:../Libraries/XMCLib/src/xmc_ccu4.c ****     case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
1095:../Libraries/XMCLib/src/xmc_ccu4.c ****     case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
1096:../Libraries/XMCLib/src/xmc_ccu4.c ****       mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 2378              	 .loc 2 1096 0
 2379 003c 0C23     	 mov r3,#12
 2380 003e 3B61     	 str r3,[r7,#16]
1097:../Libraries/XMCLib/src/xmc_ccu4.c ****       pos  = CCU4_CC4_SRS_CMSR_Pos;
 2381              	 .loc 2 1097 0
 2382 0040 0223     	 mov r3,#2
 2383 0042 7B61     	 str r3,[r7,#20]
1098:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 2384              	 .loc 2 1098 0
 2385 0044 11E0     	 b .L102
 2386              	.L100:
1099:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1100:../Libraries/XMCLib/src/xmc_ccu4.c ****     case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
1101:../Libraries/XMCLib/src/xmc_ccu4.c ****       mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 2387              	 .loc 2 1101 0
 2388 0046 C023     	 mov r3,#192
 2389 0048 9B00     	 lsl r3,r3,#2
 2390 004a 3B61     	 str r3,[r7,#16]
1102:../Libraries/XMCLib/src/xmc_ccu4.c ****       pos  = CCU4_CC4_SRS_E0SR_Pos;
 2391              	 .loc 2 1102 0
 2392 004c 0823     	 mov r3,#8
 2393 004e 7B61     	 str r3,[r7,#20]
1103:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 2394              	 .loc 2 1103 0
 2395 0050 0BE0     	 b .L102
 2396              	.L101:
1104:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1105:../Libraries/XMCLib/src/xmc_ccu4.c ****     case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
1106:../Libraries/XMCLib/src/xmc_ccu4.c ****       mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 2397              	 .loc 2 1106 0
 2398 0052 C023     	 mov r3,#192
 2399 0054 1B01     	 lsl r3,r3,#4
 2400 0056 3B61     	 str r3,[r7,#16]
1107:../Libraries/XMCLib/src/xmc_ccu4.c ****       pos  = CCU4_CC4_SRS_E1SR_Pos;
 2401              	 .loc 2 1107 0
 2402 0058 0A23     	 mov r3,#10
 2403 005a 7B61     	 str r3,[r7,#20]
1108:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 2404              	 .loc 2 1108 0
 2405 005c 05E0     	 b .L102
 2406              	.L96:
1109:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1110:../Libraries/XMCLib/src/xmc_ccu4.c ****     default:
1111:../Libraries/XMCLib/src/xmc_ccu4.c ****       mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 2407              	 .loc 2 1111 0
 2408 005e C023     	 mov r3,#192
 2409 0060 9B01     	 lsl r3,r3,#6
 2410 0062 3B61     	 str r3,[r7,#16]
1112:../Libraries/XMCLib/src/xmc_ccu4.c ****       pos  = CCU4_CC4_SRS_E2SR_Pos;
 2411              	 .loc 2 1112 0
 2412 0064 0C23     	 mov r3,#12
 2413 0066 7B61     	 str r3,[r7,#20]
1113:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 2414              	 .loc 2 1113 0
 2415 0068 C046     	 mov r8,r8
 2416              	.L102:
1114:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
1115:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1116:../Libraries/XMCLib/src/xmc_ccu4.c ****   srs &= ~mask; 
 2417              	 .loc 2 1116 0
 2418 006a 3B69     	 ldr r3,[r7,#16]
 2419 006c DA43     	 mvn r2,r3
 2420 006e FB68     	 ldr r3,[r7,#12]
 2421 0070 1340     	 and r3,r2
 2422 0072 FB60     	 str r3,[r7,#12]
1117:../Libraries/XMCLib/src/xmc_ccu4.c ****   srs |= (uint32_t)sr << pos;
 2423              	 .loc 2 1117 0
 2424 0074 BB1C     	 add r3,r7,#2
 2425 0076 1A78     	 ldrb r2,[r3]
 2426 0078 7B69     	 ldr r3,[r7,#20]
 2427 007a 9A40     	 lsl r2,r2,r3
 2428 007c 131C     	 mov r3,r2
 2429 007e FA68     	 ldr r2,[r7,#12]
 2430 0080 1343     	 orr r3,r2
 2431 0082 FB60     	 str r3,[r7,#12]
1118:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->SRS = srs;
 2432              	 .loc 2 1118 0
 2433 0084 7B68     	 ldr r3,[r7,#4]
 2434 0086 A821     	 mov r1,#168
 2435 0088 FA68     	 ldr r2,[r7,#12]
 2436 008a 5A50     	 str r2,[r3,r1]
1119:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 2437              	 .loc 2 1119 0
 2438 008c BD46     	 mov sp,r7
 2439 008e 06B0     	 add sp,sp,#24
 2440              	 
 2441 0090 80BD     	 pop {r7,pc}
 2442              	.L104:
 2443 0092 C046     	 .align 2
 2444              	.L103:
 2445 0094 00000000 	 .word .L98
 2446              	 .cfi_endproc
 2447              	.LFE139:
 2449              	 .section .text.XMC_CCU4_SLICE_SetPassiveLevel,"ax",%progbits
 2450              	 .align 2
 2451              	 .global XMC_CCU4_SLICE_SetPassiveLevel
 2452              	 .code 16
 2453              	 .thumb_func
 2455              	XMC_CCU4_SLICE_SetPassiveLevel:
 2456              	.LFB140:
1120:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1121:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Asserts passive level for the slice output */
1122:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_SetPassiveLevel(XMC_CCU4_SLICE_t *const slice,
1123:../Libraries/XMCLib/src/xmc_ccu4.c ****                                     const XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t level)
1124:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 2457              	 .loc 2 1124 0
 2458              	 .cfi_startproc
 2459 0000 80B5     	 push {r7,lr}
 2460              	.LCFI99:
 2461              	 .cfi_def_cfa_offset 8
 2462              	 .cfi_offset 7,-8
 2463              	 .cfi_offset 14,-4
 2464 0002 84B0     	 sub sp,sp,#16
 2465              	.LCFI100:
 2466              	 .cfi_def_cfa_offset 24
 2467 0004 00AF     	 add r7,sp,#0
 2468              	.LCFI101:
 2469              	 .cfi_def_cfa_register 7
 2470 0006 7860     	 str r0,[r7,#4]
 2471 0008 0A1C     	 mov r2,r1
 2472 000a FB1C     	 add r3,r7,#3
 2473 000c 1A70     	 strb r2,[r3]
1125:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t psl; 
1126:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1127:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetPassiveLevel:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1128:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetPassiveLevel:Invalid Passive level", ((level == XMC_CCU4_SLICE_OUTP
1129:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                                       (level == XMC_CCU4_SLICE_OUTP
1130:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1131:../Libraries/XMCLib/src/xmc_ccu4.c ****   psl = slice->PSL;
 2474              	 .loc 2 1131 0
 2475 000e 7B68     	 ldr r3,[r7,#4]
 2476 0010 9B69     	 ldr r3,[r3,#24]
 2477 0012 FB60     	 str r3,[r7,#12]
1132:../Libraries/XMCLib/src/xmc_ccu4.c ****   psl &= ~((uint32_t) CCU4_CC4_PSL_PSL_Msk);
 2478              	 .loc 2 1132 0
 2479 0014 FB68     	 ldr r3,[r7,#12]
 2480 0016 0122     	 mov r2,#1
 2481 0018 9343     	 bic r3,r2
 2482 001a FB60     	 str r3,[r7,#12]
1133:../Libraries/XMCLib/src/xmc_ccu4.c ****   psl |= (uint32_t) level;
 2483              	 .loc 2 1133 0
 2484 001c FB1C     	 add r3,r7,#3
 2485 001e 1B78     	 ldrb r3,[r3]
 2486 0020 FA68     	 ldr r2,[r7,#12]
 2487 0022 1343     	 orr r3,r2
 2488 0024 FB60     	 str r3,[r7,#12]
1134:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1135:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program CC4 slice output passive level */
1136:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->PSL = psl;
 2489              	 .loc 2 1136 0
 2490 0026 7B68     	 ldr r3,[r7,#4]
 2491 0028 FA68     	 ldr r2,[r7,#12]
 2492 002a 9A61     	 str r2,[r3,#24]
1137:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 2493              	 .loc 2 1137 0
 2494 002c BD46     	 mov sp,r7
 2495 002e 04B0     	 add sp,sp,#16
 2496              	 
 2497 0030 80BD     	 pop {r7,pc}
 2498              	 .cfi_endproc
 2499              	.LFE140:
 2501 0032 C046     	 .text
 2502              	.Letext0:
 2503              	 .file 3 "d:\\software\\dave_4-4-2_64bit_2018-02-23\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2504              	 .file 4 "d:\\software\\dave_4-4-2_64bit_2018-02-23\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2505              	 .file 5 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Infineon/XMC1400_series/Include/XMC1400.h"
 2506              	 .file 6 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc/xmc1_scu.h"
 2507              	 .file 7 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Infineon/XMC1400_series/Include/system_XMC1400.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_ccu4.c
    {standard input}:18     .text.XMC_CCU4_StartPrescaler:00000000 $t
    {standard input}:22     .text.XMC_CCU4_StartPrescaler:00000000 XMC_CCU4_StartPrescaler
    {standard input}:56     .text.XMC_CCU4_SLICE_SetDitherCompareValue:00000000 $t
    {standard input}:60     .text.XMC_CCU4_SLICE_SetDitherCompareValue:00000000 XMC_CCU4_SLICE_SetDitherCompareValue
    {standard input}:93     .text.XMC_CCU4_lGateClock:00000000 $t
    {standard input}:97     .text.XMC_CCU4_lGateClock:00000000 XMC_CCU4_lGateClock
    {standard input}:143    .text.XMC_CCU4_lGateClock:00000030 $d
    {standard input}:149    .text.XMC_CCU4_lUngateClock:00000000 $t
    {standard input}:153    .text.XMC_CCU4_lUngateClock:00000000 XMC_CCU4_lUngateClock
    {standard input}:198    .text.XMC_CCU4_lUngateClock:00000030 $d
    {standard input}:204    .text.XMC_CCU4_EnableModule:00000000 $t
    {standard input}:209    .text.XMC_CCU4_EnableModule:00000000 XMC_CCU4_EnableModule
    {standard input}:238    .text.XMC_CCU4_DisableModule:00000000 $t
    {standard input}:243    .text.XMC_CCU4_DisableModule:00000000 XMC_CCU4_DisableModule
    {standard input}:272    .text.XMC_CCU4_Init:00000000 $t
    {standard input}:277    .text.XMC_CCU4_Init:00000000 XMC_CCU4_Init
    {standard input}:332    .text.XMC_CCU4_Init:00000044 $d
    {standard input}:337    .text.XMC_CCU4_SetModuleClock:00000000 $t
    {standard input}:342    .text.XMC_CCU4_SetModuleClock:00000000 XMC_CCU4_SetModuleClock
    {standard input}:390    .text.XMC_CCU4_SetMultiChannelShadowTransferMode:00000000 $t
    {standard input}:395    .text.XMC_CCU4_SetMultiChannelShadowTransferMode:00000000 XMC_CCU4_SetMultiChannelShadowTransferMode
    {standard input}:443    .text.XMC_CCU4_SLICE_CompareInit:00000000 $t
    {standard input}:448    .text.XMC_CCU4_SLICE_CompareInit:00000000 XMC_CCU4_SLICE_CompareInit
    {standard input}:524    .text.XMC_CCU4_SLICE_CaptureInit:00000000 $t
    {standard input}:529    .text.XMC_CCU4_SLICE_CaptureInit:00000000 XMC_CCU4_SLICE_CaptureInit
    {standard input}:587    .text.XMC_CCU4_SLICE_StartConfig:00000000 $t
    {standard input}:592    .text.XMC_CCU4_SLICE_StartConfig:00000000 XMC_CCU4_SLICE_StartConfig
    {standard input}:670    .text.XMC_CCU4_SLICE_StartConfig:00000064 $d
    {standard input}:675    .text.XMC_CCU4_SLICE_StopConfig:00000000 $t
    {standard input}:680    .text.XMC_CCU4_SLICE_StopConfig:00000000 XMC_CCU4_SLICE_StopConfig
    {standard input}:752    .text.XMC_CCU4_SLICE_StopConfig:00000060 $d
    {standard input}:757    .text.XMC_CCU4_SLICE_LoadConfig:00000000 $t
    {standard input}:762    .text.XMC_CCU4_SLICE_LoadConfig:00000000 XMC_CCU4_SLICE_LoadConfig
    {standard input}:809    .text.XMC_CCU4_SLICE_LoadConfig:00000034 $d
    {standard input}:814    .text.XMC_CCU4_SLICE_ModulationConfig:00000000 $t
    {standard input}:819    .text.XMC_CCU4_SLICE_ModulationConfig:00000000 XMC_CCU4_SLICE_ModulationConfig
    {standard input}:922    .text.XMC_CCU4_SLICE_ModulationConfig:0000008c $d
    {standard input}:929    .text.XMC_CCU4_SLICE_CountConfig:00000000 $t
    {standard input}:934    .text.XMC_CCU4_SLICE_CountConfig:00000000 XMC_CCU4_SLICE_CountConfig
    {standard input}:981    .text.XMC_CCU4_SLICE_CountConfig:00000034 $d
    {standard input}:986    .text.XMC_CCU4_SLICE_GateConfig:00000000 $t
    {standard input}:991    .text.XMC_CCU4_SLICE_GateConfig:00000000 XMC_CCU4_SLICE_GateConfig
    {standard input}:1038   .text.XMC_CCU4_SLICE_GateConfig:00000034 $d
    {standard input}:1043   .text.XMC_CCU4_SLICE_Capture0Config:00000000 $t
    {standard input}:1048   .text.XMC_CCU4_SLICE_Capture0Config:00000000 XMC_CCU4_SLICE_Capture0Config
    {standard input}:1096   .text.XMC_CCU4_SLICE_Capture1Config:00000000 $t
    {standard input}:1101   .text.XMC_CCU4_SLICE_Capture1Config:00000000 XMC_CCU4_SLICE_Capture1Config
    {standard input}:1149   .text.XMC_CCU4_SLICE_DirectionConfig:00000000 $t
    {standard input}:1154   .text.XMC_CCU4_SLICE_DirectionConfig:00000000 XMC_CCU4_SLICE_DirectionConfig
    {standard input}:1201   .text.XMC_CCU4_SLICE_DirectionConfig:00000034 $d
    {standard input}:1206   .text.XMC_CCU4_SLICE_StatusBitOverrideConfig:00000000 $t
    {standard input}:1211   .text.XMC_CCU4_SLICE_StatusBitOverrideConfig:00000000 XMC_CCU4_SLICE_StatusBitOverrideConfig
    {standard input}:1254   .text.XMC_CCU4_SLICE_StatusBitOverrideConfig:0000002c $d
    {standard input}:1259   .text.XMC_CCU4_SLICE_TrapConfig:00000000 $t
    {standard input}:1264   .text.XMC_CCU4_SLICE_TrapConfig:00000000 XMC_CCU4_SLICE_TrapConfig
    {standard input}:1361   .text.XMC_CCU4_SLICE_TrapConfig:00000080 $d
    {standard input}:1368   .text.XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:00000000 $t
    {standard input}:1373   .text.XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:00000000 XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent
    {standard input}:1513   .text.XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:000000d0 $d
    {standard input}:1523   .text.XMC_CCU4_SLICE_ConfigureEvent:00000000 $t
    {standard input}:1528   .text.XMC_CCU4_SLICE_ConfigureEvent:00000000 XMC_CCU4_SLICE_ConfigureEvent
    {standard input}:1712   .text.XMC_CCU4_SLICE_SetInput:00000000 $t
    {standard input}:1717   .text.XMC_CCU4_SLICE_SetInput:00000000 XMC_CCU4_SLICE_SetInput
    {standard input}:1797   .text.XMC_CCU4_SLICE_SetTimerRepeatMode:00000000 $t
    {standard input}:1802   .text.XMC_CCU4_SLICE_SetTimerRepeatMode:00000000 XMC_CCU4_SLICE_SetTimerRepeatMode
    {standard input}:1853   .text.XMC_CCU4_SLICE_SetTimerCountingMode:00000000 $t
    {standard input}:1858   .text.XMC_CCU4_SLICE_SetTimerCountingMode:00000000 XMC_CCU4_SLICE_SetTimerCountingMode
    {standard input}:1909   .text.XMC_CCU4_SLICE_GetCaptureRegisterValue:00000000 $t
    {standard input}:1914   .text.XMC_CCU4_SLICE_GetCaptureRegisterValue:00000000 XMC_CCU4_SLICE_GetCaptureRegisterValue
    {standard input}:1951   .text.XMC_CCU4_SLICE_GetLastCapturedTimerValue:00000000 $t
    {standard input}:1956   .text.XMC_CCU4_SLICE_GetLastCapturedTimerValue:00000000 XMC_CCU4_SLICE_GetLastCapturedTimerValue
    {standard input}:2103   .text.XMC_CCU4_SLICE_GetCapturedValueFromFifo:00000000 $t
    {standard input}:2108   .text.XMC_CCU4_SLICE_GetCapturedValueFromFifo:00000000 XMC_CCU4_SLICE_GetCapturedValueFromFifo
    {standard input}:2157   .text.XMC_CCU4_SLICE_EnableDithering:00000000 $t
    {standard input}:2162   .text.XMC_CCU4_SLICE_EnableDithering:00000000 XMC_CCU4_SLICE_EnableDithering
    {standard input}:2243   .text.XMC_CCU4_SLICE_EnableDithering:0000006c $d
    {standard input}:2248   .text.XMC_CCU4_SLICE_SetPrescaler:00000000 $t
    {standard input}:2253   .text.XMC_CCU4_SLICE_SetPrescaler:00000000 XMC_CCU4_SLICE_SetPrescaler
    {standard input}:2305   .text.XMC_CCU4_SLICE_SetPrescaler:0000003c $d
    {standard input}:2310   .text.XMC_CCU4_SLICE_SetInterruptNode:00000000 $t
    {standard input}:2315   .text.XMC_CCU4_SLICE_SetInterruptNode:00000000 XMC_CCU4_SLICE_SetInterruptNode
    {standard input}:2355   .rodata.XMC_CCU4_SLICE_SetInterruptNode:00000000 $d
    {standard input}:2445   .text.XMC_CCU4_SLICE_SetInterruptNode:00000094 $d
    {standard input}:2450   .text.XMC_CCU4_SLICE_SetPassiveLevel:00000000 $t
    {standard input}:2455   .text.XMC_CCU4_SLICE_SetPassiveLevel:00000000 XMC_CCU4_SLICE_SetPassiveLevel
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_CLOCK_GatePeripheralClock
XMC_SCU_CLOCK_UngatePeripheralClock
