   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "xmc_math.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_MATH_DIV_IsBusy,"ax",%progbits
  18              	 .align 2
  19              	 .global XMC_MATH_DIV_IsBusy
  20              	 .code 16
  21              	 .thumb_func
  23              	XMC_MATH_DIV_IsBusy:
  24              	.LFB80:
  25              	 .file 1 "../Libraries/XMCLib/src/xmc_math.c"
   1:../Libraries/XMCLib/src/xmc_math.c **** 
   2:../Libraries/XMCLib/src/xmc_math.c **** /**
   3:../Libraries/XMCLib/src/xmc_math.c ****  * @file xmc_math.c
   4:../Libraries/XMCLib/src/xmc_math.c ****  * @date 2017-11-30
   5:../Libraries/XMCLib/src/xmc_math.c ****  *
   6:../Libraries/XMCLib/src/xmc_math.c ****  * @cond
   7:../Libraries/XMCLib/src/xmc_math.c ****  **********************************************************************************
   8:../Libraries/XMCLib/src/xmc_math.c ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   9:../Libraries/XMCLib/src/xmc_math.c ****  *
  10:../Libraries/XMCLib/src/xmc_math.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  11:../Libraries/XMCLib/src/xmc_math.c ****  * All rights reserved.                        
  12:../Libraries/XMCLib/src/xmc_math.c ****  *                                             
  13:../Libraries/XMCLib/src/xmc_math.c ****  * Redistribution and use in source and binary forms, with or without           
  14:../Libraries/XMCLib/src/xmc_math.c ****  * modification,are permitted provided that the following conditions are met:   
  15:../Libraries/XMCLib/src/xmc_math.c ****  *                                                                              
  16:../Libraries/XMCLib/src/xmc_math.c ****  *   Redistributions of source code must retain the above copyright notice,      
  17:../Libraries/XMCLib/src/xmc_math.c ****  *   this list of conditions and the following disclaimer.                        
  18:../Libraries/XMCLib/src/xmc_math.c ****  * 
  19:../Libraries/XMCLib/src/xmc_math.c ****  *   Redistributions in binary form must reproduce the above copyright notice,   
  20:../Libraries/XMCLib/src/xmc_math.c ****  *   this list of conditions and the following disclaimer in the documentation    
  21:../Libraries/XMCLib/src/xmc_math.c ****  *   and/or other materials provided with the distribution.                       
  22:../Libraries/XMCLib/src/xmc_math.c ****  * 
  23:../Libraries/XMCLib/src/xmc_math.c ****  *   Neither the name of the copyright holders nor the names of its contributors 
  24:../Libraries/XMCLib/src/xmc_math.c ****  *   may be used to endorse or promote products derived from this software without
  25:../Libraries/XMCLib/src/xmc_math.c ****  *   specific prior written permission.                                           
  26:../Libraries/XMCLib/src/xmc_math.c ****  *                                                                              
  27:../Libraries/XMCLib/src/xmc_math.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  
  28:../Libraries/XMCLib/src/xmc_math.c ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    
  29:../Libraries/XMCLib/src/xmc_math.c ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   
  30:../Libraries/XMCLib/src/xmc_math.c ****  * ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   
  31:../Libraries/XMCLib/src/xmc_math.c ****  * LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         
  32:../Libraries/XMCLib/src/xmc_math.c ****  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         
  33:../Libraries/XMCLib/src/xmc_math.c ****  * SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    
  34:../Libraries/XMCLib/src/xmc_math.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      
  35:../Libraries/XMCLib/src/xmc_math.c ****  * CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       
  36:../Libraries/XMCLib/src/xmc_math.c ****  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   
  37:../Libraries/XMCLib/src/xmc_math.c ****  * POSSIBILITY OF SUCH DAMAGE.                                                  
  38:../Libraries/XMCLib/src/xmc_math.c ****  *                                                                              
  39:../Libraries/XMCLib/src/xmc_math.c ****  * To improve the quality of the software, users are encouraged to share        
  40:../Libraries/XMCLib/src/xmc_math.c ****  * modifications, enhancements or bug fixes with Infineon Technologies AG       
  41:../Libraries/XMCLib/src/xmc_math.c ****  * dave@infineon.com).                                                          
  42:../Libraries/XMCLib/src/xmc_math.c ****  **********************************************************************************
  43:../Libraries/XMCLib/src/xmc_math.c ****  *
  44:../Libraries/XMCLib/src/xmc_math.c ****  * Change History
  45:../Libraries/XMCLib/src/xmc_math.c ****  * --------------
  46:../Libraries/XMCLib/src/xmc_math.c ****  *
  47:../Libraries/XMCLib/src/xmc_math.c ****  * 2015-06-20: 
  48:../Libraries/XMCLib/src/xmc_math.c ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  49:../Libraries/XMCLib/src/xmc_math.c ****  *     - Updated copyright and change history section.
  50:../Libraries/XMCLib/src/xmc_math.c ****  *
  51:../Libraries/XMCLib/src/xmc_math.c ****  * 2015-09-23: 
  52:../Libraries/XMCLib/src/xmc_math.c ****  *     - Added SQRT functions
  53:../Libraries/XMCLib/src/xmc_math.c ****  *
  54:../Libraries/XMCLib/src/xmc_math.c ****  * 2015-10-08:
  55:../Libraries/XMCLib/src/xmc_math.c ****  *     - Return values for sin(), cos(), sinh(), cosh(), arctan() are corrected.
  56:../Libraries/XMCLib/src/xmc_math.c ****  *
  57:../Libraries/XMCLib/src/xmc_math.c ****  * 2017-04-20:
  58:../Libraries/XMCLib/src/xmc_math.c ****  *     - Foward declaration of __aeabi_* to fix link time optimization (-flto) compilation errors
  59:../Libraries/XMCLib/src/xmc_math.c ****  * 
  60:../Libraries/XMCLib/src/xmc_math.c ****  * 2017-11-30:
  61:../Libraries/XMCLib/src/xmc_math.c ****  *     - Fixed reentrancy problems when using __aeabi_* functions (division ‘/’ and modulo ‘%
  62:../Libraries/XMCLib/src/xmc_math.c ****  *       as long as XMC_MATH_DISABLE_DIV_ABI is not defined
  63:../Libraries/XMCLib/src/xmc_math.c ****  * 
  64:../Libraries/XMCLib/src/xmc_math.c ****  * @endcond
  65:../Libraries/XMCLib/src/xmc_math.c ****  *
  66:../Libraries/XMCLib/src/xmc_math.c ****  */
  67:../Libraries/XMCLib/src/xmc_math.c **** 
  68:../Libraries/XMCLib/src/xmc_math.c **** /**
  69:../Libraries/XMCLib/src/xmc_math.c ****  *
  70:../Libraries/XMCLib/src/xmc_math.c ****  * @brief MATH driver - API implementation for XMC13/14 family MATH libraries. <br>
  71:../Libraries/XMCLib/src/xmc_math.c ****  * 
  72:../Libraries/XMCLib/src/xmc_math.c ****  * <b>Detailed description of file</b> <br>
  73:../Libraries/XMCLib/src/xmc_math.c ****  * APIs provided in this file cover the following functional blocks of MATH: <br>
  74:../Libraries/XMCLib/src/xmc_math.c ****  *
  75:../Libraries/XMCLib/src/xmc_math.c ****  */
  76:../Libraries/XMCLib/src/xmc_math.c **** 
  77:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
  78:../Libraries/XMCLib/src/xmc_math.c ****  * HEADER FILES
  79:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
  80:../Libraries/XMCLib/src/xmc_math.c **** #include <xmc_math.h>
  81:../Libraries/XMCLib/src/xmc_math.c **** 
  82:../Libraries/XMCLib/src/xmc_math.c **** #if defined (MATH)
  83:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
  84:../Libraries/XMCLib/src/xmc_math.c ****  * MACROS
  85:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
  86:../Libraries/XMCLib/src/xmc_math.c **** /* Reciprocal of Circular gain in XMC_MATH_Q0_23_t format ((2^23)/1.646760258121) */
  87:../Libraries/XMCLib/src/xmc_math.c **** #define XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023       (0x4DBA76U)
  88:../Libraries/XMCLib/src/xmc_math.c **** /* Reciprocal of Hyperbolic gain in XMC_MATH_Q1_22_t format ((2^22)/0.828159360960) */
  89:../Libraries/XMCLib/src/xmc_math.c **** #define XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22    (0x4D47A1U)
  90:../Libraries/XMCLib/src/xmc_math.c **** /* Signed division is selected */
  91:../Libraries/XMCLib/src/xmc_math.c **** #define XMC_MATH_SIGNED_DIVISION                      ((uint32_t) 0 << MATH_DIVCON_USIGN_Pos)
  92:../Libraries/XMCLib/src/xmc_math.c **** /* Unsigned division is selected */
  93:../Libraries/XMCLib/src/xmc_math.c **** #define XMC_MATH_UNSIGNED_DIVISION                    ((uint32_t) 1 << MATH_DIVCON_USIGN_Pos)
  94:../Libraries/XMCLib/src/xmc_math.c **** 
  95:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
  96:../Libraries/XMCLib/src/xmc_math.c ****  * ENUMS
  97:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
  98:../Libraries/XMCLib/src/xmc_math.c **** 
  99:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
 100:../Libraries/XMCLib/src/xmc_math.c ****  * GLOBAL DATA
 101:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
 102:../Libraries/XMCLib/src/xmc_math.c **** 
 103:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
 104:../Libraries/XMCLib/src/xmc_math.c ****  * DATA STRUCTURES
 105:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
 106:../Libraries/XMCLib/src/xmc_math.c **** 
 107:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
 108:../Libraries/XMCLib/src/xmc_math.c ****  * LOCAL ROUTINES
 109:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
 110:../Libraries/XMCLib/src/xmc_math.c **** 
 111:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
 112:../Libraries/XMCLib/src/xmc_math.c ****  * API IMPLEMENTATION - Utility functions
 113:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
 114:../Libraries/XMCLib/src/xmc_math.c **** __attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
 115:../Libraries/XMCLib/src/xmc_math.c **** {
 116:../Libraries/XMCLib/src/xmc_math.c ****   uint32_t status;
 117:../Libraries/XMCLib/src/xmc_math.c ****   status = __get_PRIMASK();
 118:../Libraries/XMCLib/src/xmc_math.c ****   __disable_irq ();
 119:../Libraries/XMCLib/src/xmc_math.c ****   return status;
 120:../Libraries/XMCLib/src/xmc_math.c **** }
 121:../Libraries/XMCLib/src/xmc_math.c **** 
 122:../Libraries/XMCLib/src/xmc_math.c **** __attribute__((always_inline)) __STATIC_INLINE void critical_section_exit(uint32_t status)
 123:../Libraries/XMCLib/src/xmc_math.c **** {
 124:../Libraries/XMCLib/src/xmc_math.c ****   __set_PRIMASK(status);
 125:../Libraries/XMCLib/src/xmc_math.c **** }
 126:../Libraries/XMCLib/src/xmc_math.c **** 
 127:../Libraries/XMCLib/src/xmc_math.c **** /* Utility function to check if the DIV unit is busy */
 128:../Libraries/XMCLib/src/xmc_math.c **** bool XMC_MATH_DIV_IsBusy(void)
 129:../Libraries/XMCLib/src/xmc_math.c **** {
  26              	 .loc 1 129 0
  27              	 .cfi_startproc
  28 0000 80B5     	 push {r7,lr}
  29              	.LCFI0:
  30              	 .cfi_def_cfa_offset 8
  31              	 .cfi_offset 7,-8
  32              	 .cfi_offset 14,-4
  33 0002 82B0     	 sub sp,sp,#8
  34              	.LCFI1:
  35              	 .cfi_def_cfa_offset 16
  36 0004 00AF     	 add r7,sp,#0
  37              	.LCFI2:
  38              	 .cfi_def_cfa_register 7
 130:../Libraries/XMCLib/src/xmc_math.c ****   bool status;
 131:../Libraries/XMCLib/src/xmc_math.c ****   if (MATH->DIVST & MATH_DIVST_BSY_Msk)
  39              	 .loc 1 131 0
  40 0006 094B     	 ldr r3,.L5
  41 0008 1B6B     	 ldr r3,[r3,#48]
  42 000a 0122     	 mov r2,#1
  43 000c 1340     	 and r3,r2
  44 000e 03D0     	 beq .L2
 132:../Libraries/XMCLib/src/xmc_math.c ****   {
 133:../Libraries/XMCLib/src/xmc_math.c ****     status = true;  /* DIV unit is busy running a division operation */ 
  45              	 .loc 1 133 0
  46 0010 FB1D     	 add r3,r7,#7
  47 0012 0122     	 mov r2,#1
  48 0014 1A70     	 strb r2,[r3]
  49 0016 02E0     	 b .L3
  50              	.L2:
 134:../Libraries/XMCLib/src/xmc_math.c ****   }
 135:../Libraries/XMCLib/src/xmc_math.c ****   else
 136:../Libraries/XMCLib/src/xmc_math.c ****   {
 137:../Libraries/XMCLib/src/xmc_math.c ****     status = false; /* DIV unit is idle */ 
  51              	 .loc 1 137 0
  52 0018 FB1D     	 add r3,r7,#7
  53 001a 0022     	 mov r2,#0
  54 001c 1A70     	 strb r2,[r3]
  55              	.L3:
 138:../Libraries/XMCLib/src/xmc_math.c ****   }
 139:../Libraries/XMCLib/src/xmc_math.c **** 
 140:../Libraries/XMCLib/src/xmc_math.c ****   return (status);
  56              	 .loc 1 140 0
  57 001e FB1D     	 add r3,r7,#7
  58 0020 1B78     	 ldrb r3,[r3]
 141:../Libraries/XMCLib/src/xmc_math.c **** }
  59              	 .loc 1 141 0
  60 0022 181C     	 mov r0,r3
  61 0024 BD46     	 mov sp,r7
  62 0026 02B0     	 add sp,sp,#8
  63              	 
  64 0028 80BD     	 pop {r7,pc}
  65              	.L6:
  66 002a C046     	 .align 2
  67              	.L5:
  68 002c 00000340 	 .word 1073938432
  69              	 .cfi_endproc
  70              	.LFE80:
  72              	 .section .text.XMC_MATH_CORDIC_IsBusy,"ax",%progbits
  73              	 .align 2
  74              	 .global XMC_MATH_CORDIC_IsBusy
  75              	 .code 16
  76              	 .thumb_func
  78              	XMC_MATH_CORDIC_IsBusy:
  79              	.LFB81:
 142:../Libraries/XMCLib/src/xmc_math.c **** 
 143:../Libraries/XMCLib/src/xmc_math.c **** /* Utility function to check if the CORDIC unit is busy */
 144:../Libraries/XMCLib/src/xmc_math.c **** bool XMC_MATH_CORDIC_IsBusy(void)
 145:../Libraries/XMCLib/src/xmc_math.c **** {
  80              	 .loc 1 145 0
  81              	 .cfi_startproc
  82 0000 80B5     	 push {r7,lr}
  83              	.LCFI3:
  84              	 .cfi_def_cfa_offset 8
  85              	 .cfi_offset 7,-8
  86              	 .cfi_offset 14,-4
  87 0002 82B0     	 sub sp,sp,#8
  88              	.LCFI4:
  89              	 .cfi_def_cfa_offset 16
  90 0004 00AF     	 add r7,sp,#0
  91              	.LCFI5:
  92              	 .cfi_def_cfa_register 7
 146:../Libraries/XMCLib/src/xmc_math.c ****   bool status;
 147:../Libraries/XMCLib/src/xmc_math.c ****   if (MATH->STATC & MATH_STATC_BSY_Msk)
  93              	 .loc 1 147 0
  94 0006 094B     	 ldr r3,.L11
  95 0008 1B6C     	 ldr r3,[r3,#64]
  96 000a 0122     	 mov r2,#1
  97 000c 1340     	 and r3,r2
  98 000e 03D0     	 beq .L8
 148:../Libraries/XMCLib/src/xmc_math.c ****   {
 149:../Libraries/XMCLib/src/xmc_math.c ****     status = true;  /* CORDIC unit is busy running an operation */  
  99              	 .loc 1 149 0
 100 0010 FB1D     	 add r3,r7,#7
 101 0012 0122     	 mov r2,#1
 102 0014 1A70     	 strb r2,[r3]
 103 0016 02E0     	 b .L9
 104              	.L8:
 150:../Libraries/XMCLib/src/xmc_math.c ****   }
 151:../Libraries/XMCLib/src/xmc_math.c ****   else
 152:../Libraries/XMCLib/src/xmc_math.c ****   {
 153:../Libraries/XMCLib/src/xmc_math.c ****     status = false; /* CORDIC unit is idle */   
 105              	 .loc 1 153 0
 106 0018 FB1D     	 add r3,r7,#7
 107 001a 0022     	 mov r2,#0
 108 001c 1A70     	 strb r2,[r3]
 109              	.L9:
 154:../Libraries/XMCLib/src/xmc_math.c ****   }
 155:../Libraries/XMCLib/src/xmc_math.c **** 
 156:../Libraries/XMCLib/src/xmc_math.c ****   return (status);
 110              	 .loc 1 156 0
 111 001e FB1D     	 add r3,r7,#7
 112 0020 1B78     	 ldrb r3,[r3]
 157:../Libraries/XMCLib/src/xmc_math.c **** }
 113              	 .loc 1 157 0
 114 0022 181C     	 mov r0,r3
 115 0024 BD46     	 mov sp,r7
 116 0026 02B0     	 add sp,sp,#8
 117              	 
 118 0028 80BD     	 pop {r7,pc}
 119              	.L12:
 120 002a C046     	 .align 2
 121              	.L11:
 122 002c 00000340 	 .word 1073938432
 123              	 .cfi_endproc
 124              	.LFE81:
 126              	 .section .text.XMC_MATH_GetEventStatus,"ax",%progbits
 127              	 .align 2
 128              	 .global XMC_MATH_GetEventStatus
 129              	 .code 16
 130              	 .thumb_func
 132              	XMC_MATH_GetEventStatus:
 133              	.LFB82:
 158:../Libraries/XMCLib/src/xmc_math.c **** 
 159:../Libraries/XMCLib/src/xmc_math.c **** /* This functions returns the status of a requested event */
 160:../Libraries/XMCLib/src/xmc_math.c **** bool XMC_MATH_GetEventStatus(const XMC_MATH_EVENT_t event)
 161:../Libraries/XMCLib/src/xmc_math.c **** {
 134              	 .loc 1 161 0
 135              	 .cfi_startproc
 136 0000 80B5     	 push {r7,lr}
 137              	.LCFI6:
 138              	 .cfi_def_cfa_offset 8
 139              	 .cfi_offset 7,-8
 140              	 .cfi_offset 14,-4
 141 0002 84B0     	 sub sp,sp,#16
 142              	.LCFI7:
 143              	 .cfi_def_cfa_offset 24
 144 0004 00AF     	 add r7,sp,#0
 145              	.LCFI8:
 146              	 .cfi_def_cfa_register 7
 147 0006 021C     	 mov r2,r0
 148 0008 FB1D     	 add r3,r7,#7
 149 000a 1A70     	 strb r2,[r3]
 162:../Libraries/XMCLib/src/xmc_math.c ****   bool status;
 163:../Libraries/XMCLib/src/xmc_math.c ****   if (MATH->EVFR & (uint32_t) event)
 150              	 .loc 1 163 0
 151 000c 0A4B     	 ldr r3,.L17
 152 000e 1B69     	 ldr r3,[r3,#16]
 153 0010 FA1D     	 add r2,r7,#7
 154 0012 1278     	 ldrb r2,[r2]
 155 0014 1340     	 and r3,r2
 156 0016 04D0     	 beq .L14
 164:../Libraries/XMCLib/src/xmc_math.c ****   {
 165:../Libraries/XMCLib/src/xmc_math.c ****     status = true; /* Requested event has been detected */
 157              	 .loc 1 165 0
 158 0018 0F23     	 mov r3,#15
 159 001a FB18     	 add r3,r7,r3
 160 001c 0122     	 mov r2,#1
 161 001e 1A70     	 strb r2,[r3]
 162 0020 03E0     	 b .L15
 163              	.L14:
 166:../Libraries/XMCLib/src/xmc_math.c ****   }
 167:../Libraries/XMCLib/src/xmc_math.c ****   else
 168:../Libraries/XMCLib/src/xmc_math.c ****   {
 169:../Libraries/XMCLib/src/xmc_math.c ****     status = false; /* Requested event has not been detected */
 164              	 .loc 1 169 0
 165 0022 0F23     	 mov r3,#15
 166 0024 FB18     	 add r3,r7,r3
 167 0026 0022     	 mov r2,#0
 168 0028 1A70     	 strb r2,[r3]
 169              	.L15:
 170:../Libraries/XMCLib/src/xmc_math.c ****   }
 171:../Libraries/XMCLib/src/xmc_math.c ****   return (status);
 170              	 .loc 1 171 0
 171 002a 0F23     	 mov r3,#15
 172 002c FB18     	 add r3,r7,r3
 173 002e 1B78     	 ldrb r3,[r3]
 172:../Libraries/XMCLib/src/xmc_math.c **** }
 174              	 .loc 1 172 0
 175 0030 181C     	 mov r0,r3
 176 0032 BD46     	 mov sp,r7
 177 0034 04B0     	 add sp,sp,#16
 178              	 
 179 0036 80BD     	 pop {r7,pc}
 180              	.L18:
 181              	 .align 2
 182              	.L17:
 183 0038 00000340 	 .word 1073938432
 184              	 .cfi_endproc
 185              	.LFE82:
 187              	 .section .text.__aeabi_uidiv,"ax",%progbits
 188              	 .align 2
 189              	 .global __aeabi_uidiv
 190              	 .code 16
 191              	 .thumb_func
 193              	__aeabi_uidiv:
 194              	.LFB83:
 173:../Libraries/XMCLib/src/xmc_math.c **** 
 174:../Libraries/XMCLib/src/xmc_math.c **** #ifndef XMC_MATH_DISABLE_DIV_ABI
 175:../Libraries/XMCLib/src/xmc_math.c **** 
 176:../Libraries/XMCLib/src/xmc_math.c **** /* Forward prototypes.  */
 177:../Libraries/XMCLib/src/xmc_math.c **** uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor) __attribute__((externally_visible));
 178:../Libraries/XMCLib/src/xmc_math.c **** int32_t __aeabi_idiv(int32_t dividend, int32_t divisor) __attribute__((externally_visible));
 179:../Libraries/XMCLib/src/xmc_math.c **** uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor) __attribute__((externally_visible));
 180:../Libraries/XMCLib/src/xmc_math.c **** int64_t __aeabi_idivmod(int32_t dividend, int32_t divisor) __attribute__((externally_visible));
 181:../Libraries/XMCLib/src/xmc_math.c **** 
 182:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
 183:../Libraries/XMCLib/src/xmc_math.c ****  * API IMPLEMENTATION - aeabi routines
 184:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
 185:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs unsigned integer division */
 186:../Libraries/XMCLib/src/xmc_math.c **** uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
 187:../Libraries/XMCLib/src/xmc_math.c **** {
 195              	 .loc 1 187 0
 196              	 .cfi_startproc
 197 0000 80B5     	 push {r7,lr}
 198              	.LCFI9:
 199              	 .cfi_def_cfa_offset 8
 200              	 .cfi_offset 7,-8
 201              	 .cfi_offset 14,-4
 202 0002 88B0     	 sub sp,sp,#32
 203              	.LCFI10:
 204              	 .cfi_def_cfa_offset 40
 205 0004 00AF     	 add r7,sp,#0
 206              	.LCFI11:
 207              	 .cfi_def_cfa_register 7
 208 0006 7860     	 str r0,[r7,#4]
 209 0008 3960     	 str r1,[r7]
 210              	.LBB48:
 211              	.LBB49:
 212              	.LBB50:
 213              	.LBB51:
 214              	 .file 2 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include/cmsis_gcc.h"
   1:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /**************************************************************************//**
   2:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @version  V5.0.2
   5:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @date     13. February 2017
   6:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  ******************************************************************************/
   7:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /*
   8:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  10:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  12:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  16:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  18:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  * limitations under the License.
  23:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
  24:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  25:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  28:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ignore some GCC warnings */
  29:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic push
  30:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  34:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __has_builtin
  36:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  38:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  39:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __ASM
  41:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __ASM                                  __asm
  42:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  43:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __INLINE
  44:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __INLINE                               inline
  45:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  46:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  49:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif                                           
  52:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  55:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __USED
  56:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  58:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __WEAK
  59:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  61:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __PACKED
  62:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  64:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  67:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  70:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  78:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  86:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  94:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 102:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 110:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __ALIGNED
 111:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 113:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __RESTRICT
 114:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 116:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 117:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 118:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   @{
 122:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 123:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 124:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 125:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 129:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 131:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 133:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 134:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 135:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 136:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 140:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 144:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 145:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 146:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 147:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Control Register
 148:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Control Register value
 150:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 151:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 153:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 154:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 155:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 157:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 158:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 159:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 160:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 162:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               non-secure Control Register value
 165:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 166:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 168:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 169:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 170:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 172:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 173:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 174:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 175:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 176:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 177:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Control Register
 178:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 181:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 183:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 185:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 186:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 187:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 189:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 193:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 195:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 197:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 198:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 199:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 200:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 201:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get IPSR Register
 202:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               IPSR Register value
 204:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 205:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 207:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 208:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 209:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 211:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 212:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 213:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 214:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 215:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get APSR Register
 216:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               APSR Register value
 218:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 219:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 221:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 222:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 223:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 225:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 226:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 227:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 228:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 229:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get xPSR Register
 230:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               xPSR Register value
 232:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 233:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 235:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 236:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 237:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 239:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 240:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 241:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 242:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 243:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               PSP Register value
 246:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 247:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 249:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 250:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 251:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 253:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 254:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 255:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 256:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 258:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               PSP Register value
 261:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 262:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 264:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 265:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 266:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 268:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 269:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 270:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 271:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 272:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 273:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 277:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 279:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 281:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 282:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 283:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 285:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 289:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 291:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 293:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 294:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 295:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 296:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 297:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               MSP Register value
 300:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 301:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 303:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 304:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 305:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 307:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 308:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 309:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 310:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 312:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               MSP Register value
 315:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 316:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 318:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 319:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 320:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 322:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 323:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 324:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 325:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 326:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 327:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 331:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 333:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 335:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 336:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 337:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 339:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 343:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 345:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 347:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 348:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 349:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 350:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 352:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               SP Register value
 355:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 356:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 358:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 359:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 360:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 362:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 363:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 364:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 365:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 366:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 370:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 372:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 374:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 375:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 376:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 377:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 378:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Priority Mask
 379:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Priority Mask value
 381:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 382:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 384:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 385:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 386:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 215              	 .loc 2 386 0
 216              	
 217 000a EFF31083 	 MRS r3,primask
 218              	
 219              	 .code 16
 220 000e 7B61     	 str r3,[r7,#20]
 387:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 221              	 .loc 2 387 0
 222 0010 7B69     	 ldr r3,[r7,#20]
 223              	.LBE51:
 224              	.LBE50:
 117:../Libraries/XMCLib/src/xmc_math.c ****   __disable_irq ();
 225              	 .loc 1 117 0
 226 0012 3B61     	 str r3,[r7,#16]
 227              	.LBB52:
 228              	.LBB53:
 142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 229              	 .loc 2 142 0
 230              	
 231 0014 72B6     	 cpsid i
 232              	
 233              	 .code 16
 234              	.LBE53:
 235              	.LBE52:
 119:../Libraries/XMCLib/src/xmc_math.c **** }
 236              	 .loc 1 119 0
 237 0016 3B69     	 ldr r3,[r7,#16]
 238              	.LBE49:
 239              	.LBE48:
 188:../Libraries/XMCLib/src/xmc_math.c ****   uint32_t result;
 189:../Libraries/XMCLib/src/xmc_math.c ****   uint32_t ics;
 190:../Libraries/XMCLib/src/xmc_math.c ****   ics = critical_section_enter();
 240              	 .loc 1 190 0
 241 0018 FB61     	 str r3,[r7,#28]
 191:../Libraries/XMCLib/src/xmc_math.c **** 
 192:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
 242              	 .loc 1 192 0
 243 001a 0C4B     	 ldr r3,.L23
 244 001c 0422     	 mov r2,#4
 245 001e 5A63     	 str r2,[r3,#52]
 193:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD     = dividend;
 246              	 .loc 1 193 0
 247 0020 0A4B     	 ldr r3,.L23
 248 0022 7A68     	 ldr r2,[r7,#4]
 249 0024 1A62     	 str r2,[r3,#32]
 194:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS     = divisor;
 250              	 .loc 1 194 0
 251 0026 094B     	 ldr r3,.L23
 252 0028 3A68     	 ldr r2,[r7]
 253 002a 5A62     	 str r2,[r3,#36]
 195:../Libraries/XMCLib/src/xmc_math.c **** 
 196:../Libraries/XMCLib/src/xmc_math.c ****   result = MATH->QUOT;
 254              	 .loc 1 196 0
 255 002c 074B     	 ldr r3,.L23
 256 002e 9B6A     	 ldr r3,[r3,#40]
 257 0030 BB61     	 str r3,[r7,#24]
 258 0032 FB69     	 ldr r3,[r7,#28]
 259 0034 FB60     	 str r3,[r7,#12]
 260 0036 FB68     	 ldr r3,[r7,#12]
 261 0038 BB60     	 str r3,[r7,#8]
 262              	.LBB54:
 263              	.LBB55:
 264              	.LBB56:
 265              	.LBB57:
 388:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 389:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 390:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 391:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 393:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Priority Mask value
 396:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 397:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 399:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 400:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 401:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 403:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 404:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 405:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 406:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 407:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 408:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Priority Mask
 409:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 412:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 414:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 266              	 .loc 2 414 0
 267 003a BB68     	 ldr r3,[r7,#8]
 268              	
 269 003c 83F31088 	 MSR primask,r3
 270              	
 271              	 .code 16
 272              	.LBE57:
 273              	.LBE56:
 274              	.LBE55:
 275              	.LBE54:
 197:../Libraries/XMCLib/src/xmc_math.c **** 
 198:../Libraries/XMCLib/src/xmc_math.c ****   critical_section_exit(ics);
 199:../Libraries/XMCLib/src/xmc_math.c **** 
 200:../Libraries/XMCLib/src/xmc_math.c ****   return result;
 276              	 .loc 1 200 0
 277 0040 BB69     	 ldr r3,[r7,#24]
 201:../Libraries/XMCLib/src/xmc_math.c **** }
 278              	 .loc 1 201 0
 279 0042 181C     	 mov r0,r3
 280 0044 BD46     	 mov sp,r7
 281 0046 08B0     	 add sp,sp,#32
 282              	 
 283 0048 80BD     	 pop {r7,pc}
 284              	.L24:
 285 004a C046     	 .align 2
 286              	.L23:
 287 004c 00000340 	 .word 1073938432
 288              	 .cfi_endproc
 289              	.LFE83:
 291              	 .section .text.__aeabi_idiv,"ax",%progbits
 292              	 .align 2
 293              	 .global __aeabi_idiv
 294              	 .code 16
 295              	 .thumb_func
 297              	__aeabi_idiv:
 298              	.LFB84:
 202:../Libraries/XMCLib/src/xmc_math.c **** 
 203:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs signed integer division */
 204:../Libraries/XMCLib/src/xmc_math.c **** int32_t __aeabi_idiv(int32_t dividend, int32_t divisor)
 205:../Libraries/XMCLib/src/xmc_math.c **** {
 299              	 .loc 1 205 0
 300              	 .cfi_startproc
 301 0000 80B5     	 push {r7,lr}
 302              	.LCFI12:
 303              	 .cfi_def_cfa_offset 8
 304              	 .cfi_offset 7,-8
 305              	 .cfi_offset 14,-4
 306 0002 88B0     	 sub sp,sp,#32
 307              	.LCFI13:
 308              	 .cfi_def_cfa_offset 40
 309 0004 00AF     	 add r7,sp,#0
 310              	.LCFI14:
 311              	 .cfi_def_cfa_register 7
 312 0006 7860     	 str r0,[r7,#4]
 313 0008 3960     	 str r1,[r7]
 314              	.LBB58:
 315              	.LBB59:
 316              	.LBB60:
 317              	.LBB61:
 386:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 318              	 .loc 2 386 0
 319              	
 320 000a EFF31083 	 MRS r3,primask
 321              	
 322              	 .code 16
 323 000e 7B61     	 str r3,[r7,#20]
 387:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 324              	 .loc 2 387 0
 325 0010 7B69     	 ldr r3,[r7,#20]
 326              	.LBE61:
 327              	.LBE60:
 117:../Libraries/XMCLib/src/xmc_math.c ****   __disable_irq ();
 328              	 .loc 1 117 0
 329 0012 3B61     	 str r3,[r7,#16]
 330              	.LBB62:
 331              	.LBB63:
 142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 332              	 .loc 2 142 0
 333              	
 334 0014 72B6     	 cpsid i
 335              	
 336              	 .code 16
 337              	.LBE63:
 338              	.LBE62:
 119:../Libraries/XMCLib/src/xmc_math.c **** }
 339              	 .loc 1 119 0
 340 0016 3B69     	 ldr r3,[r7,#16]
 341              	.LBE59:
 342              	.LBE58:
 206:../Libraries/XMCLib/src/xmc_math.c ****   uint32_t result;
 207:../Libraries/XMCLib/src/xmc_math.c ****   uint32_t ics;
 208:../Libraries/XMCLib/src/xmc_math.c ****   ics = critical_section_enter();
 343              	 .loc 1 208 0
 344 0018 FB61     	 str r3,[r7,#28]
 209:../Libraries/XMCLib/src/xmc_math.c **** 
 210:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON  = XMC_MATH_SIGNED_DIVISION;
 345              	 .loc 1 210 0
 346 001a 0C4B     	 ldr r3,.L29
 347 001c 0022     	 mov r2,#0
 348 001e 5A63     	 str r2,[r3,#52]
 211:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD     = dividend;
 349              	 .loc 1 211 0
 350 0020 0A4B     	 ldr r3,.L29
 351 0022 7A68     	 ldr r2,[r7,#4]
 352 0024 1A62     	 str r2,[r3,#32]
 212:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS     = divisor;
 353              	 .loc 1 212 0
 354 0026 094B     	 ldr r3,.L29
 355 0028 3A68     	 ldr r2,[r7]
 356 002a 5A62     	 str r2,[r3,#36]
 213:../Libraries/XMCLib/src/xmc_math.c **** 
 214:../Libraries/XMCLib/src/xmc_math.c ****   result = MATH->QUOT;
 357              	 .loc 1 214 0
 358 002c 074B     	 ldr r3,.L29
 359 002e 9B6A     	 ldr r3,[r3,#40]
 360 0030 BB61     	 str r3,[r7,#24]
 361 0032 FB69     	 ldr r3,[r7,#28]
 362 0034 FB60     	 str r3,[r7,#12]
 363 0036 FB68     	 ldr r3,[r7,#12]
 364 0038 BB60     	 str r3,[r7,#8]
 365              	.LBB64:
 366              	.LBB65:
 367              	.LBB66:
 368              	.LBB67:
 369              	 .loc 2 414 0
 370 003a BB68     	 ldr r3,[r7,#8]
 371              	
 372 003c 83F31088 	 MSR primask,r3
 373              	
 374              	 .code 16
 375              	.LBE67:
 376              	.LBE66:
 377              	.LBE65:
 378              	.LBE64:
 215:../Libraries/XMCLib/src/xmc_math.c **** 
 216:../Libraries/XMCLib/src/xmc_math.c ****   critical_section_exit(ics);
 217:../Libraries/XMCLib/src/xmc_math.c ****   
 218:../Libraries/XMCLib/src/xmc_math.c ****   return result;
 379              	 .loc 1 218 0
 380 0040 BB69     	 ldr r3,[r7,#24]
 219:../Libraries/XMCLib/src/xmc_math.c **** }
 381              	 .loc 1 219 0
 382 0042 181C     	 mov r0,r3
 383 0044 BD46     	 mov sp,r7
 384 0046 08B0     	 add sp,sp,#32
 385              	 
 386 0048 80BD     	 pop {r7,pc}
 387              	.L30:
 388 004a C046     	 .align 2
 389              	.L29:
 390 004c 00000340 	 .word 1073938432
 391              	 .cfi_endproc
 392              	.LFE84:
 394              	 .section .text.__aeabi_uidivmod,"ax",%progbits
 395              	 .align 2
 396              	 .global __aeabi_uidivmod
 397              	 .code 16
 398              	 .thumb_func
 400              	__aeabi_uidivmod:
 401              	.LFB85:
 220:../Libraries/XMCLib/src/xmc_math.c **** 
 221:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs unsigned integer division modulo */
 222:../Libraries/XMCLib/src/xmc_math.c **** uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor)
 223:../Libraries/XMCLib/src/xmc_math.c **** {
 402              	 .loc 1 223 0
 403              	 .cfi_startproc
 404 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 405              	.LCFI15:
 406              	 .cfi_def_cfa_offset 20
 407              	 .cfi_offset 4,-20
 408              	 .cfi_offset 5,-16
 409              	 .cfi_offset 6,-12
 410              	 .cfi_offset 7,-8
 411              	 .cfi_offset 14,-4
 412 0002 8DB0     	 sub sp,sp,#52
 413              	.LCFI16:
 414              	 .cfi_def_cfa_offset 72
 415 0004 00AF     	 add r7,sp,#0
 416              	.LCFI17:
 417              	 .cfi_def_cfa_register 7
 418 0006 7860     	 str r0,[r7,#4]
 419 0008 3960     	 str r1,[r7]
 420              	.LBB68:
 421              	.LBB69:
 422              	.LBB70:
 423              	.LBB71:
 386:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 424              	 .loc 2 386 0
 425              	
 426 000a EFF31082 	 MRS r2,primask
 427              	
 428              	 .code 16
 429 000e 7A61     	 str r2,[r7,#20]
 387:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 430              	 .loc 2 387 0
 431 0010 7A69     	 ldr r2,[r7,#20]
 432              	.LBE71:
 433              	.LBE70:
 117:../Libraries/XMCLib/src/xmc_math.c ****   __disable_irq ();
 434              	 .loc 1 117 0
 435 0012 3A61     	 str r2,[r7,#16]
 436              	.LBB72:
 437              	.LBB73:
 142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 438              	 .loc 2 142 0
 439              	
 440 0014 72B6     	 cpsid i
 441              	
 442              	 .code 16
 443              	.LBE73:
 444              	.LBE72:
 119:../Libraries/XMCLib/src/xmc_math.c **** }
 445              	 .loc 1 119 0
 446 0016 3A69     	 ldr r2,[r7,#16]
 447              	.LBE69:
 448              	.LBE68:
 224:../Libraries/XMCLib/src/xmc_math.c ****   uint64_t remainder;
 225:../Libraries/XMCLib/src/xmc_math.c ****   uint64_t quot;
 226:../Libraries/XMCLib/src/xmc_math.c ****   uint32_t ics;
 227:../Libraries/XMCLib/src/xmc_math.c ****   ics = critical_section_enter();
 449              	 .loc 1 227 0
 450 0018 FA62     	 str r2,[r7,#44]
 228:../Libraries/XMCLib/src/xmc_math.c ****   
 229:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
 451              	 .loc 1 229 0
 452 001a 154A     	 ldr r2,.L35
 453 001c 0421     	 mov r1,#4
 454 001e 5163     	 str r1,[r2,#52]
 230:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD     = dividend;
 455              	 .loc 1 230 0
 456 0020 134A     	 ldr r2,.L35
 457 0022 7968     	 ldr r1,[r7,#4]
 458 0024 1162     	 str r1,[r2,#32]
 231:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS     = divisor;
 459              	 .loc 1 231 0
 460 0026 124A     	 ldr r2,.L35
 461 0028 3968     	 ldr r1,[r7]
 462 002a 5162     	 str r1,[r2,#36]
 232:../Libraries/XMCLib/src/xmc_math.c **** 
 233:../Libraries/XMCLib/src/xmc_math.c ****   remainder = (uint64_t)MATH->RMD;
 463              	 .loc 1 233 0
 464 002c 104A     	 ldr r2,.L35
 465 002e D26A     	 ldr r2,[r2,#44]
 466 0030 3A62     	 str r2,[r7,#32]
 467 0032 0022     	 mov r2,#0
 468 0034 7A62     	 str r2,[r7,#36]
 234:../Libraries/XMCLib/src/xmc_math.c ****   quot = (uint64_t)MATH->QUOT;
 469              	 .loc 1 234 0
 470 0036 0E4A     	 ldr r2,.L35
 471 0038 926A     	 ldr r2,[r2,#40]
 472 003a BA61     	 str r2,[r7,#24]
 473 003c 0022     	 mov r2,#0
 474 003e FA61     	 str r2,[r7,#28]
 475 0040 FA6A     	 ldr r2,[r7,#44]
 476 0042 FA60     	 str r2,[r7,#12]
 477 0044 FA68     	 ldr r2,[r7,#12]
 478 0046 BA60     	 str r2,[r7,#8]
 479              	.LBB74:
 480              	.LBB75:
 481              	.LBB76:
 482              	.LBB77:
 483              	 .loc 2 414 0
 484 0048 BA68     	 ldr r2,[r7,#8]
 485              	
 486 004a 82F31088 	 MSR primask,r2
 487              	
 488              	 .code 16
 489              	.LBE77:
 490              	.LBE76:
 491              	.LBE75:
 492              	.LBE74:
 235:../Libraries/XMCLib/src/xmc_math.c **** 
 236:../Libraries/XMCLib/src/xmc_math.c ****   critical_section_exit(ics);
 237:../Libraries/XMCLib/src/xmc_math.c **** 
 238:../Libraries/XMCLib/src/xmc_math.c ****   return ((remainder << 32) | quot);
 493              	 .loc 1 238 0
 494 004e 3A6A     	 ldr r2,[r7,#32]
 495 0050 1400     	 lsl r4,r2,#0
 496 0052 0022     	 mov r2,#0
 497 0054 131C     	 mov r3,r2
 498 0056 BA69     	 ldr r2,[r7,#24]
 499 0058 1A43     	 orr r2,r3
 500 005a 151C     	 mov r5,r2
 501 005c FA69     	 ldr r2,[r7,#28]
 502 005e 2243     	 orr r2,r4
 503 0060 161C     	 mov r6,r2
 504 0062 2B1C     	 mov r3,r5
 505 0064 341C     	 mov r4,r6
 239:../Libraries/XMCLib/src/xmc_math.c **** }
 506              	 .loc 1 239 0
 507 0066 181C     	 mov r0,r3
 508 0068 211C     	 mov r1,r4
 509 006a BD46     	 mov sp,r7
 510 006c 0DB0     	 add sp,sp,#52
 511              	 
 512 006e F0BD     	 pop {r4,r5,r6,r7,pc}
 513              	.L36:
 514              	 .align 2
 515              	.L35:
 516 0070 00000340 	 .word 1073938432
 517              	 .cfi_endproc
 518              	.LFE85:
 520              	 .section .text.__aeabi_idivmod,"ax",%progbits
 521              	 .align 2
 522              	 .global __aeabi_idivmod
 523              	 .code 16
 524              	 .thumb_func
 526              	__aeabi_idivmod:
 527              	.LFB86:
 240:../Libraries/XMCLib/src/xmc_math.c **** 
 241:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs signed integer division modulo */
 242:../Libraries/XMCLib/src/xmc_math.c **** int64_t __aeabi_idivmod(int32_t dividend, int32_t divisor)
 243:../Libraries/XMCLib/src/xmc_math.c **** {
 528              	 .loc 1 243 0
 529              	 .cfi_startproc
 530 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 531              	.LCFI18:
 532              	 .cfi_def_cfa_offset 20
 533              	 .cfi_offset 4,-20
 534              	 .cfi_offset 5,-16
 535              	 .cfi_offset 6,-12
 536              	 .cfi_offset 7,-8
 537              	 .cfi_offset 14,-4
 538 0002 8DB0     	 sub sp,sp,#52
 539              	.LCFI19:
 540              	 .cfi_def_cfa_offset 72
 541 0004 00AF     	 add r7,sp,#0
 542              	.LCFI20:
 543              	 .cfi_def_cfa_register 7
 544 0006 7860     	 str r0,[r7,#4]
 545 0008 3960     	 str r1,[r7]
 546              	.LBB78:
 547              	.LBB79:
 548              	.LBB80:
 549              	.LBB81:
 386:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 550              	 .loc 2 386 0
 551              	
 552 000a EFF31082 	 MRS r2,primask
 553              	
 554              	 .code 16
 555 000e 7A61     	 str r2,[r7,#20]
 387:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 556              	 .loc 2 387 0
 557 0010 7A69     	 ldr r2,[r7,#20]
 558              	.LBE81:
 559              	.LBE80:
 117:../Libraries/XMCLib/src/xmc_math.c ****   __disable_irq ();
 560              	 .loc 1 117 0
 561 0012 3A61     	 str r2,[r7,#16]
 562              	.LBB82:
 563              	.LBB83:
 142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 564              	 .loc 2 142 0
 565              	
 566 0014 72B6     	 cpsid i
 567              	
 568              	 .code 16
 569              	.LBE83:
 570              	.LBE82:
 119:../Libraries/XMCLib/src/xmc_math.c **** }
 571              	 .loc 1 119 0
 572 0016 3A69     	 ldr r2,[r7,#16]
 573              	.LBE79:
 574              	.LBE78:
 244:../Libraries/XMCLib/src/xmc_math.c ****   uint64_t remainder;
 245:../Libraries/XMCLib/src/xmc_math.c ****   uint64_t quot;
 246:../Libraries/XMCLib/src/xmc_math.c ****   uint32_t ics;
 247:../Libraries/XMCLib/src/xmc_math.c ****   ics = critical_section_enter();
 575              	 .loc 1 247 0
 576 0018 FA62     	 str r2,[r7,#44]
 248:../Libraries/XMCLib/src/xmc_math.c ****   
 249:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON  = XMC_MATH_SIGNED_DIVISION;
 577              	 .loc 1 249 0
 578 001a 154A     	 ldr r2,.L41
 579 001c 0021     	 mov r1,#0
 580 001e 5163     	 str r1,[r2,#52]
 250:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD     = dividend;
 581              	 .loc 1 250 0
 582 0020 134A     	 ldr r2,.L41
 583 0022 7968     	 ldr r1,[r7,#4]
 584 0024 1162     	 str r1,[r2,#32]
 251:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS     = divisor;
 585              	 .loc 1 251 0
 586 0026 124A     	 ldr r2,.L41
 587 0028 3968     	 ldr r1,[r7]
 588 002a 5162     	 str r1,[r2,#36]
 252:../Libraries/XMCLib/src/xmc_math.c **** 
 253:../Libraries/XMCLib/src/xmc_math.c ****   remainder = (uint64_t)MATH->RMD;;
 589              	 .loc 1 253 0
 590 002c 104A     	 ldr r2,.L41
 591 002e D26A     	 ldr r2,[r2,#44]
 592 0030 3A62     	 str r2,[r7,#32]
 593 0032 0022     	 mov r2,#0
 594 0034 7A62     	 str r2,[r7,#36]
 254:../Libraries/XMCLib/src/xmc_math.c ****   quot    = (uint64_t)MATH->QUOT;
 595              	 .loc 1 254 0
 596 0036 0E4A     	 ldr r2,.L41
 597 0038 926A     	 ldr r2,[r2,#40]
 598 003a BA61     	 str r2,[r7,#24]
 599 003c 0022     	 mov r2,#0
 600 003e FA61     	 str r2,[r7,#28]
 601 0040 FA6A     	 ldr r2,[r7,#44]
 602 0042 FA60     	 str r2,[r7,#12]
 603 0044 FA68     	 ldr r2,[r7,#12]
 604 0046 BA60     	 str r2,[r7,#8]
 605              	.LBB84:
 606              	.LBB85:
 607              	.LBB86:
 608              	.LBB87:
 609              	 .loc 2 414 0
 610 0048 BA68     	 ldr r2,[r7,#8]
 611              	
 612 004a 82F31088 	 MSR primask,r2
 613              	
 614              	 .code 16
 615              	.LBE87:
 616              	.LBE86:
 617              	.LBE85:
 618              	.LBE84:
 255:../Libraries/XMCLib/src/xmc_math.c **** 
 256:../Libraries/XMCLib/src/xmc_math.c ****   critical_section_exit(ics);
 257:../Libraries/XMCLib/src/xmc_math.c **** 
 258:../Libraries/XMCLib/src/xmc_math.c ****   return ((int64_t)((remainder << 32) | quot));
 619              	 .loc 1 258 0
 620 004e 3A6A     	 ldr r2,[r7,#32]
 621 0050 1400     	 lsl r4,r2,#0
 622 0052 0022     	 mov r2,#0
 623 0054 131C     	 mov r3,r2
 624 0056 BA69     	 ldr r2,[r7,#24]
 625 0058 1A43     	 orr r2,r3
 626 005a 151C     	 mov r5,r2
 627 005c FA69     	 ldr r2,[r7,#28]
 628 005e 2243     	 orr r2,r4
 629 0060 161C     	 mov r6,r2
 630 0062 2B1C     	 mov r3,r5
 631 0064 341C     	 mov r4,r6
 259:../Libraries/XMCLib/src/xmc_math.c **** }
 632              	 .loc 1 259 0
 633 0066 181C     	 mov r0,r3
 634 0068 211C     	 mov r1,r4
 635 006a BD46     	 mov sp,r7
 636 006c 0DB0     	 add sp,sp,#52
 637              	 
 638 006e F0BD     	 pop {r4,r5,r6,r7,pc}
 639              	.L42:
 640              	 .align 2
 641              	.L41:
 642 0070 00000340 	 .word 1073938432
 643              	 .cfi_endproc
 644              	.LFE86:
 646              	 .section .text.XMC_MATH_CORDIC_Cos,"ax",%progbits
 647              	 .align 2
 648              	 .global XMC_MATH_CORDIC_Cos
 649              	 .code 16
 650              	 .thumb_func
 652              	XMC_MATH_CORDIC_Cos:
 653              	.LFB87:
 260:../Libraries/XMCLib/src/xmc_math.c **** #endif
 261:../Libraries/XMCLib/src/xmc_math.c **** 
 262:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
 263:../Libraries/XMCLib/src/xmc_math.c ****  * API IMPLEMENTATION - Blocking functions
 264:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
 265:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the cosine of a given angle in radians */
 266:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q0_23_t XMC_MATH_CORDIC_Cos(XMC_MATH_Q0_23_t angle_in_radians)
 267:../Libraries/XMCLib/src/xmc_math.c **** {
 654              	 .loc 1 267 0
 655              	 .cfi_startproc
 656 0000 80B5     	 push {r7,lr}
 657              	.LCFI21:
 658              	 .cfi_def_cfa_offset 8
 659              	 .cfi_offset 7,-8
 660              	 .cfi_offset 14,-4
 661 0002 84B0     	 sub sp,sp,#16
 662              	.LCFI22:
 663              	 .cfi_def_cfa_offset 24
 664 0004 00AF     	 add r7,sp,#0
 665              	.LCFI23:
 666              	 .cfi_def_cfa_register 7
 667 0006 7860     	 str r0,[r7,#4]
 268:../Libraries/XMCLib/src/xmc_math.c ****   int32_t result;
 269:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 668              	 .loc 1 269 0
 669 0008 0C4B     	 ldr r3,.L45
 670 000a 0022     	 mov r2,#0
 671 000c 1A64     	 str r2,[r3,#64]
 270:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 672              	 .loc 1 270 0
 673 000e 0B4B     	 ldr r3,.L45
 674 0010 0A22     	 mov r2,#10
 675 0012 5A64     	 str r2,[r3,#68]
 271:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 272:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t) angle_in_radians) << MATH_CORDZ_DATA_Pos;
 676              	 .loc 1 272 0
 677 0014 094B     	 ldr r3,.L45
 678 0016 7A68     	 ldr r2,[r7,#4]
 679 0018 1202     	 lsl r2,r2,#8
 680 001a 1A65     	 str r2,[r3,#80]
 273:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U;  /* Clear register */
 681              	 .loc 1 273 0
 682 001c 074B     	 ldr r3,.L45
 683 001e 0022     	 mov r2,#0
 684 0020 DA64     	 str r2,[r3,#76]
 274:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 685              	 .loc 1 274 0
 686 0022 064B     	 ldr r3,.L45
 687 0024 064A     	 ldr r2,.L45+4
 688 0026 9A64     	 str r2,[r3,#72]
 275:../Libraries/XMCLib/src/xmc_math.c ****   result      = ((int32_t)MATH->CORRX) >> MATH_CORRX_RESULT_Pos;
 689              	 .loc 1 275 0
 690 0028 044B     	 ldr r3,.L45
 691 002a 5B6D     	 ldr r3,[r3,#84]
 692 002c 1B12     	 asr r3,r3,#8
 693 002e FB60     	 str r3,[r7,#12]
 276:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q0_23_t) result);
 694              	 .loc 1 276 0
 695 0030 FB68     	 ldr r3,[r7,#12]
 277:../Libraries/XMCLib/src/xmc_math.c **** }
 696              	 .loc 1 277 0
 697 0032 181C     	 mov r0,r3
 698 0034 BD46     	 mov sp,r7
 699 0036 04B0     	 add sp,sp,#16
 700              	 
 701 0038 80BD     	 pop {r7,pc}
 702              	.L46:
 703 003a C046     	 .align 2
 704              	.L45:
 705 003c 00000340 	 .word 1073938432
 706 0040 0076BA4D 	 .word 1304065536
 707              	 .cfi_endproc
 708              	.LFE87:
 710              	 .section .text.XMC_MATH_CORDIC_Sin,"ax",%progbits
 711              	 .align 2
 712              	 .global XMC_MATH_CORDIC_Sin
 713              	 .code 16
 714              	 .thumb_func
 716              	XMC_MATH_CORDIC_Sin:
 717              	.LFB88:
 278:../Libraries/XMCLib/src/xmc_math.c **** 
 279:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the sine of a given angle in radians */
 280:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q0_23_t XMC_MATH_CORDIC_Sin(XMC_MATH_Q0_23_t angle_in_radians)
 281:../Libraries/XMCLib/src/xmc_math.c **** {
 718              	 .loc 1 281 0
 719              	 .cfi_startproc
 720 0000 80B5     	 push {r7,lr}
 721              	.LCFI24:
 722              	 .cfi_def_cfa_offset 8
 723              	 .cfi_offset 7,-8
 724              	 .cfi_offset 14,-4
 725 0002 84B0     	 sub sp,sp,#16
 726              	.LCFI25:
 727              	 .cfi_def_cfa_offset 24
 728 0004 00AF     	 add r7,sp,#0
 729              	.LCFI26:
 730              	 .cfi_def_cfa_register 7
 731 0006 7860     	 str r0,[r7,#4]
 282:../Libraries/XMCLib/src/xmc_math.c ****   int32_t result;
 283:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 732              	 .loc 1 283 0
 733 0008 0C4B     	 ldr r3,.L49
 734 000a 0022     	 mov r2,#0
 735 000c 1A64     	 str r2,[r3,#64]
 284:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 736              	 .loc 1 284 0
 737 000e 0B4B     	 ldr r3,.L49
 738 0010 0A22     	 mov r2,#10
 739 0012 5A64     	 str r2,[r3,#68]
 285:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 286:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 740              	 .loc 1 286 0
 741 0014 094B     	 ldr r3,.L49
 742 0016 7A68     	 ldr r2,[r7,#4]
 743 0018 1202     	 lsl r2,r2,#8
 744 001a 1A65     	 str r2,[r3,#80]
 287:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U; /* Clear register */
 745              	 .loc 1 287 0
 746 001c 074B     	 ldr r3,.L49
 747 001e 0022     	 mov r2,#0
 748 0020 DA64     	 str r2,[r3,#76]
 288:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 749              	 .loc 1 288 0
 750 0022 064B     	 ldr r3,.L49
 751 0024 064A     	 ldr r2,.L49+4
 752 0026 9A64     	 str r2,[r3,#72]
 289:../Libraries/XMCLib/src/xmc_math.c ****   result      = ((int32_t)MATH->CORRY) >> MATH_CORRY_RESULT_Pos;
 753              	 .loc 1 289 0
 754 0028 044B     	 ldr r3,.L49
 755 002a 9B6D     	 ldr r3,[r3,#88]
 756 002c 1B12     	 asr r3,r3,#8
 757 002e FB60     	 str r3,[r7,#12]
 290:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q0_23_t) result);
 758              	 .loc 1 290 0
 759 0030 FB68     	 ldr r3,[r7,#12]
 291:../Libraries/XMCLib/src/xmc_math.c **** }
 760              	 .loc 1 291 0
 761 0032 181C     	 mov r0,r3
 762 0034 BD46     	 mov sp,r7
 763 0036 04B0     	 add sp,sp,#16
 764              	 
 765 0038 80BD     	 pop {r7,pc}
 766              	.L50:
 767 003a C046     	 .align 2
 768              	.L49:
 769 003c 00000340 	 .word 1073938432
 770 0040 0076BA4D 	 .word 1304065536
 771              	 .cfi_endproc
 772              	.LFE88:
 774              	 .section .text.XMC_MATH_CORDIC_Tan,"ax",%progbits
 775              	 .align 2
 776              	 .global XMC_MATH_CORDIC_Tan
 777              	 .code 16
 778              	 .thumb_func
 780              	XMC_MATH_CORDIC_Tan:
 781              	.LFB89:
 292:../Libraries/XMCLib/src/xmc_math.c **** 
 293:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the tangent of a given angle in radians */
 294:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q0_11_t XMC_MATH_CORDIC_Tan(XMC_MATH_Q0_23_t angle_in_radians)
 295:../Libraries/XMCLib/src/xmc_math.c **** {
 782              	 .loc 1 295 0
 783              	 .cfi_startproc
 784 0000 80B5     	 push {r7,lr}
 785              	.LCFI27:
 786              	 .cfi_def_cfa_offset 8
 787              	 .cfi_offset 7,-8
 788              	 .cfi_offset 14,-4
 789 0002 84B0     	 sub sp,sp,#16
 790              	.LCFI28:
 791              	 .cfi_def_cfa_offset 24
 792 0004 00AF     	 add r7,sp,#0
 793              	.LCFI29:
 794              	 .cfi_def_cfa_register 7
 795 0006 7860     	 str r0,[r7,#4]
 296:../Libraries/XMCLib/src/xmc_math.c ****   uint32_t result;
 297:../Libraries/XMCLib/src/xmc_math.c ****   MATH->GLBCON = (uint32_t) XMC_MATH_DIV_DVDRC_CORRY_IS_SOURCE + \
 796              	 .loc 1 297 0
 797 0008 0F4B     	 ldr r3,.L53
 798 000a 1C22     	 mov r2,#28
 799 000c 5A60     	 str r2,[r3,#4]
 298:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_DIV_DVSRC_CORRX_IS_SOURCE;      /* Chain the results of CORDIC
 299:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = (uint32_t) 11 << MATH_DIVCON_DVSSRC_Pos;            /* Right Shifts Divisor by 11 
 800              	 .loc 1 299 0
 801 000e 0E4B     	 ldr r3,.L53
 802 0010 B022     	 mov r2,#176
 803 0012 1205     	 lsl r2,r2,#20
 804 0014 5A63     	 str r2,[r3,#52]
 300:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC  = 0U; /* Clear register */
 805              	 .loc 1 300 0
 806 0016 0C4B     	 ldr r3,.L53
 807 0018 0022     	 mov r2,#0
 808 001a 1A64     	 str r2,[r3,#64]
 301:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON    = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 809              	 .loc 1 301 0
 810 001c 0A4B     	 ldr r3,.L53
 811 001e 0A22     	 mov r2,#10
 812 0020 5A64     	 str r2,[r3,#68]
 302:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 303:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ  = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 813              	 .loc 1 303 0
 814 0022 094B     	 ldr r3,.L53
 815 0024 7A68     	 ldr r2,[r7,#4]
 816 0026 1202     	 lsl r2,r2,#8
 817 0028 1A65     	 str r2,[r3,#80]
 304:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY  = 0U; /* Clear register */
 818              	 .loc 1 304 0
 819 002a 074B     	 ldr r3,.L53
 820 002c 0022     	 mov r2,#0
 821 002e DA64     	 str r2,[r3,#76]
 305:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX  = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 822              	 .loc 1 305 0
 823 0030 054B     	 ldr r3,.L53
 824 0032 064A     	 ldr r2,.L53+4
 825 0034 9A64     	 str r2,[r3,#72]
 306:../Libraries/XMCLib/src/xmc_math.c ****   result       = MATH->QUOT;
 826              	 .loc 1 306 0
 827 0036 044B     	 ldr r3,.L53
 828 0038 9B6A     	 ldr r3,[r3,#40]
 829 003a FB60     	 str r3,[r7,#12]
 307:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q0_11_t) result);
 830              	 .loc 1 307 0
 831 003c FB68     	 ldr r3,[r7,#12]
 308:../Libraries/XMCLib/src/xmc_math.c **** }
 832              	 .loc 1 308 0
 833 003e 181C     	 mov r0,r3
 834 0040 BD46     	 mov sp,r7
 835 0042 04B0     	 add sp,sp,#16
 836              	 
 837 0044 80BD     	 pop {r7,pc}
 838              	.L54:
 839 0046 C046     	 .align 2
 840              	.L53:
 841 0048 00000340 	 .word 1073938432
 842 004c 0076BA4D 	 .word 1304065536
 843              	 .cfi_endproc
 844              	.LFE89:
 846              	 .section .text.XMC_MATH_CORDIC_ArcTan,"ax",%progbits
 847              	 .align 2
 848              	 .global XMC_MATH_CORDIC_ArcTan
 849              	 .code 16
 850              	 .thumb_func
 852              	XMC_MATH_CORDIC_ArcTan:
 853              	.LFB90:
 309:../Libraries/XMCLib/src/xmc_math.c **** 
 310:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the arc tangent of a given angle in radians */
 311:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q0_23_t XMC_MATH_CORDIC_ArcTan(XMC_MATH_Q8_15_t x, XMC_MATH_Q8_15_t y)
 312:../Libraries/XMCLib/src/xmc_math.c **** {
 854              	 .loc 1 312 0
 855              	 .cfi_startproc
 856 0000 80B5     	 push {r7,lr}
 857              	.LCFI30:
 858              	 .cfi_def_cfa_offset 8
 859              	 .cfi_offset 7,-8
 860              	 .cfi_offset 14,-4
 861 0002 84B0     	 sub sp,sp,#16
 862              	.LCFI31:
 863              	 .cfi_def_cfa_offset 24
 864 0004 00AF     	 add r7,sp,#0
 865              	.LCFI32:
 866              	 .cfi_def_cfa_register 7
 867 0006 7860     	 str r0,[r7,#4]
 868 0008 3960     	 str r1,[r7]
 313:../Libraries/XMCLib/src/xmc_math.c ****   uint32_t result;
 314:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 869              	 .loc 1 314 0
 870 000a 0D4B     	 ldr r3,.L57
 871 000c 0022     	 mov r2,#0
 872 000e 1A64     	 str r2,[r3,#64]
 315:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR;
 873              	 .loc 1 315 0
 874 0010 0B4B     	 ldr r3,.L57
 875 0012 0222     	 mov r2,#2
 876 0014 5A64     	 str r2,[r3,#68]
 316:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = 0U; /* Clear register */
 877              	 .loc 1 316 0
 878 0016 0A4B     	 ldr r3,.L57
 879 0018 0022     	 mov r2,#0
 880 001a 1A65     	 str r2,[r3,#80]
 317:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = ((uint32_t) y) << MATH_CORDY_DATA_Pos;
 881              	 .loc 1 317 0
 882 001c 084B     	 ldr r3,.L57
 883 001e 3A68     	 ldr r2,[r7]
 884 0020 1202     	 lsl r2,r2,#8
 885 0022 DA64     	 str r2,[r3,#76]
 318:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = ((uint32_t) x) << MATH_CORDX_DATA_Pos;
 886              	 .loc 1 318 0
 887 0024 064B     	 ldr r3,.L57
 888 0026 7A68     	 ldr r2,[r7,#4]
 889 0028 1202     	 lsl r2,r2,#8
 890 002a 9A64     	 str r2,[r3,#72]
 319:../Libraries/XMCLib/src/xmc_math.c ****   result      = ((int32_t)MATH->CORRZ) >> MATH_CORRZ_RESULT_Pos;
 891              	 .loc 1 319 0
 892 002c 044B     	 ldr r3,.L57
 893 002e DB6D     	 ldr r3,[r3,#92]
 894 0030 1B12     	 asr r3,r3,#8
 895 0032 FB60     	 str r3,[r7,#12]
 320:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q0_23_t) result);
 896              	 .loc 1 320 0
 897 0034 FB68     	 ldr r3,[r7,#12]
 321:../Libraries/XMCLib/src/xmc_math.c **** }
 898              	 .loc 1 321 0
 899 0036 181C     	 mov r0,r3
 900 0038 BD46     	 mov sp,r7
 901 003a 04B0     	 add sp,sp,#16
 902              	 
 903 003c 80BD     	 pop {r7,pc}
 904              	.L58:
 905 003e C046     	 .align 2
 906              	.L57:
 907 0040 00000340 	 .word 1073938432
 908              	 .cfi_endproc
 909              	.LFE90:
 911              	 .section .text.XMC_MATH_CORDIC_Cosh,"ax",%progbits
 912              	 .align 2
 913              	 .global XMC_MATH_CORDIC_Cosh
 914              	 .code 16
 915              	 .thumb_func
 917              	XMC_MATH_CORDIC_Cosh:
 918              	.LFB91:
 322:../Libraries/XMCLib/src/xmc_math.c **** 
 323:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the hyperbolic cosine of a given angle in radians */
 324:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q1_22_t XMC_MATH_CORDIC_Cosh(XMC_MATH_Q0_23_t angle_in_radians)
 325:../Libraries/XMCLib/src/xmc_math.c **** {
 919              	 .loc 1 325 0
 920              	 .cfi_startproc
 921 0000 80B5     	 push {r7,lr}
 922              	.LCFI33:
 923              	 .cfi_def_cfa_offset 8
 924              	 .cfi_offset 7,-8
 925              	 .cfi_offset 14,-4
 926 0002 84B0     	 sub sp,sp,#16
 927              	.LCFI34:
 928              	 .cfi_def_cfa_offset 24
 929 0004 00AF     	 add r7,sp,#0
 930              	.LCFI35:
 931              	 .cfi_def_cfa_register 7
 932 0006 7860     	 str r0,[r7,#4]
 326:../Libraries/XMCLib/src/xmc_math.c ****   int32_t result;
 327:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 933              	 .loc 1 327 0
 934 0008 0C4B     	 ldr r3,.L61
 935 000a 0022     	 mov r2,#0
 936 000c 1A64     	 str r2,[r3,#64]
 328:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 937              	 .loc 1 328 0
 938 000e 0B4B     	 ldr r3,.L61
 939 0010 0E22     	 mov r2,#14
 940 0012 5A64     	 str r2,[r3,#68]
 329:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 330:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t) angle_in_radians) << MATH_CORDZ_DATA_Pos;
 941              	 .loc 1 330 0
 942 0014 094B     	 ldr r3,.L61
 943 0016 7A68     	 ldr r2,[r7,#4]
 944 0018 1202     	 lsl r2,r2,#8
 945 001a 1A65     	 str r2,[r3,#80]
 331:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U; /* Clear register */
 946              	 .loc 1 331 0
 947 001c 074B     	 ldr r3,.L61
 948 001e 0022     	 mov r2,#0
 949 0020 DA64     	 str r2,[r3,#76]
 332:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 950              	 .loc 1 332 0
 951 0022 064B     	 ldr r3,.L61
 952 0024 064A     	 ldr r2,.L61+4
 953 0026 9A64     	 str r2,[r3,#72]
 333:../Libraries/XMCLib/src/xmc_math.c ****   result      = ((int32_t)MATH->CORRX) >> MATH_CORRX_RESULT_Pos;
 954              	 .loc 1 333 0
 955 0028 044B     	 ldr r3,.L61
 956 002a 5B6D     	 ldr r3,[r3,#84]
 957 002c 1B12     	 asr r3,r3,#8
 958 002e FB60     	 str r3,[r7,#12]
 334:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q1_22_t) result);
 959              	 .loc 1 334 0
 960 0030 FB68     	 ldr r3,[r7,#12]
 335:../Libraries/XMCLib/src/xmc_math.c **** }
 961              	 .loc 1 335 0
 962 0032 181C     	 mov r0,r3
 963 0034 BD46     	 mov sp,r7
 964 0036 04B0     	 add sp,sp,#16
 965              	 
 966 0038 80BD     	 pop {r7,pc}
 967              	.L62:
 968 003a C046     	 .align 2
 969              	.L61:
 970 003c 00000340 	 .word 1073938432
 971 0040 00A1474D 	 .word 1296539904
 972              	 .cfi_endproc
 973              	.LFE91:
 975              	 .section .text.XMC_MATH_CORDIC_Sinh,"ax",%progbits
 976              	 .align 2
 977              	 .global XMC_MATH_CORDIC_Sinh
 978              	 .code 16
 979              	 .thumb_func
 981              	XMC_MATH_CORDIC_Sinh:
 982              	.LFB92:
 336:../Libraries/XMCLib/src/xmc_math.c **** 
 337:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the hyperbolic sine of a given angle in radians */
 338:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q1_22_t XMC_MATH_CORDIC_Sinh(XMC_MATH_Q0_23_t angle_in_radians)
 339:../Libraries/XMCLib/src/xmc_math.c **** {
 983              	 .loc 1 339 0
 984              	 .cfi_startproc
 985 0000 80B5     	 push {r7,lr}
 986              	.LCFI36:
 987              	 .cfi_def_cfa_offset 8
 988              	 .cfi_offset 7,-8
 989              	 .cfi_offset 14,-4
 990 0002 84B0     	 sub sp,sp,#16
 991              	.LCFI37:
 992              	 .cfi_def_cfa_offset 24
 993 0004 00AF     	 add r7,sp,#0
 994              	.LCFI38:
 995              	 .cfi_def_cfa_register 7
 996 0006 7860     	 str r0,[r7,#4]
 340:../Libraries/XMCLib/src/xmc_math.c ****   int32_t result;
 341:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 997              	 .loc 1 341 0
 998 0008 0C4B     	 ldr r3,.L65
 999 000a 0022     	 mov r2,#0
 1000 000c 1A64     	 str r2,[r3,#64]
 342:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 1001              	 .loc 1 342 0
 1002 000e 0B4B     	 ldr r3,.L65
 1003 0010 0E22     	 mov r2,#14
 1004 0012 5A64     	 str r2,[r3,#68]
 343:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 344:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 1005              	 .loc 1 344 0
 1006 0014 094B     	 ldr r3,.L65
 1007 0016 7A68     	 ldr r2,[r7,#4]
 1008 0018 1202     	 lsl r2,r2,#8
 1009 001a 1A65     	 str r2,[r3,#80]
 345:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U; /* Clear register */
 1010              	 .loc 1 345 0
 1011 001c 074B     	 ldr r3,.L65
 1012 001e 0022     	 mov r2,#0
 1013 0020 DA64     	 str r2,[r3,#76]
 346:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 1014              	 .loc 1 346 0
 1015 0022 064B     	 ldr r3,.L65
 1016 0024 064A     	 ldr r2,.L65+4
 1017 0026 9A64     	 str r2,[r3,#72]
 347:../Libraries/XMCLib/src/xmc_math.c ****   result      = ((int32_t)MATH->CORRY) >> MATH_CORRY_RESULT_Pos;
 1018              	 .loc 1 347 0
 1019 0028 044B     	 ldr r3,.L65
 1020 002a 9B6D     	 ldr r3,[r3,#88]
 1021 002c 1B12     	 asr r3,r3,#8
 1022 002e FB60     	 str r3,[r7,#12]
 348:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q1_22_t) result);
 1023              	 .loc 1 348 0
 1024 0030 FB68     	 ldr r3,[r7,#12]
 349:../Libraries/XMCLib/src/xmc_math.c **** }
 1025              	 .loc 1 349 0
 1026 0032 181C     	 mov r0,r3
 1027 0034 BD46     	 mov sp,r7
 1028 0036 04B0     	 add sp,sp,#16
 1029              	 
 1030 0038 80BD     	 pop {r7,pc}
 1031              	.L66:
 1032 003a C046     	 .align 2
 1033              	.L65:
 1034 003c 00000340 	 .word 1073938432
 1035 0040 00A1474D 	 .word 1296539904
 1036              	 .cfi_endproc
 1037              	.LFE92:
 1039              	 .section .text.XMC_MATH_CORDIC_Tanh,"ax",%progbits
 1040              	 .align 2
 1041              	 .global XMC_MATH_CORDIC_Tanh
 1042              	 .code 16
 1043              	 .thumb_func
 1045              	XMC_MATH_CORDIC_Tanh:
 1046              	.LFB93:
 350:../Libraries/XMCLib/src/xmc_math.c **** 
 351:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the hyperbolic tangent of a given angle in radians */
 352:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q0_11_t XMC_MATH_CORDIC_Tanh(XMC_MATH_Q0_23_t angle_in_radians)
 353:../Libraries/XMCLib/src/xmc_math.c **** {
 1047              	 .loc 1 353 0
 1048              	 .cfi_startproc
 1049 0000 80B5     	 push {r7,lr}
 1050              	.LCFI39:
 1051              	 .cfi_def_cfa_offset 8
 1052              	 .cfi_offset 7,-8
 1053              	 .cfi_offset 14,-4
 1054 0002 84B0     	 sub sp,sp,#16
 1055              	.LCFI40:
 1056              	 .cfi_def_cfa_offset 24
 1057 0004 00AF     	 add r7,sp,#0
 1058              	.LCFI41:
 1059              	 .cfi_def_cfa_register 7
 1060 0006 7860     	 str r0,[r7,#4]
 354:../Libraries/XMCLib/src/xmc_math.c ****   uint32_t result;
 355:../Libraries/XMCLib/src/xmc_math.c ****   MATH->GLBCON = (uint32_t) XMC_MATH_DIV_DVDRC_CORRY_IS_SOURCE + \
 1061              	 .loc 1 355 0
 1062 0008 0F4B     	 ldr r3,.L69
 1063 000a 1C22     	 mov r2,#28
 1064 000c 5A60     	 str r2,[r3,#4]
 356:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_DIV_DVSRC_CORRX_IS_SOURCE;      /* Chain the results of CORDIC
 357:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = (uint32_t) 11 << MATH_DIVCON_DVSSRC_Pos;            /* Right Shifts Divisor by 11 
 1065              	 .loc 1 357 0
 1066 000e 0E4B     	 ldr r3,.L69
 1067 0010 B022     	 mov r2,#176
 1068 0012 1205     	 lsl r2,r2,#20
 1069 0014 5A63     	 str r2,[r3,#52]
 358:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC  = 0U; /* Clear register */
 1070              	 .loc 1 358 0
 1071 0016 0C4B     	 ldr r3,.L69
 1072 0018 0022     	 mov r2,#0
 1073 001a 1A64     	 str r2,[r3,#64]
 359:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON    = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 1074              	 .loc 1 359 0
 1075 001c 0A4B     	 ldr r3,.L69
 1076 001e 0E22     	 mov r2,#14
 1077 0020 5A64     	 str r2,[r3,#68]
 360:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 361:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ  = ((uint32_t) angle_in_radians) << MATH_CORDZ_DATA_Pos;
 1078              	 .loc 1 361 0
 1079 0022 094B     	 ldr r3,.L69
 1080 0024 7A68     	 ldr r2,[r7,#4]
 1081 0026 1202     	 lsl r2,r2,#8
 1082 0028 1A65     	 str r2,[r3,#80]
 362:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY  = 0U; /* Clear register */
 1083              	 .loc 1 362 0
 1084 002a 074B     	 ldr r3,.L69
 1085 002c 0022     	 mov r2,#0
 1086 002e DA64     	 str r2,[r3,#76]
 363:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX  = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 1087              	 .loc 1 363 0
 1088 0030 054B     	 ldr r3,.L69
 1089 0032 064A     	 ldr r2,.L69+4
 1090 0034 9A64     	 str r2,[r3,#72]
 364:../Libraries/XMCLib/src/xmc_math.c ****   result       = MATH->QUOT;
 1091              	 .loc 1 364 0
 1092 0036 044B     	 ldr r3,.L69
 1093 0038 9B6A     	 ldr r3,[r3,#40]
 1094 003a FB60     	 str r3,[r7,#12]
 365:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q0_11_t) result);
 1095              	 .loc 1 365 0
 1096 003c FB68     	 ldr r3,[r7,#12]
 366:../Libraries/XMCLib/src/xmc_math.c **** }
 1097              	 .loc 1 366 0
 1098 003e 181C     	 mov r0,r3
 1099 0040 BD46     	 mov sp,r7
 1100 0042 04B0     	 add sp,sp,#16
 1101              	 
 1102 0044 80BD     	 pop {r7,pc}
 1103              	.L70:
 1104 0046 C046     	 .align 2
 1105              	.L69:
 1106 0048 00000340 	 .word 1073938432
 1107 004c 00A1474D 	 .word 1296539904
 1108              	 .cfi_endproc
 1109              	.LFE93:
 1111              	 .section .text.XMC_MATH_CORDIC_CosNB,"ax",%progbits
 1112              	 .align 2
 1113              	 .global XMC_MATH_CORDIC_CosNB
 1114              	 .code 16
 1115              	 .thumb_func
 1117              	XMC_MATH_CORDIC_CosNB:
 1118              	.LFB94:
 367:../Libraries/XMCLib/src/xmc_math.c **** 
 368:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
 369:../Libraries/XMCLib/src/xmc_math.c ****  * API IMPLEMENTATION - Non blocking functions
 370:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
 371:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the cosine of a given angle in radians */
 372:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_CosNB(XMC_MATH_Q0_23_t angle_in_radians)
 373:../Libraries/XMCLib/src/xmc_math.c **** {
 1119              	 .loc 1 373 0
 1120              	 .cfi_startproc
 1121 0000 80B5     	 push {r7,lr}
 1122              	.LCFI42:
 1123              	 .cfi_def_cfa_offset 8
 1124              	 .cfi_offset 7,-8
 1125              	 .cfi_offset 14,-4
 1126 0002 82B0     	 sub sp,sp,#8
 1127              	.LCFI43:
 1128              	 .cfi_def_cfa_offset 16
 1129 0004 00AF     	 add r7,sp,#0
 1130              	.LCFI44:
 1131              	 .cfi_def_cfa_register 7
 1132 0006 7860     	 str r0,[r7,#4]
 374:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 1133              	 .loc 1 374 0
 1134 0008 094B     	 ldr r3,.L72
 1135 000a 0022     	 mov r2,#0
 1136 000c 1A64     	 str r2,[r3,#64]
 375:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 1137              	 .loc 1 375 0
 1138 000e 084B     	 ldr r3,.L72
 1139 0010 0A22     	 mov r2,#10
 1140 0012 5A64     	 str r2,[r3,#68]
 376:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 377:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t) angle_in_radians) << MATH_CORDZ_DATA_Pos;
 1141              	 .loc 1 377 0
 1142 0014 064B     	 ldr r3,.L72
 1143 0016 7A68     	 ldr r2,[r7,#4]
 1144 0018 1202     	 lsl r2,r2,#8
 1145 001a 1A65     	 str r2,[r3,#80]
 378:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U;  /* Clear register */
 1146              	 .loc 1 378 0
 1147 001c 044B     	 ldr r3,.L72
 1148 001e 0022     	 mov r2,#0
 1149 0020 DA64     	 str r2,[r3,#76]
 379:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 1150              	 .loc 1 379 0
 1151 0022 034B     	 ldr r3,.L72
 1152 0024 034A     	 ldr r2,.L72+4
 1153 0026 9A64     	 str r2,[r3,#72]
 380:../Libraries/XMCLib/src/xmc_math.c **** }
 1154              	 .loc 1 380 0
 1155 0028 BD46     	 mov sp,r7
 1156 002a 02B0     	 add sp,sp,#8
 1157              	 
 1158 002c 80BD     	 pop {r7,pc}
 1159              	.L73:
 1160 002e C046     	 .align 2
 1161              	.L72:
 1162 0030 00000340 	 .word 1073938432
 1163 0034 0076BA4D 	 .word 1304065536
 1164              	 .cfi_endproc
 1165              	.LFE94:
 1167              	 .section .text.XMC_MATH_CORDIC_SinNB,"ax",%progbits
 1168              	 .align 2
 1169              	 .global XMC_MATH_CORDIC_SinNB
 1170              	 .code 16
 1171              	 .thumb_func
 1173              	XMC_MATH_CORDIC_SinNB:
 1174              	.LFB95:
 381:../Libraries/XMCLib/src/xmc_math.c **** 
 382:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the sine of a given angle in radians */
 383:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_SinNB(XMC_MATH_Q0_23_t angle_in_radians)
 384:../Libraries/XMCLib/src/xmc_math.c **** {
 1175              	 .loc 1 384 0
 1176              	 .cfi_startproc
 1177 0000 80B5     	 push {r7,lr}
 1178              	.LCFI45:
 1179              	 .cfi_def_cfa_offset 8
 1180              	 .cfi_offset 7,-8
 1181              	 .cfi_offset 14,-4
 1182 0002 82B0     	 sub sp,sp,#8
 1183              	.LCFI46:
 1184              	 .cfi_def_cfa_offset 16
 1185 0004 00AF     	 add r7,sp,#0
 1186              	.LCFI47:
 1187              	 .cfi_def_cfa_register 7
 1188 0006 7860     	 str r0,[r7,#4]
 385:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 1189              	 .loc 1 385 0
 1190 0008 094B     	 ldr r3,.L75
 1191 000a 0022     	 mov r2,#0
 1192 000c 1A64     	 str r2,[r3,#64]
 386:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 1193              	 .loc 1 386 0
 1194 000e 084B     	 ldr r3,.L75
 1195 0010 0A22     	 mov r2,#10
 1196 0012 5A64     	 str r2,[r3,#68]
 387:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 388:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 1197              	 .loc 1 388 0
 1198 0014 064B     	 ldr r3,.L75
 1199 0016 7A68     	 ldr r2,[r7,#4]
 1200 0018 1202     	 lsl r2,r2,#8
 1201 001a 1A65     	 str r2,[r3,#80]
 389:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U; /* Clear register */
 1202              	 .loc 1 389 0
 1203 001c 044B     	 ldr r3,.L75
 1204 001e 0022     	 mov r2,#0
 1205 0020 DA64     	 str r2,[r3,#76]
 390:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 1206              	 .loc 1 390 0
 1207 0022 034B     	 ldr r3,.L75
 1208 0024 034A     	 ldr r2,.L75+4
 1209 0026 9A64     	 str r2,[r3,#72]
 391:../Libraries/XMCLib/src/xmc_math.c **** }
 1210              	 .loc 1 391 0
 1211 0028 BD46     	 mov sp,r7
 1212 002a 02B0     	 add sp,sp,#8
 1213              	 
 1214 002c 80BD     	 pop {r7,pc}
 1215              	.L76:
 1216 002e C046     	 .align 2
 1217              	.L75:
 1218 0030 00000340 	 .word 1073938432
 1219 0034 0076BA4D 	 .word 1304065536
 1220              	 .cfi_endproc
 1221              	.LFE95:
 1223              	 .section .text.XMC_MATH_CORDIC_TanNB,"ax",%progbits
 1224              	 .align 2
 1225              	 .global XMC_MATH_CORDIC_TanNB
 1226              	 .code 16
 1227              	 .thumb_func
 1229              	XMC_MATH_CORDIC_TanNB:
 1230              	.LFB96:
 392:../Libraries/XMCLib/src/xmc_math.c **** 
 393:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the tangent of a given angle in radians */
 394:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_TanNB(XMC_MATH_Q0_23_t angle_in_radians)
 395:../Libraries/XMCLib/src/xmc_math.c **** {
 1231              	 .loc 1 395 0
 1232              	 .cfi_startproc
 1233 0000 80B5     	 push {r7,lr}
 1234              	.LCFI48:
 1235              	 .cfi_def_cfa_offset 8
 1236              	 .cfi_offset 7,-8
 1237              	 .cfi_offset 14,-4
 1238 0002 82B0     	 sub sp,sp,#8
 1239              	.LCFI49:
 1240              	 .cfi_def_cfa_offset 16
 1241 0004 00AF     	 add r7,sp,#0
 1242              	.LCFI50:
 1243              	 .cfi_def_cfa_register 7
 1244 0006 7860     	 str r0,[r7,#4]
 396:../Libraries/XMCLib/src/xmc_math.c ****   MATH->GLBCON = (uint32_t) XMC_MATH_DIV_DVDRC_CORRY_IS_SOURCE + \
 1245              	 .loc 1 396 0
 1246 0008 0C4B     	 ldr r3,.L78
 1247 000a 1C22     	 mov r2,#28
 1248 000c 5A60     	 str r2,[r3,#4]
 397:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_DIV_DVSRC_CORRX_IS_SOURCE;      /* Chain the results of CORDIC
 398:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = (uint32_t) 11 << MATH_DIVCON_DVSSRC_Pos;            /* Right Shifts Divisor by 11 
 1249              	 .loc 1 398 0
 1250 000e 0B4B     	 ldr r3,.L78
 1251 0010 B022     	 mov r2,#176
 1252 0012 1205     	 lsl r2,r2,#20
 1253 0014 5A63     	 str r2,[r3,#52]
 399:../Libraries/XMCLib/src/xmc_math.c **** 
 400:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC  = 0U; /* Clear register */
 1254              	 .loc 1 400 0
 1255 0016 094B     	 ldr r3,.L78
 1256 0018 0022     	 mov r2,#0
 1257 001a 1A64     	 str r2,[r3,#64]
 401:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON    = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 1258              	 .loc 1 401 0
 1259 001c 074B     	 ldr r3,.L78
 1260 001e 0A22     	 mov r2,#10
 1261 0020 5A64     	 str r2,[r3,#68]
 402:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 403:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ  = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 1262              	 .loc 1 403 0
 1263 0022 064B     	 ldr r3,.L78
 1264 0024 7A68     	 ldr r2,[r7,#4]
 1265 0026 1202     	 lsl r2,r2,#8
 1266 0028 1A65     	 str r2,[r3,#80]
 404:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY  = 0U; /* Clear register */
 1267              	 .loc 1 404 0
 1268 002a 044B     	 ldr r3,.L78
 1269 002c 0022     	 mov r2,#0
 1270 002e DA64     	 str r2,[r3,#76]
 405:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX  = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 1271              	 .loc 1 405 0
 1272 0030 024B     	 ldr r3,.L78
 1273 0032 034A     	 ldr r2,.L78+4
 1274 0034 9A64     	 str r2,[r3,#72]
 406:../Libraries/XMCLib/src/xmc_math.c **** }
 1275              	 .loc 1 406 0
 1276 0036 BD46     	 mov sp,r7
 1277 0038 02B0     	 add sp,sp,#8
 1278              	 
 1279 003a 80BD     	 pop {r7,pc}
 1280              	.L79:
 1281              	 .align 2
 1282              	.L78:
 1283 003c 00000340 	 .word 1073938432
 1284 0040 0076BA4D 	 .word 1304065536
 1285              	 .cfi_endproc
 1286              	.LFE96:
 1288              	 .section .text.XMC_MATH_CORDIC_ArcTanNB,"ax",%progbits
 1289              	 .align 2
 1290              	 .global XMC_MATH_CORDIC_ArcTanNB
 1291              	 .code 16
 1292              	 .thumb_func
 1294              	XMC_MATH_CORDIC_ArcTanNB:
 1295              	.LFB97:
 407:../Libraries/XMCLib/src/xmc_math.c **** 
 408:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the arc tangent of a given value */
 409:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_ArcTanNB(XMC_MATH_Q8_15_t x, XMC_MATH_Q8_15_t y)
 410:../Libraries/XMCLib/src/xmc_math.c **** {
 1296              	 .loc 1 410 0
 1297              	 .cfi_startproc
 1298 0000 80B5     	 push {r7,lr}
 1299              	.LCFI51:
 1300              	 .cfi_def_cfa_offset 8
 1301              	 .cfi_offset 7,-8
 1302              	 .cfi_offset 14,-4
 1303 0002 82B0     	 sub sp,sp,#8
 1304              	.LCFI52:
 1305              	 .cfi_def_cfa_offset 16
 1306 0004 00AF     	 add r7,sp,#0
 1307              	.LCFI53:
 1308              	 .cfi_def_cfa_register 7
 1309 0006 7860     	 str r0,[r7,#4]
 1310 0008 3960     	 str r1,[r7]
 411:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 1311              	 .loc 1 411 0
 1312 000a 0A4B     	 ldr r3,.L81
 1313 000c 0022     	 mov r2,#0
 1314 000e 1A64     	 str r2,[r3,#64]
 412:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR;
 1315              	 .loc 1 412 0
 1316 0010 084B     	 ldr r3,.L81
 1317 0012 0222     	 mov r2,#2
 1318 0014 5A64     	 str r2,[r3,#68]
 413:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = 0U; /* Clear register */
 1319              	 .loc 1 413 0
 1320 0016 074B     	 ldr r3,.L81
 1321 0018 0022     	 mov r2,#0
 1322 001a 1A65     	 str r2,[r3,#80]
 414:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = ((uint32_t) y) << MATH_CORDY_DATA_Pos;
 1323              	 .loc 1 414 0
 1324 001c 054B     	 ldr r3,.L81
 1325 001e 3A68     	 ldr r2,[r7]
 1326 0020 1202     	 lsl r2,r2,#8
 1327 0022 DA64     	 str r2,[r3,#76]
 415:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = ((uint32_t) x) << MATH_CORDX_DATA_Pos;
 1328              	 .loc 1 415 0
 1329 0024 034B     	 ldr r3,.L81
 1330 0026 7A68     	 ldr r2,[r7,#4]
 1331 0028 1202     	 lsl r2,r2,#8
 1332 002a 9A64     	 str r2,[r3,#72]
 416:../Libraries/XMCLib/src/xmc_math.c **** }
 1333              	 .loc 1 416 0
 1334 002c BD46     	 mov sp,r7
 1335 002e 02B0     	 add sp,sp,#8
 1336              	 
 1337 0030 80BD     	 pop {r7,pc}
 1338              	.L82:
 1339 0032 C046     	 .align 2
 1340              	.L81:
 1341 0034 00000340 	 .word 1073938432
 1342              	 .cfi_endproc
 1343              	.LFE97:
 1345              	 .section .text.XMC_MATH_CORDIC_CoshNB,"ax",%progbits
 1346              	 .align 2
 1347              	 .global XMC_MATH_CORDIC_CoshNB
 1348              	 .code 16
 1349              	 .thumb_func
 1351              	XMC_MATH_CORDIC_CoshNB:
 1352              	.LFB98:
 417:../Libraries/XMCLib/src/xmc_math.c **** 
 418:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the hyperbolic cosine of a given angle in radians */
 419:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_CoshNB(XMC_MATH_Q0_23_t angle_in_radians)
 420:../Libraries/XMCLib/src/xmc_math.c **** {
 1353              	 .loc 1 420 0
 1354              	 .cfi_startproc
 1355 0000 80B5     	 push {r7,lr}
 1356              	.LCFI54:
 1357              	 .cfi_def_cfa_offset 8
 1358              	 .cfi_offset 7,-8
 1359              	 .cfi_offset 14,-4
 1360 0002 82B0     	 sub sp,sp,#8
 1361              	.LCFI55:
 1362              	 .cfi_def_cfa_offset 16
 1363 0004 00AF     	 add r7,sp,#0
 1364              	.LCFI56:
 1365              	 .cfi_def_cfa_register 7
 1366 0006 7860     	 str r0,[r7,#4]
 421:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 1367              	 .loc 1 421 0
 1368 0008 094B     	 ldr r3,.L84
 1369 000a 0022     	 mov r2,#0
 1370 000c 1A64     	 str r2,[r3,#64]
 422:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 1371              	 .loc 1 422 0
 1372 000e 084B     	 ldr r3,.L84
 1373 0010 0E22     	 mov r2,#14
 1374 0012 5A64     	 str r2,[r3,#68]
 423:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 424:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 1375              	 .loc 1 424 0
 1376 0014 064B     	 ldr r3,.L84
 1377 0016 7A68     	 ldr r2,[r7,#4]
 1378 0018 1202     	 lsl r2,r2,#8
 1379 001a 1A65     	 str r2,[r3,#80]
 425:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U; /* Clear register */
 1380              	 .loc 1 425 0
 1381 001c 044B     	 ldr r3,.L84
 1382 001e 0022     	 mov r2,#0
 1383 0020 DA64     	 str r2,[r3,#76]
 426:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 1384              	 .loc 1 426 0
 1385 0022 034B     	 ldr r3,.L84
 1386 0024 034A     	 ldr r2,.L84+4
 1387 0026 9A64     	 str r2,[r3,#72]
 427:../Libraries/XMCLib/src/xmc_math.c **** }
 1388              	 .loc 1 427 0
 1389 0028 BD46     	 mov sp,r7
 1390 002a 02B0     	 add sp,sp,#8
 1391              	 
 1392 002c 80BD     	 pop {r7,pc}
 1393              	.L85:
 1394 002e C046     	 .align 2
 1395              	.L84:
 1396 0030 00000340 	 .word 1073938432
 1397 0034 00A1474D 	 .word 1296539904
 1398              	 .cfi_endproc
 1399              	.LFE98:
 1401              	 .section .text.XMC_MATH_CORDIC_SinhNB,"ax",%progbits
 1402              	 .align 2
 1403              	 .global XMC_MATH_CORDIC_SinhNB
 1404              	 .code 16
 1405              	 .thumb_func
 1407              	XMC_MATH_CORDIC_SinhNB:
 1408              	.LFB99:
 428:../Libraries/XMCLib/src/xmc_math.c **** 
 429:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the hyperbolic sine of a given angle in radians */
 430:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_SinhNB(XMC_MATH_Q0_23_t angle_in_radians)
 431:../Libraries/XMCLib/src/xmc_math.c **** {
 1409              	 .loc 1 431 0
 1410              	 .cfi_startproc
 1411 0000 80B5     	 push {r7,lr}
 1412              	.LCFI57:
 1413              	 .cfi_def_cfa_offset 8
 1414              	 .cfi_offset 7,-8
 1415              	 .cfi_offset 14,-4
 1416 0002 82B0     	 sub sp,sp,#8
 1417              	.LCFI58:
 1418              	 .cfi_def_cfa_offset 16
 1419 0004 00AF     	 add r7,sp,#0
 1420              	.LCFI59:
 1421              	 .cfi_def_cfa_register 7
 1422 0006 7860     	 str r0,[r7,#4]
 432:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 1423              	 .loc 1 432 0
 1424 0008 094B     	 ldr r3,.L87
 1425 000a 0022     	 mov r2,#0
 1426 000c 1A64     	 str r2,[r3,#64]
 433:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 1427              	 .loc 1 433 0
 1428 000e 084B     	 ldr r3,.L87
 1429 0010 0E22     	 mov r2,#14
 1430 0012 5A64     	 str r2,[r3,#68]
 434:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 435:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 1431              	 .loc 1 435 0
 1432 0014 064B     	 ldr r3,.L87
 1433 0016 7A68     	 ldr r2,[r7,#4]
 1434 0018 1202     	 lsl r2,r2,#8
 1435 001a 1A65     	 str r2,[r3,#80]
 436:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U; /* Clear register */
 1436              	 .loc 1 436 0
 1437 001c 044B     	 ldr r3,.L87
 1438 001e 0022     	 mov r2,#0
 1439 0020 DA64     	 str r2,[r3,#76]
 437:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 1440              	 .loc 1 437 0
 1441 0022 034B     	 ldr r3,.L87
 1442 0024 034A     	 ldr r2,.L87+4
 1443 0026 9A64     	 str r2,[r3,#72]
 438:../Libraries/XMCLib/src/xmc_math.c **** }
 1444              	 .loc 1 438 0
 1445 0028 BD46     	 mov sp,r7
 1446 002a 02B0     	 add sp,sp,#8
 1447              	 
 1448 002c 80BD     	 pop {r7,pc}
 1449              	.L88:
 1450 002e C046     	 .align 2
 1451              	.L87:
 1452 0030 00000340 	 .word 1073938432
 1453 0034 00A1474D 	 .word 1296539904
 1454              	 .cfi_endproc
 1455              	.LFE99:
 1457              	 .section .text.XMC_MATH_CORDIC_TanhNB,"ax",%progbits
 1458              	 .align 2
 1459              	 .global XMC_MATH_CORDIC_TanhNB
 1460              	 .code 16
 1461              	 .thumb_func
 1463              	XMC_MATH_CORDIC_TanhNB:
 1464              	.LFB100:
 439:../Libraries/XMCLib/src/xmc_math.c **** 
 440:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the hyperbolic tangent of a given angle in radians */
 441:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_TanhNB(XMC_MATH_Q0_23_t angle_in_radians)
 442:../Libraries/XMCLib/src/xmc_math.c **** {
 1465              	 .loc 1 442 0
 1466              	 .cfi_startproc
 1467 0000 80B5     	 push {r7,lr}
 1468              	.LCFI60:
 1469              	 .cfi_def_cfa_offset 8
 1470              	 .cfi_offset 7,-8
 1471              	 .cfi_offset 14,-4
 1472 0002 82B0     	 sub sp,sp,#8
 1473              	.LCFI61:
 1474              	 .cfi_def_cfa_offset 16
 1475 0004 00AF     	 add r7,sp,#0
 1476              	.LCFI62:
 1477              	 .cfi_def_cfa_register 7
 1478 0006 7860     	 str r0,[r7,#4]
 443:../Libraries/XMCLib/src/xmc_math.c ****   MATH->GLBCON = (uint32_t) XMC_MATH_DIV_DVDRC_CORRY_IS_SOURCE + \
 1479              	 .loc 1 443 0
 1480 0008 0C4B     	 ldr r3,.L90
 1481 000a 1C22     	 mov r2,#28
 1482 000c 5A60     	 str r2,[r3,#4]
 444:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_DIV_DVSRC_CORRX_IS_SOURCE;      /* Chain the results of CORDIC
 445:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = (uint32_t) 11 << MATH_DIVCON_DVSSRC_Pos;            /* Right Shifts Divisor by 11 
 1483              	 .loc 1 445 0
 1484 000e 0B4B     	 ldr r3,.L90
 1485 0010 B022     	 mov r2,#176
 1486 0012 1205     	 lsl r2,r2,#20
 1487 0014 5A63     	 str r2,[r3,#52]
 446:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC  = 0U; /* Clear register */
 1488              	 .loc 1 446 0
 1489 0016 094B     	 ldr r3,.L90
 1490 0018 0022     	 mov r2,#0
 1491 001a 1A64     	 str r2,[r3,#64]
 447:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON    = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 1492              	 .loc 1 447 0
 1493 001c 074B     	 ldr r3,.L90
 1494 001e 0E22     	 mov r2,#14
 1495 0020 5A64     	 str r2,[r3,#68]
 448:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 449:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ  = ((uint32_t) angle_in_radians) << MATH_CORDZ_DATA_Pos;
 1496              	 .loc 1 449 0
 1497 0022 064B     	 ldr r3,.L90
 1498 0024 7A68     	 ldr r2,[r7,#4]
 1499 0026 1202     	 lsl r2,r2,#8
 1500 0028 1A65     	 str r2,[r3,#80]
 450:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY  = 0U; /* Clear register */
 1501              	 .loc 1 450 0
 1502 002a 044B     	 ldr r3,.L90
 1503 002c 0022     	 mov r2,#0
 1504 002e DA64     	 str r2,[r3,#76]
 451:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX  = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 1505              	 .loc 1 451 0
 1506 0030 024B     	 ldr r3,.L90
 1507 0032 034A     	 ldr r2,.L90+4
 1508 0034 9A64     	 str r2,[r3,#72]
 452:../Libraries/XMCLib/src/xmc_math.c **** }
 1509              	 .loc 1 452 0
 1510 0036 BD46     	 mov sp,r7
 1511 0038 02B0     	 add sp,sp,#8
 1512              	 
 1513 003a 80BD     	 pop {r7,pc}
 1514              	.L91:
 1515              	 .align 2
 1516              	.L90:
 1517 003c 00000340 	 .word 1073938432
 1518 0040 00A1474D 	 .word 1296539904
 1519              	 .cfi_endproc
 1520              	.LFE100:
 1522              	 .section .text.XMC_MATH_DIV_UnsignedDivNB,"ax",%progbits
 1523              	 .align 2
 1524              	 .global XMC_MATH_DIV_UnsignedDivNB
 1525              	 .code 16
 1526              	 .thumb_func
 1528              	XMC_MATH_DIV_UnsignedDivNB:
 1529              	.LFB101:
 453:../Libraries/XMCLib/src/xmc_math.c **** 
 454:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs division for given two unsigned arguments */
 455:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_DIV_UnsignedDivNB(uint32_t dividend, uint32_t divisor)
 456:../Libraries/XMCLib/src/xmc_math.c **** {
 1530              	 .loc 1 456 0
 1531              	 .cfi_startproc
 1532 0000 80B5     	 push {r7,lr}
 1533              	.LCFI63:
 1534              	 .cfi_def_cfa_offset 8
 1535              	 .cfi_offset 7,-8
 1536              	 .cfi_offset 14,-4
 1537 0002 82B0     	 sub sp,sp,#8
 1538              	.LCFI64:
 1539              	 .cfi_def_cfa_offset 16
 1540 0004 00AF     	 add r7,sp,#0
 1541              	.LCFI65:
 1542              	 .cfi_def_cfa_register 7
 1543 0006 7860     	 str r0,[r7,#4]
 1544 0008 3960     	 str r1,[r7]
 457:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = XMC_MATH_UNSIGNED_DIVISION;
 1545              	 .loc 1 457 0
 1546 000a 064B     	 ldr r3,.L93
 1547 000c 0422     	 mov r2,#4
 1548 000e 5A63     	 str r2,[r3,#52]
 458:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD    = dividend;
 1549              	 .loc 1 458 0
 1550 0010 044B     	 ldr r3,.L93
 1551 0012 7A68     	 ldr r2,[r7,#4]
 1552 0014 1A62     	 str r2,[r3,#32]
 459:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS    = divisor;
 1553              	 .loc 1 459 0
 1554 0016 034B     	 ldr r3,.L93
 1555 0018 3A68     	 ldr r2,[r7]
 1556 001a 5A62     	 str r2,[r3,#36]
 460:../Libraries/XMCLib/src/xmc_math.c **** }
 1557              	 .loc 1 460 0
 1558 001c BD46     	 mov sp,r7
 1559 001e 02B0     	 add sp,sp,#8
 1560              	 
 1561 0020 80BD     	 pop {r7,pc}
 1562              	.L94:
 1563 0022 C046     	 .align 2
 1564              	.L93:
 1565 0024 00000340 	 .word 1073938432
 1566              	 .cfi_endproc
 1567              	.LFE101:
 1569              	 .section .text.XMC_MATH_DIV_SignedDivNB,"ax",%progbits
 1570              	 .align 2
 1571              	 .global XMC_MATH_DIV_SignedDivNB
 1572              	 .code 16
 1573              	 .thumb_func
 1575              	XMC_MATH_DIV_SignedDivNB:
 1576              	.LFB102:
 461:../Libraries/XMCLib/src/xmc_math.c **** 
 462:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs division for given two signed arguments */
 463:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_DIV_SignedDivNB(int32_t dividend, int32_t divisor)
 464:../Libraries/XMCLib/src/xmc_math.c **** {
 1577              	 .loc 1 464 0
 1578              	 .cfi_startproc
 1579 0000 80B5     	 push {r7,lr}
 1580              	.LCFI66:
 1581              	 .cfi_def_cfa_offset 8
 1582              	 .cfi_offset 7,-8
 1583              	 .cfi_offset 14,-4
 1584 0002 82B0     	 sub sp,sp,#8
 1585              	.LCFI67:
 1586              	 .cfi_def_cfa_offset 16
 1587 0004 00AF     	 add r7,sp,#0
 1588              	.LCFI68:
 1589              	 .cfi_def_cfa_register 7
 1590 0006 7860     	 str r0,[r7,#4]
 1591 0008 3960     	 str r1,[r7]
 465:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = XMC_MATH_SIGNED_DIVISION;
 1592              	 .loc 1 465 0
 1593 000a 064B     	 ldr r3,.L96
 1594 000c 0022     	 mov r2,#0
 1595 000e 5A63     	 str r2,[r3,#52]
 466:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD    = dividend;
 1596              	 .loc 1 466 0
 1597 0010 044B     	 ldr r3,.L96
 1598 0012 7A68     	 ldr r2,[r7,#4]
 1599 0014 1A62     	 str r2,[r3,#32]
 467:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS    = divisor;
 1600              	 .loc 1 467 0
 1601 0016 034B     	 ldr r3,.L96
 1602 0018 3A68     	 ldr r2,[r7]
 1603 001a 5A62     	 str r2,[r3,#36]
 468:../Libraries/XMCLib/src/xmc_math.c **** }
 1604              	 .loc 1 468 0
 1605 001c BD46     	 mov sp,r7
 1606 001e 02B0     	 add sp,sp,#8
 1607              	 
 1608 0020 80BD     	 pop {r7,pc}
 1609              	.L97:
 1610 0022 C046     	 .align 2
 1611              	.L96:
 1612 0024 00000340 	 .word 1073938432
 1613              	 .cfi_endproc
 1614              	.LFE102:
 1616              	 .section .text.XMC_MATH_DIV_UnsignedModNB,"ax",%progbits
 1617              	 .align 2
 1618              	 .global XMC_MATH_DIV_UnsignedModNB
 1619              	 .code 16
 1620              	 .thumb_func
 1622              	XMC_MATH_DIV_UnsignedModNB:
 1623              	.LFB103:
 469:../Libraries/XMCLib/src/xmc_math.c **** 
 470:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs modulo operation for given two unsigned arguments */
 471:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_DIV_UnsignedModNB(uint32_t dividend, uint32_t divisor)
 472:../Libraries/XMCLib/src/xmc_math.c **** {
 1624              	 .loc 1 472 0
 1625              	 .cfi_startproc
 1626 0000 80B5     	 push {r7,lr}
 1627              	.LCFI69:
 1628              	 .cfi_def_cfa_offset 8
 1629              	 .cfi_offset 7,-8
 1630              	 .cfi_offset 14,-4
 1631 0002 82B0     	 sub sp,sp,#8
 1632              	.LCFI70:
 1633              	 .cfi_def_cfa_offset 16
 1634 0004 00AF     	 add r7,sp,#0
 1635              	.LCFI71:
 1636              	 .cfi_def_cfa_register 7
 1637 0006 7860     	 str r0,[r7,#4]
 1638 0008 3960     	 str r1,[r7]
 473:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = XMC_MATH_UNSIGNED_DIVISION;
 1639              	 .loc 1 473 0
 1640 000a 064B     	 ldr r3,.L99
 1641 000c 0422     	 mov r2,#4
 1642 000e 5A63     	 str r2,[r3,#52]
 474:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD    = dividend;
 1643              	 .loc 1 474 0
 1644 0010 044B     	 ldr r3,.L99
 1645 0012 7A68     	 ldr r2,[r7,#4]
 1646 0014 1A62     	 str r2,[r3,#32]
 475:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS    = divisor;
 1647              	 .loc 1 475 0
 1648 0016 034B     	 ldr r3,.L99
 1649 0018 3A68     	 ldr r2,[r7]
 1650 001a 5A62     	 str r2,[r3,#36]
 476:../Libraries/XMCLib/src/xmc_math.c **** }
 1651              	 .loc 1 476 0
 1652 001c BD46     	 mov sp,r7
 1653 001e 02B0     	 add sp,sp,#8
 1654              	 
 1655 0020 80BD     	 pop {r7,pc}
 1656              	.L100:
 1657 0022 C046     	 .align 2
 1658              	.L99:
 1659 0024 00000340 	 .word 1073938432
 1660              	 .cfi_endproc
 1661              	.LFE103:
 1663              	 .section .text.XMC_MATH_DIV_SignedModNB,"ax",%progbits
 1664              	 .align 2
 1665              	 .global XMC_MATH_DIV_SignedModNB
 1666              	 .code 16
 1667              	 .thumb_func
 1669              	XMC_MATH_DIV_SignedModNB:
 1670              	.LFB104:
 477:../Libraries/XMCLib/src/xmc_math.c **** 
 478:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs modulo operation for given two signed arguments */
 479:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_DIV_SignedModNB(int32_t dividend, int32_t divisor)
 480:../Libraries/XMCLib/src/xmc_math.c **** {
 1671              	 .loc 1 480 0
 1672              	 .cfi_startproc
 1673 0000 80B5     	 push {r7,lr}
 1674              	.LCFI72:
 1675              	 .cfi_def_cfa_offset 8
 1676              	 .cfi_offset 7,-8
 1677              	 .cfi_offset 14,-4
 1678 0002 82B0     	 sub sp,sp,#8
 1679              	.LCFI73:
 1680              	 .cfi_def_cfa_offset 16
 1681 0004 00AF     	 add r7,sp,#0
 1682              	.LCFI74:
 1683              	 .cfi_def_cfa_register 7
 1684 0006 7860     	 str r0,[r7,#4]
 1685 0008 3960     	 str r1,[r7]
 481:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = XMC_MATH_SIGNED_DIVISION;
 1686              	 .loc 1 481 0
 1687 000a 064B     	 ldr r3,.L102
 1688 000c 0022     	 mov r2,#0
 1689 000e 5A63     	 str r2,[r3,#52]
 482:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD    = dividend;
 1690              	 .loc 1 482 0
 1691 0010 044B     	 ldr r3,.L102
 1692 0012 7A68     	 ldr r2,[r7,#4]
 1693 0014 1A62     	 str r2,[r3,#32]
 483:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS    = divisor;
 1694              	 .loc 1 483 0
 1695 0016 034B     	 ldr r3,.L102
 1696 0018 3A68     	 ldr r2,[r7]
 1697 001a 5A62     	 str r2,[r3,#36]
 484:../Libraries/XMCLib/src/xmc_math.c **** }
 1698              	 .loc 1 484 0
 1699 001c BD46     	 mov sp,r7
 1700 001e 02B0     	 add sp,sp,#8
 1701              	 
 1702 0020 80BD     	 pop {r7,pc}
 1703              	.L103:
 1704 0022 C046     	 .align 2
 1705              	.L102:
 1706 0024 00000340 	 .word 1073938432
 1707              	 .cfi_endproc
 1708              	.LFE104:
 1710              	 .section .text.XMC_MATH_CORDIC_Q15_Sqrt,"ax",%progbits
 1711              	 .align 2
 1712              	 .global XMC_MATH_CORDIC_Q15_Sqrt
 1713              	 .code 16
 1714              	 .thumb_func
 1716              	XMC_MATH_CORDIC_Q15_Sqrt:
 1717              	.LFB105:
 485:../Libraries/XMCLib/src/xmc_math.c **** 
 486:../Libraries/XMCLib/src/xmc_math.c **** int16_t XMC_MATH_CORDIC_Q15_Sqrt(int16_t x)
 487:../Libraries/XMCLib/src/xmc_math.c **** {
 1718              	 .loc 1 487 0
 1719              	 .cfi_startproc
 1720 0000 80B5     	 push {r7,lr}
 1721              	.LCFI75:
 1722              	 .cfi_def_cfa_offset 8
 1723              	 .cfi_offset 7,-8
 1724              	 .cfi_offset 14,-4
 1725 0002 84B0     	 sub sp,sp,#16
 1726              	.LCFI76:
 1727              	 .cfi_def_cfa_offset 24
 1728 0004 00AF     	 add r7,sp,#0
 1729              	.LCFI77:
 1730              	 .cfi_def_cfa_register 7
 1731 0006 021C     	 mov r2,r0
 1732 0008 BB1D     	 add r3,r7,#6
 1733 000a 1A80     	 strh r2,[r3]
 488:../Libraries/XMCLib/src/xmc_math.c ****   int32_t temp;
 489:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 1734              	 .loc 1 489 0
 1735 000c 124B     	 ldr r3,.L106
 1736 000e 0022     	 mov r2,#0
 1737 0010 1A64     	 str r2,[r3,#64]
 490:../Libraries/XMCLib/src/xmc_math.c **** 
 491:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t)XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC |
 1738              	 .loc 1 491 0
 1739 0012 114B     	 ldr r3,.L106
 1740 0014 0622     	 mov r2,#6
 1741 0016 5A64     	 str r2,[r3,#68]
 492:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t)XMC_MATH_CORDIC_ROTVEC_MODE_VECTORING;
 493:../Libraries/XMCLib/src/xmc_math.c **** 
 494:../Libraries/XMCLib/src/xmc_math.c ****   temp = (int32_t)x << 15; /* Q30 to handle numbers > 1.0 */
 1742              	 .loc 1 494 0
 1743 0018 BB1D     	 add r3,r7,#6
 1744 001a 0022     	 mov r2,#0
 1745 001c 9B5E     	 ldrsh r3,[r3,r2]
 1746 001e DB03     	 lsl r3,r3,#15
 1747 0020 FB60     	 str r3,[r7,#12]
 495:../Libraries/XMCLib/src/xmc_math.c **** 
 496:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = (temp - 0x10000000U); /* x - 0.25 */
 1748              	 .loc 1 496 0
 1749 0022 0D4B     	 ldr r3,.L106
 1750 0024 FA68     	 ldr r2,[r7,#12]
 1751 0026 F021     	 mov r1,#240
 1752 0028 0906     	 lsl r1,r1,#24
 1753 002a 8C46     	 mov ip,r1
 1754 002c 6244     	 add r2,r2,ip
 1755 002e DA64     	 str r2,[r3,#76]
 497:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = (temp + 0x10000000U); /* x + 0.25 */
 1756              	 .loc 1 497 0
 1757 0030 094B     	 ldr r3,.L106
 1758 0032 FA68     	 ldr r2,[r7,#12]
 1759 0034 8021     	 mov r1,#128
 1760 0036 4905     	 lsl r1,r1,#21
 1761 0038 8C46     	 mov ip,r1
 1762 003a 6244     	 add r2,r2,ip
 1763 003c 9A64     	 str r2,[r3,#72]
 498:../Libraries/XMCLib/src/xmc_math.c **** 
 499:../Libraries/XMCLib/src/xmc_math.c ****   return (int16_t)(((MATH->CORRX >> 14) * 39568) >> 16); /* Q16 * Q15 */
 1764              	 .loc 1 499 0
 1765 003e 064B     	 ldr r3,.L106
 1766 0040 5B6D     	 ldr r3,[r3,#84]
 1767 0042 9B0B     	 lsr r3,r3,#14
 1768 0044 054A     	 ldr r2,.L106+4
 1769 0046 5343     	 mul r3,r2
 1770 0048 1B0C     	 lsr r3,r3,#16
 1771 004a 9BB2     	 uxth r3,r3
 1772 004c 1BB2     	 sxth r3,r3
 500:../Libraries/XMCLib/src/xmc_math.c **** }
 1773              	 .loc 1 500 0
 1774 004e 181C     	 mov r0,r3
 1775 0050 BD46     	 mov sp,r7
 1776 0052 04B0     	 add sp,sp,#16
 1777              	 
 1778 0054 80BD     	 pop {r7,pc}
 1779              	.L107:
 1780 0056 C046     	 .align 2
 1781              	.L106:
 1782 0058 00000340 	 .word 1073938432
 1783 005c 909A0000 	 .word 39568
 1784              	 .cfi_endproc
 1785              	.LFE105:
 1787              	 .section .text.XMC_MATH_CORDIC_Q31_Sqrt,"ax",%progbits
 1788              	 .align 2
 1789              	 .global XMC_MATH_CORDIC_Q31_Sqrt
 1790              	 .code 16
 1791              	 .thumb_func
 1793              	XMC_MATH_CORDIC_Q31_Sqrt:
 1794              	.LFB106:
 501:../Libraries/XMCLib/src/xmc_math.c **** 
 502:../Libraries/XMCLib/src/xmc_math.c **** int32_t XMC_MATH_CORDIC_Q31_Sqrt(int32_t x)
 503:../Libraries/XMCLib/src/xmc_math.c **** {
 1795              	 .loc 1 503 0
 1796              	 .cfi_startproc
 1797 0000 80B5     	 push {r7,lr}
 1798              	.LCFI78:
 1799              	 .cfi_def_cfa_offset 8
 1800              	 .cfi_offset 7,-8
 1801              	 .cfi_offset 14,-4
 1802 0002 82B0     	 sub sp,sp,#8
 1803              	.LCFI79:
 1804              	 .cfi_def_cfa_offset 16
 1805 0004 00AF     	 add r7,sp,#0
 1806              	.LCFI80:
 1807              	 .cfi_def_cfa_register 7
 1808 0006 7860     	 str r0,[r7,#4]
 504:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 1809              	 .loc 1 504 0
 1810 0008 0F4B     	 ldr r3,.L110
 1811 000a 0022     	 mov r2,#0
 1812 000c 1A64     	 str r2,[r3,#64]
 505:../Libraries/XMCLib/src/xmc_math.c **** 
 506:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t)XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC |
 1813              	 .loc 1 506 0
 1814 000e 0E4B     	 ldr r3,.L110
 1815 0010 0622     	 mov r2,#6
 1816 0012 5A64     	 str r2,[r3,#68]
 507:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t)XMC_MATH_CORDIC_ROTVEC_MODE_VECTORING;
 508:../Libraries/XMCLib/src/xmc_math.c **** 
 509:../Libraries/XMCLib/src/xmc_math.c ****   x >>= 1;  /* Q30 to handle numbers > 1.0 */
 1817              	 .loc 1 509 0
 1818 0014 7B68     	 ldr r3,[r7,#4]
 1819 0016 5B10     	 asr r3,r3,#1
 1820 0018 7B60     	 str r3,[r7,#4]
 510:../Libraries/XMCLib/src/xmc_math.c **** 
 511:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = (x - 0x10000000U); /* x - 0.25 */
 1821              	 .loc 1 511 0
 1822 001a 0B4B     	 ldr r3,.L110
 1823 001c 7A68     	 ldr r2,[r7,#4]
 1824 001e F021     	 mov r1,#240
 1825 0020 0906     	 lsl r1,r1,#24
 1826 0022 8C46     	 mov ip,r1
 1827 0024 6244     	 add r2,r2,ip
 1828 0026 DA64     	 str r2,[r3,#76]
 512:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = (x + 0x10000000U); /* x + 0.25 */
 1829              	 .loc 1 512 0
 1830 0028 074B     	 ldr r3,.L110
 1831 002a 7A68     	 ldr r2,[r7,#4]
 1832 002c 8021     	 mov r1,#128
 1833 002e 4905     	 lsl r1,r1,#21
 1834 0030 8C46     	 mov ip,r1
 1835 0032 6244     	 add r2,r2,ip
 1836 0034 9A64     	 str r2,[r3,#72]
 513:../Libraries/XMCLib/src/xmc_math.c **** 
 514:../Libraries/XMCLib/src/xmc_math.c ****   return ((MATH->CORRX >> 14) * 39568); /* Q16 * Q15 */
 1837              	 .loc 1 514 0
 1838 0036 044B     	 ldr r3,.L110
 1839 0038 5B6D     	 ldr r3,[r3,#84]
 1840 003a 9B0B     	 lsr r3,r3,#14
 1841 003c 034A     	 ldr r2,.L110+4
 1842 003e 5343     	 mul r3,r2
 515:../Libraries/XMCLib/src/xmc_math.c **** }
 1843              	 .loc 1 515 0
 1844 0040 181C     	 mov r0,r3
 1845 0042 BD46     	 mov sp,r7
 1846 0044 02B0     	 add sp,sp,#8
 1847              	 
 1848 0046 80BD     	 pop {r7,pc}
 1849              	.L111:
 1850              	 .align 2
 1851              	.L110:
 1852 0048 00000340 	 .word 1073938432
 1853 004c 909A0000 	 .word 39568
 1854              	 .cfi_endproc
 1855              	.LFE106:
 1857              	 .text
 1858              	.Letext0:
 1859              	 .file 3 "d:\\software\\dave_4-4-2_64bit_2018-02-23\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1860              	 .file 4 "d:\\software\\dave_4-4-2_64bit_2018-02-23\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1861              	 .file 5 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Infineon/XMC1400_series/Include/XMC1400.h"
 1862              	 .file 6 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc/xmc_math.h"
 1863              	 .file 7 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Infineon/XMC1400_series/Include/system_XMC1400.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_math.c
    {standard input}:18     .text.XMC_MATH_DIV_IsBusy:00000000 $t
    {standard input}:23     .text.XMC_MATH_DIV_IsBusy:00000000 XMC_MATH_DIV_IsBusy
    {standard input}:68     .text.XMC_MATH_DIV_IsBusy:0000002c $d
    {standard input}:73     .text.XMC_MATH_CORDIC_IsBusy:00000000 $t
    {standard input}:78     .text.XMC_MATH_CORDIC_IsBusy:00000000 XMC_MATH_CORDIC_IsBusy
    {standard input}:122    .text.XMC_MATH_CORDIC_IsBusy:0000002c $d
    {standard input}:127    .text.XMC_MATH_GetEventStatus:00000000 $t
    {standard input}:132    .text.XMC_MATH_GetEventStatus:00000000 XMC_MATH_GetEventStatus
    {standard input}:183    .text.XMC_MATH_GetEventStatus:00000038 $d
    {standard input}:188    .text.__aeabi_uidiv:00000000 $t
    {standard input}:193    .text.__aeabi_uidiv:00000000 __aeabi_uidiv
    {standard input}:287    .text.__aeabi_uidiv:0000004c $d
    {standard input}:292    .text.__aeabi_idiv:00000000 $t
    {standard input}:297    .text.__aeabi_idiv:00000000 __aeabi_idiv
    {standard input}:390    .text.__aeabi_idiv:0000004c $d
    {standard input}:395    .text.__aeabi_uidivmod:00000000 $t
    {standard input}:400    .text.__aeabi_uidivmod:00000000 __aeabi_uidivmod
    {standard input}:516    .text.__aeabi_uidivmod:00000070 $d
    {standard input}:521    .text.__aeabi_idivmod:00000000 $t
    {standard input}:526    .text.__aeabi_idivmod:00000000 __aeabi_idivmod
    {standard input}:642    .text.__aeabi_idivmod:00000070 $d
    {standard input}:647    .text.XMC_MATH_CORDIC_Cos:00000000 $t
    {standard input}:652    .text.XMC_MATH_CORDIC_Cos:00000000 XMC_MATH_CORDIC_Cos
    {standard input}:705    .text.XMC_MATH_CORDIC_Cos:0000003c $d
    {standard input}:711    .text.XMC_MATH_CORDIC_Sin:00000000 $t
    {standard input}:716    .text.XMC_MATH_CORDIC_Sin:00000000 XMC_MATH_CORDIC_Sin
    {standard input}:769    .text.XMC_MATH_CORDIC_Sin:0000003c $d
    {standard input}:775    .text.XMC_MATH_CORDIC_Tan:00000000 $t
    {standard input}:780    .text.XMC_MATH_CORDIC_Tan:00000000 XMC_MATH_CORDIC_Tan
    {standard input}:841    .text.XMC_MATH_CORDIC_Tan:00000048 $d
    {standard input}:847    .text.XMC_MATH_CORDIC_ArcTan:00000000 $t
    {standard input}:852    .text.XMC_MATH_CORDIC_ArcTan:00000000 XMC_MATH_CORDIC_ArcTan
    {standard input}:907    .text.XMC_MATH_CORDIC_ArcTan:00000040 $d
    {standard input}:912    .text.XMC_MATH_CORDIC_Cosh:00000000 $t
    {standard input}:917    .text.XMC_MATH_CORDIC_Cosh:00000000 XMC_MATH_CORDIC_Cosh
    {standard input}:970    .text.XMC_MATH_CORDIC_Cosh:0000003c $d
    {standard input}:976    .text.XMC_MATH_CORDIC_Sinh:00000000 $t
    {standard input}:981    .text.XMC_MATH_CORDIC_Sinh:00000000 XMC_MATH_CORDIC_Sinh
    {standard input}:1034   .text.XMC_MATH_CORDIC_Sinh:0000003c $d
    {standard input}:1040   .text.XMC_MATH_CORDIC_Tanh:00000000 $t
    {standard input}:1045   .text.XMC_MATH_CORDIC_Tanh:00000000 XMC_MATH_CORDIC_Tanh
    {standard input}:1106   .text.XMC_MATH_CORDIC_Tanh:00000048 $d
    {standard input}:1112   .text.XMC_MATH_CORDIC_CosNB:00000000 $t
    {standard input}:1117   .text.XMC_MATH_CORDIC_CosNB:00000000 XMC_MATH_CORDIC_CosNB
    {standard input}:1162   .text.XMC_MATH_CORDIC_CosNB:00000030 $d
    {standard input}:1168   .text.XMC_MATH_CORDIC_SinNB:00000000 $t
    {standard input}:1173   .text.XMC_MATH_CORDIC_SinNB:00000000 XMC_MATH_CORDIC_SinNB
    {standard input}:1218   .text.XMC_MATH_CORDIC_SinNB:00000030 $d
    {standard input}:1224   .text.XMC_MATH_CORDIC_TanNB:00000000 $t
    {standard input}:1229   .text.XMC_MATH_CORDIC_TanNB:00000000 XMC_MATH_CORDIC_TanNB
    {standard input}:1283   .text.XMC_MATH_CORDIC_TanNB:0000003c $d
    {standard input}:1289   .text.XMC_MATH_CORDIC_ArcTanNB:00000000 $t
    {standard input}:1294   .text.XMC_MATH_CORDIC_ArcTanNB:00000000 XMC_MATH_CORDIC_ArcTanNB
    {standard input}:1341   .text.XMC_MATH_CORDIC_ArcTanNB:00000034 $d
    {standard input}:1346   .text.XMC_MATH_CORDIC_CoshNB:00000000 $t
    {standard input}:1351   .text.XMC_MATH_CORDIC_CoshNB:00000000 XMC_MATH_CORDIC_CoshNB
    {standard input}:1396   .text.XMC_MATH_CORDIC_CoshNB:00000030 $d
    {standard input}:1402   .text.XMC_MATH_CORDIC_SinhNB:00000000 $t
    {standard input}:1407   .text.XMC_MATH_CORDIC_SinhNB:00000000 XMC_MATH_CORDIC_SinhNB
    {standard input}:1452   .text.XMC_MATH_CORDIC_SinhNB:00000030 $d
    {standard input}:1458   .text.XMC_MATH_CORDIC_TanhNB:00000000 $t
    {standard input}:1463   .text.XMC_MATH_CORDIC_TanhNB:00000000 XMC_MATH_CORDIC_TanhNB
    {standard input}:1517   .text.XMC_MATH_CORDIC_TanhNB:0000003c $d
    {standard input}:1523   .text.XMC_MATH_DIV_UnsignedDivNB:00000000 $t
    {standard input}:1528   .text.XMC_MATH_DIV_UnsignedDivNB:00000000 XMC_MATH_DIV_UnsignedDivNB
    {standard input}:1565   .text.XMC_MATH_DIV_UnsignedDivNB:00000024 $d
    {standard input}:1570   .text.XMC_MATH_DIV_SignedDivNB:00000000 $t
    {standard input}:1575   .text.XMC_MATH_DIV_SignedDivNB:00000000 XMC_MATH_DIV_SignedDivNB
    {standard input}:1612   .text.XMC_MATH_DIV_SignedDivNB:00000024 $d
    {standard input}:1617   .text.XMC_MATH_DIV_UnsignedModNB:00000000 $t
    {standard input}:1622   .text.XMC_MATH_DIV_UnsignedModNB:00000000 XMC_MATH_DIV_UnsignedModNB
    {standard input}:1659   .text.XMC_MATH_DIV_UnsignedModNB:00000024 $d
    {standard input}:1664   .text.XMC_MATH_DIV_SignedModNB:00000000 $t
    {standard input}:1669   .text.XMC_MATH_DIV_SignedModNB:00000000 XMC_MATH_DIV_SignedModNB
    {standard input}:1706   .text.XMC_MATH_DIV_SignedModNB:00000024 $d
    {standard input}:1711   .text.XMC_MATH_CORDIC_Q15_Sqrt:00000000 $t
    {standard input}:1716   .text.XMC_MATH_CORDIC_Q15_Sqrt:00000000 XMC_MATH_CORDIC_Q15_Sqrt
    {standard input}:1782   .text.XMC_MATH_CORDIC_Q15_Sqrt:00000058 $d
    {standard input}:1788   .text.XMC_MATH_CORDIC_Q31_Sqrt:00000000 $t
    {standard input}:1793   .text.XMC_MATH_CORDIC_Q31_Sqrt:00000000 XMC_MATH_CORDIC_Q31_Sqrt
    {standard input}:1852   .text.XMC_MATH_CORDIC_Q31_Sqrt:00000048 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
