   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "xmc_vadc.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_VADC_GROUP_ExternalMuxControlInit,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	XMC_VADC_GROUP_ExternalMuxControlInit:
  23              	.LFB84:
  24              	 .file 1 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc/xmc_vadc.h"
   1:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
   2:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @file xmc_vadc.h
   3:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @date 2017-08-14
   4:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   5:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @cond
   6:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
   7:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   9:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * All rights reserved.                        
  11:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                             
  12:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * following conditions are met:   
  14:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  15:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * disclaimer.                        
  17:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
  18:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
  21:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  24:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  32:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
  35:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  36:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Change History
  37:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * --------------
  38:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  39:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-15:
  40:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Initial <br>
  41:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *      
  42:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-20:
  43:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised for XMC1201 device.<br>
  44:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *   
  45:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-04-27:
  46:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for SHS.<br>
  47:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added New APIs for trigger edge selection.<BR>
  48:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  49:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  50:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  51:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-20:
  52:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-25:
  54:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - BFL configuration in channel initialization fixed.
  55:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  56:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-07-28:
  57:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  58:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  59:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  60:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  61:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  62:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  63:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAlias
  64:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetInputClass
  65:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  66:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  67:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  68:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  69:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  70:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  71:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added:
  72:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC4300 device supported
  73:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  74:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed:
  75:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_TriggerEvent API updated. OR operation removed. 
  76:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_ClearEvent API updated. Multiple events triggering on clearing the event i
  77:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Wrong MACRO name defined in xmc_vadc_map.h file corrected for XMC4200/4100 devices.
  78:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *       XMC_VADC_G3_SAMPLE renamed to XMC_VADC_G1_SAMPLE
  79:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  80:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  81:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  82:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled
  83:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled
  84:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  85:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  86:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  87:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-09:
  88:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Optimization of write only registers
  89:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  90:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-18:
  91:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_IsConverterReady(): API checks the STEPCFG register for the read
  92:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *       SHSCFG SFR. 
  93:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  94:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-06-17:
  95:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New macros added XMC_VADC_SHS_FULL_SET_REG, XMC_VADC_RESULT_PRIORITY_AVAILABLE
  96:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New Enum added XMC_VADC_SHS_GAIN_LEVEL_t and XMC_VADC_SYNCTR_EVAL_t
  97:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs added are:
  98:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncSlaveReadySignal
  99:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetAssertedEvents
 100:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAssertedResultEvents
 101:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultRegPriority
 102:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncReadySignal
 103:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetSyncReadySignal
 104:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetResultRegPriority
 105:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 106:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-02-06:
 107:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new functions to remove channels from background request source, XMC_VADC_GLOBAL_Bac
 108:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 109:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-06-24:
 110:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new function XMC_VADC_GLOBAL_SHS_SetAnalogReference() for XMC1 family
 111:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 112:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-08-14:
 113:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added XMC_VADC_GLOBAL_DETAILED_RESULT_t
 114:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *       You can cast the return of XMC_VADC_GLOBAL_GetDetailedResult() to a varible of type XMC_VA
 115:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_SetAnalogReference() to update AREF bitfield correctly
 116:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 117:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @endcond 
 118:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 119:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 120:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 121:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #ifndef XMC_VADC_H
 122:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_H
 123:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  
 124:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 125:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * HEADER FILES
 126:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 127:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_common.h>
 128:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_scu.h>
 129:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_vadc_map.h>
 130:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 131:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 132:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup XMClib XMC Peripheral Library
 133:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 134:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 135:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  
 136:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 137:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup VADC
 138:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @brief Versatile Analog to Digital Converter (VADC) driver for XMC microcontroller family.
 139:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 140:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC microcontroller provides a series of analog input channels connected to a cluster of Ana
 141:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Converters using the Successive Approximation Register (SAR) principle to convert analog input v
 142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * to discrete digital values.
 143:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC1
 144:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC1x is based on Sample & Hold converters, where a cluster contains 2 Sample&Hold units whi
 145:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter.
 146:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 147:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 148:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter of the ADC cluster can operate independent of the others, controlled by a dedicat
 149:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * registers and triggered by a dedicated group request source. The results of each channel can be 
 150:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * dedicated channel-specific result register or in a group-specific result register.<BR>
 151:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 152:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * The Versatile Analog to Digital Converter module (VADC) of the XMC comprises a set of converter 
 153:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * can be operated either independently or via a common request source that emulates a background c
 154:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter block is equipped with a dedicated input multiplexer and dedicated request source
 155:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * which together build separate groups.
 156:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 157:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC4
 158:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc4x.png"
 159:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \else
 160:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc1x.png"
 161:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 162:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 163:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * The VADC LLD is split into GLOBAL and GROUP related APIs.<BR>
 164:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GLOBAL: </B><BR>
 165:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 166:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Global APIs act on the entire ADC module. Configures global configuration registers</LI>
 167:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Allows configuration of the background request source of the VADC.</LI>
 168:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The clock related configurations for the VADC module are configured in the Global APIs/</LI>
 169:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Global API names are prefixed by the \b XMC_VADC_GLOBAL_ and they accept ::XMC_VADC_GLOB
 170:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 171:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the background request source of the VADC. The APIs which act on the background r
 172:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_Background</LI>
 173:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the sample and hold unit of the VADC. The APIs which act on the SHS related regis
 174:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_SHS_</LI>
 175:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 176:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 177:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GROUP: </B><BR>
 178:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 179:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Group APIs act on a VADC group. Configures the group configuration registers</LI>
 180:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the queue request source of the VADC. The APIs which act on the queue related reg
 181:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Queue</LI>
 182:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the scan request source of the VADC. The APIs which act on the scan related regis
 183:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Scan</LI>
 184:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configuration of the channels of each group are done by the API which have a prefix as
 185:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     \b XMC_VADC_GROUP_Channel.</LI>
 186:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Group API names are prefixed by the \b XMC_VADC_GROUP_ and they accept ::XMC_VADC_GROUP_
 187:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 188:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 189:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 190:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 191:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  
 192:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 193:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * MACROS
 194:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 195:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 196:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if ((UC_SERIES == XMC42)||(UC_SERIES == XMC41) || (UC_SERIES == XMC43))
 197:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE           (1U) /*  Defines the availability of group resource in a
 198:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE           (1U) /*  Defines the availability of scan request resour
 199:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE           (1U) /*  Defines the availability of queue request resou
 200:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE            (1U) /*  Defines the availability of external multiplexe
 201:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 202:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE        (1U) /*  Defines the availability of boundary check supp
 203:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS      (1U) /*  Defines the availability of synchronous request
 204:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS        (2U) /*  Defines the maximum number of groups available 
 205:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT      (1U) /*  Defines the availability of boundary flags in a
 206:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE         (1U) /*  Defines the external multiplexer channel select
 207:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 208:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE             (0U) /* Defines the availability of sample and hold modu
 209:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG          (0U) /* Defines the availability of sample and hold modu
 210:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE    (1U) /* Define the availability of a source specific res
 211:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 212:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 213:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 214:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC44 || UC_SERIES == XMC47 || UC_SERIES == XMC48)
 215:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 216:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 217:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 218:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 219:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 220:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 221:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 222:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 223:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 224:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 225:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 226:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 227:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 228:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 229:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 230:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 231:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 232:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC45)
 233:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 234:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 235:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 236:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 237:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 238:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 239:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 240:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 241:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 242:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 243:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 244:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 245:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 246:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 247:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 248:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 249:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 250:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC14 || UC_SERIES == XMC13 || UC_SERIES == XMC12)
 251:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 252:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 253:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 254:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 255:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 256:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 257:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 258:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 259:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 260:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 261:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 262:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 263:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (1U) /* Defines the availability of sample and hold module
 264:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 265:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (1U) /* Define the availability of a priority for result
 266:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 267:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 268:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC11)
 269:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (0U) /*  Defines the availability of group resource in a d
 270:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (0U) /*  Defines the availability of scan request resource
 271:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (0U) /*  Defines the availability of queue request resourc
 272:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (0U) /*  Defines the availability of external multiplexer 
 273:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 274:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (0U) /*  Defines the availability of boundary check suppor
 275:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (0U) /*  Defines the availability of synchronous request s
 276:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 277:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 278:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_START_UP_CAL_ACTIVE (3U) /*  Defines the need for SHS startup calibration acti
 279:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 devices */
 280:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_CONV_ENABLE_FOR_XMC11   (*(uint32_t*) 0x40010500UL) /*  Defines the additional err
 281:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 device for effective working*/ 
 282:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 283:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 284:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 285:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 286:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 287:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 288:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 289:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 290:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_PORTS               (16U) /* Defines the number of hardware ports that can be 
 291:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     as triggers and gating signals */
 292:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 293:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_RESULT_REGISTERS    (16U) /* Defines the number of result holding registers pe
 294:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 295:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_CHANNELS_PER_GROUP  (8U)  /**< Defines the number of ADC channels per group */
 296:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 297:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 298:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * ENUMS
 299:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 300:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef uint16_t XMC_VADC_RESULT_SIZE_t; /**< Type defined the converted result size to unsigned 16
 301:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_GLOBAL_TypeDef XMC_VADC_GLOBAL_t; /**< Type defined the device header file vadc global
 302:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC type*/
 303:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 304:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_AVAILABLE == 1U)
 305:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_G_TypeDef XMC_VADC_GROUP_t; /**< Type defined the device header file vadc group regist
 306:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC Group type*/
 307:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 308:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 309:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 310:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef SHS_Type XMC_VADC_GLOBAL_SHS_t; /**< Type defined the sample and hold register structure*/
 311:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 312:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 313:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the return status after execution of VADC specific API's. Use @ref XMC_VADC_STATUS_t fo
 314:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 315:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STATUS
 316:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 317:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_SUCCESS = 0,   /**< Returned when the API has been able to fulfill the callers re
 318:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_ERROR          /**< Returned when the API cannot fulfill the request */
 319:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STATUS_t;
 320:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 321:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 322:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various service requests lines. Each group can raise up to 4 service requests indep
 323:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  all groups together have the possibility of raising 4 module wide service requests. Use @ref XM
 324:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 325:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 326:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SR
 327:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 328:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR0 = 0, /**< Group specific Service Request-0 */
 329:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR1,     /**< Group specific Service Request-1 */
 330:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR2,     /**< Group specific Service Request-2 */
 331:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR3,     /**< Group specific Service Request-3 */
 332:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR0,    /**< Module Wide Common Service Request-0 */
 333:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR1,    /**< Module Wide Common Service Request-1 */
 334:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR2,    /**< Module Wide Common Service Request-2 */
 335:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR3    /**< Module Wide Common Service Request-3 */
 336:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SR_t;
 337:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 338:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 339:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the mode of operation of a channel, when an ongoing conversion gets interrupted in betw
 340:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_STARTMODE_t for this enumeration.
 341:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 342:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STARTMODE
 343:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 344:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_WFS = 0, /**< An ongoing conversion completes without interruption */
 345:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CIR,     /**< An ongoing conversion can be interrupted and resumed later*/
 346:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CNR     /**< An ongoing conversion can be interrupted and never resumed */
 347:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STARTMODE_t;
 348:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 349:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 350:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the edge sensitivity of the trigger signal which can assert a conversion.
 351:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_EDGE_t for this enumeration.
 352:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 353:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_EDGE
 354:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 355:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_NONE = 0, /**< No external trigger. Conversion request can be asserted by s
 356:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_FALLING,  /**< The falling edge of the external trigger can assert conversi
 357:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_RISING,   /**< The rising edge of the external trigger can assert conversio
 358:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_ANY       /**< Both the edges can assert conversion request */
 359:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_EDGE_t;
 360:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 361:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 362:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external trigger input selection possibilities, to assert a conversion. Refer the V
 363:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  section of the reference manual for details of peripherals which can be used. Also refer xmc_va
 364:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  detailed definitions of the peripherals which can take the control of these enumeration items.
 365:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_INPUT_SELECT_t for this enumeration.
 366:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 367:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_INPUT_SELECT
 368:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 369:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_A = 0, /**< Trigger select signal A */
 370:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_B,     /**< Trigger select signal B */
 371:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_C,     /**< Trigger select signal C */
 372:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_D,     /**< Trigger select signal D */
 373:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_E,     /**< Trigger select signal E */
 374:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_F,     /**< Trigger select signal F */
 375:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_G,     /**< Trigger select signal G */
 376:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_H,     /**< Trigger select signal H */
 377:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_I,     /**< Trigger select signal I */
 378:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_J,     /**< Trigger select signal J */
 379:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_K,     /**< Trigger select signal K */
 380:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_L,     /**< Trigger select signal L */
 381:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_M,     /**< Trigger select signal M */
 382:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_N,     /**< Trigger select signal N */
 383:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_O,     /**< Trigger select signal O */
 384:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_P      /**< Trigger select signal P */
 385:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   
 386:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_INPUT_SELECT_t;
 387:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 388:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 389:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external gating input selection possibilities, to gate the conversion requests. Ref
 390:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  interconnects section of the reference manual for details of peripherals which can be used. Als
 391:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  xmc_vadc_map.h file for detailed definitions of the peripherals which can take the control of t
 392:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  items. Use @ref XMC_VADC_GATE_INPUT_SELECT_t for this enumeration.
 393:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 394:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATE_INPUT_SELECT
 395:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 396:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_A = 0, /**< Gating select signal A */
 397:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_B,     /**< Gating select signal B */
 398:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_C,     /**< Gating select signal C */
 399:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_D,     /**< Gating select signal D */
 400:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_E,     /**< Gating select signal E */
 401:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_F,     /**< Gating select signal F */
 402:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_G,     /**< Gating select signal G */
 403:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_H,     /**< Gating select signal H */
 404:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_I,     /**< Gating select signal I */
 405:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_J,     /**< Gating select signal J */
 406:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_K,     /**< Gating select signal K */
 407:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_L,     /**< Gating select signal L */
 408:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_M,     /**< Gating select signal M */
 409:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_N,     /**< Gating select signal N */
 410:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_O,     /**< Gating select signal O */
 411:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_P      /**< Gating select signal P */
 412:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   
 413:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATE_INPUT_SELECT_t;
 414:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 415:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 416:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the condition for gating the conversion requests. It can be used to set the ENGT field
 417:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * of ASMR/BSMR/QMR register respectively for auto_scan/background_scan/queue request sources.
 418:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_GATEMODE_t for this enumeration.
 419:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 420:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATEMODE
 421:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 422:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_BLOCK = 0,  /**< External triggers are permanently blocked */
 423:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_IGNORE,     /**< External triggers are unconditionally passed */
 424:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVEHIGH, /**< External trigger is passed only if the gate signal is high */
 425:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVELOW  /**< External trigger is passed only if the gate signal is low */
 426:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATEMODE_t;
 427:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 428:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 429:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion result handling mode. Use @ref XMC_VADC_DMM_t for this enumeration.
 430:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 431:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_DMM
 432:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 433:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_REDUCTION_MODE = 0, /**< Standard Data reduction mode*/
 434:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_FILTERING_MODE,     /**< Provide option to select Finite Impulse Response Filter (FI
 435:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                         Infinite Impulse Response Filter (IIR)*/
 436:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_DIFFERENCE_MODE,    /**< Difference mode is selected*/
 437:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_DMM_t;
 438:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 439:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 440:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the conversion mode. It defines the resolution of conversion. Use XMC_VADC_CONVMODE_t f
 441:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 442:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CONVMODE
 443:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 444:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_12BIT       = 0,  /**< Results of conversion are 12bits wide */
 445:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_10BIT       = 1,  /**< Results of conversion are 10bits wide */
 446:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_8BIT        = 2,  /**< Results of conversion are 8bits wide */
 447:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_FASTCOMPARE = 5  /**< Input signal compared with a preset range */
 448:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CONVMODE_t;
 449:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 450:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 451:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the output of a fast compare mode. Use @ref XMC_VADC_FAST_COMPARE_t for
 452:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  this enumeration.
 453:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 454:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_FAST_COMPARE
 455:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 456:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_LOW = 0, /**< Input lower than than programmed reference */
 457:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_HIGH ,   /**< Input higher than than programmed reference */
 458:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_UNKNOWN  /**< Unknown, Conversion probably still ongoing */
 459:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_FAST_COMPARE_t;
 460:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  
 461:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 462:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the type of scan request source to be used. It can choose between auto scan and backgrou
 463:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * source methods. Use @ref XMC_VADC_SCAN_TYPE_t for this enumeration.
 464:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 465:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_TYPE
 466:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 467:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_GROUPSCAN = 0, /**< Auto scan mode of operation selected. Also called as Group
 468:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_BACKGROUND    /**< Background scan mode of operation selected. Also called as 
 469:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_TYPE_t;
 470:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 471:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 472:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the behavior of load event for the scan request source. Use @ref XMC_VADC_SCAN_LOAD_t fo
 473:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 474:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_LOAD
 475:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 476:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_OVERWRITE = 0, /**< The old set of channels is discarded in favor of the new s
 477:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                          awaiting conversion */
 478:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_COMBINE       /**< The new set of channels are combined with the pending chann
 479:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                          previous set */
 480:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_LOAD_t;
 481:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 482:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 483:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion classes that can be selected for each channel. The enumeration members ho
 484:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * global classes. The conversion classes decides the properties of conversion, like resolution, sa
 485:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_CHANNEL_CONV_t for this enumeration.
 486:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 487:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 488:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_CONV
 489:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 490:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 = 0, /**< Conversion property set-0 specific to the group */
 491:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS1,     /**< Conversion property set-1 specific to the group */
 492:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS0,    /**< Conversion property set-0, Module wide */
 493:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1    /**< Conversion property set-1, Module wide */
 494:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONV_t;
 495:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 496:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 497:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the references to boundary values used for limit checking feature. Each of these can be 
 498:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * either an upper bound or a lower bound. Use @ref XMC_VADC_CHANNEL_BOUNDARY_t for this enumeratio
 499:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 500:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 501:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY
 502:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 503:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 = 0, /**< Group specific Boundary-0 value */
 504:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1,     /**< Group specific Boundary-1 value */
 505:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0,    /**< Module wide Boundary-0 value */
 506:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1    /**< Module wide Boundary-1 value */
 507:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_t;
 508:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 509:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 510:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the voltage which the capacitor is charged to. Used in Broken wire detection feature. Us
 511:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_CHANNEL_BWDCH_t for this enumeration.
 512:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 513:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BWDCH
 514:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 515:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAGND = 0, /**< Capacitor pre-charged to ground*/
 516:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAREF     /**< Capacitor pre-charged to reference voltage*/
 517:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BWDCH_t;
 518:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 519:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 520:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Defines the criteria for event generation by the channel. Use @ref XMC_VADC_CHANNEL_EVGEN_t fo
 521:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 522:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_EVGEN
 523:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 524:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_NEVER     = 0,  /**< No event generated */
 525:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_INBOUND   = 1U, /**< Event generated when the result is within the normal 
 526:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPHIGH  = 1U, /**< Event generated when the result of fast compare opera
 527:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_OUTBOUND  = 2U, /**< Event generated when the result is outside the normal
 528:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPLOW   = 2U, /**< Event generated when the result result of fast compar
 529:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_ALWAYS    = 3U /**< Event generated always after conversion - unconditiona
 530:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_EVGEN_t;
 531:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 532:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 533:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the reference voltage selection for conversion. Use @ref XMC_VADC_CHANNEL_REF_t for this
 534:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 535:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_REF
 536:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 537:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_INTREF = 0, /**< Internal VARef */
 538:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_ALT_CH0    /**< External voltage available on Channel-0 of the perticular gr
 539:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_REF_t;
 540:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  
 541:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 542:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the criteria for boundary flag assertion. Use @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t
 543:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 544:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 545:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY_CONDITION
 546:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 547:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_ABOVE_BAND = 0, /**< Set Boundary condition criteria to asser
 548:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_BELOW_BAND     /**< Set Boundary condition criteria to assert
 549:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t;
 550:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  
 551:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 552:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the event which can lead to a global service request assertion. Use @ref XMC_VADC_GLOBAL
 553:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 554:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 555:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_EVENT
 556:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 557:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE = VADC_GLOBEFLAG_SEVGLB_Msk, /**< Background scan request sourc
 558:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_RESULT      = VADC_GLOBEFLAG_REVGLB_Msk  /**< Global result event */
 559:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_EVENT_t;
 560:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  
 561:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 562:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the power modes of a VADC Group. Use @ref XMC_VADC_GROUP_POWERMODE_t for this enumeratio
 563:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 564:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_POWERMODE
 565:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 566:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_OFF       = 0, /**< Group is powered down */
 567:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED1,     /**< Reserved */
 568:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED2,     /**< Reserved */
 569:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_NORMAL        /**< Group is powered up */
 570:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_POWERMODE_t;
 571:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 572:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 573:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the status of a VADC group (also known as kernel). Use @ref XMC_VADC_GROUP_STATE_t for 
 574:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 575:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_STATE
 576:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 577:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_IDLE = 0, /**< Idle and can convert if requested */
 578:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_BUSY      /**< Busy with an ongoing conversion */
 579:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_STATE_t;
 580:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 581:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 582:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the reference to sample time and conversion mode settings. Use @ref XMC_VADC_GROUP_CONV
 583:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 584:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 585:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_CONV
 586:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 587:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_STD = 0, /**< Settings pertaining to channels directly attached to VADC modul
 588:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_EMUX    /**< Settings pertaining to channels connected to VADC via EMUX */
 589:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONV_t;
 590:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 591:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 592:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbiter behavior. Use @ref XMC_VADC_GROUP_ARBMODE_t for this enumera
 593:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 594:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_ARBMODE
 595:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 596:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ALWAYS = 0, /**< Arbiter runs all the time */
 597:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ONDEMAND    /**< Arbiter runs only if a conversion request is asserted by 
 598:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                           request sources */
 599:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_ARBMODE_t;
 600:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 601:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 602:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX mode of operation. Use @ref XMC_VADC_GROUP_EMUXMODE_t for this enumeration.
 603:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 604:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXMODE
 605:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 606:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SWCTRL = 0,     /**< Perform EMUX in Software control mode*/
 607:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_STEADYMODE,     /**< Perform EMUX in Steady mode (Use EMUX set value)*/
 608:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SINGLEMODE,     /**< Perform EMUX in Single step mode*/
 609:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SEQUENCEMODE,   /**< Perform EMUX in Sequence mode*/
 610:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXMODE_t;
 611:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 612:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 613:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX channel selection encoding scheme. Use @ref XMC_VADC_GROUP_EMUXCODE_t for this
 614:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 615:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXCODE
 616:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 617:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_BINARY = 0, /**< A linearly incrementing code serves are MUX-SEL */
 618:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_GRAY       /**< The MUX-SEL is gray encoded */
 619:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCODE_t;
 620:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 621:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 622:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the service request set used. Use @ref XMC_VADC_GROUP_IRQ_t for this enumeration.
 623:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 624:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_IRQ
 625:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 626:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_KERNEL = 0, /**< Refers to Group specific service request */
 627:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_SHARED     /**< Refers to Module wide service request */
 628:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_IRQ_t;
 629:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 630:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 631:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the alignment of the converted result. Use @ref XMC_VADC_RESULT_ALIGN_t for this enumer
 632:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 633:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_ALIGN
 634:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 635:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_LEFT = 0,  /**< Always align result to left */
 636:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_RIGHT      /**< Always align result to right */
 637:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_ALIGN_t;
 638:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 639:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_SUBTRATION 
 640:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 641:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_LEFT_ALIGN  = 0U,  /**< Always align result to left */
 642:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 643:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_LEFT_ALIGN  = 2U,  /**< Always align result to left */
 644:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 645:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_LEFT_ALIGN   = 4U,  /**< Always align result to left */
 646:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_RIGHT_ALIGN  = 0U,  /**< Always align result to right */
 647:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_SUBTRATION_t;
 648:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 649:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 650:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbitration priority. Use @ref XMC_VADC_GROUP_RS_PRIORITY_t for this
 651:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 652:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_RS_PRIORITY
 653:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 654:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_0 = 0, /**< Lowest priority for the request source*/
 655:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_1,     /**< Second lowest priority for the request source*/
 656:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_2,     /**< Second highest priority for the request source*/
 657:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_3,     /**< Highest priority for the request source*/
 658:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_RS_PRIORITY_t;
 659:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 660:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 661:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various modes for the boundary flag. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t f
 662:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 663:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_BOUNDARY_FLAG_MODE
 664:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 665:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_DISABLED = 0,       /**< Disable boundary flag*/
 666:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED,            /**< Always enable boundary*/
 667:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_LOW, /**< Enable boundary flag when gate level
 668:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_HIGH /**< Enable boundary flag when gate level
 669:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t;
 670:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 671:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 672:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 673:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the boundary select for Channel. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t for this 
 674:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 675:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_SELECT
 676:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 677:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_LOWER_BOUND = 0U,       /**< Select the lower boundary*/
 678:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_UPPER_BOUND = 2U        /**< Selects the upper boundary*/
 679:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_SELECT_t;
 680:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 681:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 682:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 683:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the group indices. Use @ref XMC_VADC_GROUP_INDEX_t for this enumeration.
 684:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 685:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_INDEX
 686:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 687:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_0   = 0,
 688:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_1,
 689:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 690:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_2,
 691:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_3
 692:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 693:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_INDEX_t;
 694:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 695:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 696:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** * Defines channel alias.
 697:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** * All enum items are available for channels 0 and 1. Other Channels can accept only XMC_VADC_CHANNE
 698:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** */
 699:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_ALIAS
 700:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 701:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_DISABLED = -1,
 702:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH0 = 0,
 703:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH1 = 1,
 704:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH2 = 2,
 705:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH3 = 3,
 706:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH4 = 4,
 707:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH5 = 5,
 708:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH6 = 6,
 709:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH7 = 7
 710:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_ALIAS_t;
 711:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 712:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 713:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 714:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 715:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selection of the reference voltage that is required for conversions (VREF).
 716:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 717:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_AREF
 718:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 719:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_EXTERNAL_VDD_UPPER_RANGE = 0 << SHS_SHSCFG_AREF_Pos, /**< External refer
 720:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_INTERNAL_VDD_UPPER_RANGE = 2 << SHS_SHSCFG_AREF_Pos, /**< Internal refer
 721:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_INTERNAL_VDD_LOWER_RANGE = 3 << SHS_SHSCFG_AREF_Pos, /**< Internal refer
 722:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_SHS_AREF_t;
 723:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 724:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 725:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 726:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the gain calibration selection.
 727:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 728:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_GAIN_LEVEL
 729:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 730:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_0 = SHS_CALOC0_CALOFFVAL0_Pos, /**< Select the calibration value for gain
 731:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_1 = SHS_CALOC0_CALOFFVAL1_Pos, /**< Select the calibration value for gain
 732:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_2 = SHS_CALOC0_CALOFFVAL2_Pos, /**< Select the calibration value for gain
 733:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_3 = SHS_CALOC0_CALOFFVAL3_Pos  /**< Select the calibration value for gain
 734:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SHS_GAIN_LEVEL_t;
 735:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 736:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 737:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 738:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the Delta sigma loop.
 739:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 740:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_LOOP_CH
 741:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 742:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_0 = SHS_LOOP_LPCH0_Pos, /**< Select Delta-sigma loop 0*/
 743:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_1 = SHS_LOOP_LPCH1_Pos /**< Select Delta-sigma loop 1*/
 744:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SHS_LOOP_CH_t;
 745:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 746:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 747:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides the order in which the SHS should do the calibration
 748:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 749:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER
 750:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 751:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_POST_CONV = 0, /**< Calibration occur after conversion take
 752:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_PRE_CONV   /**< Calibration occur before conversion takes p
 753:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t;
 754:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 755:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 756:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 757:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 758:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides possible routing values for the boundary flag.
 759:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 760:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_NODE
 761:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 762:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_0 = 0U, /**<Route the Group boundary flag to Common b
 763:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_1,      /**<Route the Group boundary flag to Common b
 764:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_2,      /**<Route the Group boundary flag to Common b
 765:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_3,      /**<Route the Group boundary flag to Common b
 766:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_0,  /**<Route the Group boundary flag to Common Service Req
 767:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_1,  /**<Route the Group boundary flag to Common Service Req
 768:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_2,  /**<Route the Group boundary flag to Common Service Req
 769:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_3   /**<Route the Group boundary flag to Common Service Req
 770:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_NODE_t;
 771:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 772:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 773:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 774:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 775:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the ready signal selection
 776:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 777:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SYNCTR_EVAL
 778:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 779:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_1 = VADC_G_SYNCTR_EVALR1_Msk, /**<Mask to set the EVAL1 bits of SYNCTR */
 780:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 781:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_2 = VADC_G_SYNCTR_EVALR2_Msk, /**<Mask to set the EVAL2 bits of SYNCTR */
 782:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_3 = VADC_G_SYNCTR_EVALR3_Msk  /**<Mask to set the EVAL3 bits of SYNCTR */
 783:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 784:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SYNCTR_EVAL_t;
 785:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 786:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 787:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * DATA STRUCTURES
 788:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 789:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard start*/
 790:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
 791:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma push
 792:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma anon_unions
 793:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
 794:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma warning 586
 795:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 796:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 797:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 798:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC scan request source. Use type @ref XMC_VADC_SCAN_CONFIG_t for t
 799:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 800:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_SCAN_CONFIG
 801:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 802:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 803:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how scan request source would
 804:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 805:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter. If the Conversion
 806:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                          selected as Cancel inject repeat/Never mode then this fiel
 807:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                          priority of scan request source. Uses @ref XMC_VADC_GROUP_
 808:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 809:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 810:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 811:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 812:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 813:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Use any one Group related result register as 
 814:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 815:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 816:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 817:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 818:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 819:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 820:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 821:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_INPUT_SELECT_t enumeration*/
 822:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 823:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal. Uses @ref
 824:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_EDGE_t */
 825:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 826:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 827:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_GATE_INPUT_SELECT_t */
 828:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 8;
 829:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Decides whether timer mode for equi-distant s
 830:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       activated or not.*/
 831:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 3;
 832:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 833:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t asctrl;
 834:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 835:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 836:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 837:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 838:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 839:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 2;
 840:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversions be initiated by external hardware trig
 841:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t req_src_interrupt  : 1;  /**< Request source event can be generated after a conv
 842:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t enable_auto_scan   : 1;  /**< Enables the continuous conversion mode. Conversion
 843:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  of the last channel in a scan sequence will cause 
 844:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t load_mode          : 1;  /**< Selects load event mode. Uses @ref XMC_VADC_SCAN_L
 845:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 26;
 846:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 847:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t asmr;
 848:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 849:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_CONFIG_t;
 850:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 851:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 852:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef XMC_VADC_SCAN_CONFIG_t XMC_VADC_BACKGROUND_CONFIG_t; /**< Type defined the scan configurati
 853:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                  structure for background Request S
 854:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 855:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 856:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC channel. Use type XMC_VADC_CHANNEL_CONFIG_t for this enumeratio
 857:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 858:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_CHANNEL_CONFIG
 859:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 860:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 861:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 862:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 863:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 864:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t input_class                : 2;  /**< Input conversion class selection.
 865:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_CONV_t */
 866:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 2;
 867:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t lower_boundary_select      : 2;  /**< Which boundary register serves as lower bo
 868:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 869:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t upper_boundary_select      : 2;  /**< Which boundary register serves as upper bo
 870:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 871:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_criteria         : 2;  /**< When should an event be generated?
 872:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_EVGEN_t */
 873:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sync_conversion            : 1;  /**< Enables synchronous conversion for the con
 874:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t alternate_reference        : 1;  /**< Input reference voltage selection either V
 875:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_REF_t*/
 876:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 4;
 877:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t result_reg_number          : 4;  /**< Group result register number */
 878:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t use_global_result          : 1;  /**< Use global result register for background 
 879:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t result_alignment           : 1;  /**< Alignment of the results read in the resul
 880:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_RESULT_ALIGN_t */
 881:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 6;
 882:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t broken_wire_detect_channel : 2;  /**< Source to be used to charge the capacitor 
 883:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BWDCH_t. */
 884:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t broken_wire_detect         : 1;  /**< Configures extra phase before the capacito
 885:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 886:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t chctr;
 887:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 888:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 889:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 890:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 891:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 892:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 8;
 893:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 894:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch0 : 1; /**< Condition for which the boundary flag should
 895:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITIO
 896:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch1 : 1; /**< Condition for which the boundary flag should
 897:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 898:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch2 : 1; /**< Condition for which the boundary flag should
 899:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 900:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch3 : 1; /**< Condition for which the boundary flag should
 901:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 902:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 903:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 4;
 904:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 905:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 4;
 906:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 907:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch0  : 1; /**< Inverts boundary flag output.*/
 908:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch1  : 1; /**< Inverts boundary flag output.*/
 909:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch2  : 1; /**< Inverts boundary flag output.*/
 910:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch3  : 1; /**< Inverts boundary flag output.*/
 911:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 912:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 913:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch0  : 1; /**< Enable the boundary flag output on the speci
 914:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch1  : 1; /**< Enable the boundary flag output on the speci
 915:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch2  : 1; /**< Enable the boundary flag output on the speci
 916:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch3  : 1; /**< Enable the boundary flag output on the speci
 917:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 918:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 12;
 919:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 920:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t bfl;
 921:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 922:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 923:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 924:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 925:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 926:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 927:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch0    : 4; /**< Specify the basic operation of boundary flag 
 928:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 929:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch1    : 4; /**< Specify the basic operation of boundary flag 
 930:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 931:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch2    : 4; /**< Specify the basic operation of boundary flag 
 932:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 933:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch3    : 4; /**< Specify the basic operation of boundary flag 
 934:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 935:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t                           : 16;
 936:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 937:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t bflc;
 938:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 939:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 940:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     bool    channel_priority;  /**< Only non priority channels can be converted by Background Reque
 941:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     int8_t  alias_channel;     /**< Specifies the channel which has to be aliased with CH0/CH1 (whi
 942:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Force the value to \b(int8_t)-1 to bypass alias feature.
 943:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Uses @ref XMC_VADC_CHANNEL_ALIAS_t  for configuration.*/
 944:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONFIG_t;
 945:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 946:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 947:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize a queue entry. Use type @ref XMC_VADC_QUEUE_ENTRY_t.
 948:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 949:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_ENTRY
 950:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 951:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 952:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 953:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 954:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 955:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t channel_num        : 5;  /**< Channel number associated with this queue entry.<B
 956:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t refill_needed      : 1;  /**< Conversion completed channel gets inserted back in
 957:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t generate_interrupt : 1;  /**< Generates a queue request source event */
 958:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversion requests are raised on an external trig
 959:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 24;
 960:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 961:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 962:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qinr0;
 963:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 964:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_ENTRY_t;
 965:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
 966:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 967:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing a VADC queue request source. Use type @ref XMC_VADC_QUEUE_CONFIG_t.
 968:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 969:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_CONFIG
 970:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 971:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 972:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how queue request source woul
 973:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 974:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter.Uses @ref XMC_VADC
 975:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 976:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 977:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 978:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 979:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 980:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Uses any one Group related result register as
 981:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 982:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 983:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 984:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 985:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 986:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 987:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 988:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_INPUT_SELECT_t */
 989:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 990:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal.
 991:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_EDGE_t */
 992:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 993:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 994:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GATE_INPUT_SELECT_t */
 995:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 8;
 996:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Timer mode for equi-distant sampling shall be
 997:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 3;
 998:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 999:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qctrl0;
1000:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1001:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1002:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1003:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1004:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1005:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                   : 2;
1006:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger  : 1;  /**< Are external triggers supported? */
1007:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                   : 29;
1008:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1009:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qmr0;
1010:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1011:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_CONFIG_t;
1012:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1013:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1014:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1015:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the global input class configuration. Configured parameters are sample 
1016:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
1017:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1018:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLASS
1019:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
1020:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1021:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1022:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1023:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1024:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1025:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1026:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1027:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1028:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1029:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1030:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
1031:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1032:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1033:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1034:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1035:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1036:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1037:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1038:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 16;
1039:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1040:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1041:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globiclass;
1042:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1043:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLASS_t;
1044:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1045:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1046:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1047:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize converter and arbiter clock configuration
1048:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1049:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLOCK
1050:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
1051:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1052:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1053:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1054:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1055:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1056:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t analog_clock_divider     : 5;  /**< Clock for the converter. <BR>Range: [0x0 to 
1057:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 2;
1058:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t msb_conversion_clock     : 1;  /**< Additional clock cycle for analog converter 
1059:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbiter_clock_divider    : 2;  /**< Request source arbiter clock divider. <BR>Ra
1060:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 5;
1061:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 17;
1062:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1063:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globcfg;
1064:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1065:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLOCK_t;
1066:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1067:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1068:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1069:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1070:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize the VADC Global functions
1071:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1072:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CONFIG
1073:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
1074:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1075:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1076:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1077:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1078:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1079:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1080:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1081:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1082:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1083:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globbound;
1084:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1085:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1086:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLOCK_t clock_config; /**< ADC clock configurations*/
1087:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1088:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class0;      /**< ADC input conversion configurations for GLOBICLASS[0
1089:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class1;      /**< ADC input conversion configurations for GLOBICLASS[1
1090:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1091:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1092:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1093:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1094:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 16;
1095:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Data reduction stages */
1096:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
1097:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Results of the next conversion will not be ov
1098:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       result register until the previous value is r
1099:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 6;
1100:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1101:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1102:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globrcr;
1103:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1104:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1105:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1106:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1107:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1108:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t module_disable              : 1;  /**< Disables the module clock.*/
1109:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                             : 2;
1110:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t disable_sleep_mode_control  : 1;  /**< Set it to true in order to disable the Sl
1111:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                             : 28;
1112:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1113:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t clc;
1114:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1115:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CONFIG_t;
1116:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1117:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1118:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1119:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the group input class configuration. Configured parameters are sample t
1120:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
1121:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1122:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CLASS
1123:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
1124:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1125:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1126:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1127:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1128:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1129:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1130:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1131:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1132:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1133:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1134:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1135:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1136:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1137:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1138:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1139:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1140:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1141:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_iclass0;
1142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1143:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CLASS_t;
1144:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1145:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1146:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1147:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  EMUX related configuration structure.
1148:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1149:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_EMUXCFG
1150:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
1151:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1152:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1153:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1154:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1155:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t starting_external_channel : 3;  /**< External channel number to which the VADC w
1156:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         generate a control signal (needed to select
1157:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         the analog multiplexer)*/
1158:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 13;
1159:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1160:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t connected_channel         : 10; /**< The Channel to which the EMUX is connected.
1161:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1162:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t connected_channel         : 5;  /**< The Channel to which the EMUX is connected.
1163:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 5;
1164:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1165:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_mode                 : 2;  /**< Selects the external multiplexer modes: Ste
1166:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         Uses @ref XMC_VADC_GROUP_EMUXMODE_t*/
1167:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_coding               : 1;  /**< Select Binary or Gray coding. Uses @ref XMC
1168:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t stce_usage                : 1;  /**< Use STCE for each conversion of an external
1169:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1170:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_channel_select_style : 1;  /**< Selects the style of configuring the \b con
1171:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         (Each bit represents the channel or entire 
1172:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 1;
1173:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1174:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 2;
1175:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1176:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1177:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_emuxctr;
1178:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1179:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCFG_t;
1180:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1181:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1182:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1183:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Group Configuration Data Structures
1184:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1185:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1186:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CONFIG
1187:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
1188:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_EMUXCFG_t emux_config;    /**< External multiplexer related configurations */
1189:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class0;           /**< ADC input conversion configurations for GxICLASS[
1190:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class1;           /**< ADC input conversion configurations for GxICLASS[
1191:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1192:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1193:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1194:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1195:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1196:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1197:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1198:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1199:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1200:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_bound;
1201:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1202:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1203:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1204:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1205:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1206:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 4;
1207:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbitration_round_length : 2;  /**< Number of arbiter slots to be considered */
1208:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 1;
1209:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbiter_mode             : 1;  /**< Arbiter mode - Select either Continuous mode
1210:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_ARBMODE_t */
1211:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 24;
1212:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1213:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_arbcfg;
1214:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1215:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONFIG_t;
1216:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1217:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1218:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize VADC Group result register.
1219:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1220:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1221:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_RESULT_CONFIG
1222:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
1223:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1224:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1225:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1226:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1227:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 16;
1228:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Configures the data reduction stages */
1229:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t post_processing_mode    : 2;  /**< Result data processing mode. Uses @ref  XMC_V
1230:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       For normal operation select
1231:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_DMM_t::XMC_VADC_DMM_REDUCTION_MODE
1232:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       and data_reduction_control as 0*/
1233:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 2;
1234:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Allow the conversion only after previous resu
1235:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t part_of_fifo            : 2;  /**< Make the result register a part of Result FIF
1236:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
1237:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1238:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1239:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_rcr;
1240:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1241:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_CONFIG_t;
1242:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1243:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1244:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1245:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1246:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Structure to initialize the Stepper configurations
1247:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1248:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_STEP_CONFIG
1249:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
1250:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1251:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1252:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1253:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1254:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step0            :3;  /**< Select a Sample and hold unit for the stepper's s
1255:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1256:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step0             :1;  /**< Should the step be added to the sequence */
1257:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step1            :3;  /**< Select a Sample and hold unit for the stepper's s
1258:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1259:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step1             :1;  /**< Should the step be added to the sequence */
1260:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step2            :3;  /**< Select a Sample and hold unit for the stepper's s
1261:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1262:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step2             :1;  /**< Should the step be added to the sequence */
1263:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step3            :3;  /**< Select a Sample and hold unit for the stepper's s
1264:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1265:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step3             :1;  /**< Should the step be added to the sequence */
1266:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step4            :3;  /**< Select a Sample and hold unit for the stepper's s
1267:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1268:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step4             :1;  /**< Should the step be added to the sequence */
1269:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step5            :3;  /**< Select a Sample and hold unit for the stepper's s
1270:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1271:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step5             :1;  /**< Should the step be added to the sequence */
1272:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step6            :3;  /**< Select a Sample and hold unit for the stepper's s
1273:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1274:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step6             :1;  /**< Should the step be added to the sequence */
1275:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step7            :3;  /**< Select a Sample and hold unit for the stepper's s
1276:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1277:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step7             :1;  /**< Should the step be added to the sequence */
1278:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1279:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1280:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t stepcfg;
1281:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1282:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t;
1283:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1284:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1285:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sample and hold Initialization structure
1286:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1287:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_CONFIG
1288:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
1289:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1290:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1291:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1292:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1293:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1294:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t shs_clock_divider        :4; /**< The divider value for the SHS clock. Range: [0x0 t
1295:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :6;
1296:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1297:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :10;
1298:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif      
1299:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t analog_reference_select  :2; /**< It is possible to different reference voltage for 
1300:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :20;
1301:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1302:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t shscfg;
1303:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1304:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1305:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t calibration_order; /**< order in which the calibration sh
1306:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1307:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CONFIG_t;
1308:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1309:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1310:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1311:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1312:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Detailed global result structure
1313:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1314:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_DETAILED_RESULT
1315:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
1316:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1317:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1318:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1319:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1320:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result                   :16;  /**< Result of the Analog to digital conversion*/
1321:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t group_number             :4;   /**< Indicates the group to which the channel_number 
1322:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_number           :5;   /**< Converted channel number*/
1323:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_number      :3;   /**< Converted external multiplexer channel number.
1324:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1325:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t converted_request_source :2;   /**< Converted request source*/
1326:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t fast_compare_result      :1;   /**< Fast compare result if conversion mode is fast c
1327:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t vaild_result             :1;   /**< Valid flag is set when a new result is available
1328:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1329:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t res;
1330:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1331:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_DETAILED_RESULT_t;
1332:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1333:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1334:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Detailed channel result structure
1335:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1336:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_DETAILED_RESULT
1337:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
1338:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1339:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1340:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1341:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1342:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result                   :16;  /**< Result of the Analog to digital conversion*/
1343:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t data_reduction_counter   :4;   /**< Results reduction counter value*/
1344:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_number           :5;   /**< Converted channel number*/
1345:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_number      :3;   /**< Converted external multiplexer channel number.
1346:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1347:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t converted_request_source :2;   /**< Converted request source*/
1348:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t fast_compare_result      :1;   /**< Fast compare result if conversion mode is fast c
1349:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t vaild_result             :1;   /**< Valid flag is set when a new result is available
1350:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1351:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t res;
1352:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1353:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_DETAILED_RESULT_t;
1354:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  
1355:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1356:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard end*/
1357:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
1358:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma pop
1359:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
1360:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma warning restore
1361:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1362:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1363:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * static inline functions
1364:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1365:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1366:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U) 
1367:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_CHECK_GROUP_PTR(XMC_VADC_GROUP_t *const group_ptr)
1368:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
1369:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
1370:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1) || (group_ptr == VADC_G2) || (group_ptr =
1371:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1372:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1));
1373:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1374:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
1375:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1376:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1377:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * API Prototypes
1378:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1379:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1380:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #ifdef __cplusplus
1381:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** extern "C" {
1382:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1383:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1384:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1385:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1386:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1387:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1388:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1389:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1390:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module.<BR>\n
1391:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would ungate the clock to the VADC module (if applicable). Also this API would bring
1392:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module out of reset state(if applicable), by asserting the appropriate registers.
1393:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_UngatePeripheralClock() and XMC_SCU_RESET_DeassertPeripheral
1394:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * if needed. Directly accessed register is  COMPARATOR.ORCCTRL (Refer to the errata for XMC1100).
1395:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1396:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1397:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableModule().
1398:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1399:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_EnableModule(void);
1400:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1401:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1402:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1403:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1404:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1405:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1406:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1407:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module.<BR>\n
1408:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would gate the clock to the VADC module (if applicable). Also this API would put
1409:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module into the reset state(if applicable) by asserting the appropriate registers.
1410:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_GatePeripheralClock() and XMC_SCU_RESET_AssertPeripheralRese
1411:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1412:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1413:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModule().
1414:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1415:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_DisableModule(void);
1416:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1417:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1418:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1419:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module.
1420:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to initialization data structure
1421:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1422:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1423:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1424:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1425:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC global module with the associated configuration structure pointed by \a con
1426:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * enables the global access to registers by configuring reset and clock un-gating for selected dev
1427:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * initializes global class, boundary , result resources by setting GLOBICLASS,GLOBBOUND,GLOBRCR re
1428:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * configures the global analog and digital clock dividers by setting GLOBCFG register. Refer relat
1429:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the configurations later in the program.
1430:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1431:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1432:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_ClockInit()<BR>
1433:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1434:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
1435:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1436:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1437:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1438:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1439:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1440:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1441:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1442:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1443:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module clock.\n\n Call this API before any further configuration of VADC. It se
1444:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * register to enable.
1445:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1446:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1447:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1448:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1449:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1450:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1451:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
1452:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Enable:Wrong Module Pointer", (global_ptr == VADC))
1453:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_DISR_Msk);
1454:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
1455:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1456:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1457:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1458:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1459:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1460:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1461:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1462:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1463:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module clock.\n\n After this API call, no conversion will occur. Call
1464:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModuleClock() to enable the VADC module later in the program.
1465:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1466:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1467:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1468:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1469:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1470:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1471:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
1472:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Disable:Wrong Module Pointer", (global_ptr == VADC))
1473:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_DISR_Pos);
1474:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
1475:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1476:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1477:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1478:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1479:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1480:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1481:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1482:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1483:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables VADC module to sleep if a sleep request comes.\n\n
1484:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * It resets the EDIS bit of CLC register for enabling the sleep mode.
1485:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1486:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1487:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableSleepMode().
1488:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1489:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1490:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
1491:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1492:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_EDIS_Msk);
1493:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
1494:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1495:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1496:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1497:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1498:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1499:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1500:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1501:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1502:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Ignores the sleep mode request for the VADC.\n\n
1503:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * With the sleep feature enabled, the module will respond to sleep
1504:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * requests by going into a low power mode. It resets the EDIS bit of CLC register for enabling the
1505:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1506:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1507:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableSleepMode().
1508:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1509:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1510:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
1511:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1512:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_EDIS_Pos);
1513:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
1514:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1515:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1516:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1517:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1518:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1519:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to the data structure containing clock configuration data
1520:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1521:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1522:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1523:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1524:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the VADC clock.<BR>\n
1525:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the clock configuration of the VADC module using the config structure pointed by \a conf
1526:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * The clock to the analog converter and to the request source arbiter is configured by setting the
1527:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1528:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1529:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1530:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1531:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1532:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClockInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_
1533:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
1534:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClockInit:Wrong Module Pointer", (global_ptr == VADC))
1535:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1536:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Write the Clock configuration into the GLOBCFG register */
1537:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG = (uint32_t)(config->globcfg | (VADC_GLOBCFG_DIVWC_Msk));
1538:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
1539:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1540:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1541:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1542:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1543:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1544:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Conversion class parameter structure
1545:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_type configure the input call for either standard conversion or EMUX related convers
1546:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
1547:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                Range: [0x0, 0x1]
1548:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1549:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1550:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the ADC conversion settings like sample time and resolution.<BR>\n
1551:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc global resource associated with \a config structure. It
1552:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
1553:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the GLOBALICLASS register specified by \a set_num with the required settings.
1554:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1555:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1556:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1557:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1558:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1559:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1560:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1561:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
1562:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
1563:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1564:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1565:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1566:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC global module
1567:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to result configuration data structure
1568:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1569:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1570:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1571:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1572:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes global result register.<BR>\n
1573:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes Global Result Register with specified settings configured in the \a config structure
1574:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * results in configuration of GLOBRCR register. This helps in configuring the Data reduction mode,
1575:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * , wait for read mode on the GLOBRES register.
1576:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1577:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1578:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1579:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1580:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1581:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1582:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1583:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_ResultInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
1584:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1585:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ResultInit:Wrong Module Pointer", (global_ptr == VADC))
1586:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1587:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Configure GLOBRCR*/
1588:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBRCR = config->g_rcr;
1589:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1590:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  
1591:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1592:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1593:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1594:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1595:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1596:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1597:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1598:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of G
1599:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * enable the startup calibration feature. After turning it on, it loops until all active groups fi
1600:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call XMC_VADC_GLOBAL_Enable() and XMC_VADC_GLOBAL_ClockInit() before calling this API in sequenc
1601:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableStartupCalibration() can disable the calibration feature at runtime.
1602:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1603:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1604:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1605:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1606:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1607:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1608:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr);
1609:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1610:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1611:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1612:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1613:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr  Constant pointer to the VADC module.
1614:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1615:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1616:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1617:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1618:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of 
1619:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * disable the startup calibration feature. Calling the API XMC_VADC_GLOBAL_EnsableStartupCalibrati
1620:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * calibration feature at runtime.
1621:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1622:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1623:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1624:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1625:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1626:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableStartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
1627:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
1628:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableStartupCalibration:Wrong Module Pointer", (global_ptr == VADC)
1629:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= ~((uint32_t)VADC_GLOBCFG_SUCAL_Msk);
1630:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
1631:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1632:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1633:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1634:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1635:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1636:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be disabled. <BR>
1637:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1638:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1639:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1640:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1641:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1642:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the post calibration for a particular group specified as \a group_number.\n\n It config
1643:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to disable the post calibration feature. Call XMC_VADC_GLOBAL_Enable() and
1644:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit() before calling this API in sequence. Calling the API
1645:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnablePostCalibration() can enable back the calibration feature at runtime.
1646:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1647:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1648:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1649:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1650:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1651:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1652:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1653:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1654:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, ui
1655:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
1656:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1657:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1658:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_numbe
1659:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
1660:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1661:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1662:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1663:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1664:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be enabled. <BR>
1665:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1666:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1667:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1668:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1669:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1670:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the post calibration for a particular group specified as \a group_number.\n\n It configu
1671:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to enable the post calibration feature. Calling the API XMC_VADC_GLOBAL_Disa
1672:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * can disable the calibration feature at runtime.
1673:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1674:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1675:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1676:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1677:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1678:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uin
1679:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
1680:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1681:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1682:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= (~ (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_nu
1683:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
1684:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1685:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1686:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
1687:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1688:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1689:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1690:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>Range[0 - 4095]
1691:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>Range[0 - 4095]
1692:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1693:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1694:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1695:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1696:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
1697:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * absolute boundaries. They define a range against which the result of a conversion can be compare
1698:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
1699:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
1700:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * GLOBBOUND1 who will derive their values from this palette.
1701:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1702:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1703:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1704:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1705:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1706:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t boundary0, c
1707:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1708:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1709:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1710:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1711:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
1712:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_value  Boundary Value<BR>Range[0 - 4095]
1713:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1714:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1715:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1716:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1717:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs either the boundary 0 or boundary 1 for result comparison.\n\n This defines a range aga
1718:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
1719:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * capability to a compare value.
1720:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1721:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1722:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1723:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1724:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1725:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
1726:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                            const XMC_VADC_CHANNEL_BOUNDARY_t selection,
1727:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                            const uint16_t boundary_value); 
1728:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1729:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1730:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_AVAILABLE== 1U)
1731:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1732:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1733:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module
1734:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param emuxif       The EMUX interface<BR>Range[0x0 - 0x1]
1735:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group        The VADC group which must be bound to the desired emux
1736:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1737:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1738:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1739:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1740:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds a VADC \a group to an EMUX interface specified in \a emuxif.<BR>\n
1741:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects which group's scan request source will control the EMUX interface (set of control select
1742:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * By passing \b group it would configure that group's scan request source to control the EMUX sele
1743:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \b emuxif.
1744:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1745:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1746:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1747:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1748:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
1749:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1750:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1751:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1752:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1753:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1754:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1755:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return uint32_t Complete global result register value GLOBRES
1756:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1757:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1758:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the complete result from the global result register associated with the \a global_ptr.
1759:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result register GLOBRES for the validity of the data. If the validity is assured, data is fi
1760:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the global result register, cached locally next and subsequently returned to the caller.
1761:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1762:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @note You can cast the return to a varible of type XMC_VADC_GLOBAL_DETAILED_RESULT_t to easily a
1763:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1764:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1765:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetResult()
1766:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1767:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GLOBAL_GetDetailedResult(XMC_VADC_GLOBAL_t *const global_ptr)
1768:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
1769:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetDetailedResult:Wrong Module Pointer", (global_ptr == VADC))
1770:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1771:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  return(global_ptr->GLOBRES);
1772:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
1773:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1774:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1775:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1776:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1777:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1778:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return XMC_VADC_RESULT_SIZE_t 16 bit result register value.<BR>
1779:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *         Range[0x0 - 0X0FFF]
1780:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1781:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1782:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the conversion result from the global result register associated with the \a global_pt
1783:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * lightweight version of XMC_VADC_GLOBAL_GetDetailedResult(). The behavior is exactly the same, ju
1784:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * only the 16 bit numeric result returned back to the application instead of the complete GLOBRES 
1785:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1786:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1787:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetDetailedResult()
1788:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1789:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GLOBAL_GetResult(XMC_VADC_GLOBAL_t *const global_pt
1790:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
1791:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetResult:Wrong Module Pointer", (global_ptr == VADC))
1792:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1793:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((XMC_VADC_RESULT_SIZE_t)global_ptr->GLOBRES);
1794:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
1795:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1796:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1797:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1798:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1799:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param compare_val Compare value which the result of a conversion will be compared against.
1800:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *         <BR>Range[0x0 - 0X0FFF]
1801:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1802:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1803:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1804:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1805:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set compare value in the global result register for fast compare mode.\n\n The result of a conve
1806:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * be compared to the compare value entered as part of \a compare_val. The prerequisite is that the
1807:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * with this global register must select an ICLASS which has the conversion mode configured as fast
1808:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_GLOBAL_GetCompareResult() after this API to
1809:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1810:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1811:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1812:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1813:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
1814:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1815:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1816:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1817:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1818:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return compare high or low. Refer @ref XMC_VADC_FAST_COMPARE_t enum
1819:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1820:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1821:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1822:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1823:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines the result of fast compare operation.\n\n This API returns the result of fast compare
1824:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the valid flag in the global result register GLOBRES is set.
1825:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1826:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1827:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1828:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1829:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr);
1830:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1831:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1832:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1833:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr         Constant pointer to the VADC module
1834:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param event_type   Desired event that must be manually asserted
1835:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1836:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1837:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1838:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1839:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts an event that can lead to an interrupt.\n\n This API manually asserts the reque
1840:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * (Background request source event or a global result event) by setting the GLOBEVFLAG register wi
1841:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \a event_type.
1842:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1843:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1844:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1845:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1846:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1847:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_TriggerEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32
1848:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
1849:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Module Pointer", (global_ptr == VADC))
1850:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Global Event", 
1851:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1852:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1853:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = event_type;
1854:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
1855:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1856:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1857:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1858:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1859:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param event_type Event that must be acknowledged
1860:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1861:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1862:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1863:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1864:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1865:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges an event that has been asserted manually or automatically.\n\n This API acknowledge
1866:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * by clearing GLOBEFLAG sticky flag.
1867:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1868:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1869:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1870:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1871:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClearEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t
1872:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
1873:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Module Pointer", (global_ptr == VADC))
1874:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Global Event", 
1875:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1876:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1877:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = ((uint32_t)(event_type << (uint32_t)16));
1878:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
1879:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1880:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1881:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1882:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1883:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global result event is connected. Refer @ref XMC_VADC
1884:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1885:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1886:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1887:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1888:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Binds the global result event to one of the 4 shared service requests.\n\n This API binds the g
1889:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  to one of the 4 module wide shared service requests .Sets GLOBEVNP register with the correspond
1890:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1891:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1892:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode()
1893:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1894:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
1895:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1896:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1897:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1898:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1899:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global request source event is connected. Refer @ref 
1900:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1901:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1902:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1903:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1904:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds the background request source event to one of the 4 shared service requests.\n\n This API 
1905:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source event to one of the 4 module wide shared service requests. Sets GLOBEVNP register
1906:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * corresponding \a sr line.
1907:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1908:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1909:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SetResultEventInterruptNode()
1910:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1911:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
1912:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1913:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1914:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1915:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1916:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  config Struct consisting of various SHS related configurations.
1917:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1918:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1919:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1920:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1921:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the basic SHS parameters.<BR>\n
1922:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration, the analog reference selection and
1923:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the calibration order for the Sample and Hold unit.
1924:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1925:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1926:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1927:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1928:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONF
1929:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1930:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1931:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1932:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param aref    Analog reference used for conversions. Refer @ref XMC_VADC_GLOBAL_SHS_AREF_t enum
1933:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1934:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1935:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1936:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1937:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selection of the reference voltage that is required for conversions (VREF).
1938:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1939:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1940:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1941:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1942:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetAnalogReference(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1943:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                             const XMC_VADC_GLOBAL_SHS_AREF_t aref)
1944:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1945:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
1946:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1947:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1948:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG |=  (shs_ptr->SHSCFG & (uint32_t)~SHS_SHSCFG_AREF_Msk) | (uint32_t)aref | SHS_SHS
1949:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1950:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1951:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1952:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  /**
1953:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1954:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param  config Struct consisting of various step configurations.
1955:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1956:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return None
1957:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1958:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1959:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   * Configures the stepper sequence for the converter.<BR>\n
1960:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   * Stepper of the SHS can be configured to take up a specific sequence of groups for conversion.
1961:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   * The stepper sequence is configured using this API.
1962:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1963:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1964:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   * None.
1965:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   */
1966:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetStepperSequence(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1967:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                              const XMC_VADC_GLOBAL_SHS_STEP_CONFIG_
1968:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1969:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
1970:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1971:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong config pointer",
1972:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****              (config == (XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t*)NULL))
1973:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1974:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->STEPCFG = (uint32_t) config->stepcfg;
1975:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1976:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1977:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1978:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  /**
1979:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1980:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1981:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return bool returns true if the analog converter is operable
1982:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   *              returns false if the analog converter is powered down
1983:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1984:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1985:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   * Returns the converter status.<BR>\n
1986:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   * Returns the ANRDY bit field of the SHSCFG register.
1987:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1988:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1989:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   * None.
1990:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   */
1991:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE bool XMC_VADC_GLOBAL_SHS_IsConverterReady(XMC_VADC_GLOBAL_SHS_t *const shs_ptr)
1992:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1993:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_IsConverterReady:Wrong SHS Pointer",(shs_ptr == (XMC_VADC_GLOBAL_
1994:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1995:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   return((bool)((shs_ptr->SHSCFG >> (uint32_t)SHS_SHSCFG_ANRDY_Pos) & (uint32_t)0x1));
1996:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1997:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
1998:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1999:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2000:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2001:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
2002:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2003:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2004:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2005:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2006:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
2007:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
2008:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * this mode the ADC module will convert the input depending on the value stored in the SST bit of 
2009:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would configure the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
2010:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2011:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2012:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2013:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2014:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP_
2015:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2016:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2017:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2018:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be disabled.<BR>Range: [0x
2019:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2020:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2021:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2022:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2023:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
2024:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from accelerated mode to compatible mode of conversion is neede
2025:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would clear the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
2026:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2027:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2028:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2029:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2030:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP
2031:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2032:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2033:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2034:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
2035:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sst_value Value of short sample time that needs to be configured.<BR>
2036:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                  Range: [0x0 to 0x3F]
2037:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2038:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2039:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2040:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2041:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the Accelerated timing mode sample time.<BR>\n
2042:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
2043:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Accelerated mode the ADC module will convert the input depending on the value stored in the SST 
2044:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  SHS0_TIMCFGx. This API would configure the shot sample time either in SHS0_TIMCFG0.SST or SHS0_
2045:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2046:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2047:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2048:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2049:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2050:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                             XMC_VADC_GROUP_INDEX_t group_num,
2051:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                             uint8_t sst_value);
2052:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2053:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2054:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2055:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2056:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  divs_value The clock divider value that is possible
2057:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    <BR>Range:[0x0 to 0xF]
2058:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2059:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2060:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2061:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure Sample and hold clock divider value.<BR>\n
2062:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration. This determines the frequency of conversio
2063:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * of the Sample and hold converter.
2064:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2065:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2066:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2067:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2068:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetClockDivider(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, uint
2069:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
2070:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong SHS Pointer",
2071:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2072:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong divide factor selected",
2073:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****              (divs_value < (uint32_t)0x10))
2074:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2075:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG =  (shs_ptr->SHSCFG & (~(uint32_t)SHS_SHSCFG_DIVS_Msk)) | (uint32_t)SHS_SHSCFG_SC
2076:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG |=  ((uint32_t)divs_value << SHS_SHSCFG_DIVS_Pos) | (uint32_t)SHS_SHSCFG_SCWC_Msk
2077:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
2078:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2079:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2080:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2081:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_value gain value possible
2082:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Range:[0x0 to 0x3]
2083:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2084:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  ch_num The channel number for which the gain has to be configured
2085:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2086:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2087:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2088:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the gain value for SHS.<BR>\n
2089:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would set the gain factor for a selected channel.
2090:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2091:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2092:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2093:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2094:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2095:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                        uint8_t gain_value,
2096:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                        XMC_VADC_GROUP_INDEX_t group_num,
2097:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                        uint8_t ch_num);
2098:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2099:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
2100:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2101:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2102:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  max_calibration_time calibration time
2103:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                              Range:[0x0 to 0x3F]
2104:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2105:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2106:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2107:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the Maximum calibration timing.<BR>\n
2108:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the Maximum time after which the calibration should occur. If no adc conver
2109:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * occur during this duration then the calibration would run irrespective of conversions. The max t
2110:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter can go without a calibration is set in this API.
2111:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2112:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2113:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2114:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2115:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetMaxCalTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2116:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        uint32_t max_calibration_time)
2117:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
2118:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetMaxCalTime:Wrong SHS Pointer",
2119:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2120:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2121:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALMAX_Msk);
2122:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->CALCTR |=  ((uint32_t)max_calibration_time << SHS_CALCTR_CALMAX_Pos);
2123:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
2124:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2125:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2126:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2127:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2128:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2129:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2130:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2131:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2132:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the Gain and offset calibration.<BR>\n
2133:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the gain and offset calibration for all the Sample and hold units.
2134:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2135:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2136:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations()<BR>.
2137:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2138:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2139:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          XMC_VADC_GROUP_INDEX_t group_num);
2140:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2141:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2143:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2144:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2145:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2146:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2147:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the Gain and offset calibration.<BR>\n
2148:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the gain and offset calibration for all the Sample and hold units.
2149:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2150:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2151:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2152:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2153:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2154:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                           XMC_VADC_GROUP_INDEX_t group_num);
2155:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2156:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2157:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2158:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2159:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2160:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2161:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2162:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2163:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Read the calibration value for the selected gain level.<BR>\n
2164:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would return the offset calibration val
2165:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * selected gain level. This is applicable for all the channels in the group that use the particula
2166:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2167:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2168:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue()<BR>.
2169:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2170:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2171:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_GROUP_INDEX_t group_num,
2172:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_SHS_GAIN_LEVEL_t gain_level);
2173:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2174:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2175:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2176:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2177:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2178:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  offset_calibration_value The offset calibration value to be set.
2179:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2180:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2181:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2182:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set the calibration value for the selected gain level.<BR>\n
2183:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would set the offset value of the selec
2184:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2185:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2186:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue()<BR>.
2187:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2188:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2189:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    XMC_VADC_GROUP_INDEX_t group_num,
2190:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
2191:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    uint8_t offset_calibration_value);
2192:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2193:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2194:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2195:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2196:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2197:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2198:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  ch_num Channel number for which the configurations applies
2199:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2200:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2201:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2202:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the delta sigma loop of the SHS.<BR>\n
2203:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * There are 2 Delta-Sigma loops that can be configured. This API would configure the loop (loop_se
2204:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * with the appropriate group_num and channel_num.
2205:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP bit fields.
2206:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2207:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2208:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop()<BR>.
2209:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2210:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2211:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                            XMC_VADC_GROUP_INDEX_t group_num,
2212:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                            XMC_VADC_SHS_LOOP_CH_t loop_select,
2213:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                            uint8_t ch_num);
2214:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2215:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2216:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2217:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2218:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2219:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2220:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2221:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the selected Delta-Sigma loop.<BR>\n
2222:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2223:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2224:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2225:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2226:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2227:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2228:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2229:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               XMC_VADC_SHS_LOOP_CH_t loop_select)
2230:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
2231:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong SHS Pointer",
2232:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2233:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2234:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2235:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2236:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->LOOP |= (uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select;
2237:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
2238:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2239:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2240:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2241:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2242:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2243:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2244:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2245:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the selected delta sigma loop.<BR>\n
2246:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2247:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2248:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2249:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2250:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2251:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2252:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr
2253:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                XMC_VADC_SHS_LOOP_CH_t loop_select)
2254:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
2255:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong SHS Pointer",
2256:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2257:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2258:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2259:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2260:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->LOOP &= ~((uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select);
2261:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2262:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
2263:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2264:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2265:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
2266:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2267:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2268:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the VADC group.
2269:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to the initialization data structure
2270:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2271:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2272:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2273:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2274:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC group module with the associated configuration structure pointed by \a conf
2275:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * initializes the group specified as part of the \a group_ptr. It initializes group conversion cla
2276:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * configuration , boundary configuration by setting GxICLASS,GxARBCFG,GxBOUND, registers. It also
2277:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * configures the EMUX control register if applicable. Refer related API's to change the configurat
2278:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  program.
2279:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2280:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2281:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_InputClassInit()<BR>
2282:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetPowerMode()<BR>
2283:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetBoundaries()<BR>
2284:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ExternalMuxControlInit()<BR>
2285:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2286:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_Init(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config);
2287:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2288:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2289:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2290:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group.
2291:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  group related conversion class parameter structure
2292:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_type Use direct channels or EMUX channels. Refer @ref XMC_VADC_GROUP_CONV_t enum
2293:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
2294:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                Range[0x0, 0x1]
2295:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2296:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2297:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2298:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2299:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc group resource associated with \a config structure. It 
2300:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
2301:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the G_ICLASS register specified by \a set_num with the required settings.
2302:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2303:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2304:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2305:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_Init()
2306:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2307:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2308:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
2309:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num);
2310:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2311:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2312:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2313:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC Group which must be set as a slave
2314:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param master_grp The master group number<BR>
2315:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2316:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group The slave group number<BR>
2317:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2318:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2319:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2320:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2321:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2322:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures a VADC Group as a slave group.\n\n Conversion of identically numbered channels across
2323:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2324:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is the
2325:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * master group while Groups-0 and 3 are the slave groups. It uses the SYNCCTR register for the con
2326:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2327:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2328:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_SetSyncMaster()<BR>
2329:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR>
2330:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_EnableChannelSyncRequest()<BR>
2331:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2332:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2333:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
2334:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2335:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2336:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2337:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC Group.
2338:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param power_mode  Desired power mode
2339:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2340:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2341:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2342:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2343:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the power mode of a VADC group.\n\n For a VADC group to actually convert an analog si
2344:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter must be turned on.
2345:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2346:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2347:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2348:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2349:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
2350:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2351:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2352:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2353:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2354:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2355:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2356:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2357:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2358:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures a VADC Group as a master group.<BR>\n
2359:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Conversion of identically numbered channels across groups can be
2360:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2361:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is therefore the mast
2362:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Groups-0 and 3 are the slave groups.
2363:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2364:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2365:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2366:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2367:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr);
2368:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2369:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2370:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2371:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2372:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2373:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     <BR>Range: [0x0 to 0x3]
2374:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2375:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2376:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2377:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the ready signal for master group.<BR>\n
2378:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would read the \b slave_group number and determine which EVAL configuration to apply fo
2379:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * slave set. Checks the readiness of slaves in synchronized conversions. Conversion of identically
2380:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * across groups can be synchronized. For example, when the trigger to convert CH-1 of Group-2 is r
2381:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * possible to simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this ex
2382:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * therefore the master group while Groups-0 and 3 are the slave groups. Before the master can requ
2383:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * for synchronized conversion, it has the option of checking the readiness of the slaves.
2384:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2385:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2386:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()
2387:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2388:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2389:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2390:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2391:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2392:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the master VADC Group
2393:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2394:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2395:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2396:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2397:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Clears the ready signal for master group.<BR>\n
2398:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Ignores the readiness of slaves in synchronized conversions.This API would read the \b slave_gro
2399:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * determine which EVAL configuration to apply for the given master slave set. Then clears the conf
2400:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is called when the master should issue the conversion request without waiting for the s
2401:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * assert a ready signal. The ready signal is asserted by the slave group(s) when the conversion is
2402:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * in these channels.
2403:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2404:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2405:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()<BR>
2406:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2407:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2408:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2409:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2410:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2411:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group waiting for ready signal
2412:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_waiting_group  The VADC Group which expects a ready signal to start it's conversion.
2413:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_origin_group  The VADC Group from which the eval_waiting_group will expect a ready s
2414:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2415:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2416:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2417:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets the ready signal in the eval_waiting_group .<BR>\n
2418:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion all the slaves participating need to configure the ready signal.
2419:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A slave group will also need to configure the ready signals coming from the other slave groups.
2420:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the Sync.slave's EVAL Bits (GxSYNCTR.EVALy).
2421:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2422:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2423:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2424:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2425:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlaveReadySignal(XMC_VADC_GROUP_t *const group_ptr,
2426:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                             uint32_t eval_waiting_group,
2427:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                             uint32_t eval_origin_group);
2428:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2429:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2430:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2431:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group
2432:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2433:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *         uint32_t EVAL bits for the group
2434:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2435:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2436:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Get the Eval bits of the group.<BR>\n
2437:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion the master's ready signal configuration must be copied onto the slav
2438:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would return the Sync EVAL Bits (GxSYNCTR.EVALy) which can be used to set in 
2439:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2440:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2441:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2442:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2443:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetSyncReadySignal(XMC_VADC_GROUP_t *const group_ptr)
2444:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
2445:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t eval_mask;
2446:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetSyncReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
2447:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2448:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
2449:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk | VADC_G_SYNCTR_EVALR2_Msk | VADC_G_SYNCTR_EVALR3_Msk;
2450:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #else
2451:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk;
2452:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2453:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   return( group_ptr->SYNCTR & eval_mask);
2454:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
2455:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2456:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2457:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group
2458:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_mask  mask to configure the eval bits
2459:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Use XMC_VADC_SYNCTR_EVAL_t to create the mask.
2460:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2461:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2462:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2463:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set the Eval bits of the group.<BR>\n
2464:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion the master's ready signal configuration must be copied onto the slav
2465:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the Sync EVAL Bits (GxSYNCTR.EVALy).
2466:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2467:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2468:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2469:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2470:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_SetSyncReadySignal(XMC_VADC_GROUP_t *const group_ptr, uint32_t 
2471:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
2472:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t eval_mask;
2473:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
2474:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2475:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
2476:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk | VADC_G_SYNCTR_EVALR2_Msk | VADC_G_SYNCTR_EVALR3_Msk;
2477:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #else
2478:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk;
2479:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2480:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SYNCTR &= ~(eval_mask);
2481:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SYNCTR |= mask;
2482:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
2483:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2484:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2485:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2486:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the master VADC Group
2487:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num  Channel whose conversion triggers conversion in slave groups
2488:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2489:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2490:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2491:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up a channel for synchronized conversion.\n\n Conversion of identically numbered channels a
2492:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * can be synchronized. For example, when the trigger to
2493:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * convert CH-1 of Group-2 is received, it is possible to simultaneously request conversion of CH-1
2494:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Group-3. Group-2 in this example is therefore the master group while Groups-0 and 3 are the slav
2495:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Before the master can request its slaves for synchronized conversion, it has the option of check
2496:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * of the slaves.
2497:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2498:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2499:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2500:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2501:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
2502:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2503:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2504:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2505:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2506:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     Channel whose conversion triggers conversion in slave groups
2507:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2508:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2509:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2510:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the synchronization request for the particular channel specified as ch_num. To enable th
2511:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * call the API @ref XMC_VADC_GROUP_EnableChannelSyncRequest().
2512:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2513:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2514:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2515:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2516:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
2517:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2518:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2519:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2520:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2521:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2522:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return retuns IDLE if converter is free else returns busy. Refer @ref XMC_VADC_GROUP_STATE_t en
2523:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2524:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2525:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Checks the live status of the analog to digital converter. The converter can either idle doing n
2526:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * sampling + converting.
2527:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2528:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2529:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2530:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2531:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr);
2532:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2533:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2534:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2535:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group whose global boundary registers are to be pr
2536:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>
2537:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2538:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>
2539:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2540:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2541:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2542:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2543:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2544:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
2545:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * absolute boundaries. They defines a range against which the result of a conversion can be compar
2546:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
2547:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
2548:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * G_BOUND1 who will derive their values from this palette.
2549:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2550:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2551:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2552:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2553:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2554:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr, 
2555:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                   const uint32_t boundary0, 
2556:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                   const uint32_t boundary1);
2557:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2558:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2559:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2560:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
2561:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_value Select the boundary value.
2562:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2563:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2564:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2565:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2566:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundary with \a boundary_value for result comparison.\n\n This defines a range aga
2567:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
2568:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * capability to a compare value.
2569:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2570:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2571:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2572:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2573:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
2574:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_CHANNEL_BOUNDARY_t selection,
2575:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const uint16_t boundary_value); 
2576:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2577:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2578:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2579:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr_num   The service request number (0 through 3)
2580:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param type     IRQ type (Kernel specific interrupt vs Module wide shared interrupt )
2581:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2582:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2583:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2584:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Activates a Service Request line(manually trigger).<BR>\n
2585:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * VADC provides few SR lines for each group and a few more which is shared across all the groups.
2586:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * These SR lines can be connected to an NVIC node which in-turn would generate an interrupt.
2587:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would manually trigger the given SR line. Could be used for evaluation and testing purp
2588:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2589:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2590:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2591:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2592:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr, 
2593:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const uint32_t sr_num, 
2594:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_IRQ_t type);
2595:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2596:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2597:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2598:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group
2599:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param emux_cfg   EMUX configuration structure
2600:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2601:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2602:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2603:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures group EMUX parameters associated with the \a emux_cfg configuration structure.\n\n An
2604:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * interface allows additional channels to be connected to a VADC group. The conversion properties
2605:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * of such channels can be different from the standard channels which are directly connected to the
2606:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API configures conversion properties of channels connected via EMUX interface.
2607:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2608:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2609:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2610:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2611:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
2612:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                            const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
2613:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
  25              	 .loc 1 2613 0
  26              	 .cfi_startproc
  27 0000 80B5     	 push {r7,lr}
  28              	.LCFI0:
  29              	 .cfi_def_cfa_offset 8
  30              	 .cfi_offset 7,-8
  31              	 .cfi_offset 14,-4
  32 0002 84B0     	 sub sp,sp,#16
  33              	.LCFI1:
  34              	 .cfi_def_cfa_offset 24
  35 0004 00AF     	 add r7,sp,#0
  36              	.LCFI2:
  37              	 .cfi_def_cfa_register 7
  38 0006 7860     	 str r0,[r7,#4]
  39 0008 3960     	 str r1,[r7]
2614:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t   emux_config;
2615:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2616:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
2617:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2618:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_P
  40              	 .loc 1 2618 0
  41 000a 3B1C     	 mov r3,r7
  42 000c 1B78     	 ldrb r3,[r3]
  43 000e 5B07     	 lsl r3,r3,#29
  44 0010 5B0F     	 lsr r3,r3,#29
  45 0012 DBB2     	 uxtb r3,r3
  46 0014 1A1C     	 mov r2,r3
2619:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****               ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
  47              	 .loc 1 2619 0
  48 0016 BB1C     	 add r3,r7,#2
  49 0018 1B88     	 ldrh r3,[r3]
  50 001a 9B05     	 lsl r3,r3,#22
  51 001c 9B0D     	 lsr r3,r3,#22
  52 001e 9BB2     	 uxth r3,r3
  53 0020 1B04     	 lsl r3,r3,#16
2618:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****               ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
  54              	 .loc 1 2618 0
  55 0022 1343     	 orr r3,r2
  56 0024 FB60     	 str r3,[r7,#12]
2620:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2621:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->EMUXCTR  = emux_config;
  57              	 .loc 1 2621 0
  58 0026 7A68     	 ldr r2,[r7,#4]
  59 0028 F823     	 mov r3,#248
  60 002a 5B00     	 lsl r3,r3,#1
  61 002c F968     	 ldr r1,[r7,#12]
  62 002e D150     	 str r1,[r2,r3]
2622:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  63              	 .loc 1 2622 0
  64 0030 FB1C     	 add r3,r7,#3
  65 0032 1B78     	 ldrb r3,[r3]
  66 0034 DB06     	 lsl r3,r3,#27
  67 0036 DB0F     	 lsr r3,r3,#31
  68 0038 DBB2     	 uxtb r3,r3
  69 003a 1A07     	 lsl r2,r3,#28
2623:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
  70              	 .loc 1 2623 0
  71 003c FB1C     	 add r3,r7,#3
  72 003e 1B78     	 ldrb r3,[r3]
  73 0040 1B07     	 lsl r3,r3,#28
  74 0042 9B0F     	 lsr r3,r3,#30
  75 0044 DBB2     	 uxtb r3,r3
  76 0046 9B06     	 lsl r3,r3,#26
2622:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  77              	 .loc 1 2622 0
  78 0048 1A43     	 orr r2,r3
2624:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
  79              	 .loc 1 2624 0
  80 004a FB1C     	 add r3,r7,#3
  81 004c 1B78     	 ldrb r3,[r3]
  82 004e 9B06     	 lsl r3,r3,#26
  83 0050 DB0F     	 lsr r3,r3,#31
  84 0052 DBB2     	 uxtb r3,r3
  85 0054 5B07     	 lsl r3,r3,#29
2622:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  86              	 .loc 1 2622 0
  87 0056 1343     	 orr r3,r2
  88 0058 FB60     	 str r3,[r7,#12]
2625:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2626:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
2627:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_P
  89              	 .loc 1 2627 0
  90 005a FB1C     	 add r3,r7,#3
  91 005c 1B78     	 ldrb r3,[r3]
  92 005e 5B06     	 lsl r3,r3,#25
  93 0060 DB0F     	 lsr r3,r3,#31
  94 0062 DBB2     	 uxtb r3,r3
  95 0064 9B07     	 lsl r3,r3,#30
  96 0066 FA68     	 ldr r2,[r7,#12]
  97 0068 1343     	 orr r3,r2
  98 006a FB60     	 str r3,[r7,#12]
2628:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2629:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
  99              	 .loc 1 2629 0
 100 006c 7A68     	 ldr r2,[r7,#4]
 101 006e F823     	 mov r3,#248
 102 0070 5B00     	 lsl r3,r3,#1
 103 0072 D258     	 ldr r2,[r2,r3]
 104 0074 FB68     	 ldr r3,[r7,#12]
 105 0076 1343     	 orr r3,r2
 106 0078 8022     	 mov r2,#128
 107 007a 1206     	 lsl r2,r2,#24
 108 007c 1A43     	 orr r2,r3
 109 007e 111C     	 mov r1,r2
 110 0080 7A68     	 ldr r2,[r7,#4]
 111 0082 F823     	 mov r3,#248
 112 0084 5B00     	 lsl r3,r3,#1
 113 0086 D150     	 str r1,[r2,r3]
2630:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
 114              	 .loc 1 2630 0
 115 0088 BD46     	 mov sp,r7
 116 008a 04B0     	 add sp,sp,#16
 117              	 
 118 008c 80BD     	 pop {r7,pc}
 119              	 .cfi_endproc
 120              	.LFE84:
 122 008e C046     	 .section .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot,"ax",%progbits
 123              	 .align 2
 124              	 .code 16
 125              	 .thumb_func
 127              	XMC_VADC_GROUP_ScanEnableArbitrationSlot:
 128              	.LFB87:
2631:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2632:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
2633:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2634:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2635:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2636:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_flag_num The Boundary flag for which the interrupt node needs to be configured.
2637:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                          Range: [0x0 to 0x3]
2638:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param node    Service Request node Id
2639:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2640:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2641:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2642:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2643:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the boundary event to the SR line of VADC or to a common boundary flag.<BR>\n
2644:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a boundary event. Hence to get a interrupt o
2645:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
2646:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * field GxBFLNP.BFLxNP.
2647:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2648:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2649:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2650:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2651:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
2652:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                   const uint8_t boundary_flag_num,
2653:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                   const XMC_VADC_BOUNDARY_NODE_t node);
2654:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2655:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2656:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2657:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2658:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2659:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t The complete GxALIAS register
2660:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2661:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2662:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the ALIAS values.\n The ALIAS value that is configured for Channel-0 and channel-1 are r
2663:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2664:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2665:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2666:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2667:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetAlias(XMC_VADC_GROUP_t *const group_ptr)
2668:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
2669:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetAliasWrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
2670:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   return (group_ptr->ALIAS);
2671:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
2672:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2673:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2674:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2675:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_class  conversion property to be extracted
2676:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2677:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_GROUP_CLASS_t The complete GxICLASSy register
2678:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2679:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2680:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the input class configuration values.\n
2681:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This returns the sampling time configuration and resolution configured in the appropriate group 
2682:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \b conv_class. A call to this API would return the register GxICLASSy.
2683:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2684:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2685:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2686:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2687:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_GROUP_CLASS_t XMC_VADC_GROUP_GetInputClass(XMC_VADC_GROUP_t *const group_p
2688:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const XMC_VADC_CHANNEL_CONV_t c
2689:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
2690:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CLASS_t input_value;
2691:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
2692:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong conv_class selected", 
2693:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****              (XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLA
2694:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2695:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   input_value.g_iclass0 = (uint32_t) 0xFFFFFFFF;
2696:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   if ((XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLASS1 == 
2697:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   {
2698:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     input_value.g_iclass0 = group_ptr->ICLASS[(uint32_t)conv_class];
2699:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   }
2700:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2701:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   return (input_value);
2702:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
2703:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2704:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2705:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)
2706:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2707:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
2708:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to Scan configuration
2709:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2710:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2711:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2712:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC SCAN functional block.<BR>\n
2713:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * The GROUP SCAN request source functional block converts channels sequentially starting with the 
2714:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * channel to the lowest. Channels must register themselves as being part of the the scan sequence.
2715:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_ScanEnableA
2716:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
2717:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_ScanDisableArbi
2718:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxASCTRL, GxASMR needed scan request s
2719:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2720:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2721:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR> XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2722:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanSelectGating()<BR>
2723:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2724:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
2725:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2726:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2727:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2728:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2729:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2730:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2731:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2732:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the scan request source.<BR>\n
2733:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2734:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2735:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot. Thus this must be enabled if any conversion need to take place.
2736:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2737:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2738:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2739:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2740:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2741:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2742:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 129              	 .loc 1 2742 0
 130              	 .cfi_startproc
 131 0000 80B5     	 push {r7,lr}
 132              	.LCFI3:
 133              	 .cfi_def_cfa_offset 8
 134              	 .cfi_offset 7,-8
 135              	 .cfi_offset 14,-4
 136 0002 82B0     	 sub sp,sp,#8
 137              	.LCFI4:
 138              	 .cfi_def_cfa_offset 16
 139 0004 00AF     	 add r7,sp,#0
 140              	.LCFI5:
 141              	 .cfi_def_cfa_register 7
 142 0006 7860     	 str r0,[r7,#4]
2743:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2744:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN1_Msk;
 143              	 .loc 1 2744 0
 144 0008 7B68     	 ldr r3,[r7,#4]
 145 000a 8422     	 mov r2,#132
 146 000c 9B58     	 ldr r3,[r3,r2]
 147 000e 8022     	 mov r2,#128
 148 0010 9204     	 lsl r2,r2,#18
 149 0012 1A43     	 orr r2,r3
 150 0014 7B68     	 ldr r3,[r7,#4]
 151 0016 8421     	 mov r1,#132
 152 0018 5A50     	 str r2,[r3,r1]
2745:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
 153              	 .loc 1 2745 0
 154 001a BD46     	 mov sp,r7
 155 001c 02B0     	 add sp,sp,#8
 156              	 
 157 001e 80BD     	 pop {r7,pc}
 158              	 .cfi_endproc
 159              	.LFE87:
 161              	 .section .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot,"ax",%progbits
 162              	 .align 2
 163              	 .code 16
 164              	 .thumb_func
 166              	XMC_VADC_GROUP_ScanDisableArbitrationSlot:
 167              	.LFB88:
2746:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2747:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2748:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2749:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2750:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2751:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2752:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2753:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the scan request source.<BR>\n
2754:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2755:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2756:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot.A call to this API will lead to all conversions request by scan to be blocked.
2757:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2758:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2759:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2760:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR>
2761:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2762:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2763:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 168              	 .loc 1 2763 0
 169              	 .cfi_startproc
 170 0000 80B5     	 push {r7,lr}
 171              	.LCFI6:
 172              	 .cfi_def_cfa_offset 8
 173              	 .cfi_offset 7,-8
 174              	 .cfi_offset 14,-4
 175 0002 82B0     	 sub sp,sp,#8
 176              	.LCFI7:
 177              	 .cfi_def_cfa_offset 16
 178 0004 00AF     	 add r7,sp,#0
 179              	.LCFI8:
 180              	 .cfi_def_cfa_register 7
 181 0006 7860     	 str r0,[r7,#4]
2764:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
2765:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN1_Msk);
 182              	 .loc 1 2765 0
 183 0008 7B68     	 ldr r3,[r7,#4]
 184 000a 8422     	 mov r2,#132
 185 000c 9B58     	 ldr r3,[r3,r2]
 186 000e 044A     	 ldr r2,.L4
 187 0010 1A40     	 and r2,r3
 188 0012 7B68     	 ldr r3,[r7,#4]
 189 0014 8421     	 mov r1,#132
 190 0016 5A50     	 str r2,[r3,r1]
2766:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
 191              	 .loc 1 2766 0
 192 0018 BD46     	 mov sp,r7
 193 001a 02B0     	 add sp,sp,#8
 194              	 
 195 001c 80BD     	 pop {r7,pc}
 196              	.L5:
 197 001e C046     	 .align 2
 198              	.L4:
 199 0020 FFFFFFFD 	 .word -33554433
 200              	 .cfi_endproc
 201              	.LFE88:
 203              	 .section .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot,"ax",%progbits
 204              	 .align 2
 205              	 .code 16
 206              	 .thumb_func
 208              	XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:
 209              	.LFB104:
2767:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2768:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2769:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2770:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2771:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
2772:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2773:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2774:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the arbitration status of the scan request source.<BR>\n
2775:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2776:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2777:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot. A call to this API would return the status of the arbitration slot of scan.
2778:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
2779:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2780:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2781:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR
2782:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2783:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr)
2784:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
2785:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GROU
2786:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2787:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN1_Msk) >> VADC_G_ARBPR_ASEN1_Pos);
2788:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
2789:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2790:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2791:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2792:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_input  Choice of the input earmarked as a trigger line
2793:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2794:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2795:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2796:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2797:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for scan request source.<BR>\n
2798:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2799:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
2800:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2801:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
2802:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTSEL.
2803:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2804:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2805:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectGating()<BR> XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
2806:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2807:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
2808:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2809:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2810:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2811:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2812:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Trigger edge selection
2813:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2814:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2815:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2816:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2817:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the trigger edge for scan request source.<BR>\n
2818:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2819:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible trigger edges. This is
2820:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2821:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTMODE.
2822:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2823:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2824:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2825:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2826:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
2827:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2828:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2829:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2830:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param gating_input  Module input signal meant to be selected as gating input
2831:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2832:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2833:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2834:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2835:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for scan request source.<BR>\n
2836:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
2837:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the scan request source o
2838:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxASMR.ENGT has to be config
2839:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxAS
2840:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2841:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2842:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2843:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2844:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
2845:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2846:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2847:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2848:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the scan request source
2849:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2850:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2851:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2852:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2853:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of scan request source.<BR>\n
2854:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
2855:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
2856:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
2857:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2858:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2859:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectGating();
2860:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2861:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_G
2862:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
2863:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2864:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMODE
2865:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2866:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
2867:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= (uint32_t) (~((uint32_t)VADC_G_ASMR_ENGT_Msk));
2868:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Set the new gating mode */
2869:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)((uint32_t)mode_sel << VADC_G_ASMR_ENGT_Pos);
2870:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
2871:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2872:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2873:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2874:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2875:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2876:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2877:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2878:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
2879:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2880:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2881:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2882:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2883:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. Every request source event will cause a load event to occur. A call to this API would 
2884:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2885:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2886:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2887:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableContinuousMode()<BR>
2888:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2889:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2890:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
2891:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2892:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_SCAN_Msk;
2893:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
2894:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2895:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2896:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2897:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2898:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2899:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2900:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2901:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
2902:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2903:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2904:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2905:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2906:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. By invoking this feature the Autoscan mode of operations is disabled. A call to this A
2907:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2908:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2909:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2910:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableContinuousMode()<BR>
2911:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2912:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2913:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
2914:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2915:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_SCAN_Msk);
2916:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
2917:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2918:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2919:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2920:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2921:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2922:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2923:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2924:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
2925:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
2926:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the s
2927:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxASMR.LD
2928:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2929:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2930:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2931:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2932:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
2933:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
2934:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
2935:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_LDEV_Msk;
2936:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
2937:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2938:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2939:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2940:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2941:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2942:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2943:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2944:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing scan sequence conversion.<BR>\n
2945:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
2946:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
2947:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
2948:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxASMR, GxASCTRL, GxARBPR to achieve the sequen
2949:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2950:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2951:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2952:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2953:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr);
2954:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2955:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2956:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2957:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel meant to be added to scan sequence
2958:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
2959:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2960:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2961:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2962:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2963:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds a channel to the scan sequence.<BR>\n
2964:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the scan request source. This will be added to
2965:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
2966:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2967:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2968:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2969:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddMultipleChannels()<BR>
2970:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2971:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddChannelToSequence(XMC_VADC_GROUP_t *const group_ptr, con
2972:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
2973:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("VADC_GSCAN_AddSingleChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
2974:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddChannelToSequence:Wrong Channel Number", 
2975:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
2976:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASSEL |= (uint32_t)((uint32_t)1 << ch_num);
2977:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
2978:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
2979:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2980:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2981:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
2982:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
2983:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
2984:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the selected channels
2985:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
2986:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2987:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2988:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2989:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2990:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
2991:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
2992:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
2993:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2994:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2995:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2996:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddChannelToSequence()<BR>
2997:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2998:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddMultipleChannels(XMC_VADC_GROUP_t *const group_ptr, cons
2999:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3000:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddMultipleChannels:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
3001:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASSEL = ch_mask;
3002:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3003:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3004:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3005:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3006:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
3007:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3008:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3009:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
3010:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3011:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3012:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determine if the channel is pending for conversion.<BR>\n
3013:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
3014:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3015:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
3016:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the channel is found in the pending register (GxASPND).
3017:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3018:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3019:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanGetNumChannelsPending()<BR>
3020:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3021:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsChannelPending(XMC_VADC_GROUP_t *const group_ptr, const u
3022:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3023:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3024:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
3025:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_C
3026:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3027:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)((uint32_t)(group_ptr->ASPND >> ch_num) & 1U));
3028:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3029:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3030:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3031:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_ptr     Constant pointer to the VADC group
3032:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return  <BR>
3033:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
3034:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to 0x8]
3035:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3036:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3037:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the total number of pending channels.<BR>\n
3038:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
3039:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3040:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
3041:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * return the total number of channels pending (GxASPND).
3042:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3043:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3044:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanIsChannelPending()<BR>
3045:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3046:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr);
3047:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3048:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3049:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3050:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3051:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3052:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3053:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3054:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
3055:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for scan. This will trigger a interrupt if the
3056:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
3057:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
3058:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3059:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3060:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
3061:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3062:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
3063:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3064:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
3065:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFLAG    |= (uint32_t)VADC_G_SEFLAG_SEV1_Msk;
3066:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3067:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3068:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3069:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3070:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3071:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3072:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3073:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3074:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the scan conversion complete request source event.<BR>\n
3075:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3076:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
3077:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3078:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3079:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanTriggerReqSrcEvent()<BR>
3080:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3081:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanClearReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
3082:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3083:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanClearReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
3084:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFCLR |= (uint32_t)VADC_G_SEFCLR_SEV1_Msk;
3085:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3086:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3087:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3088:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3089:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3090:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3091:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
3092:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3093:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3094:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3095:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the scan request source event. Will return a true
3096:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for scan. A call to this API would access the register bit field GxSEF
3097:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3098:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3099:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3100:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3101:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanGetReqSrcEventStatus(XMC_VADC_GROUP_t *const group_ptr)
3102:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3103:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GSCAN_GetRSEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
3104:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)(group_ptr->SEFLAG & (uint32_t)VADC_G_SEFLAG_SEV1_Msk));
3105:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3106:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3107:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3108:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
3109:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr    Service Request Id
3110:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3111:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3112:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3113:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3114:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the scan request source event to the SR line of VADC.<BR>\n
3115:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a scan request source event. Hence to get a 
3116:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
3117:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * field GxSEVNP.SEV1NP .
3118:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3119:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3120:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3121:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3122:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
3123:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3124:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3125:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3126:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3127:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3128:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3129:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3130:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for scan request source.<BR>\n
3131:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API, the trigger signal will be activated for the scan request source. The trigger
3132:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the ASCTRL register. The Selection of a input will be done by
3133:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectTrigger(). A call to this API would configure the register bit field Gx
3134:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3135:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3136:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanDisableExternalTrigger()<BR>
3137:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3138:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
3139:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3140:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
3141:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_ENTR_Msk;
3143:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3144:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3145:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3146:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3147:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3148:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3149:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3150:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3151:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for scan request source.<BR>
3152:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the scan request source.
3153:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the scan request source. If any configuration were
3154:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in GxASCTRL, it will be not be effected by this API.
3155:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENTR.
3156:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3157:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3158:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
3159:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3160:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
3161:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3162:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3163:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3164:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENTR_Msk);
3165:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3166:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3167:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3168:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3169:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param channel_num   channel number to be removed from the scan sequence.
3170:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3171:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3172:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3173:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3174:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Removes a channel from the scan sequence.<BR>
3175:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the it is possible to remove a single channel from the conversion sequence.
3176:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * The remaining channels will continue however they are.
3177:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register GxASSEL.
3178:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3179:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3180:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3181:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3182:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
3183:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3184:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3185:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3186:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3187:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3188:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3189:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3190:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the scan request source event .<BR>
3191:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be activated for the scan request source.
3192:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3193:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENSI.
3194:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3195:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3196:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableEvent(),<BR> XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode()<BR>
3197:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3198:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableEvent(XMC_VADC_GROUP_t *const group_ptr)
3199:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3200:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
3201:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3202:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= ((uint32_t)VADC_G_ASMR_ENSI_Msk);
3203:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3204:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3205:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3206:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3207:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3208:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3209:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3210:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3211:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the scan request source event .<BR>
3212:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be deactivated for the scan request source.
3213:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3214:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENSI.
3215:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3216:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3217:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableEvent(),<BR> XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode()<BR>
3218:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3219:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableEvent(XMC_VADC_GROUP_t *const group_ptr)
3220:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3221:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
3222:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3223:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENSI_Msk);
3224:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3225:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
3226:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3227:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3228:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Pointer to the VADC module
3229:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3230:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3231:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3232:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the Background scan functional block.<BR>\n
3233:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * The BACKGROUND SCAN request source functional block converts channels of all VADC groups that ha
3234:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * been assigned as a priority channel (priority channels can be converted only by queue and scan).
3235:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source converts the unprioritized channels. Unprioritized channels however can also be u
3236:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * and scan. But a channel which is prioritized can not be used with background request source.
3237:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3238:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3239:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR> XMC_VADC_GROUP_BackgroundDisableArbitratio
3240:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundSelectGating()<BR>
3241:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3242:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
3243:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3244:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
3245:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3246:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group which may receive a
3247:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                  conversion request from background request source
3248:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3249:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3250:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3251:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3252:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3253:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the Background request source.<BR>\n
3254:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3255:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3256:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * comes to the Background slot. Thus this must be enabled if any conversion need to take place.
3257:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2.
3258:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3259:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3260:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
3261:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3262:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_p
3263:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 210              	 .loc 1 3263 0
 211              	 .cfi_startproc
 212 0000 80B5     	 push {r7,lr}
 213              	.LCFI9:
 214              	 .cfi_def_cfa_offset 8
 215              	 .cfi_offset 7,-8
 216              	 .cfi_offset 14,-4
 217 0002 82B0     	 sub sp,sp,#8
 218              	.LCFI10:
 219              	 .cfi_def_cfa_offset 16
 220 0004 00AF     	 add r7,sp,#0
 221              	.LCFI11:
 222              	 .cfi_def_cfa_register 7
 223 0006 7860     	 str r0,[r7,#4]
3264:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_
3265:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 224              	 .loc 1 3265 0
 225 0008 7B68     	 ldr r3,[r7,#4]
 226 000a 8422     	 mov r2,#132
 227 000c 9B58     	 ldr r3,[r3,r2]
 228 000e 8022     	 mov r2,#128
 229 0010 D204     	 lsl r2,r2,#19
 230 0012 1A43     	 orr r2,r3
 231 0014 7B68     	 ldr r3,[r7,#4]
 232 0016 8421     	 mov r1,#132
 233 0018 5A50     	 str r2,[r3,r1]
3266:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
 234              	 .loc 1 3266 0
 235 001a BD46     	 mov sp,r7
 236 001c 02B0     	 add sp,sp,#8
 237              	 
 238 001e 80BD     	 pop {r7,pc}
 239              	 .cfi_endproc
 240              	.LFE104:
 242              	 .section .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot,"ax",%progbits
 243              	 .align 2
 244              	 .code 16
 245              	 .thumb_func
 247              	XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:
 248              	.LFB105:
3267:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3268:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3269:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group which may receive a conversion request
3270:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     from background request source
3271:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3272:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3273:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3274:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3275:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the Background request source.<BR>\n
3276:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3277:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3278:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * comes to the Background slot.A call to this API will lead to all conversions request by Backgrou
3279:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2
3280:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3281:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3282:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
3283:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3284:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_
3285:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 249              	 .loc 1 3285 0
 250              	 .cfi_startproc
 251 0000 80B5     	 push {r7,lr}
 252              	.LCFI12:
 253              	 .cfi_def_cfa_offset 8
 254              	 .cfi_offset 7,-8
 255              	 .cfi_offset 14,-4
 256 0002 82B0     	 sub sp,sp,#8
 257              	.LCFI13:
 258              	 .cfi_def_cfa_offset 16
 259 0004 00AF     	 add r7,sp,#0
 260              	.LCFI14:
 261              	 .cfi_def_cfa_register 7
 262 0006 7860     	 str r0,[r7,#4]
3286:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK
3287:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 263              	 .loc 1 3287 0
 264 0008 7B68     	 ldr r3,[r7,#4]
 265 000a 8422     	 mov r2,#132
 266 000c 9B58     	 ldr r3,[r3,r2]
 267 000e 044A     	 ldr r2,.L8
 268 0010 1A40     	 and r2,r3
 269 0012 7B68     	 ldr r3,[r7,#4]
 270 0014 8421     	 mov r1,#132
 271 0016 5A50     	 str r2,[r3,r1]
3288:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
 272              	 .loc 1 3288 0
 273 0018 BD46     	 mov sp,r7
 274 001a 02B0     	 add sp,sp,#8
 275              	 
 276 001c 80BD     	 pop {r7,pc}
 277              	.L9:
 278 001e C046     	 .align 2
 279              	.L8:
 280 0020 FFFFFFFB 	 .word -67108865
 281              	 .cfi_endproc
 282              	.LFE105:
 284              	 .section .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot,"ax",%progbits
 285              	 .align 2
 286              	 .code 16
 287              	 .thumb_func
 289              	XMC_VADC_GROUP_QueueEnableArbitrationSlot:
 290              	.LFB122:
3289:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
3290:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3291:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3292:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3293:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3294:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_TRIGGER_INPUT_SELECT_t
3295:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3296:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3297:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3298:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3299:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for Background request source.<BR>\n
3300:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3301:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3302:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3303:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3304:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTSEL.
3305:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3306:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3307:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3308:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3309:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
3310:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3311:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3312:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3313:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3314:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Select the trigger edge
3315:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3316:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3317:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3318:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3319:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger edge for Background request source.<BR>\n
3320:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3321:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible values for the trigger 
3322:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3323:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTMODE.
3324:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3325:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3326:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3327:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3328:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
3329:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3330:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3331:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3332:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Module input signal meant to be selected as gating input
3333:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_GATE_INPUT_SELECT_t
3334:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3335:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3336:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3337:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3338:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for Background request source.<BR>\n
3339:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3340:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the Background request so
3341:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxBRSMR.ENGT has to be confi
3342:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field BRSC
3343:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3344:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3345:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR>
3346:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3347:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
3348:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3349:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3350:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3351:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the background scan request source
3352:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3353:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3354:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3355:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3356:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of background request source.<BR>\n
3357:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3358:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3359:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3360:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENGT.
3361:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3362:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3363:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectGating();
3364:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3365:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundSetGatingMode(XMC_VADC_GLOBAL_t *const global_ptr,
3366:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                             XMC_VADC_GATEMODE_t mode_sel)
3367:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3368:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong Module Pointer", (global_ptr == VADC))
3369:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_G
3370:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3371:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3372:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= (uint32_t)(~((uint32_t)VADC_BRSMR_ENGT_Msk));
3373:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Configure the new gating mode*/
3374:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)((uint32_t)mode_sel << VADC_BRSMR_ENGT_Pos);
3375:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3376:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3377:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3378:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3379:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3380:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3381:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3382:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3383:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3384:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
3385:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3386:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is needed. Using autoscan (continuous conversion)feature it is possible to start the con
3387:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * once and allow the sequence to repeat without any further triggers. Once all channels belonging 
3388:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source have been converted, a request source completion event is generated. Generation o
3389:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * can restart the Background configure sequence. Every request source event will cause a load even
3390:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would access the register bit field BRSMR.SCAN.
3391:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3392:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3393:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableContinuousMode()<BR>
3394:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3395:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableContinuousMode(XMC_VADC_GLOBAL_t *const global
3396:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3397:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableContinuousMode:Wrong Module Pointer", (global_ptr == 
3398:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_SCAN_Msk;
3399:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3400:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3401:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3402:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3403:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3404:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3405:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3406:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3407:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
3408:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3409:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
3410:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a Background req
3411:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
3412:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. By invoking this API the Autoscan mode of operations is disabled. A call to this API w
3413:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * register bit field BRSMR.SCAN.
3414:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3415:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3416:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableContinuousMode()<BR>
3417:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3418:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableContinuousMode(XMC_VADC_GLOBAL_t *const globa
3419:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3420:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableContinuousMode:Wrong Module Pointer", (global_ptr ==
3421:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_SCAN_Msk);
3422:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3423:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3424:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3425:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3426:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3427:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3428:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3429:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3430:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
3431:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3432:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the b
3433:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * has already been filled up with entries. A call to this API would set the register bit field BRS
3434:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3435:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3436:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3437:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3438:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_pt
3439:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3440:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VAD
3441:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
3442:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3443:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3444:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3445:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3446:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3447:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3448:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3449:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3450:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing background scan conversion(sequence).<BR>\n
3451:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
3452:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
3453:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
3454:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers BRSMR, BRSCTRL, GxARBPR(if group is available) 
3455:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * current scan sequence.
3456:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3457:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3458:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3459:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3460:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr);
3461:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3462:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3463:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3464:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3465:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Request source
3466:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The unprioritized channel meant to be added to the scan sequence
3467:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3468:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3469:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3470:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3471:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3472:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds a channel to the background scan sequence.<BR>\n
3473:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the background scan request source. This will 
3474:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
3475:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3476:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3477:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3478:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
3479:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3480:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global
3481:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const uint32_t grp_num,
3482:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const uint32_t ch_num)
3483:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3484:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == 
3485:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_V
3486:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
3487:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3488:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3489:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
3490:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3491:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3492:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3493:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3494:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3495:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
3496:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
3497:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
3498:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the previously selected channels
3499:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
3500:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3501:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3502:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3503:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3504:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
3505:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
3506:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
3507:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3508:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3509:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3510:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3511:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3512:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgndAddMultipleChannels(XMC_VADC_GLOBAL_t *const global_ptr
3513:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t grp_num,
3514:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t ch_mask)
3515:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3516:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Module Pointer", (global_ptr == VADC
3517:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Group Number",   ((grp_num) < XMC_VA
3518:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= ch_mask;
3519:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3520:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3521:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3522:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3523:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3524:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Request source
3525:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The unprioritized channel meant to be added to the scan sequence
3526:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3527:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3528:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3529:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3530:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3531:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Removes a channel to the background scan sequence.<BR>\n
3532:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the background scan request source. This will 
3533:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
3534:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3535:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3536:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3537:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3538:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3539:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundRemoveChannelFromSequence(XMC_VADC_GLOBAL_t *const g
3540:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                          const uint32_t grp_num,
3541:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                          const uint32_t ch_num)
3542:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3543:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == 
3544:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_V
3545:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
3546:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3547:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3548:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] &= (uint32_t)~((uint32_t)1 << ch_num);
3549:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3550:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3551:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3552:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3553:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3554:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
3555:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
3556:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
3557:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the previously selected channels
3558:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
3559:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3560:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3561:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3562:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3563:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Removes multiple channels to the scan sequence.<BR>\n
3564:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
3565:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
3566:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3567:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3568:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3569:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3570:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3571:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgndRemoveMultipleChannels(XMC_VADC_GLOBAL_t *const global_
3572:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                    const uint32_t grp_num,
3573:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                    const uint32_t ch_mask)
3574:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3575:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Module Pointer", (global_ptr == VADC
3576:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Group Number",   ((grp_num) < XMC_VA
3577:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] &= (uint32_t)~ch_mask;
3578:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3579:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3580:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3581:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3582:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3583:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
3584:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3585:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3586:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
3587:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3588:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3589:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determine if the channel is pending.<BR>\n
3590:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
3591:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3592:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
3593:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the channel is found in the pending register (BRSPND[\b grp_num]).
3594:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3595:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3596:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending()<BR>
3597:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3598:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundIsChannelPending(XMC_VADC_GLOBAL_t *const global_ptr
3599:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t grp_num,
3600:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t ch_num)
3601:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3602:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Module Pointer", (global_ptr == VADC
3603:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Group Number",   ((grp_num) < XMC_VA
3604:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Channel Number",
3605:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3606:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3607:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)(global_ptr->BRSPND[grp_num] & (uint32_t)((uint32_t)1 << ch_num)));
3608:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3609:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3610:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3611:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3612:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return  <BR>
3613:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
3614:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to (0x8*number of groups)]
3615:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3616:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3617:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the number of pending channels.<BR>\n
3618:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
3619:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3620:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
3621:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * return the total number of channels pending (BRSPND[\b grp_num]).
3622:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3623:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3624:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundIsChannelPending()<BR>
3625:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3626:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr);
3627:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3628:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3629:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3630:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3631:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3632:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3633:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3634:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
3635:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for background scan. This will trigger a interrupt if
3636:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
3637:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB.
3638:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3639:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3640:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
3641:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3642:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent(XMC_VADC_GLOBAL_t *const global_p
3643:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3644:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent:Wrong Module Pointer", (global_ptr == VA
3645:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk;
3646:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3647:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3648:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3649:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3650:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3651:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3652:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3653:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3654:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the background scan conversion complete request source event.<BR>\n
3655:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3656:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB
3657:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3658:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3659:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent()<BR>
3660:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3661:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent(XMC_VADC_GLOBAL_t *const global_ptr
3662:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3663:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent:Wrong Module Pointer", (global_ptr == VADC
3664:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLBCLR_Msk;
3665:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3666:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3667:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3668:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3669:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3670:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3671:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
3672:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3673:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3674:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3675:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the background scan request source event. Will return a true
3676:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for background scan. A call to this API would configure the register
3677:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GLOBEFLAG.SEVGLB.
3678:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3679:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3680:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3681:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3682:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus(XMC_VADC_GLOBAL_t *const global
3683:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3684:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus:Wrong Module Pointer", (global_ptr == 
3685:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   return((bool)(global_ptr->GLOBEFLAG & (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk));
3686:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3687:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3688:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3689:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3690:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3691:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3692:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3693:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3694:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for background scan request source.<BR>\n
3695:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be activated for the scan request source. The trigger signal 
3696:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the BRSCTRL register. The Selection of a input will be done by
3697:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectTrigger(). A call to this API would configure the register bit f
3698:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3699:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3700:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(
3701:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3702:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger(XMC_VADC_GLOBAL_t *const globa
3703:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3704:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger:Wrong Module Pointer", (global_ptr ==
3705:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3706:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_ENTR_Msk;
3707:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3708:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3709:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3710:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3711:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3712:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3713:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3714:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3715:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for background scan request source.<BR>
3716:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the background scan request source.
3717:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the background scan request source. If any configu
3718:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in BRSCTRL will be not be effected. A call to this API would configu
3719:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field BRSMR.ENTR.
3720:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3721:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><br>
3722:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<BR>
3723:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3724:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(XMC_VADC_GLOBAL_t *const glob
3725:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3726:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger:Wrong Module Pointer", (global_ptr =
3727:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3728:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENTR_Msk);
3729:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3730:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3731:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3732:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3733:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3734:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3735:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3736:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3737:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the background scan request source event .<BR>
3738:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be activated for the background scan request sou
3739:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3740:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENSI.
3741:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3742:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3743:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableEvent(),<BR> XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptN
3744:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3745:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableEvent(XMC_VADC_GLOBAL_t *const global_ptr)
3746:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3747:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableEvent:Wrong Module Pointer", (global_ptr == VADC))
3748:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3749:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= ((uint32_t)VADC_BRSMR_ENSI_Msk);
3750:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3751:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3752:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3753:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr     Pointer to the VADC module
3754:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3755:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3756:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3757:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3758:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the background scan request source event .<BR>
3759:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be deactivated for the background scan request s
3760:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3761:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENSI.
3762:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3763:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3764:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableEvent(),<BR> XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNo
3765:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3766:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableEvent(XMC_VADC_GLOBAL_t *const global_ptr)
3767:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3768:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableEvent:Wrong Module Pointer", (global_ptr == VADC))
3769:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3770:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENSI_Msk);
3771:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3772:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3773:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)
3774:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3775:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
3776:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3777:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3778:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3779:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3780:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3781:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes VADC QUEUE functional block.<BR>\n
3782:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * The QUEUE request source functional block converts channels stored in a queue. The first channel
3783:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * queue is converted first. A channel once converted, can be placed back into the queue if desired
3784:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_QueueEnable
3785:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
3786:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_QueueDisableArb
3787:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxQCTRL0, GxQMR0 to configure the queu
3788:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * source.
3789:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3790:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3791:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR> XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR
3792:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR> XMC_VADC_GROUP_QueueSelectGating()<BR>
3793:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3794:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
3795:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3796:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3797:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3798:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3799:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3800:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3801:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3802:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the queue request source.<BR>\n
3803:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3804:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3805:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot. Thus this must be enabled if any conversion need to take place.
3806:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3807:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3808:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3809:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
3810:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3811:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3812:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 291              	 .loc 1 3812 0
 292              	 .cfi_startproc
 293 0000 80B5     	 push {r7,lr}
 294              	.LCFI15:
 295              	 .cfi_def_cfa_offset 8
 296              	 .cfi_offset 7,-8
 297              	 .cfi_offset 14,-4
 298 0002 82B0     	 sub sp,sp,#8
 299              	.LCFI16:
 300              	 .cfi_def_cfa_offset 16
 301 0004 00AF     	 add r7,sp,#0
 302              	.LCFI17:
 303              	 .cfi_def_cfa_register 7
 304 0006 7860     	 str r0,[r7,#4]
3813:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3814:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
 305              	 .loc 1 3814 0
 306 0008 7B68     	 ldr r3,[r7,#4]
 307 000a 8422     	 mov r2,#132
 308 000c 9B58     	 ldr r3,[r3,r2]
 309 000e 8022     	 mov r2,#128
 310 0010 5204     	 lsl r2,r2,#17
 311 0012 1A43     	 orr r2,r3
 312 0014 7B68     	 ldr r3,[r7,#4]
 313 0016 8421     	 mov r1,#132
 314 0018 5A50     	 str r2,[r3,r1]
3815:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
 315              	 .loc 1 3815 0
 316 001a BD46     	 mov sp,r7
 317 001c 02B0     	 add sp,sp,#8
 318              	 
 319 001e 80BD     	 pop {r7,pc}
 320              	 .cfi_endproc
 321              	.LFE122:
 323              	 .section .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot,"ax",%progbits
 324              	 .align 2
 325              	 .code 16
 326              	 .thumb_func
 328              	XMC_VADC_GROUP_QueueDisableArbitrationSlot:
 329              	.LFB123:
3816:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3817:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3818:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3819:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3820:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3821:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3822:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3823:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the queue request source.<BR>\n
3824:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3825:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3826:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot.A call to this API will lead to all conversions request by queue to be blocked
3827:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3828:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3829:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3830:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
3831:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3832:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3833:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 330              	 .loc 1 3833 0
 331              	 .cfi_startproc
 332 0000 80B5     	 push {r7,lr}
 333              	.LCFI18:
 334              	 .cfi_def_cfa_offset 8
 335              	 .cfi_offset 7,-8
 336              	 .cfi_offset 14,-4
 337 0002 82B0     	 sub sp,sp,#8
 338              	.LCFI19:
 339              	 .cfi_def_cfa_offset 16
 340 0004 00AF     	 add r7,sp,#0
 341              	.LCFI20:
 342              	 .cfi_def_cfa_register 7
 343 0006 7860     	 str r0,[r7,#4]
3834:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
3835:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
 344              	 .loc 1 3835 0
 345 0008 7B68     	 ldr r3,[r7,#4]
 346 000a 8422     	 mov r2,#132
 347 000c 9B58     	 ldr r3,[r3,r2]
 348 000e 044A     	 ldr r2,.L12
 349 0010 1A40     	 and r2,r3
 350 0012 7B68     	 ldr r3,[r7,#4]
 351 0014 8421     	 mov r1,#132
 352 0016 5A50     	 str r2,[r3,r1]
3836:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
 353              	 .loc 1 3836 0
 354 0018 BD46     	 mov sp,r7
 355 001a 02B0     	 add sp,sp,#8
 356              	 
 357 001c 80BD     	 pop {r7,pc}
 358              	.L13:
 359 001e C046     	 .align 2
 360              	.L12:
 361 0020 FFFFFFFE 	 .word -16777217
 362              	 .cfi_endproc
 363              	.LFE123:
 365              	 .section .text.XMC_VADC_GROUP_QueueFlushEntries,"ax",%progbits
 366              	 .align 2
 367              	 .code 16
 368              	 .thumb_func
 370              	XMC_VADC_GROUP_QueueFlushEntries:
 371              	.LFB127:
3837:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3838:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3839:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3840:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3841:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3842:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
3843:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3844:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3845:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the arbitration status of the queue request source.<BR>\n
3846:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the queue request source must have its conversion request considered by the arbiter, it must 
3847:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3848:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot. A call to this API would return the status of the arbitration slot of queue.
3849:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
3850:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3851:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3852:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<
3853:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3854:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr
3855:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3856:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GRO
3857:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3858:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN0_Msk) >> VADC_G_ARBPR_ASEN0_Pos);
3859:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3860:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3861:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3862:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3863:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3864:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3865:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3866:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3867:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3868:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for queue request source.<BR>\n
3869:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3870:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3871:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3872:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3873:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTSEL.
3874:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3875:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3876:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3877:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3878:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, 
3879:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num);
3880:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3881:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3882:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3883:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Choice of the trigger edge
3884:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3885:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3886:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3887:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3888:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal edge for queue request source.<BR>\n
3889:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3890:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 trigger edges. This is
3891:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3892:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3893:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTMODE.
3894:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3895:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3896:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3897:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3898:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
3899:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3900:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3901:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3902:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as the gating line
3903:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3904:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3905:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3906:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3907:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for queue request source.<BR>\n
3908:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3909:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the queue request source 
3910:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxQMR0.ENGT has to be config
3911:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxQC
3912:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3913:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3914:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR>
3915:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3916:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
3917:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3918:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3919:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3920:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the queue request source
3921:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3922:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3923:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3924:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3925:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of queue request source.<BR>\n
3926:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3927:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3928:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3929:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQMR0.ENGT.
3930:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3931:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3932:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_QueueSelectGating();
3933:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3934:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_
3935:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3936:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
3937:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMOD
3938:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3939:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3940:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 &= (uint32_t)(~((uint32_t) VADC_G_QMR0_ENGT_Msk));
3941:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Set the new gating mode */
3942:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)mode_sel << VADC_G_QMR0_ENGT_Pos);
3943:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3944:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3945:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3946:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3947:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3948:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3949:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3950:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3951:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3952:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>
3953:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3954:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the queue unit to generate a conversion request to the analog converter. It is assumed that the 
3955:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxQMR0.TR
3956:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3957:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Note:</b><br>
3958:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * The conversion of queue entry will start immediately after the entry has been loaded into GxQINR
3959:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This happens only if the queue entry has been loaded into the register without the need for the 
3960:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * If a H/W Trigger is selected while loading the entry, the conversion will occur in one of the 2 
3961:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * <ul>
3962:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * <li> The H/W generates a trigger needed for the queue request source.
3963:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * <li> The Conversion is triggered manually by calling this API.
3964:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * </ul>
3965:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3966:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3967:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3968:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3969:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
3970:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
3971:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
3972:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_TREV_Pos);
3973:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
3974:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3975:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3976:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3977:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3978:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t returns the total number of channels.
3979:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *             <BR>Range: [0x0 to 0x8]
3980:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3981:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3982:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the number of channels present in the queue.<BR>\n
3983:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will return the queue buffer size. This buffer will be consisting of valid queue entrie
3984:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * will be converted when a trigger event occurs. All the entries that are loaded onto the GxQINR0 
3985:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * be added to the queue buffer. Hence if an application needs to get the number of valid queue ent
3986:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * this API would provide the interface. A call to this API would access the registers GxQBUR0, GxQ
3987:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * to determine the queue length.
3988:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3989:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3990:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3991:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3992:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr);
3993:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
3994:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3995:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3996:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3997:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3998:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3999:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4000:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing conversion by flushing the queue.<BR>\n
4001:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will flush the queue buffer. Ongoing conversion of the Queue request source will
4002:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
4003:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxQCTRL0, GxQMR0, GxARBPR in order to abort
4004:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * the queue sequence.
4005:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4006:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4007:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueFlushEntries() <BR>
4008:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4009:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr);
4010:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
4011:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4012:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4013:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4014:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4015:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4016:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4017:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * Flushing the queue Entry.<BR>\n
4018:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will flush one entry in the queue buffer. Ongoing conversion of the Queue request sourc
4019:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
4020:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers  GxQMR0. This is a Blocking API, i.e will only 
4021:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * all the entries are removed from the queue.
4022:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4023:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4024:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueAbortSequence(0<BR>
4025:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4026:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueFlushEntries(XMC_VADC_GROUP_t *const group_ptr)
4027:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** {
 372              	 .loc 1 4027 0
 373              	 .cfi_startproc
 374 0000 80B5     	 push {r7,lr}
 375              	.LCFI21:
 376              	 .cfi_def_cfa_offset 8
 377              	 .cfi_offset 7,-8
 378              	 .cfi_offset 14,-4
 379 0002 82B0     	 sub sp,sp,#8
 380              	.LCFI22:
 381              	 .cfi_def_cfa_offset 16
 382 0004 00AF     	 add r7,sp,#0
 383              	.LCFI23:
 384              	 .cfi_def_cfa_register 7
 385 0006 7860     	 str r0,[r7,#4]
4028:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Initiate flushing of the queue */
4029:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_FLUSH_Msk;
 386              	 .loc 1 4029 0
 387 0008 7A68     	 ldr r2,[r7,#4]
 388 000a 8223     	 mov r3,#130
 389 000c 5B00     	 lsl r3,r3,#1
 390 000e D358     	 ldr r3,[r2,r3]
 391 0010 8022     	 mov r2,#128
 392 0012 D200     	 lsl r2,r2,#3
 393 0014 1A43     	 orr r2,r3
 394 0016 111C     	 mov r1,r2
 395 0018 7A68     	 ldr r2,[r7,#4]
 396 001a 8223     	 mov r3,#130
 397 001c 5B00     	 lsl r3,r3,#1
 398 001e D150     	 str r1,[r2,r3]
4030:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** 
4031:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   while( !((group_ptr->QSR0)& (uint32_t)VADC_G_QSR0_EMPTY_Msk))
 399              	 .loc 1 4031 0
 400 0020 C046     	 mov r8,r8
 401              	.L15:
 402              	 .loc 1 4031 0 is_stmt 0 discriminator 1
 403 0022 7A68     	 ldr r2,[r7,#4]
 404 0024 8423     	 mov r3,#132
 405 0026 5B00     	 lsl r3,r3,#1
 406 0028 D358     	 ldr r3,[r2,r3]
 407 002a 2022     	 mov r2,#32
 408 002c 1340     	 and r3,r2
 409 002e F8D0     	 beq .L15
4032:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   {
4033:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****     /* Wait until the queue is indeed flushed */
4034:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h ****   }
4035:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_vadc.h **** }
 410              	 .loc 1 4035 0 is_stmt 1
 411 0030 BD46     	 mov sp,r7
 412 0032 02B0     	 add sp,sp,#8
 413              	 
 414 0034 80BD     	 pop {r7,pc}
 415              	 .cfi_endproc
 416              	.LFE127:
 418 0036 C046     	 .section .rodata.g_xmc_vadc_group_array,"a",%progbits
 419              	 .align 2
 422              	g_xmc_vadc_group_array:
 423 0000 00040348 	 .word 1208157184
 424 0004 00080348 	 .word 1208158208
 425              	 .section .text.XMC_VADC_GLOBAL_EnableModule,"ax",%progbits
 426              	 .align 2
 427              	 .global XMC_VADC_GLOBAL_EnableModule
 428              	 .code 16
 429              	 .thumb_func
 431              	XMC_VADC_GLOBAL_EnableModule:
 432              	.LFB149:
 433              	 .file 2 "../Libraries/XMCLib/src/xmc_vadc.c"
   1:../Libraries/XMCLib/src/xmc_vadc.c **** /**
   2:../Libraries/XMCLib/src/xmc_vadc.c ****  * @file xmc_vadc.c
   3:../Libraries/XMCLib/src/xmc_vadc.c ****  * @date 2016-06-17
   4:../Libraries/XMCLib/src/xmc_vadc.c ****  *
   5:../Libraries/XMCLib/src/xmc_vadc.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_vadc.c ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_vadc.c ****  *
   9:../Libraries/XMCLib/src/xmc_vadc.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_vadc.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_vadc.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_vadc.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_vadc.c ****  * 
  18:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_vadc.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_vadc.c ****  * 
  21:../Libraries/XMCLib/src/xmc_vadc.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_vadc.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_vadc.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_vadc.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_vadc.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_vadc.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_vadc.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_vadc.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_vadc.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_vadc.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_vadc.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  36:../Libraries/XMCLib/src/xmc_vadc.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_vadc.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  39:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-02-15:
  40:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_vadc.c ****  *      
  42:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-02-20:
  43:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Revised for XMC1201 device.<br>
  44:../Libraries/XMCLib/src/xmc_vadc.c ****  *   
  45:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-04-27:
  46:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added new APIs for SHS.<br>
  47:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added New APIs for trigger edge selection.<BR>
  48:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  49:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  50:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  51:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-06-20:
  52:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  54:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-06-25:
  55:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - BFL configuration in channel initialization fixed.
  56:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  57:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-07-28:
  58:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  59:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  60:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  61:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New APIs Created.
  62:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  63:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  64:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetAlias
  65:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetInputClass
  66:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  67:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  68:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  69:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  70:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  71:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-12-01:
  72:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  73:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  74:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  75:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2016-06-17:
  76:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New macros added XMC_VADC_SHS_FULL_SET_REG, XMC_VADC_RESULT_PRIORITY_AVAILABLE 
  77:../Libraries/XMCLib/src/xmc_vadc.c ****  *       and XMC_VADC_SYNCTR_START_LOCATION
  78:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New Enum added XMC_VADC_SHS_GAIN_LEVEL_t and XMC_VADC_SYNCTR_EVAL_t
  79:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed the EVAL configuration in API XMC_VADC_GROUP_CheckSlaveReadiness and XMC_VADC_GROUP_
  80:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New APIs added are:
  81:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetSyncSlaveReadySignal
  82:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetAssertedEvents
  83:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetAssertedResultEvents
  84:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetResultRegPriority
  85:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetSyncReadySignal
  86:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetSyncReadySignal
  87:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetResultRegPriority
  88:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  89:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2017-01-11:
  90:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fix assertion in XMC_VADC_GROUP_CheckSlaveReadiness() and XMC_VADC_GROUP_IgnoreSlaveReadin
  91:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  92:../Libraries/XMCLib/src/xmc_vadc.c ****  * @endcond 
  93:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  94:../Libraries/XMCLib/src/xmc_vadc.c ****  */
  95:../Libraries/XMCLib/src/xmc_vadc.c **** 
  96:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
  97:../Libraries/XMCLib/src/xmc_vadc.c ****  * HEADER FILES
  98:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  99:../Libraries/XMCLib/src/xmc_vadc.c **** #include <xmc_vadc.h>
 100:../Libraries/XMCLib/src/xmc_vadc.c **** 
 101:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 102:../Libraries/XMCLib/src/xmc_vadc.c ****  * MACROS
 103:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 104:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_MAX_ICLASS_SET          (2U)  /**< Defines the maximum number of conversion parame
 105:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_NUM_EMUX_INTERFACES     (2U)  /**< Defines the maximum number of external multiple
 106:../Libraries/XMCLib/src/xmc_vadc.c **** 
 107:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_RESULT_LEFT_ALIGN_10BIT (2U)  /**< Defines the 10 bit converted result register le
 108:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     is used in the XMC_VADC_GLOBAL_SetCompareValue(
 109:../Libraries/XMCLib/src/xmc_vadc.c **** 
 110:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_SYNCTR_START_LOCATION (3U)  /**< Defines the location in SYNCTR needed for calcula
 111:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 112:../Libraries/XMCLib/src/xmc_vadc.c ****  * ENUMS
 113:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 114:../Libraries/XMCLib/src/xmc_vadc.c **** 
 115:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 116:../Libraries/XMCLib/src/xmc_vadc.c ****  * DATA STRUCTURES
 117:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 118:../Libraries/XMCLib/src/xmc_vadc.c **** 
 119:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 120:../Libraries/XMCLib/src/xmc_vadc.c ****  * GLOBAL DATA
 121:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 122:../Libraries/XMCLib/src/xmc_vadc.c **** 
 123:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 124:../Libraries/XMCLib/src/xmc_vadc.c **** 
 125:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U) 
 126:../Libraries/XMCLib/src/xmc_vadc.c **** static VADC_G_TypeDef *const g_xmc_vadc_group_array[XMC_VADC_MAXIMUM_NUM_GROUPS] = {(VADC_G_TypeDef
 127:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 128:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 129:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 130:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 131:../Libraries/XMCLib/src/xmc_vadc.c **** static VADC_G_TypeDef *const g_xmc_vadc_group_array[XMC_VADC_MAXIMUM_NUM_GROUPS] = {(VADC_G_TypeDef
 132:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 133:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 134:../Libraries/XMCLib/src/xmc_vadc.c **** 
 135:../Libraries/XMCLib/src/xmc_vadc.c **** #endif 
 136:../Libraries/XMCLib/src/xmc_vadc.c **** 
 137:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 138:../Libraries/XMCLib/src/xmc_vadc.c ****  * LOCAL ROUTINES
 139:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 140:../Libraries/XMCLib/src/xmc_vadc.c **** 
 141:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 142:../Libraries/XMCLib/src/xmc_vadc.c ****  * API IMPLEMENTATION
 143:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 144:../Libraries/XMCLib/src/xmc_vadc.c **** 
 145:../Libraries/XMCLib/src/xmc_vadc.c **** /*API to enable the VADC Module*/
 146:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_EnableModule(void)
 147:../Libraries/XMCLib/src/xmc_vadc.c **** {
 434              	 .loc 2 147 0
 435              	 .cfi_startproc
 436 0000 80B5     	 push {r7,lr}
 437              	.LCFI24:
 438              	 .cfi_def_cfa_offset 8
 439              	 .cfi_offset 7,-8
 440              	 .cfi_offset 14,-4
 441 0002 00AF     	 add r7,sp,#0
 442              	.LCFI25:
 443              	 .cfi_def_cfa_register 7
 148:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
 149:../Libraries/XMCLib/src/xmc_vadc.c ****    * Enable Out of Range Comparator for ADC channels pins P2.2to P2.9. This hack is applicable only
 150:../Libraries/XMCLib/src/xmc_vadc.c ****    * and in particular the G11 step.
 151:../Libraries/XMCLib/src/xmc_vadc.c ****    *
 152:../Libraries/XMCLib/src/xmc_vadc.c ****    * Please refer to the XMC1000 Errata sheet V1.4 released 2014-06 Errata ID : ADC_AI.003 Additona
 153:../Libraries/XMCLib/src/xmc_vadc.c ****    * function
 154:../Libraries/XMCLib/src/xmc_vadc.c ****    */
 155:../Libraries/XMCLib/src/xmc_vadc.c **** 
 156:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined (COMPARATOR)
 157:../Libraries/XMCLib/src/xmc_vadc.c ****   COMPARATOR->ORCCTRL = (uint32_t)0xFF;
 444              	 .loc 2 157 0
 445 0004 034B     	 ldr r3,.L17
 446 0006 FF22     	 mov r2,#255
 447 0008 1A60     	 str r2,[r3]
 158:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 159:../Libraries/XMCLib/src/xmc_vadc.c **** 
 160:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 161:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 448              	 .loc 2 161 0
 449 000a 0120     	 mov r0,#1
 450 000c FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 162:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 163:../Libraries/XMCLib/src/xmc_vadc.c **** 
 164:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 165:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Reset the Hardware */
 166:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC )
 167:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 168:../Libraries/XMCLib/src/xmc_vadc.c **** }
 451              	 .loc 2 168 0
 452 0010 BD46     	 mov sp,r7
 453              	 
 454 0012 80BD     	 pop {r7,pc}
 455              	.L18:
 456              	 .align 2
 457              	.L17:
 458 0014 00050140 	 .word 1073808640
 459              	 .cfi_endproc
 460              	.LFE149:
 462              	 .section .text.XMC_VADC_GLOBAL_DisableModule,"ax",%progbits
 463              	 .align 2
 464              	 .global XMC_VADC_GLOBAL_DisableModule
 465              	 .code 16
 466              	 .thumb_func
 468              	XMC_VADC_GLOBAL_DisableModule:
 469              	.LFB150:
 169:../Libraries/XMCLib/src/xmc_vadc.c **** 
 170:../Libraries/XMCLib/src/xmc_vadc.c **** /*API to Disable the VADC Module*/
 171:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_DisableModule(void)
 172:../Libraries/XMCLib/src/xmc_vadc.c **** {
 470              	 .loc 2 172 0
 471              	 .cfi_startproc
 472 0000 80B5     	 push {r7,lr}
 473              	.LCFI26:
 474              	 .cfi_def_cfa_offset 8
 475              	 .cfi_offset 7,-8
 476              	 .cfi_offset 14,-4
 477 0002 00AF     	 add r7,sp,#0
 478              	.LCFI27:
 479              	 .cfi_def_cfa_register 7
 173:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 174:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Reset the Hardware */
 175:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_RESET_AssertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 176:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 177:../Libraries/XMCLib/src/xmc_vadc.c **** 
 178:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 179:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 480              	 .loc 2 179 0
 481 0004 0120     	 mov r0,#1
 482 0006 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 180:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 181:../Libraries/XMCLib/src/xmc_vadc.c **** 
 182:../Libraries/XMCLib/src/xmc_vadc.c **** }
 483              	 .loc 2 182 0
 484 000a BD46     	 mov sp,r7
 485              	 
 486 000c 80BD     	 pop {r7,pc}
 487              	 .cfi_endproc
 488              	.LFE150:
 490 000e C046     	 .section .text.XMC_VADC_GLOBAL_Init,"ax",%progbits
 491              	 .align 2
 492              	 .global XMC_VADC_GLOBAL_Init
 493              	 .code 16
 494              	 .thumb_func
 496              	XMC_VADC_GLOBAL_Init:
 497              	.LFB151:
 183:../Libraries/XMCLib/src/xmc_vadc.c **** 
 184:../Libraries/XMCLib/src/xmc_vadc.c **** 
 185:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize global resources */
 186:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
 187:../Libraries/XMCLib/src/xmc_vadc.c **** {
 498              	 .loc 2 187 0
 499              	 .cfi_startproc
 500 0000 80B5     	 push {r7,lr}
 501              	.LCFI28:
 502              	 .cfi_def_cfa_offset 8
 503              	 .cfi_offset 7,-8
 504              	 .cfi_offset 14,-4
 505 0002 82B0     	 sub sp,sp,#8
 506              	.LCFI29:
 507              	 .cfi_def_cfa_offset 16
 508 0004 00AF     	 add r7,sp,#0
 509              	.LCFI30:
 510              	 .cfi_def_cfa_register 7
 511 0006 7860     	 str r0,[r7,#4]
 512 0008 3960     	 str r1,[r7]
 188:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 0U)
 189:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
 190:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 191:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))
 192:../Libraries/XMCLib/src/xmc_vadc.c **** 
 193:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the VADC module*/
 194:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GLOBAL_EnableModule();
 513              	 .loc 2 194 0
 514 000a FFF7FEFF 	 bl XMC_VADC_GLOBAL_EnableModule
 195:../Libraries/XMCLib/src/xmc_vadc.c **** 
 196:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->CLC = (uint32_t)(config->clc);
 515              	 .loc 2 196 0
 516 000e 3B68     	 ldr r3,[r7]
 517 0010 5A69     	 ldr r2,[r3,#20]
 518 0012 7B68     	 ldr r3,[r7,#4]
 519 0014 1A60     	 str r2,[r3]
 197:../Libraries/XMCLib/src/xmc_vadc.c **** 
 198:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Clock configuration */
 199:../Libraries/XMCLib/src/xmc_vadc.c **** 
 200:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 201:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Ms
 520              	 .loc 2 201 0
 521 0016 3B68     	 ldr r3,[r7]
 522 0018 5B68     	 ldr r3,[r3,#4]
 523 001a 8022     	 mov r2,#128
 524 001c 1202     	 lsl r2,r2,#8
 525 001e 1A43     	 orr r2,r3
 526 0020 7B68     	 ldr r3,[r7,#4]
 527 0022 8021     	 mov r1,#128
 528 0024 5A50     	 str r2,[r3,r1]
 202:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 203:../Libraries/XMCLib/src/xmc_vadc.c **** 
 204:../Libraries/XMCLib/src/xmc_vadc.c ****   /* ICLASS-0 configuration */
 205:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 529              	 .loc 2 205 0
 530 0026 3B68     	 ldr r3,[r7]
 531 0028 9A68     	 ldr r2,[r3,#8]
 532 002a 7B68     	 ldr r3,[r7,#4]
 533 002c A021     	 mov r1,#160
 534 002e 5A50     	 str r2,[r3,r1]
 206:../Libraries/XMCLib/src/xmc_vadc.c **** 
 207:../Libraries/XMCLib/src/xmc_vadc.c ****   /* ICLASS-1 configuration */
 208:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 535              	 .loc 2 208 0
 536 0030 3B68     	 ldr r3,[r7]
 537 0032 DA68     	 ldr r2,[r3,#12]
 538 0034 7B68     	 ldr r3,[r7,#4]
 539 0036 A421     	 mov r1,#164
 540 0038 5A50     	 str r2,[r3,r1]
 209:../Libraries/XMCLib/src/xmc_vadc.c **** 
 210:../Libraries/XMCLib/src/xmc_vadc.c **** 
 211:../Libraries/XMCLib/src/xmc_vadc.c ****   /*Result generation related configuration */
 212:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 541              	 .loc 2 212 0
 542 003a 3B68     	 ldr r3,[r7]
 543 003c 1969     	 ldr r1,[r3,#16]
 544 003e 7A68     	 ldr r2,[r7,#4]
 545 0040 A023     	 mov r3,#160
 546 0042 9B00     	 lsl r3,r3,#2
 547 0044 D150     	 str r1,[r2,r3]
 213:../Libraries/XMCLib/src/xmc_vadc.c **** 
 214:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
 215:../Libraries/XMCLib/src/xmc_vadc.c **** 
 216:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Boundaries */
 217:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 548              	 .loc 2 217 0
 549 0046 3B68     	 ldr r3,[r7]
 550 0048 1A68     	 ldr r2,[r3]
 551 004a 7B68     	 ldr r3,[r7,#4]
 552 004c B821     	 mov r1,#184
 553 004e 5A50     	 str r2,[r3,r1]
 218:../Libraries/XMCLib/src/xmc_vadc.c **** 
 219:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 220:../Libraries/XMCLib/src/xmc_vadc.c **** 
 221:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Configure the SHS register that are needed for XMC11xx devices*/
 222:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 0U)
 223:../Libraries/XMCLib/src/xmc_vadc.c **** 
 224:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enabling the Analog part of the converter*/
 225:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = SHS0->SHSCFG  | SHS_SHSCFG_SCWC_Msk;
 226:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~(SHS_SHSCFG_ANOFF_Msk);
 227:../Libraries/XMCLib/src/xmc_vadc.c ****   SHS0->SHSCFG = reg;
 228:../Libraries/XMCLib/src/xmc_vadc.c **** 
 229:../Libraries/XMCLib/src/xmc_vadc.c ****   /* From the Errata sheet of XMC1100 V1.7*/
 230:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
 231:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 232:../Libraries/XMCLib/src/xmc_vadc.c **** 
 233:../Libraries/XMCLib/src/xmc_vadc.c **** }
 554              	 .loc 2 233 0
 555 0050 BD46     	 mov sp,r7
 556 0052 02B0     	 add sp,sp,#8
 557              	 
 558 0054 80BD     	 pop {r7,pc}
 559              	 .cfi_endproc
 560              	.LFE151:
 562 0056 C046     	 .section .text.XMC_VADC_GLOBAL_InputClassInit,"ax",%progbits
 563              	 .align 2
 564              	 .global XMC_VADC_GLOBAL_InputClassInit
 565              	 .code 16
 566              	 .thumb_func
 568              	XMC_VADC_GLOBAL_InputClassInit:
 569              	.LFB152:
 234:../Libraries/XMCLib/src/xmc_vadc.c **** 
 235:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to Set the Global IClass registers*/
 236:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
 237:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
 238:../Libraries/XMCLib/src/xmc_vadc.c **** {
 570              	 .loc 2 238 0
 571              	 .cfi_startproc
 572 0000 80B5     	 push {r7,lr}
 573              	.LCFI31:
 574              	 .cfi_def_cfa_offset 8
 575              	 .cfi_offset 7,-8
 576              	 .cfi_offset 14,-4
 577 0002 84B0     	 sub sp,sp,#16
 578              	.LCFI32:
 579              	 .cfi_def_cfa_offset 24
 580 0004 00AF     	 add r7,sp,#0
 581              	.LCFI33:
 582              	 .cfi_def_cfa_register 7
 583 0006 F860     	 str r0,[r7,#12]
 584 0008 B960     	 str r1,[r7,#8]
 585 000a 3B60     	 str r3,[r7]
 586 000c FB1D     	 add r3,r7,#7
 587 000e 1A70     	 strb r2,[r3]
 239:../Libraries/XMCLib/src/xmc_vadc.c **** 
 240:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
 241:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP
 242:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLA
 243:../Libraries/XMCLib/src/xmc_vadc.c **** 
 244:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 245:../Libraries/XMCLib/src/xmc_vadc.c ****   if (conv_type == XMC_VADC_GROUP_CONV_STD )
 588              	 .loc 2 245 0
 589 0010 FB1D     	 add r3,r7,#7
 590 0012 1B78     	 ldrb r3,[r3]
 591 0014 002B     	 cmp r3,#0
 592 0016 09D1     	 bne .L22
 246:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 247:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 248:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->GLOBICLASS[set_num] = config.globiclass &
 593              	 .loc 2 248 0
 594 0018 BB68     	 ldr r3,[r7,#8]
 595 001a 0A4A     	 ldr r2,.L24
 596 001c 1340     	 and r3,r2
 597 001e 191C     	 mov r1,r3
 598 0020 FB68     	 ldr r3,[r7,#12]
 599 0022 3A68     	 ldr r2,[r7]
 600 0024 2832     	 add r2,r2,#40
 601 0026 9200     	 lsl r2,r2,#2
 602 0028 D150     	 str r1,[r2,r3]
 603 002a 08E0     	 b .L21
 604              	.L22:
 249:../Libraries/XMCLib/src/xmc_vadc.c ****                                       (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk
 250:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 251:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 252:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 253:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 254:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC
 605              	 .loc 2 254 0
 606 002c BB68     	 ldr r3,[r7,#8]
 607 002e 064A     	 ldr r2,.L24+4
 608 0030 1340     	 and r3,r2
 609 0032 191C     	 mov r1,r3
 610 0034 FB68     	 ldr r3,[r7,#12]
 611 0036 3A68     	 ldr r2,[r7]
 612 0038 2832     	 add r2,r2,#40
 613 003a 9200     	 lsl r2,r2,#2
 614 003c D150     	 str r1,[r2,r3]
 615              	.L21:
 255:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 256:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 257:../Libraries/XMCLib/src/xmc_vadc.c **** }
 616              	 .loc 2 257 0
 617 003e BD46     	 mov sp,r7
 618 0040 04B0     	 add sp,sp,#16
 619              	 
 620 0042 80BD     	 pop {r7,pc}
 621              	.L25:
 622              	 .align 2
 623              	.L24:
 624 0044 1F070000 	 .word 1823
 625 0048 00001F07 	 .word 119472128
 626              	 .cfi_endproc
 627              	.LFE152:
 629              	 .section .text.XMC_VADC_GLOBAL_StartupCalibration,"ax",%progbits
 630              	 .align 2
 631              	 .global XMC_VADC_GLOBAL_StartupCalibration
 632              	 .code 16
 633              	 .thumb_func
 635              	XMC_VADC_GLOBAL_StartupCalibration:
 636              	.LFB153:
 258:../Libraries/XMCLib/src/xmc_vadc.c **** 
 259:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable startup calibration feature */
 260:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
 261:../Libraries/XMCLib/src/xmc_vadc.c **** {
 637              	 .loc 2 261 0
 638              	 .cfi_startproc
 639 0000 80B5     	 push {r7,lr}
 640              	.LCFI34:
 641              	 .cfi_def_cfa_offset 8
 642              	 .cfi_offset 7,-8
 643              	 .cfi_offset 14,-4
 644 0002 84B0     	 sub sp,sp,#16
 645              	.LCFI35:
 646              	 .cfi_def_cfa_offset 24
 647 0004 00AF     	 add r7,sp,#0
 648              	.LCFI36:
 649              	 .cfi_def_cfa_register 7
 650 0006 7860     	 str r0,[r7,#4]
 262:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 263:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t i;
 264:../Libraries/XMCLib/src/xmc_vadc.c ****   VADC_G_TypeDef *group_ptr;
 265:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 266:../Libraries/XMCLib/src/xmc_vadc.c ****   
 267:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))
 268:../Libraries/XMCLib/src/xmc_vadc.c **** 
 269:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 651              	 .loc 2 269 0
 652 0008 7B68     	 ldr r3,[r7,#4]
 653 000a 8022     	 mov r2,#128
 654 000c 9B58     	 ldr r3,[r3,r2]
 655 000e 8022     	 mov r2,#128
 656 0010 1206     	 lsl r2,r2,#24
 657 0012 1A43     	 orr r2,r3
 658 0014 7B68     	 ldr r3,[r7,#4]
 659 0016 8021     	 mov r1,#128
 660 0018 5A50     	 str r2,[r3,r1]
 270:../Libraries/XMCLib/src/xmc_vadc.c **** 
 271:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 272:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop until all active groups finish calibration */
 273:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 661              	 .loc 2 273 0
 662 001a 0F23     	 mov r3,#15
 663 001c FB18     	 add r3,r7,r3
 664 001e 0022     	 mov r2,#0
 665 0020 1A70     	 strb r2,[r3]
 666 0022 1CE0     	 b .L27
 667              	.L30:
 274:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 275:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr = g_xmc_vadc_group_array[i];
 668              	 .loc 2 275 0
 669 0024 0F23     	 mov r3,#15
 670 0026 FB18     	 add r3,r7,r3
 671 0028 1A78     	 ldrb r2,[r3]
 672 002a 114B     	 ldr r3,.L31
 673 002c 9200     	 lsl r2,r2,#2
 674 002e D358     	 ldr r3,[r2,r3]
 675 0030 BB60     	 str r3,[r7,#8]
 276:../Libraries/XMCLib/src/xmc_vadc.c ****     if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 676              	 .loc 2 276 0
 677 0032 BB68     	 ldr r3,[r7,#8]
 678 0034 8022     	 mov r2,#128
 679 0036 9A58     	 ldr r2,[r3,r2]
 680 0038 C023     	 mov r3,#192
 681 003a 9B02     	 lsl r3,r3,#10
 682 003c 1340     	 and r3,r2
 683 003e 07D0     	 beq .L28
 277:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 278:../Libraries/XMCLib/src/xmc_vadc.c ****       /* This group is active. Loop until it finishes calibration */
 279:../Libraries/XMCLib/src/xmc_vadc.c ****       while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 684              	 .loc 2 279 0
 685 0040 C046     	 mov r8,r8
 686              	.L29:
 687              	 .loc 2 279 0 is_stmt 0 discriminator 1
 688 0042 BB68     	 ldr r3,[r7,#8]
 689 0044 8022     	 mov r2,#128
 690 0046 9A58     	 ldr r2,[r3,r2]
 691 0048 8023     	 mov r3,#128
 692 004a 5B05     	 lsl r3,r3,#21
 693 004c 1340     	 and r3,r2
 694 004e F8D1     	 bne .L29
 695              	.L28:
 273:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 696              	 .loc 2 273 0 is_stmt 1 discriminator 2
 697 0050 0F23     	 mov r3,#15
 698 0052 FB18     	 add r3,r7,r3
 699 0054 1A78     	 ldrb r2,[r3]
 700 0056 0F23     	 mov r3,#15
 701 0058 FB18     	 add r3,r7,r3
 702 005a 0132     	 add r2,r2,#1
 703 005c 1A70     	 strb r2,[r3]
 704              	.L27:
 273:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 705              	 .loc 2 273 0 is_stmt 0 discriminator 1
 706 005e 0F23     	 mov r3,#15
 707 0060 FB18     	 add r3,r7,r3
 708 0062 1B78     	 ldrb r3,[r3]
 709 0064 012B     	 cmp r3,#1
 710 0066 DDD9     	 bls .L30
 280:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 281:../Libraries/XMCLib/src/xmc_vadc.c ****         /* NOP */
 282:../Libraries/XMCLib/src/xmc_vadc.c ****       }
 283:../Libraries/XMCLib/src/xmc_vadc.c ****     }
 284:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 285:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 286:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop until it finishes calibration */
 287:../Libraries/XMCLib/src/xmc_vadc.c ****   while ((((SHS0->SHSCFG) & (uint32_t)SHS_SHSCFG_STATE_Msk) >> (uint32_t)SHS_SHSCFG_STATE_Pos) ==
 288:../Libraries/XMCLib/src/xmc_vadc.c ****          XMC_VADC_SHS_START_UP_CAL_ACTIVE )
 289:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 290:../Libraries/XMCLib/src/xmc_vadc.c ****     /* NOP */
 291:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 292:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 293:../Libraries/XMCLib/src/xmc_vadc.c **** }
 711              	 .loc 2 293 0 is_stmt 1
 712 0068 BD46     	 mov sp,r7
 713 006a 04B0     	 add sp,sp,#16
 714              	 
 715 006c 80BD     	 pop {r7,pc}
 716              	.L32:
 717 006e C046     	 .align 2
 718              	.L31:
 719 0070 00000000 	 .word g_xmc_vadc_group_array
 720              	 .cfi_endproc
 721              	.LFE153:
 723              	 .section .text.XMC_VADC_GLOBAL_SetBoundaries,"ax",%progbits
 724              	 .align 2
 725              	 .global XMC_VADC_GLOBAL_SetBoundaries
 726              	 .code 16
 727              	 .thumb_func
 729              	XMC_VADC_GLOBAL_SetBoundaries:
 730              	.LFB154:
 294:../Libraries/XMCLib/src/xmc_vadc.c **** 
 295:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set boudaries for result of conversion. Should the boundaries be violated, interrupts are
 296:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
 297:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr,
 298:../Libraries/XMCLib/src/xmc_vadc.c ****                                    const uint32_t boundary0,
 299:../Libraries/XMCLib/src/xmc_vadc.c ****                                    const uint32_t boundary1)
 300:../Libraries/XMCLib/src/xmc_vadc.c **** {
 731              	 .loc 2 300 0
 732              	 .cfi_startproc
 733 0000 80B5     	 push {r7,lr}
 734              	.LCFI37:
 735              	 .cfi_def_cfa_offset 8
 736              	 .cfi_offset 7,-8
 737              	 .cfi_offset 14,-4
 738 0002 86B0     	 sub sp,sp,#24
 739              	.LCFI38:
 740              	 .cfi_def_cfa_offset 32
 741 0004 00AF     	 add r7,sp,#0
 742              	.LCFI39:
 743              	 .cfi_def_cfa_register 7
 744 0006 F860     	 str r0,[r7,#12]
 745 0008 B960     	 str r1,[r7,#8]
 746 000a 7A60     	 str r2,[r7,#4]
 301:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t globbound;
 302:../Libraries/XMCLib/src/xmc_vadc.c **** 
 303:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Module Pointer", (global_ptr == VADC))
 304:../Libraries/XMCLib/src/xmc_vadc.c **** 
 305:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound = 0U;
 747              	 .loc 2 305 0
 748 000c 0023     	 mov r3,#0
 749 000e 7B61     	 str r3,[r7,#20]
 306:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound |= (uint32_t) (boundary0 << VADC_GLOBBOUND_BOUNDARY0_Pos);
 750              	 .loc 2 306 0
 751 0010 7A69     	 ldr r2,[r7,#20]
 752 0012 BB68     	 ldr r3,[r7,#8]
 753 0014 1343     	 orr r3,r2
 754 0016 7B61     	 str r3,[r7,#20]
 307:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound |= (uint32_t) (boundary1 << VADC_GLOBBOUND_BOUNDARY1_Pos);
 755              	 .loc 2 307 0
 756 0018 7B68     	 ldr r3,[r7,#4]
 757 001a 1B04     	 lsl r3,r3,#16
 758 001c 7A69     	 ldr r2,[r7,#20]
 759 001e 1343     	 orr r3,r2
 760 0020 7B61     	 str r3,[r7,#20]
 308:../Libraries/XMCLib/src/xmc_vadc.c **** 
 309:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = globbound;
 761              	 .loc 2 309 0
 762 0022 FB68     	 ldr r3,[r7,#12]
 763 0024 B821     	 mov r1,#184
 764 0026 7A69     	 ldr r2,[r7,#20]
 765 0028 5A50     	 str r2,[r3,r1]
 310:../Libraries/XMCLib/src/xmc_vadc.c **** }
 766              	 .loc 2 310 0
 767 002a BD46     	 mov sp,r7
 768 002c 06B0     	 add sp,sp,#24
 769              	 
 770 002e 80BD     	 pop {r7,pc}
 771              	 .cfi_endproc
 772              	.LFE154:
 774              	 .section .text.XMC_VADC_GLOBAL_SetIndividualBoundary,"ax",%progbits
 775              	 .align 2
 776              	 .global XMC_VADC_GLOBAL_SetIndividualBoundary
 777              	 .code 16
 778              	 .thumb_func
 780              	XMC_VADC_GLOBAL_SetIndividualBoundary:
 781              	.LFB155:
 311:../Libraries/XMCLib/src/xmc_vadc.c **** 
 312:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an individual boundary for conversion results */
 313:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
 314:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const XMC_VADC_CHANNEL_BOUNDARY_t selection,
 315:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const uint16_t boundary_value)
 316:../Libraries/XMCLib/src/xmc_vadc.c **** {
 782              	 .loc 2 316 0
 783              	 .cfi_startproc
 784 0000 80B5     	 push {r7,lr}
 785              	.LCFI40:
 786              	 .cfi_def_cfa_offset 8
 787              	 .cfi_offset 7,-8
 788              	 .cfi_offset 14,-4
 789 0002 84B0     	 sub sp,sp,#16
 790              	.LCFI41:
 791              	 .cfi_def_cfa_offset 24
 792 0004 00AF     	 add r7,sp,#0
 793              	.LCFI42:
 794              	 .cfi_def_cfa_register 7
 795 0006 7860     	 str r0,[r7,#4]
 796 0008 081C     	 mov r0,r1
 797 000a 111C     	 mov r1,r2
 798 000c FB1C     	 add r3,r7,#3
 799 000e 021C     	 add r2,r0,#0
 800 0010 1A70     	 strb r2,[r3]
 801 0012 3B1C     	 mov r3,r7
 802 0014 0A1C     	 add r2,r1,#0
 803 0016 1A80     	 strh r2,[r3]
 317:../Libraries/XMCLib/src/xmc_vadc.c **** 
 318:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t globbound;
 319:../Libraries/XMCLib/src/xmc_vadc.c **** 
 320:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Module Pointer", (global_ptr == VADC))
 321:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Boundary Selection",
 322:../Libraries/XMCLib/src/xmc_vadc.c ****              ((XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0 == selection) ||
 323:../Libraries/XMCLib/src/xmc_vadc.c ****               (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1 == selection)))
 324:../Libraries/XMCLib/src/xmc_vadc.c **** 
 325:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 326:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound = global_ptr->GLOBBOUND;
 804              	 .loc 2 326 0
 805 0018 7B68     	 ldr r3,[r7,#4]
 806 001a B822     	 mov r2,#184
 807 001c 9B58     	 ldr r3,[r3,r2]
 808 001e FB60     	 str r3,[r7,#12]
 327:../Libraries/XMCLib/src/xmc_vadc.c **** 
 328:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0 == selection)
 809              	 .loc 2 328 0
 810 0020 FB1C     	 add r3,r7,#3
 811 0022 1B78     	 ldrb r3,[r3]
 812 0024 022B     	 cmp r3,#2
 813 0026 09D1     	 bne .L35
 329:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 330:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound &= ~((uint32_t) VADC_GLOBBOUND_BOUNDARY0_Msk);
 814              	 .loc 2 330 0
 815 0028 FB68     	 ldr r3,[r7,#12]
 816 002a 1B0B     	 lsr r3,r3,#12
 817 002c 1B03     	 lsl r3,r3,#12
 818 002e FB60     	 str r3,[r7,#12]
 331:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY0_Pos);
 819              	 .loc 2 331 0
 820 0030 3B1C     	 mov r3,r7
 821 0032 1B88     	 ldrh r3,[r3]
 822 0034 FA68     	 ldr r2,[r7,#12]
 823 0036 1343     	 orr r3,r2
 824 0038 FB60     	 str r3,[r7,#12]
 825 003a 0DE0     	 b .L36
 826              	.L35:
 332:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 333:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1 == selection)
 827              	 .loc 2 333 0
 828 003c FB1C     	 add r3,r7,#3
 829 003e 1B78     	 ldrb r3,[r3]
 830 0040 032B     	 cmp r3,#3
 831 0042 09D1     	 bne .L36
 334:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 335:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound &= ~((uint32_t) VADC_GLOBBOUND_BOUNDARY1_Msk);
 832              	 .loc 2 335 0
 833 0044 FB68     	 ldr r3,[r7,#12]
 834 0046 084A     	 ldr r2,.L37
 835 0048 1340     	 and r3,r2
 836 004a FB60     	 str r3,[r7,#12]
 336:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY1_Pos);
 837              	 .loc 2 336 0
 838 004c 3B1C     	 mov r3,r7
 839 004e 1B88     	 ldrh r3,[r3]
 840 0050 1B04     	 lsl r3,r3,#16
 841 0052 FA68     	 ldr r2,[r7,#12]
 842 0054 1343     	 orr r3,r2
 843 0056 FB60     	 str r3,[r7,#12]
 844              	.L36:
 337:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 338:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 339:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 340:../Libraries/XMCLib/src/xmc_vadc.c ****     /* For MISRA*/
 341:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 342:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = globbound;
 845              	 .loc 2 342 0
 846 0058 7B68     	 ldr r3,[r7,#4]
 847 005a B821     	 mov r1,#184
 848 005c FA68     	 ldr r2,[r7,#12]
 849 005e 5A50     	 str r2,[r3,r1]
 343:../Libraries/XMCLib/src/xmc_vadc.c **** 
 344:../Libraries/XMCLib/src/xmc_vadc.c **** }
 850              	 .loc 2 344 0
 851 0060 BD46     	 mov sp,r7
 852 0062 04B0     	 add sp,sp,#16
 853              	 
 854 0064 80BD     	 pop {r7,pc}
 855              	.L38:
 856 0066 C046     	 .align 2
 857              	.L37:
 858 0068 FFFF00F0 	 .word -268369921
 859              	 .cfi_endproc
 860              	.LFE155:
 862              	 .section .text.XMC_VADC_GLOBAL_SetCompareValue,"ax",%progbits
 863              	 .align 2
 864              	 .global XMC_VADC_GLOBAL_SetCompareValue
 865              	 .code 16
 866              	 .thumb_func
 868              	XMC_VADC_GLOBAL_SetCompareValue:
 869              	.LFB156:
 345:../Libraries/XMCLib/src/xmc_vadc.c **** 
 346:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 347:../Libraries/XMCLib/src/xmc_vadc.c **** 
 348:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set compare value for the result register. Result of conversion is compared against this 
 349:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
 350:../Libraries/XMCLib/src/xmc_vadc.c **** {
 870              	 .loc 2 350 0
 871              	 .cfi_startproc
 872 0000 80B5     	 push {r7,lr}
 873              	.LCFI43:
 874              	 .cfi_def_cfa_offset 8
 875              	 .cfi_offset 7,-8
 876              	 .cfi_offset 14,-4
 877 0002 82B0     	 sub sp,sp,#8
 878              	.LCFI44:
 879              	 .cfi_def_cfa_offset 16
 880 0004 00AF     	 add r7,sp,#0
 881              	.LCFI45:
 882              	 .cfi_def_cfa_register 7
 883 0006 7860     	 str r0,[r7,#4]
 884 0008 0A1C     	 mov r2,r1
 885 000a BB1C     	 add r3,r7,#2
 886 000c 1A80     	 strh r2,[r3]
 351:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetCompareValue:Wrong Module Pointer", (global_ptr == VADC))
 352:../Libraries/XMCLib/src/xmc_vadc.c **** 
 353:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRES &= ~((uint32_t)VADC_GLOBRES_RESULT_Msk);
 887              	 .loc 2 353 0
 888 000e 7A68     	 ldr r2,[r7,#4]
 889 0010 C023     	 mov r3,#192
 890 0012 9B00     	 lsl r3,r3,#2
 891 0014 D358     	 ldr r3,[r2,r3]
 892 0016 1B0C     	 lsr r3,r3,#16
 893 0018 1904     	 lsl r1,r3,#16
 894 001a 7A68     	 ldr r2,[r7,#4]
 895 001c C023     	 mov r3,#192
 896 001e 9B00     	 lsl r3,r3,#2
 897 0020 D150     	 str r1,[r2,r3]
 354:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRES |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 898              	 .loc 2 354 0
 899 0022 7A68     	 ldr r2,[r7,#4]
 900 0024 C023     	 mov r3,#192
 901 0026 9B00     	 lsl r3,r3,#2
 902 0028 D258     	 ldr r2,[r2,r3]
 903 002a BB1C     	 add r3,r7,#2
 904 002c 1B88     	 ldrh r3,[r3]
 905 002e 9B00     	 lsl r3,r3,#2
 906 0030 1A43     	 orr r2,r3
 907 0032 111C     	 mov r1,r2
 908 0034 7A68     	 ldr r2,[r7,#4]
 909 0036 C023     	 mov r3,#192
 910 0038 9B00     	 lsl r3,r3,#2
 911 003a D150     	 str r1,[r2,r3]
 355:../Libraries/XMCLib/src/xmc_vadc.c **** }
 912              	 .loc 2 355 0
 913 003c BD46     	 mov sp,r7
 914 003e 02B0     	 add sp,sp,#8
 915              	 
 916 0040 80BD     	 pop {r7,pc}
 917              	 .cfi_endproc
 918              	.LFE156:
 920 0042 C046     	 .section .text.XMC_VADC_GLOBAL_GetCompareResult,"ax",%progbits
 921              	 .align 2
 922              	 .global XMC_VADC_GLOBAL_GetCompareResult
 923              	 .code 16
 924              	 .thumb_func
 926              	XMC_VADC_GLOBAL_GetCompareResult:
 927              	.LFB157:
 356:../Libraries/XMCLib/src/xmc_vadc.c **** 
 357:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result of comparison */
 358:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr)
 359:../Libraries/XMCLib/src/xmc_vadc.c **** {
 928              	 .loc 2 359 0
 929              	 .cfi_startproc
 930 0000 80B5     	 push {r7,lr}
 931              	.LCFI46:
 932              	 .cfi_def_cfa_offset 8
 933              	 .cfi_offset 7,-8
 934              	 .cfi_offset 14,-4
 935 0002 84B0     	 sub sp,sp,#16
 936              	.LCFI47:
 937              	 .cfi_def_cfa_offset 24
 938 0004 00AF     	 add r7,sp,#0
 939              	.LCFI48:
 940              	 .cfi_def_cfa_register 7
 941 0006 7860     	 str r0,[r7,#4]
 360:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_FAST_COMPARE_t result;
 361:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
 362:../Libraries/XMCLib/src/xmc_vadc.c **** 
 363:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetCompareResult:Wrong Module Pointer", (global_ptr == VADC))
 364:../Libraries/XMCLib/src/xmc_vadc.c **** 
 365:../Libraries/XMCLib/src/xmc_vadc.c ****   res = global_ptr->GLOBRES;
 942              	 .loc 2 365 0
 943 0008 7A68     	 ldr r2,[r7,#4]
 944 000a C023     	 mov r3,#192
 945 000c 9B00     	 lsl r3,r3,#2
 946 000e D358     	 ldr r3,[r2,r3]
 947 0010 BB60     	 str r3,[r7,#8]
 366:../Libraries/XMCLib/src/xmc_vadc.c **** 
 367:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res & (uint32_t)VADC_GLOBRES_VF_Msk)
 948              	 .loc 2 367 0
 949 0012 BB68     	 ldr r3,[r7,#8]
 950 0014 002B     	 cmp r3,#0
 951 0016 08DA     	 bge .L41
 368:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 369:../Libraries/XMCLib/src/xmc_vadc.c ****     result = (XMC_VADC_FAST_COMPARE_t)((uint32_t)(res >> (uint32_t)VADC_GLOBRES_FCR_Pos) & (uint32_
 952              	 .loc 2 369 0
 953 0018 BB68     	 ldr r3,[r7,#8]
 954 001a 9B0F     	 lsr r3,r3,#30
 955 001c DAB2     	 uxtb r2,r3
 956 001e 0F23     	 mov r3,#15
 957 0020 FB18     	 add r3,r7,r3
 958 0022 0121     	 mov r1,#1
 959 0024 0A40     	 and r2,r1
 960 0026 1A70     	 strb r2,[r3]
 961 0028 03E0     	 b .L42
 962              	.L41:
 370:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 371:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 372:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 373:../Libraries/XMCLib/src/xmc_vadc.c ****     result = XMC_VADC_FAST_COMPARE_UNKNOWN;
 963              	 .loc 2 373 0
 964 002a 0F23     	 mov r3,#15
 965 002c FB18     	 add r3,r7,r3
 966 002e 0222     	 mov r2,#2
 967 0030 1A70     	 strb r2,[r3]
 968              	.L42:
 374:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 375:../Libraries/XMCLib/src/xmc_vadc.c **** 
 376:../Libraries/XMCLib/src/xmc_vadc.c ****   return result;
 969              	 .loc 2 376 0
 970 0032 0F23     	 mov r3,#15
 971 0034 FB18     	 add r3,r7,r3
 972 0036 1B78     	 ldrb r3,[r3]
 377:../Libraries/XMCLib/src/xmc_vadc.c **** }
 973              	 .loc 2 377 0
 974 0038 181C     	 mov r0,r3
 975 003a BD46     	 mov sp,r7
 976 003c 04B0     	 add sp,sp,#16
 977              	 
 978 003e 80BD     	 pop {r7,pc}
 979              	 .cfi_endproc
 980              	.LFE157:
 982              	 .section .text.XMC_VADC_GLOBAL_BindGroupToEMux,"ax",%progbits
 983              	 .align 2
 984              	 .global XMC_VADC_GLOBAL_BindGroupToEMux
 985              	 .code 16
 986              	 .thumb_func
 988              	XMC_VADC_GLOBAL_BindGroupToEMux:
 989              	.LFB158:
 378:../Libraries/XMCLib/src/xmc_vadc.c **** 
 379:../Libraries/XMCLib/src/xmc_vadc.c **** /* Bind one of the four groups to one of the two EMUX interfaces */
 380:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_EMUX_AVAILABLE == 1U)
 381:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
 382:../Libraries/XMCLib/src/xmc_vadc.c **** {
 990              	 .loc 2 382 0
 991              	 .cfi_startproc
 992 0000 80B5     	 push {r7,lr}
 993              	.LCFI49:
 994              	 .cfi_def_cfa_offset 8
 995              	 .cfi_offset 7,-8
 996              	 .cfi_offset 14,-4
 997 0002 86B0     	 sub sp,sp,#24
 998              	.LCFI50:
 999              	 .cfi_def_cfa_offset 32
 1000 0004 00AF     	 add r7,sp,#0
 1001              	.LCFI51:
 1002              	 .cfi_def_cfa_register 7
 1003 0006 F860     	 str r0,[r7,#12]
 1004 0008 B960     	 str r1,[r7,#8]
 1005 000a 7A60     	 str r2,[r7,#4]
 383:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
 384:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t pos;
 385:../Libraries/XMCLib/src/xmc_vadc.c **** 
 386:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong Module Pointer", (global_ptr == VADC))
 387:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong EMUX Group", (emuxif < XMC_VADC_NUM_EMUX_INTERF
 388:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong VADC Group", (group < XMC_VADC_MAXIMUM_NUM_GROU
 389:../Libraries/XMCLib/src/xmc_vadc.c **** 
 390:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == emuxif)
 1006              	 .loc 2 390 0
 1007 000c BB68     	 ldr r3,[r7,#8]
 1008 000e 002B     	 cmp r3,#0
 1009 0010 04D1     	 bne .L45
 391:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 392:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t)VADC_EMUXSEL_EMUXGRP0_Pos;
 1010              	 .loc 2 392 0
 1011 0012 0023     	 mov r3,#0
 1012 0014 3B61     	 str r3,[r7,#16]
 393:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)VADC_EMUXSEL_EMUXGRP0_Msk;
 1013              	 .loc 2 393 0
 1014 0016 0F23     	 mov r3,#15
 1015 0018 7B61     	 str r3,[r7,#20]
 1016 001a 03E0     	 b .L46
 1017              	.L45:
 394:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 395:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 396:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 397:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t)VADC_EMUXSEL_EMUXGRP1_Pos;
 1018              	 .loc 2 397 0
 1019 001c 0423     	 mov r3,#4
 1020 001e 3B61     	 str r3,[r7,#16]
 398:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)VADC_EMUXSEL_EMUXGRP1_Msk;
 1021              	 .loc 2 398 0
 1022 0020 F023     	 mov r3,#240
 1023 0022 7B61     	 str r3,[r7,#20]
 1024              	.L46:
 399:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 400:../Libraries/XMCLib/src/xmc_vadc.c **** 
 401:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->EMUXSEL &= ~(mask);
 1025              	 .loc 2 401 0
 1026 0024 FA68     	 ldr r2,[r7,#12]
 1027 0026 FC23     	 mov r3,#252
 1028 0028 9B00     	 lsl r3,r3,#2
 1029 002a D358     	 ldr r3,[r2,r3]
 1030 002c 7A69     	 ldr r2,[r7,#20]
 1031 002e D243     	 mvn r2,r2
 1032 0030 1A40     	 and r2,r3
 1033 0032 111C     	 mov r1,r2
 1034 0034 FA68     	 ldr r2,[r7,#12]
 1035 0036 FC23     	 mov r3,#252
 1036 0038 9B00     	 lsl r3,r3,#2
 1037 003a D150     	 str r1,[r2,r3]
 402:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->EMUXSEL |= (uint32_t) (group << pos);
 1038              	 .loc 2 402 0
 1039 003c FA68     	 ldr r2,[r7,#12]
 1040 003e FC23     	 mov r3,#252
 1041 0040 9B00     	 lsl r3,r3,#2
 1042 0042 D258     	 ldr r2,[r2,r3]
 1043 0044 3B69     	 ldr r3,[r7,#16]
 1044 0046 7968     	 ldr r1,[r7,#4]
 1045 0048 9940     	 lsl r1,r1,r3
 1046 004a 0B1C     	 mov r3,r1
 1047 004c 1A43     	 orr r2,r3
 1048 004e 111C     	 mov r1,r2
 1049 0050 FA68     	 ldr r2,[r7,#12]
 1050 0052 FC23     	 mov r3,#252
 1051 0054 9B00     	 lsl r3,r3,#2
 1052 0056 D150     	 str r1,[r2,r3]
 403:../Libraries/XMCLib/src/xmc_vadc.c **** 
 404:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1053              	 .loc 2 404 0
 1054 0058 BD46     	 mov sp,r7
 1055 005a 06B0     	 add sp,sp,#24
 1056              	 
 1057 005c 80BD     	 pop {r7,pc}
 1058              	 .cfi_endproc
 1059              	.LFE158:
 1061 005e C046     	 .section .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode,"ax",%progbits
 1062              	 .align 2
 1063              	 .global XMC_VADC_GLOBAL_SetResultEventInterruptNode
 1064              	 .code 16
 1065              	 .thumb_func
 1067              	XMC_VADC_GLOBAL_SetResultEventInterruptNode:
 1068              	.LFB159:
 405:../Libraries/XMCLib/src/xmc_vadc.c **** #endif 
 406:../Libraries/XMCLib/src/xmc_vadc.c **** 
 407:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind result event with a service request line */
 408:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
 409:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1069              	 .loc 2 409 0
 1070              	 .cfi_startproc
 1071 0000 80B5     	 push {r7,lr}
 1072              	.LCFI52:
 1073              	 .cfi_def_cfa_offset 8
 1074              	 .cfi_offset 7,-8
 1075              	 .cfi_offset 14,-4
 1076 0002 84B0     	 sub sp,sp,#16
 1077              	.LCFI53:
 1078              	 .cfi_def_cfa_offset 24
 1079 0004 00AF     	 add r7,sp,#0
 1080              	.LCFI54:
 1081              	 .cfi_def_cfa_register 7
 1082 0006 7860     	 str r0,[r7,#4]
 1083 0008 0A1C     	 mov r2,r1
 1084 000a FB1C     	 add r3,r7,#3
 1085 000c 1A70     	 strb r2,[r3]
 410:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t node;
 411:../Libraries/XMCLib/src/xmc_vadc.c ****   
 412:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong Module Pointer", (global_ptr == VAD
 413:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong SR Number", (sr <= XMC_VADC_SR_SHAR
 414:../Libraries/XMCLib/src/xmc_vadc.c **** 
 415:../Libraries/XMCLib/src/xmc_vadc.c ****   if (sr >= XMC_VADC_SR_SHARED_SR0)
 1086              	 .loc 2 415 0
 1087 000e FB1C     	 add r3,r7,#3
 1088 0010 1B78     	 ldrb r3,[r3]
 1089 0012 032B     	 cmp r3,#3
 1090 0014 04D9     	 bls .L48
 416:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 417:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 1091              	 .loc 2 417 0
 1092 0016 FB1C     	 add r3,r7,#3
 1093 0018 1B78     	 ldrb r3,[r3]
 1094 001a 043B     	 sub r3,r3,#4
 1095 001c FB60     	 str r3,[r7,#12]
 1096 001e 02E0     	 b .L49
 1097              	.L48:
 418:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 419:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 420:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 421:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr;
 1098              	 .loc 2 421 0
 1099 0020 FB1C     	 add r3,r7,#3
 1100 0022 1B78     	 ldrb r3,[r3]
 1101 0024 FB60     	 str r3,[r7,#12]
 1102              	.L49:
 422:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 423:../Libraries/XMCLib/src/xmc_vadc.c **** 
 424:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_REV0NP_Msk);
 1103              	 .loc 2 424 0
 1104 0026 7A68     	 ldr r2,[r7,#4]
 1105 0028 A023     	 mov r3,#160
 1106 002a 5B00     	 lsl r3,r3,#1
 1107 002c D358     	 ldr r3,[r2,r3]
 1108 002e 0B4A     	 ldr r2,.L50
 1109 0030 1340     	 and r3,r2
 1110 0032 191C     	 mov r1,r3
 1111 0034 7A68     	 ldr r2,[r7,#4]
 1112 0036 A023     	 mov r3,#160
 1113 0038 5B00     	 lsl r3,r3,#1
 1114 003a D150     	 str r1,[r2,r3]
 425:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
 1115              	 .loc 2 425 0
 1116 003c 7A68     	 ldr r2,[r7,#4]
 1117 003e A023     	 mov r3,#160
 1118 0040 5B00     	 lsl r3,r3,#1
 1119 0042 D258     	 ldr r2,[r2,r3]
 1120 0044 FB68     	 ldr r3,[r7,#12]
 1121 0046 1B04     	 lsl r3,r3,#16
 1122 0048 1A43     	 orr r2,r3
 1123 004a 111C     	 mov r1,r2
 1124 004c 7A68     	 ldr r2,[r7,#4]
 1125 004e A023     	 mov r3,#160
 1126 0050 5B00     	 lsl r3,r3,#1
 1127 0052 D150     	 str r1,[r2,r3]
 426:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1128              	 .loc 2 426 0
 1129 0054 BD46     	 mov sp,r7
 1130 0056 04B0     	 add sp,sp,#16
 1131              	 
 1132 0058 80BD     	 pop {r7,pc}
 1133              	.L51:
 1134 005a C046     	 .align 2
 1135              	.L50:
 1136 005c FFFFF0FF 	 .word -983041
 1137              	 .cfi_endproc
 1138              	.LFE159:
 1140              	 .section .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode,"ax",%progbits
 1141              	 .align 2
 1142              	 .global XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
 1143              	 .code 16
 1144              	 .thumb_func
 1146              	XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:
 1147              	.LFB160:
 427:../Libraries/XMCLib/src/xmc_vadc.c **** 
 428:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind request source event with a service request line */
 429:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
 430:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1148              	 .loc 2 430 0
 1149              	 .cfi_startproc
 1150 0000 80B5     	 push {r7,lr}
 1151              	.LCFI55:
 1152              	 .cfi_def_cfa_offset 8
 1153              	 .cfi_offset 7,-8
 1154              	 .cfi_offset 14,-4
 1155 0002 84B0     	 sub sp,sp,#16
 1156              	.LCFI56:
 1157              	 .cfi_def_cfa_offset 24
 1158 0004 00AF     	 add r7,sp,#0
 1159              	.LCFI57:
 1160              	 .cfi_def_cfa_register 7
 1161 0006 7860     	 str r0,[r7,#4]
 1162 0008 0A1C     	 mov r2,r1
 1163 000a FB1C     	 add r3,r7,#3
 1164 000c 1A70     	 strb r2,[r3]
 431:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t node;
 432:../Libraries/XMCLib/src/xmc_vadc.c ****   
 433:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_
 434:../Libraries/XMCLib/src/xmc_vadc.c **** 
 435:../Libraries/XMCLib/src/xmc_vadc.c ****   if (sr >= XMC_VADC_SR_SHARED_SR0)
 1165              	 .loc 2 435 0
 1166 000e FB1C     	 add r3,r7,#3
 1167 0010 1B78     	 ldrb r3,[r3]
 1168 0012 032B     	 cmp r3,#3
 1169 0014 04D9     	 bls .L53
 436:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 437:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 1170              	 .loc 2 437 0
 1171 0016 FB1C     	 add r3,r7,#3
 1172 0018 1B78     	 ldrb r3,[r3]
 1173 001a 043B     	 sub r3,r3,#4
 1174 001c FB60     	 str r3,[r7,#12]
 1175 001e 02E0     	 b .L54
 1176              	.L53:
 438:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 439:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 440:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 441:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr;
 1177              	 .loc 2 441 0
 1178 0020 FB1C     	 add r3,r7,#3
 1179 0022 1B78     	 ldrb r3,[r3]
 1180 0024 FB60     	 str r3,[r7,#12]
 1181              	.L54:
 442:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 443:../Libraries/XMCLib/src/xmc_vadc.c **** 
 444:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 1182              	 .loc 2 444 0
 1183 0026 7A68     	 ldr r2,[r7,#4]
 1184 0028 A023     	 mov r3,#160
 1185 002a 5B00     	 lsl r3,r3,#1
 1186 002c D358     	 ldr r3,[r2,r3]
 1187 002e 0F22     	 mov r2,#15
 1188 0030 9343     	 bic r3,r2
 1189 0032 191C     	 mov r1,r3
 1190 0034 7A68     	 ldr r2,[r7,#4]
 1191 0036 A023     	 mov r3,#160
 1192 0038 5B00     	 lsl r3,r3,#1
 1193 003a D150     	 str r1,[r2,r3]
 445:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 1194              	 .loc 2 445 0
 1195 003c 7A68     	 ldr r2,[r7,#4]
 1196 003e A023     	 mov r3,#160
 1197 0040 5B00     	 lsl r3,r3,#1
 1198 0042 D258     	 ldr r2,[r2,r3]
 1199 0044 FB68     	 ldr r3,[r7,#12]
 1200 0046 1A43     	 orr r2,r3
 1201 0048 111C     	 mov r1,r2
 1202 004a 7A68     	 ldr r2,[r7,#4]
 1203 004c A023     	 mov r3,#160
 1204 004e 5B00     	 lsl r3,r3,#1
 1205 0050 D150     	 str r1,[r2,r3]
 446:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1206              	 .loc 2 446 0
 1207 0052 BD46     	 mov sp,r7
 1208 0054 04B0     	 add sp,sp,#16
 1209              	 
 1210 0056 80BD     	 pop {r7,pc}
 1211              	 .cfi_endproc
 1212              	.LFE160:
 1214              	 .section .text.XMC_VADC_GROUP_Init,"ax",%progbits
 1215              	 .align 2
 1216              	 .global XMC_VADC_GROUP_Init
 1217              	 .code 16
 1218              	 .thumb_func
 1220              	XMC_VADC_GROUP_Init:
 1221              	.LFB161:
 447:../Libraries/XMCLib/src/xmc_vadc.c **** 
 448:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize an instance of group of VADC hardware */
 449:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)  
 450:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
 451:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1222              	 .loc 2 451 0
 1223              	 .cfi_startproc
 1224 0000 80B5     	 push {r7,lr}
 1225              	.LCFI58:
 1226              	 .cfi_def_cfa_offset 8
 1227              	 .cfi_offset 7,-8
 1228              	 .cfi_offset 14,-4
 1229 0002 82B0     	 sub sp,sp,#8
 1230              	.LCFI59:
 1231              	 .cfi_def_cfa_offset 16
 1232 0004 00AF     	 add r7,sp,#0
 1233              	.LCFI60:
 1234              	 .cfi_def_cfa_register 7
 1235 0006 7860     	 str r0,[r7,#4]
 1236 0008 3960     	 str r1,[r7]
 452:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
 453:../Libraries/XMCLib/src/xmc_vadc.c **** 
 454:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the input classes */
 455:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 1237              	 .loc 2 455 0
 1238 000a 7A68     	 ldr r2,[r7,#4]
 1239 000c 3B68     	 ldr r3,[r7]
 1240 000e 5B68     	 ldr r3,[r3,#4]
 1241 0010 101C     	 mov r0,r2
 1242 0012 191C     	 mov r1,r3
 1243 0014 0022     	 mov r2,#0
 1244 0016 0023     	 mov r3,#0
 1245 0018 FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 456:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 1246              	 .loc 2 456 0
 1247 001c 7A68     	 ldr r2,[r7,#4]
 1248 001e 3B68     	 ldr r3,[r7]
 1249 0020 5B68     	 ldr r3,[r3,#4]
 1250 0022 101C     	 mov r0,r2
 1251 0024 191C     	 mov r1,r3
 1252 0026 0122     	 mov r2,#1
 1253 0028 0023     	 mov r3,#0
 1254 002a FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 457:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 1255              	 .loc 2 457 0
 1256 002e 7A68     	 ldr r2,[r7,#4]
 1257 0030 3B68     	 ldr r3,[r7]
 1258 0032 9B68     	 ldr r3,[r3,#8]
 1259 0034 101C     	 mov r0,r2
 1260 0036 191C     	 mov r1,r3
 1261 0038 0022     	 mov r2,#0
 1262 003a 0123     	 mov r3,#1
 1263 003c FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 458:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 1264              	 .loc 2 458 0
 1265 0040 7A68     	 ldr r2,[r7,#4]
 1266 0042 3B68     	 ldr r3,[r7]
 1267 0044 9B68     	 ldr r3,[r3,#8]
 1268 0046 101C     	 mov r0,r2
 1269 0048 191C     	 mov r1,r3
 1270 004a 0122     	 mov r2,#1
 1271 004c 0123     	 mov r3,#1
 1272 004e FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 459:../Libraries/XMCLib/src/xmc_vadc.c **** 
 460:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBCFG = config->g_arbcfg;
 1273              	 .loc 2 460 0
 1274 0052 3B68     	 ldr r3,[r7]
 1275 0054 1A69     	 ldr r2,[r3,#16]
 1276 0056 7B68     	 ldr r3,[r7,#4]
 1277 0058 8021     	 mov r1,#128
 1278 005a 5A50     	 str r2,[r3,r1]
 461:../Libraries/XMCLib/src/xmc_vadc.c **** 
 462:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = config->g_bound;
 1279              	 .loc 2 462 0
 1280 005c 3B68     	 ldr r3,[r7]
 1281 005e DA68     	 ldr r2,[r3,#12]
 1282 0060 7B68     	 ldr r3,[r7,#4]
 1283 0062 B821     	 mov r1,#184
 1284 0064 5A50     	 str r2,[r3,r1]
 463:../Libraries/XMCLib/src/xmc_vadc.c **** 
 464:../Libraries/XMCLib/src/xmc_vadc.c ****   /* External mux configuration */
 465:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 1285              	 .loc 2 465 0
 1286 0066 7A68     	 ldr r2,[r7,#4]
 1287 0068 3B68     	 ldr r3,[r7]
 1288 006a 1B68     	 ldr r3,[r3]
 1289 006c 101C     	 mov r0,r2
 1290 006e 191C     	 mov r1,r3
 1291 0070 FFF7FEFF 	 bl XMC_VADC_GROUP_ExternalMuxControlInit
 466:../Libraries/XMCLib/src/xmc_vadc.c **** 
 467:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1292              	 .loc 2 467 0
 1293 0074 BD46     	 mov sp,r7
 1294 0076 02B0     	 add sp,sp,#8
 1295              	 
 1296 0078 80BD     	 pop {r7,pc}
 1297              	 .cfi_endproc
 1298              	.LFE161:
 1300 007a C046     	 .section .text.XMC_VADC_GROUP_InputClassInit,"ax",%progbits
 1301              	 .align 2
 1302              	 .global XMC_VADC_GROUP_InputClassInit
 1303              	 .code 16
 1304              	 .thumb_func
 1306              	XMC_VADC_GROUP_InputClassInit:
 1307              	.LFB162:
 468:../Libraries/XMCLib/src/xmc_vadc.c **** 
 469:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to program conversion characteristics */
 470:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
 471:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
 472:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1308              	 .loc 2 472 0
 1309              	 .cfi_startproc
 1310 0000 80B5     	 push {r7,lr}
 1311              	.LCFI61:
 1312              	 .cfi_def_cfa_offset 8
 1313              	 .cfi_offset 7,-8
 1314              	 .cfi_offset 14,-4
 1315 0002 8CB0     	 sub sp,sp,#48
 1316              	.LCFI62:
 1317              	 .cfi_def_cfa_offset 56
 1318 0004 00AF     	 add r7,sp,#0
 1319              	.LCFI63:
 1320              	 .cfi_def_cfa_register 7
 1321 0006 F860     	 str r0,[r7,#12]
 1322 0008 B960     	 str r1,[r7,#8]
 1323 000a 3B60     	 str r3,[r7]
 1324 000c FB1D     	 add r3,r7,#7
 1325 000e 1A70     	 strb r2,[r3]
 473:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_class;
 474:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_mode_pos;
 475:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time_pos;
 476:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_mode_mask;
 477:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time_mask;
 478:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time;
 479:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_CONVMODE_t conv_mode;
 480:../Libraries/XMCLib/src/xmc_vadc.c **** 
 481:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_pt
 482:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_
 483:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLAS
 484:../Libraries/XMCLib/src/xmc_vadc.c **** 
 485:../Libraries/XMCLib/src/xmc_vadc.c ****   /* 
 486:../Libraries/XMCLib/src/xmc_vadc.c ****    * Obtain the mask and position macros of the parameters based on what is being requested - Stand
 487:../Libraries/XMCLib/src/xmc_vadc.c ****    * external mux channels.
 488:../Libraries/XMCLib/src/xmc_vadc.c ****    */
 489:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_GROUP_CONV_STD == conv_type)
 1326              	 .loc 2 489 0
 1327 0010 FB1D     	 add r3,r7,#7
 1328 0012 1B78     	 ldrb r3,[r3]
 1329 0014 002B     	 cmp r3,#0
 1330 0016 19D1     	 bne .L57
 490:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 491:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 1331              	 .loc 2 491 0
 1332 0018 0823     	 mov r3,#8
 1333 001a FB62     	 str r3,[r7,#44]
 492:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 1334              	 .loc 2 492 0
 1335 001c E023     	 mov r3,#224
 1336 001e DB00     	 lsl r3,r3,#3
 1337 0020 7B62     	 str r3,[r7,#36]
 493:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 1338              	 .loc 2 493 0
 1339 0022 0023     	 mov r3,#0
 1340 0024 BB62     	 str r3,[r7,#40]
 494:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 1341              	 .loc 2 494 0
 1342 0026 1F23     	 mov r3,#31
 1343 0028 3B62     	 str r3,[r7,#32]
 495:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time      = (uint32_t) config.sample_time_std_conv;
 1344              	 .loc 2 495 0
 1345 002a 0823     	 mov r3,#8
 1346 002c FB18     	 add r3,r7,r3
 1347 002e 1B78     	 ldrb r3,[r3]
 1348 0030 DB06     	 lsl r3,r3,#27
 1349 0032 DB0E     	 lsr r3,r3,#27
 1350 0034 DBB2     	 uxtb r3,r3
 1351 0036 FB61     	 str r3,[r7,#28]
 496:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 1352              	 .loc 2 496 0
 1353 0038 0923     	 mov r3,#9
 1354 003a FB18     	 add r3,r7,r3
 1355 003c 1B78     	 ldrb r3,[r3]
 1356 003e 5B07     	 lsl r3,r3,#29
 1357 0040 5B0F     	 lsr r3,r3,#29
 1358 0042 DAB2     	 uxtb r2,r3
 1359 0044 1B23     	 mov r3,#27
 1360 0046 FB18     	 add r3,r7,r3
 1361 0048 1A70     	 strb r2,[r3]
 1362 004a 19E0     	 b .L58
 1363              	.L57:
 497:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 498:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 499:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 500:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 1364              	 .loc 2 500 0
 1365 004c 1823     	 mov r3,#24
 1366 004e FB62     	 str r3,[r7,#44]
 501:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 1367              	 .loc 2 501 0
 1368 0050 E023     	 mov r3,#224
 1369 0052 DB04     	 lsl r3,r3,#19
 1370 0054 7B62     	 str r3,[r7,#36]
 502:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 1371              	 .loc 2 502 0
 1372 0056 1023     	 mov r3,#16
 1373 0058 BB62     	 str r3,[r7,#40]
 503:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 1374              	 .loc 2 503 0
 1375 005a F823     	 mov r3,#248
 1376 005c 5B03     	 lsl r3,r3,#13
 1377 005e 3B62     	 str r3,[r7,#32]
 504:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 1378              	 .loc 2 504 0
 1379 0060 0A23     	 mov r3,#10
 1380 0062 FB18     	 add r3,r7,r3
 1381 0064 1B78     	 ldrb r3,[r3]
 1382 0066 DB06     	 lsl r3,r3,#27
 1383 0068 DB0E     	 lsr r3,r3,#27
 1384 006a DBB2     	 uxtb r3,r3
 1385 006c FB61     	 str r3,[r7,#28]
 505:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 1386              	 .loc 2 505 0
 1387 006e 0B23     	 mov r3,#11
 1388 0070 FB18     	 add r3,r7,r3
 1389 0072 1B78     	 ldrb r3,[r3]
 1390 0074 5B07     	 lsl r3,r3,#29
 1391 0076 5B0F     	 lsr r3,r3,#29
 1392 0078 DAB2     	 uxtb r2,r3
 1393 007a 1B23     	 mov r3,#27
 1394 007c FB18     	 add r3,r7,r3
 1395 007e 1A70     	 strb r2,[r3]
 1396              	.L58:
 506:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 507:../Libraries/XMCLib/src/xmc_vadc.c **** 
 508:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Determine the class */
 509:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class  = group_ptr->ICLASS[set_num];
 1397              	 .loc 2 509 0
 1398 0080 FB68     	 ldr r3,[r7,#12]
 1399 0082 3A68     	 ldr r2,[r7]
 1400 0084 2832     	 add r2,r2,#40
 1401 0086 9200     	 lsl r2,r2,#2
 1402 0088 D358     	 ldr r3,[r2,r3]
 1403 008a 7B61     	 str r3,[r7,#20]
 510:../Libraries/XMCLib/src/xmc_vadc.c **** 
 511:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the class register */
 512:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class &= ~(conv_mode_mask);
 1404              	 .loc 2 512 0
 1405 008c 7B6A     	 ldr r3,[r7,#36]
 1406 008e DA43     	 mvn r2,r3
 1407 0090 7B69     	 ldr r3,[r7,#20]
 1408 0092 1340     	 and r3,r2
 1409 0094 7B61     	 str r3,[r7,#20]
 513:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 1410              	 .loc 2 513 0
 1411 0096 1B23     	 mov r3,#27
 1412 0098 FB18     	 add r3,r7,r3
 1413 009a 1A78     	 ldrb r2,[r3]
 1414 009c FB6A     	 ldr r3,[r7,#44]
 1415 009e 9A40     	 lsl r2,r2,r3
 1416 00a0 131C     	 mov r3,r2
 1417 00a2 7A69     	 ldr r2,[r7,#20]
 1418 00a4 1343     	 orr r3,r2
 1419 00a6 7B61     	 str r3,[r7,#20]
 514:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class &= ~(sample_time_mask);
 1420              	 .loc 2 514 0
 1421 00a8 3B6A     	 ldr r3,[r7,#32]
 1422 00aa DA43     	 mvn r2,r3
 1423 00ac 7B69     	 ldr r3,[r7,#20]
 1424 00ae 1340     	 and r3,r2
 1425 00b0 7B61     	 str r3,[r7,#20]
 515:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 1426              	 .loc 2 515 0
 1427 00b2 BB6A     	 ldr r3,[r7,#40]
 1428 00b4 FA69     	 ldr r2,[r7,#28]
 1429 00b6 9A40     	 lsl r2,r2,r3
 1430 00b8 131C     	 mov r3,r2
 1431 00ba 7A69     	 ldr r2,[r7,#20]
 1432 00bc 1343     	 orr r3,r2
 1433 00be 7B61     	 str r3,[r7,#20]
 516:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ICLASS[set_num] = conv_class;
 1434              	 .loc 2 516 0
 1435 00c0 FB68     	 ldr r3,[r7,#12]
 1436 00c2 3A68     	 ldr r2,[r7]
 1437 00c4 2832     	 add r2,r2,#40
 1438 00c6 9200     	 lsl r2,r2,#2
 1439 00c8 7969     	 ldr r1,[r7,#20]
 1440 00ca D150     	 str r1,[r2,r3]
 517:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1441              	 .loc 2 517 0
 1442 00cc BD46     	 mov sp,r7
 1443 00ce 0CB0     	 add sp,sp,#48
 1444              	 
 1445 00d0 80BD     	 pop {r7,pc}
 1446              	 .cfi_endproc
 1447              	.LFE162:
 1449 00d2 C046     	 .section .text.XMC_VADC_GROUP_SetPowerMode,"ax",%progbits
 1450              	 .align 2
 1451              	 .global XMC_VADC_GROUP_SetPowerMode
 1452              	 .code 16
 1453              	 .thumb_func
 1455              	XMC_VADC_GROUP_SetPowerMode:
 1456              	.LFB163:
 518:../Libraries/XMCLib/src/xmc_vadc.c **** 
 519:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which sets the power mode of analog converter of a VADC group */
 520:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
 521:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1457              	 .loc 2 521 0
 1458              	 .cfi_startproc
 1459 0000 80B5     	 push {r7,lr}
 1460              	.LCFI64:
 1461              	 .cfi_def_cfa_offset 8
 1462              	 .cfi_offset 7,-8
 1463              	 .cfi_offset 14,-4
 1464 0002 84B0     	 sub sp,sp,#16
 1465              	.LCFI65:
 1466              	 .cfi_def_cfa_offset 24
 1467 0004 00AF     	 add r7,sp,#0
 1468              	.LCFI66:
 1469              	 .cfi_def_cfa_register 7
 1470 0006 7860     	 str r0,[r7,#4]
 1471 0008 0A1C     	 mov r2,r1
 1472 000a FB1C     	 add r3,r7,#3
 1473 000c 1A70     	 strb r2,[r3]
 522:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t arbcfg;
 523:../Libraries/XMCLib/src/xmc_vadc.c **** 
 524:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
 525:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMOD
 526:../Libraries/XMCLib/src/xmc_vadc.c **** 
 527:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg = group_ptr->ARBCFG;
 1474              	 .loc 2 527 0
 1475 000e 7B68     	 ldr r3,[r7,#4]
 1476 0010 8022     	 mov r2,#128
 1477 0012 9B58     	 ldr r3,[r3,r2]
 1478 0014 FB60     	 str r3,[r7,#12]
 528:../Libraries/XMCLib/src/xmc_vadc.c **** 
 529:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 1479              	 .loc 2 529 0
 1480 0016 FB68     	 ldr r3,[r7,#12]
 1481 0018 0322     	 mov r2,#3
 1482 001a 9343     	 bic r3,r2
 1483 001c FB60     	 str r3,[r7,#12]
 530:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg |= (uint32_t)power_mode;
 1484              	 .loc 2 530 0
 1485 001e FB1C     	 add r3,r7,#3
 1486 0020 1B78     	 ldrb r3,[r3]
 1487 0022 FA68     	 ldr r2,[r7,#12]
 1488 0024 1343     	 orr r3,r2
 1489 0026 FB60     	 str r3,[r7,#12]
 531:../Libraries/XMCLib/src/xmc_vadc.c **** 
 532:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBCFG = arbcfg;
 1490              	 .loc 2 532 0
 1491 0028 7B68     	 ldr r3,[r7,#4]
 1492 002a 8021     	 mov r1,#128
 1493 002c FA68     	 ldr r2,[r7,#12]
 1494 002e 5A50     	 str r2,[r3,r1]
 533:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1495              	 .loc 2 533 0
 1496 0030 BD46     	 mov sp,r7
 1497 0032 04B0     	 add sp,sp,#16
 1498              	 
 1499 0034 80BD     	 pop {r7,pc}
 1500              	 .cfi_endproc
 1501              	.LFE163:
 1503 0036 C046     	 .section .text.XMC_VADC_GROUP_SetSyncSlave,"ax",%progbits
 1504              	 .align 2
 1505              	 .global XMC_VADC_GROUP_SetSyncSlave
 1506              	 .code 16
 1507              	 .thumb_func
 1509              	XMC_VADC_GROUP_SetSyncSlave:
 1510              	.LFB164:
 534:../Libraries/XMCLib/src/xmc_vadc.c **** 
 535:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which programs a group as a slave group during sync conversions */
 536:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
 537:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1511              	 .loc 2 537 0
 1512              	 .cfi_startproc
 1513 0000 80B5     	 push {r7,lr}
 1514              	.LCFI67:
 1515              	 .cfi_def_cfa_offset 8
 1516              	 .cfi_offset 7,-8
 1517              	 .cfi_offset 14,-4
 1518 0002 86B0     	 sub sp,sp,#24
 1519              	.LCFI68:
 1520              	 .cfi_def_cfa_offset 32
 1521 0004 00AF     	 add r7,sp,#0
 1522              	.LCFI69:
 1523              	 .cfi_def_cfa_register 7
 1524 0006 F860     	 str r0,[r7,#12]
 1525 0008 B960     	 str r1,[r7,#8]
 1526 000a 7A60     	 str r2,[r7,#4]
 538:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 539:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )
 540:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
 541:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlave:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
 542:../Libraries/XMCLib/src/xmc_vadc.c ****   
 543:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )
 544:../Libraries/XMCLib/src/xmc_vadc.c **** 
 545:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Determine the coding of SYNCTR */
 546:../Libraries/XMCLib/src/xmc_vadc.c ****   if (slave_grp > master_grp)
 1527              	 .loc 2 546 0
 1528 000c 7A68     	 ldr r2,[r7,#4]
 1529 000e BB68     	 ldr r3,[r7,#8]
 1530 0010 9A42     	 cmp r2,r3
 1531 0012 02D9     	 bls .L61
 547:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 548:../Libraries/XMCLib/src/xmc_vadc.c ****     master_grp = master_grp + 1U;
 1532              	 .loc 2 548 0
 1533 0014 BB68     	 ldr r3,[r7,#8]
 1534 0016 0133     	 add r3,r3,#1
 1535 0018 BB60     	 str r3,[r7,#8]
 1536              	.L61:
 549:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 550:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
 551:../Libraries/XMCLib/src/xmc_vadc.c ****   
 552:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program SYNCTR */
 553:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr = group_ptr->SYNCTR;
 1537              	 .loc 2 553 0
 1538 001a FB68     	 ldr r3,[r7,#12]
 1539 001c C022     	 mov r2,#192
 1540 001e 9B58     	 ldr r3,[r3,r2]
 1541 0020 7B61     	 str r3,[r7,#20]
 554:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 1542              	 .loc 2 554 0
 1543 0022 7B69     	 ldr r3,[r7,#20]
 1544 0024 0322     	 mov r2,#3
 1545 0026 9343     	 bic r3,r2
 1546 0028 7B61     	 str r3,[r7,#20]
 555:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   |= master_grp;
 1547              	 .loc 2 555 0
 1548 002a 7A69     	 ldr r2,[r7,#20]
 1549 002c BB68     	 ldr r3,[r7,#8]
 1550 002e 1343     	 orr r3,r2
 1551 0030 7B61     	 str r3,[r7,#20]
 556:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR = synctr;
 1552              	 .loc 2 556 0
 1553 0032 FB68     	 ldr r3,[r7,#12]
 1554 0034 C021     	 mov r1,#192
 1555 0036 7A69     	 ldr r2,[r7,#20]
 1556 0038 5A50     	 str r2,[r3,r1]
 557:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1557              	 .loc 2 557 0
 1558 003a BD46     	 mov sp,r7
 1559 003c 06B0     	 add sp,sp,#24
 1560              	 
 1561 003e 80BD     	 pop {r7,pc}
 1562              	 .cfi_endproc
 1563              	.LFE164:
 1565              	 .section .text.XMC_VADC_GROUP_SetSyncMaster,"ax",%progbits
 1566              	 .align 2
 1567              	 .global XMC_VADC_GROUP_SetSyncMaster
 1568              	 .code 16
 1569              	 .thumb_func
 1571              	XMC_VADC_GROUP_SetSyncMaster:
 1572              	.LFB165:
 558:../Libraries/XMCLib/src/xmc_vadc.c **** 
 559:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which programs a group as a master group during sync conversions */
 560:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr)
 561:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1573              	 .loc 2 561 0
 1574              	 .cfi_startproc
 1575 0000 80B5     	 push {r7,lr}
 1576              	.LCFI70:
 1577              	 .cfi_def_cfa_offset 8
 1578              	 .cfi_offset 7,-8
 1579              	 .cfi_offset 14,-4
 1580 0002 84B0     	 sub sp,sp,#16
 1581              	.LCFI71:
 1582              	 .cfi_def_cfa_offset 24
 1583 0004 00AF     	 add r7,sp,#0
 1584              	.LCFI72:
 1585              	 .cfi_def_cfa_register 7
 1586 0006 7860     	 str r0,[r7,#4]
 562:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 563:../Libraries/XMCLib/src/xmc_vadc.c **** 
 564:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncMaster:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
 565:../Libraries/XMCLib/src/xmc_vadc.c **** 
 566:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr = group_ptr->SYNCTR;
 1587              	 .loc 2 566 0
 1588 0008 7B68     	 ldr r3,[r7,#4]
 1589 000a C022     	 mov r2,#192
 1590 000c 9B58     	 ldr r3,[r3,r2]
 1591 000e FB60     	 str r3,[r7,#12]
 567:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 1592              	 .loc 2 567 0
 1593 0010 FB68     	 ldr r3,[r7,#12]
 1594 0012 0322     	 mov r2,#3
 1595 0014 9343     	 bic r3,r2
 1596 0016 FB60     	 str r3,[r7,#12]
 568:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR = synctr;
 1597              	 .loc 2 568 0
 1598 0018 7B68     	 ldr r3,[r7,#4]
 1599 001a C021     	 mov r1,#192
 1600 001c FA68     	 ldr r2,[r7,#12]
 1601 001e 5A50     	 str r2,[r3,r1]
 569:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1602              	 .loc 2 569 0
 1603 0020 BD46     	 mov sp,r7
 1604 0022 04B0     	 add sp,sp,#16
 1605              	 
 1606 0024 80BD     	 pop {r7,pc}
 1607              	 .cfi_endproc
 1608              	.LFE165:
 1610 0026 C046     	 .section .text.XMC_VADC_GROUP_CheckSlaveReadiness,"ax",%progbits
 1611              	 .align 2
 1612              	 .global XMC_VADC_GROUP_CheckSlaveReadiness
 1613              	 .code 16
 1614              	 .thumb_func
 1616              	XMC_VADC_GROUP_CheckSlaveReadiness:
 1617              	.LFB166:
 570:../Libraries/XMCLib/src/xmc_vadc.c **** 
 571:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable checking of readiness of slaves before a synchronous conversion request is issued 
 572:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
 573:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1618              	 .loc 2 573 0
 1619              	 .cfi_startproc
 1620 0000 80B5     	 push {r7,lr}
 1621              	.LCFI73:
 1622              	 .cfi_def_cfa_offset 8
 1623              	 .cfi_offset 7,-8
 1624              	 .cfi_offset 14,-4
 1625 0002 84B0     	 sub sp,sp,#16
 1626              	.LCFI74:
 1627              	 .cfi_def_cfa_offset 24
 1628 0004 00AF     	 add r7,sp,#0
 1629              	.LCFI75:
 1630              	 .cfi_def_cfa_register 7
 1631 0006 7860     	 str r0,[r7,#4]
 1632 0008 3960     	 str r1,[r7]
 574:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i,master_grp_num;
 575:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
 576:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Slave group", ((slave_group >= 0) && (slave_
 577:../Libraries/XMCLib/src/xmc_vadc.c **** 
 578:../Libraries/XMCLib/src/xmc_vadc.c ****   master_grp_num =0;
 1633              	 .loc 2 578 0
 1634 000a 0023     	 mov r3,#0
 1635 000c BB60     	 str r3,[r7,#8]
 579:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 1636              	 .loc 2 579 0
 1637 000e 0023     	 mov r3,#0
 1638 0010 FB60     	 str r3,[r7,#12]
 1639 0012 0BE0     	 b .L64
 1640              	.L66:
 580:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 581:../Libraries/XMCLib/src/xmc_vadc.c ****     if(g_xmc_vadc_group_array[i] == group_ptr)
 1641              	 .loc 2 581 0
 1642 0014 124B     	 ldr r3,.L68
 1643 0016 FA68     	 ldr r2,[r7,#12]
 1644 0018 9200     	 lsl r2,r2,#2
 1645 001a D258     	 ldr r2,[r2,r3]
 1646 001c 7B68     	 ldr r3,[r7,#4]
 1647 001e 9A42     	 cmp r2,r3
 1648 0020 01D1     	 bne .L65
 582:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 583:../Libraries/XMCLib/src/xmc_vadc.c ****       master_grp_num = i;
 1649              	 .loc 2 583 0
 1650 0022 FB68     	 ldr r3,[r7,#12]
 1651 0024 BB60     	 str r3,[r7,#8]
 1652              	.L65:
 579:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1653              	 .loc 2 579 0 discriminator 2
 1654 0026 FB68     	 ldr r3,[r7,#12]
 1655 0028 0133     	 add r3,r3,#1
 1656 002a FB60     	 str r3,[r7,#12]
 1657              	.L64:
 579:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1658              	 .loc 2 579 0 is_stmt 0 discriminator 1
 1659 002c FB68     	 ldr r3,[r7,#12]
 1660 002e 012B     	 cmp r3,#1
 1661 0030 F0D9     	 bls .L66
 584:../Libraries/XMCLib/src/xmc_vadc.c ****     }
 585:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 586:../Libraries/XMCLib/src/xmc_vadc.c **** 
 587:../Libraries/XMCLib/src/xmc_vadc.c **** 
 588:../Libraries/XMCLib/src/xmc_vadc.c ****   if(slave_group < master_grp_num)
 1662              	 .loc 2 588 0 is_stmt 1
 1663 0032 3A68     	 ldr r2,[r7]
 1664 0034 BB68     	 ldr r3,[r7,#8]
 1665 0036 9A42     	 cmp r2,r3
 1666 0038 02D2     	 bcs .L67
 589:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 590:../Libraries/XMCLib/src/xmc_vadc.c ****     slave_group++;
 1667              	 .loc 2 590 0
 1668 003a 3B68     	 ldr r3,[r7]
 1669 003c 0133     	 add r3,r3,#1
 1670 003e 3B60     	 str r3,[r7]
 1671              	.L67:
 591:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 592:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR |= (1U << (slave_group + XMC_VADC_SYNCTR_START_LOCATION));
 1672              	 .loc 2 592 0
 1673 0040 7B68     	 ldr r3,[r7,#4]
 1674 0042 C022     	 mov r2,#192
 1675 0044 9A58     	 ldr r2,[r3,r2]
 1676 0046 3B68     	 ldr r3,[r7]
 1677 0048 0333     	 add r3,r3,#3
 1678 004a 191C     	 mov r1,r3
 1679 004c 0123     	 mov r3,#1
 1680 004e 8B40     	 lsl r3,r3,r1
 1681 0050 1A43     	 orr r2,r3
 1682 0052 7B68     	 ldr r3,[r7,#4]
 1683 0054 C021     	 mov r1,#192
 1684 0056 5A50     	 str r2,[r3,r1]
 593:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1685              	 .loc 2 593 0
 1686 0058 BD46     	 mov sp,r7
 1687 005a 04B0     	 add sp,sp,#16
 1688              	 
 1689 005c 80BD     	 pop {r7,pc}
 1690              	.L69:
 1691 005e C046     	 .align 2
 1692              	.L68:
 1693 0060 00000000 	 .word g_xmc_vadc_group_array
 1694              	 .cfi_endproc
 1695              	.LFE166:
 1697              	 .section .text.XMC_VADC_GROUP_IgnoreSlaveReadiness,"ax",%progbits
 1698              	 .align 2
 1699              	 .global XMC_VADC_GROUP_IgnoreSlaveReadiness
 1700              	 .code 16
 1701              	 .thumb_func
 1703              	XMC_VADC_GROUP_IgnoreSlaveReadiness:
 1704              	.LFB167:
 594:../Libraries/XMCLib/src/xmc_vadc.c **** 
 595:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable checking of readiness of slaves during synchronous conversions */
 596:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
 597:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1705              	 .loc 2 597 0
 1706              	 .cfi_startproc
 1707 0000 80B5     	 push {r7,lr}
 1708              	.LCFI76:
 1709              	 .cfi_def_cfa_offset 8
 1710              	 .cfi_offset 7,-8
 1711              	 .cfi_offset 14,-4
 1712 0002 84B0     	 sub sp,sp,#16
 1713              	.LCFI77:
 1714              	 .cfi_def_cfa_offset 24
 1715 0004 00AF     	 add r7,sp,#0
 1716              	.LCFI78:
 1717              	 .cfi_def_cfa_register 7
 1718 0006 7860     	 str r0,[r7,#4]
 1719 0008 3960     	 str r1,[r7]
 598:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i,master_grp_num;
 599:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IgnoreSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
 600:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IgnoreSlaveReadiness:Wrong Slave group", ((slave_group >= 0) && (slave
 601:../Libraries/XMCLib/src/xmc_vadc.c **** 
 602:../Libraries/XMCLib/src/xmc_vadc.c ****   master_grp_num =0;
 1720              	 .loc 2 602 0
 1721 000a 0023     	 mov r3,#0
 1722 000c BB60     	 str r3,[r7,#8]
 603:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 1723              	 .loc 2 603 0
 1724 000e 0023     	 mov r3,#0
 1725 0010 FB60     	 str r3,[r7,#12]
 1726 0012 0BE0     	 b .L71
 1727              	.L73:
 604:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 605:../Libraries/XMCLib/src/xmc_vadc.c **** 	  if(g_xmc_vadc_group_array[i] == group_ptr)
 1728              	 .loc 2 605 0
 1729 0014 124B     	 ldr r3,.L75
 1730 0016 FA68     	 ldr r2,[r7,#12]
 1731 0018 9200     	 lsl r2,r2,#2
 1732 001a D258     	 ldr r2,[r2,r3]
 1733 001c 7B68     	 ldr r3,[r7,#4]
 1734 001e 9A42     	 cmp r2,r3
 1735 0020 01D1     	 bne .L72
 606:../Libraries/XMCLib/src/xmc_vadc.c **** 	  {
 607:../Libraries/XMCLib/src/xmc_vadc.c **** 	    master_grp_num = i;
 1736              	 .loc 2 607 0
 1737 0022 FB68     	 ldr r3,[r7,#12]
 1738 0024 BB60     	 str r3,[r7,#8]
 1739              	.L72:
 603:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1740              	 .loc 2 603 0 discriminator 2
 1741 0026 FB68     	 ldr r3,[r7,#12]
 1742 0028 0133     	 add r3,r3,#1
 1743 002a FB60     	 str r3,[r7,#12]
 1744              	.L71:
 603:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1745              	 .loc 2 603 0 is_stmt 0 discriminator 1
 1746 002c FB68     	 ldr r3,[r7,#12]
 1747 002e 012B     	 cmp r3,#1
 1748 0030 F0D9     	 bls .L73
 608:../Libraries/XMCLib/src/xmc_vadc.c **** 	  }
 609:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 610:../Libraries/XMCLib/src/xmc_vadc.c **** 
 611:../Libraries/XMCLib/src/xmc_vadc.c ****   if(slave_group < master_grp_num)
 1749              	 .loc 2 611 0 is_stmt 1
 1750 0032 3A68     	 ldr r2,[r7]
 1751 0034 BB68     	 ldr r3,[r7,#8]
 1752 0036 9A42     	 cmp r2,r3
 1753 0038 02D2     	 bcs .L74
 612:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 613:../Libraries/XMCLib/src/xmc_vadc.c **** 	  slave_group++;
 1754              	 .loc 2 613 0
 1755 003a 3B68     	 ldr r3,[r7]
 1756 003c 0133     	 add r3,r3,#1
 1757 003e 3B60     	 str r3,[r7]
 1758              	.L74:
 614:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 615:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR &= ~(1U << (slave_group + XMC_VADC_SYNCTR_START_LOCATION));
 1759              	 .loc 2 615 0
 1760 0040 7B68     	 ldr r3,[r7,#4]
 1761 0042 C022     	 mov r2,#192
 1762 0044 9B58     	 ldr r3,[r3,r2]
 1763 0046 3A68     	 ldr r2,[r7]
 1764 0048 0332     	 add r2,r2,#3
 1765 004a 111C     	 mov r1,r2
 1766 004c 0122     	 mov r2,#1
 1767 004e 8A40     	 lsl r2,r2,r1
 1768 0050 D243     	 mvn r2,r2
 1769 0052 1A40     	 and r2,r3
 1770 0054 7B68     	 ldr r3,[r7,#4]
 1771 0056 C021     	 mov r1,#192
 1772 0058 5A50     	 str r2,[r3,r1]
 616:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1773              	 .loc 2 616 0
 1774 005a BD46     	 mov sp,r7
 1775 005c 04B0     	 add sp,sp,#16
 1776              	 
 1777 005e 80BD     	 pop {r7,pc}
 1778              	.L76:
 1779              	 .align 2
 1780              	.L75:
 1781 0060 00000000 	 .word g_xmc_vadc_group_array
 1782              	 .cfi_endproc
 1783              	.LFE167:
 1785              	 .section .text.XMC_VADC_GROUP_SetSyncSlaveReadySignal,"ax",%progbits
 1786              	 .align 2
 1787              	 .global XMC_VADC_GROUP_SetSyncSlaveReadySignal
 1788              	 .code 16
 1789              	 .thumb_func
 1791              	XMC_VADC_GROUP_SetSyncSlaveReadySignal:
 1792              	.LFB168:
 617:../Libraries/XMCLib/src/xmc_vadc.c **** 
 618:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure EVAL bit in the slave groups*/
 619:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncSlaveReadySignal(XMC_VADC_GROUP_t *const group_ptr,
 620:../Libraries/XMCLib/src/xmc_vadc.c ****                                             uint32_t eval_waiting_group,
 621:../Libraries/XMCLib/src/xmc_vadc.c ****                                             uint32_t eval_origin_group)
 622:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1793              	 .loc 2 622 0
 1794              	 .cfi_startproc
 1795 0000 80B5     	 push {r7,lr}
 1796              	.LCFI79:
 1797              	 .cfi_def_cfa_offset 8
 1798              	 .cfi_offset 7,-8
 1799              	 .cfi_offset 14,-4
 1800 0002 84B0     	 sub sp,sp,#16
 1801              	.LCFI80:
 1802              	 .cfi_def_cfa_offset 24
 1803 0004 00AF     	 add r7,sp,#0
 1804              	.LCFI81:
 1805              	 .cfi_def_cfa_register 7
 1806 0006 F860     	 str r0,[r7,#12]
 1807 0008 B960     	 str r1,[r7,#8]
 1808 000a 7A60     	 str r2,[r7,#4]
 623:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlaveReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
 624:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlaveReadySignal:Wrong Group numbers", (eval_waiting_group == e
 625:../Libraries/XMCLib/src/xmc_vadc.c **** 
 626:../Libraries/XMCLib/src/xmc_vadc.c ****   if(eval_origin_group < eval_waiting_group)
 1809              	 .loc 2 626 0
 1810 000c 7A68     	 ldr r2,[r7,#4]
 1811 000e BB68     	 ldr r3,[r7,#8]
 1812 0010 9A42     	 cmp r2,r3
 1813 0012 02D2     	 bcs .L78
 627:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 628:../Libraries/XMCLib/src/xmc_vadc.c **** 	  eval_origin_group++;
 1814              	 .loc 2 628 0
 1815 0014 7B68     	 ldr r3,[r7,#4]
 1816 0016 0133     	 add r3,r3,#1
 1817 0018 7B60     	 str r3,[r7,#4]
 1818              	.L78:
 629:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 630:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR |= (1U << (eval_origin_group + XMC_VADC_SYNCTR_START_LOCATION));
 1819              	 .loc 2 630 0
 1820 001a FB68     	 ldr r3,[r7,#12]
 1821 001c C022     	 mov r2,#192
 1822 001e 9A58     	 ldr r2,[r3,r2]
 1823 0020 7B68     	 ldr r3,[r7,#4]
 1824 0022 0333     	 add r3,r3,#3
 1825 0024 191C     	 mov r1,r3
 1826 0026 0123     	 mov r3,#1
 1827 0028 8B40     	 lsl r3,r3,r1
 1828 002a 1A43     	 orr r2,r3
 1829 002c FB68     	 ldr r3,[r7,#12]
 1830 002e C021     	 mov r1,#192
 1831 0030 5A50     	 str r2,[r3,r1]
 631:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1832              	 .loc 2 631 0
 1833 0032 BD46     	 mov sp,r7
 1834 0034 04B0     	 add sp,sp,#16
 1835              	 
 1836 0036 80BD     	 pop {r7,pc}
 1837              	 .cfi_endproc
 1838              	.LFE168:
 1840              	 .section .text.XMC_VADC_GROUP_EnableChannelSyncRequest,"ax",%progbits
 1841              	 .align 2
 1842              	 .global XMC_VADC_GROUP_EnableChannelSyncRequest
 1843              	 .code 16
 1844              	 .thumb_func
 1846              	XMC_VADC_GROUP_EnableChannelSyncRequest:
 1847              	.LFB169:
 632:../Libraries/XMCLib/src/xmc_vadc.c **** 
 633:../Libraries/XMCLib/src/xmc_vadc.c **** 
 634:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the synchronous conversion feature - Applicable only to kernel configured as maste
 635:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
 636:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1848              	 .loc 2 636 0
 1849              	 .cfi_startproc
 1850 0000 80B5     	 push {r7,lr}
 1851              	.LCFI82:
 1852              	 .cfi_def_cfa_offset 8
 1853              	 .cfi_offset 7,-8
 1854              	 .cfi_offset 14,-4
 1855 0002 84B0     	 sub sp,sp,#16
 1856              	.LCFI83:
 1857              	 .cfi_def_cfa_offset 24
 1858 0004 00AF     	 add r7,sp,#0
 1859              	.LCFI84:
 1860              	 .cfi_def_cfa_register 7
 1861 0006 7860     	 str r0,[r7,#4]
 1862 0008 3960     	 str r1,[r7]
 637:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 638:../Libraries/XMCLib/src/xmc_vadc.c **** 
 639:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_EnableChannelSyncRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
 640:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_EnableChannelSyncRequest:Wrong Channel Number",
 641:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
 642:../Libraries/XMCLib/src/xmc_vadc.c **** 
 643:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr  = group_ptr->SYNCTR;
 1863              	 .loc 2 643 0
 1864 000a 7B68     	 ldr r3,[r7,#4]
 1865 000c C022     	 mov r2,#192
 1866 000e 9B58     	 ldr r3,[r3,r2]
 1867 0010 FB60     	 str r3,[r7,#12]
 644:../Libraries/XMCLib/src/xmc_vadc.c **** 
 645:../Libraries/XMCLib/src/xmc_vadc.c ****   if (!(synctr &  (uint32_t)VADC_G_SYNCTR_STSEL_Msk))
 1868              	 .loc 2 645 0
 1869 0012 FB68     	 ldr r3,[r7,#12]
 1870 0014 0322     	 mov r2,#3
 1871 0016 1340     	 and r3,r2
 1872 0018 0DD1     	 bne .L79
 646:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 647:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->CHCTR[ch_num] |= (uint32_t)((uint32_t)1 << VADC_G_CHCTR_SYNC_Pos);
 1873              	 .loc 2 647 0
 1874 001a 7B68     	 ldr r3,[r7,#4]
 1875 001c 3A68     	 ldr r2,[r7]
 1876 001e 8032     	 add r2,r2,#128
 1877 0020 9200     	 lsl r2,r2,#2
 1878 0022 D358     	 ldr r3,[r2,r3]
 1879 0024 8022     	 mov r2,#128
 1880 0026 D200     	 lsl r2,r2,#3
 1881 0028 1A43     	 orr r2,r3
 1882 002a 111C     	 mov r1,r2
 1883 002c 7B68     	 ldr r3,[r7,#4]
 1884 002e 3A68     	 ldr r2,[r7]
 1885 0030 8032     	 add r2,r2,#128
 1886 0032 9200     	 lsl r2,r2,#2
 1887 0034 D150     	 str r1,[r2,r3]
 1888              	.L79:
 648:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 649:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1889              	 .loc 2 649 0
 1890 0036 BD46     	 mov sp,r7
 1891 0038 04B0     	 add sp,sp,#16
 1892              	 
 1893 003a 80BD     	 pop {r7,pc}
 1894              	 .cfi_endproc
 1895              	.LFE169:
 1897              	 .section .text.XMC_VADC_GROUP_DisableChannelSyncRequest,"ax",%progbits
 1898              	 .align 2
 1899              	 .global XMC_VADC_GROUP_DisableChannelSyncRequest
 1900              	 .code 16
 1901              	 .thumb_func
 1903              	XMC_VADC_GROUP_DisableChannelSyncRequest:
 1904              	.LFB170:
 650:../Libraries/XMCLib/src/xmc_vadc.c **** 
 651:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable synchronous conversion feature */
 652:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
 653:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1905              	 .loc 2 653 0
 1906              	 .cfi_startproc
 1907 0000 80B5     	 push {r7,lr}
 1908              	.LCFI85:
 1909              	 .cfi_def_cfa_offset 8
 1910              	 .cfi_offset 7,-8
 1911              	 .cfi_offset 14,-4
 1912 0002 84B0     	 sub sp,sp,#16
 1913              	.LCFI86:
 1914              	 .cfi_def_cfa_offset 24
 1915 0004 00AF     	 add r7,sp,#0
 1916              	.LCFI87:
 1917              	 .cfi_def_cfa_register 7
 1918 0006 7860     	 str r0,[r7,#4]
 1919 0008 3960     	 str r1,[r7]
 654:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    synctr;
 655:../Libraries/XMCLib/src/xmc_vadc.c **** 
 656:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_DisableChannelSyncRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
 657:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_DisableChannelSyncRequest:Wrong Channel Number",
 658:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
 659:../Libraries/XMCLib/src/xmc_vadc.c **** 
 660:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr  = group_ptr->SYNCTR;
 1920              	 .loc 2 660 0
 1921 000a 7B68     	 ldr r3,[r7,#4]
 1922 000c C022     	 mov r2,#192
 1923 000e 9B58     	 ldr r3,[r3,r2]
 1924 0010 FB60     	 str r3,[r7,#12]
 661:../Libraries/XMCLib/src/xmc_vadc.c **** 
 662:../Libraries/XMCLib/src/xmc_vadc.c ****   if (synctr &  (uint32_t)VADC_G_SYNCTR_STSEL_Msk)
 1925              	 .loc 2 662 0
 1926 0012 FB68     	 ldr r3,[r7,#12]
 1927 0014 0322     	 mov r2,#3
 1928 0016 1340     	 and r3,r2
 1929 0018 0CD0     	 beq .L81
 663:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 664:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->CHCTR[ch_num] &= ~((uint32_t)VADC_G_CHCTR_SYNC_Msk);
 1930              	 .loc 2 664 0
 1931 001a 7B68     	 ldr r3,[r7,#4]
 1932 001c 3A68     	 ldr r2,[r7]
 1933 001e 8032     	 add r2,r2,#128
 1934 0020 9200     	 lsl r2,r2,#2
 1935 0022 D358     	 ldr r3,[r2,r3]
 1936 0024 054A     	 ldr r2,.L83
 1937 0026 1340     	 and r3,r2
 1938 0028 191C     	 mov r1,r3
 1939 002a 7B68     	 ldr r3,[r7,#4]
 1940 002c 3A68     	 ldr r2,[r7]
 1941 002e 8032     	 add r2,r2,#128
 1942 0030 9200     	 lsl r2,r2,#2
 1943 0032 D150     	 str r1,[r2,r3]
 1944              	.L81:
 665:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 666:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1945              	 .loc 2 666 0
 1946 0034 BD46     	 mov sp,r7
 1947 0036 04B0     	 add sp,sp,#16
 1948              	 
 1949 0038 80BD     	 pop {r7,pc}
 1950              	.L84:
 1951 003a C046     	 .align 2
 1952              	.L83:
 1953 003c FFFBFFFF 	 .word -1025
 1954              	 .cfi_endproc
 1955              	.LFE170:
 1957              	 .section .text.XMC_VADC_GROUP_IsConverterBusy,"ax",%progbits
 1958              	 .align 2
 1959              	 .global XMC_VADC_GROUP_IsConverterBusy
 1960              	 .code 16
 1961              	 .thumb_func
 1963              	XMC_VADC_GROUP_IsConverterBusy:
 1964              	.LFB171:
 667:../Libraries/XMCLib/src/xmc_vadc.c **** 
 668:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the converter state - Idle vs Busy */ 
 669:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr)
 670:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1965              	 .loc 2 670 0
 1966              	 .cfi_startproc
 1967 0000 80B5     	 push {r7,lr}
 1968              	.LCFI88:
 1969              	 .cfi_def_cfa_offset 8
 1970              	 .cfi_offset 7,-8
 1971              	 .cfi_offset 14,-4
 1972 0002 84B0     	 sub sp,sp,#16
 1973              	.LCFI89:
 1974              	 .cfi_def_cfa_offset 24
 1975 0004 00AF     	 add r7,sp,#0
 1976              	.LCFI90:
 1977              	 .cfi_def_cfa_register 7
 1978 0006 7860     	 str r0,[r7,#4]
 671:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t      arbcfg;
 672:../Libraries/XMCLib/src/xmc_vadc.c **** 
 673:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsConverterBusy:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
 674:../Libraries/XMCLib/src/xmc_vadc.c **** 
 675:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg  = group_ptr->ARBCFG;
 1979              	 .loc 2 675 0
 1980 0008 7B68     	 ldr r3,[r7,#4]
 1981 000a 8022     	 mov r2,#128
 1982 000c 9B58     	 ldr r3,[r3,r2]
 1983 000e FB60     	 str r3,[r7,#12]
 676:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg &= (uint32_t)VADC_G_ARBCFG_BUSY_Msk;
 1984              	 .loc 2 676 0
 1985 0010 FA68     	 ldr r2,[r7,#12]
 1986 0012 8023     	 mov r3,#128
 1987 0014 DB05     	 lsl r3,r3,#23
 1988 0016 1340     	 and r3,r2
 1989 0018 FB60     	 str r3,[r7,#12]
 677:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg = arbcfg >> VADC_G_ARBCFG_BUSY_Pos;
 1990              	 .loc 2 677 0
 1991 001a FB68     	 ldr r3,[r7,#12]
 1992 001c 9B0F     	 lsr r3,r3,#30
 1993 001e FB60     	 str r3,[r7,#12]
 678:../Libraries/XMCLib/src/xmc_vadc.c **** 
 679:../Libraries/XMCLib/src/xmc_vadc.c ****   return( (XMC_VADC_GROUP_STATE_t)arbcfg);
 1994              	 .loc 2 679 0
 1995 0020 FB68     	 ldr r3,[r7,#12]
 1996 0022 DBB2     	 uxtb r3,r3
 680:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1997              	 .loc 2 680 0
 1998 0024 181C     	 mov r0,r3
 1999 0026 BD46     	 mov sp,r7
 2000 0028 04B0     	 add sp,sp,#16
 2001              	 
 2002 002a 80BD     	 pop {r7,pc}
 2003              	 .cfi_endproc
 2004              	.LFE171:
 2006              	 .section .text.XMC_VADC_GROUP_SetBoundaries,"ax",%progbits
 2007              	 .align 2
 2008              	 .global XMC_VADC_GROUP_SetBoundaries
 2009              	 .code 16
 2010              	 .thumb_func
 2012              	XMC_VADC_GROUP_SetBoundaries:
 2013              	.LFB172:
 681:../Libraries/XMCLib/src/xmc_vadc.c **** 
 682:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set boundaries for conversion results */
 683:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr, const uint32_t boundary0, cons
 684:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2014              	 .loc 2 684 0
 2015              	 .cfi_startproc
 2016 0000 80B5     	 push {r7,lr}
 2017              	.LCFI91:
 2018              	 .cfi_def_cfa_offset 8
 2019              	 .cfi_offset 7,-8
 2020              	 .cfi_offset 14,-4
 2021 0002 86B0     	 sub sp,sp,#24
 2022              	.LCFI92:
 2023              	 .cfi_def_cfa_offset 32
 2024 0004 00AF     	 add r7,sp,#0
 2025              	.LCFI93:
 2026              	 .cfi_def_cfa_register 7
 2027 0006 F860     	 str r0,[r7,#12]
 2028 0008 B960     	 str r1,[r7,#8]
 2029 000a 7A60     	 str r2,[r7,#4]
 685:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t bound;
 686:../Libraries/XMCLib/src/xmc_vadc.c **** 
 687:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetBoundaries:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
 688:../Libraries/XMCLib/src/xmc_vadc.c **** 
 689:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 690:../Libraries/XMCLib/src/xmc_vadc.c ****   bound  = group_ptr->BOUND;
 2030              	 .loc 2 690 0
 2031 000c FB68     	 ldr r3,[r7,#12]
 2032 000e B822     	 mov r2,#184
 2033 0010 9B58     	 ldr r3,[r3,r2]
 2034 0012 7B61     	 str r3,[r7,#20]
 691:../Libraries/XMCLib/src/xmc_vadc.c ****   bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY0_Msk);
 2035              	 .loc 2 691 0
 2036 0014 7B69     	 ldr r3,[r7,#20]
 2037 0016 1B0B     	 lsr r3,r3,#12
 2038 0018 1B03     	 lsl r3,r3,#12
 2039 001a 7B61     	 str r3,[r7,#20]
 692:../Libraries/XMCLib/src/xmc_vadc.c ****   bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY1_Msk);
 2040              	 .loc 2 692 0
 2041 001c 7B69     	 ldr r3,[r7,#20]
 2042 001e 094A     	 ldr r2,.L88
 2043 0020 1340     	 and r3,r2
 2044 0022 7B61     	 str r3,[r7,#20]
 693:../Libraries/XMCLib/src/xmc_vadc.c ****   bound |= (uint32_t) ((uint32_t) boundary0 << VADC_G_BOUND_BOUNDARY0_Pos);
 2045              	 .loc 2 693 0
 2046 0024 7A69     	 ldr r2,[r7,#20]
 2047 0026 BB68     	 ldr r3,[r7,#8]
 2048 0028 1343     	 orr r3,r2
 2049 002a 7B61     	 str r3,[r7,#20]
 694:../Libraries/XMCLib/src/xmc_vadc.c ****   bound |= (uint32_t) ((uint32_t) boundary1 << VADC_G_BOUND_BOUNDARY1_Pos);
 2050              	 .loc 2 694 0
 2051 002c 7B68     	 ldr r3,[r7,#4]
 2052 002e 1B04     	 lsl r3,r3,#16
 2053 0030 7A69     	 ldr r2,[r7,#20]
 2054 0032 1343     	 orr r3,r2
 2055 0034 7B61     	 str r3,[r7,#20]
 695:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = bound;
 2056              	 .loc 2 695 0
 2057 0036 FB68     	 ldr r3,[r7,#12]
 2058 0038 B821     	 mov r1,#184
 2059 003a 7A69     	 ldr r2,[r7,#20]
 2060 003c 5A50     	 str r2,[r3,r1]
 696:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2061              	 .loc 2 696 0
 2062 003e BD46     	 mov sp,r7
 2063 0040 06B0     	 add sp,sp,#24
 2064              	 
 2065 0042 80BD     	 pop {r7,pc}
 2066              	.L89:
 2067              	 .align 2
 2068              	.L88:
 2069 0044 FFFF00F0 	 .word -268369921
 2070              	 .cfi_endproc
 2071              	.LFE172:
 2073              	 .section .text.XMC_VADC_GROUP_SetIndividualBoundary,"ax",%progbits
 2074              	 .align 2
 2075              	 .global XMC_VADC_GROUP_SetIndividualBoundary
 2076              	 .code 16
 2077              	 .thumb_func
 2079              	XMC_VADC_GROUP_SetIndividualBoundary:
 2080              	.LFB173:
 697:../Libraries/XMCLib/src/xmc_vadc.c **** 
 698:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an individual boundary for conversion results */
 699:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
 700:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_CHANNEL_BOUNDARY_t selection,
 701:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const uint16_t boundary_value)
 702:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2081              	 .loc 2 702 0
 2082              	 .cfi_startproc
 2083 0000 80B5     	 push {r7,lr}
 2084              	.LCFI94:
 2085              	 .cfi_def_cfa_offset 8
 2086              	 .cfi_offset 7,-8
 2087              	 .cfi_offset 14,-4
 2088 0002 84B0     	 sub sp,sp,#16
 2089              	.LCFI95:
 2090              	 .cfi_def_cfa_offset 24
 2091 0004 00AF     	 add r7,sp,#0
 2092              	.LCFI96:
 2093              	 .cfi_def_cfa_register 7
 2094 0006 7860     	 str r0,[r7,#4]
 2095 0008 081C     	 mov r0,r1
 2096 000a 111C     	 mov r1,r2
 2097 000c FB1C     	 add r3,r7,#3
 2098 000e 021C     	 add r2,r0,#0
 2099 0010 1A70     	 strb r2,[r3]
 2100 0012 3B1C     	 mov r3,r7
 2101 0014 0A1C     	 add r2,r1,#0
 2102 0016 1A80     	 strh r2,[r3]
 703:../Libraries/XMCLib/src/xmc_vadc.c **** 
 704:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t bound;
 705:../Libraries/XMCLib/src/xmc_vadc.c **** 
 706:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetIndividualBoundary:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
 707:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetIndividualBoundary:Wrong Boundary Selection",
 708:../Libraries/XMCLib/src/xmc_vadc.c ****                ((XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 == selection) ||
 709:../Libraries/XMCLib/src/xmc_vadc.c ****                 (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1 == selection)))
 710:../Libraries/XMCLib/src/xmc_vadc.c **** 
 711:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 712:../Libraries/XMCLib/src/xmc_vadc.c ****   bound  = group_ptr->BOUND;
 2103              	 .loc 2 712 0
 2104 0018 7B68     	 ldr r3,[r7,#4]
 2105 001a B822     	 mov r2,#184
 2106 001c 9B58     	 ldr r3,[r3,r2]
 2107 001e FB60     	 str r3,[r7,#12]
 713:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 == selection)
 2108              	 .loc 2 713 0
 2109 0020 FB1C     	 add r3,r7,#3
 2110 0022 1B78     	 ldrb r3,[r3]
 2111 0024 002B     	 cmp r3,#0
 2112 0026 09D1     	 bne .L91
 714:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 715:../Libraries/XMCLib/src/xmc_vadc.c ****     bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY0_Msk);
 2113              	 .loc 2 715 0
 2114 0028 FB68     	 ldr r3,[r7,#12]
 2115 002a 1B0B     	 lsr r3,r3,#12
 2116 002c 1B03     	 lsl r3,r3,#12
 2117 002e FB60     	 str r3,[r7,#12]
 716:../Libraries/XMCLib/src/xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY0_Pos);
 2118              	 .loc 2 716 0
 2119 0030 3B1C     	 mov r3,r7
 2120 0032 1B88     	 ldrh r3,[r3]
 2121 0034 FA68     	 ldr r2,[r7,#12]
 2122 0036 1343     	 orr r3,r2
 2123 0038 FB60     	 str r3,[r7,#12]
 2124 003a 0DE0     	 b .L92
 2125              	.L91:
 717:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 718:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1 == selection)
 2126              	 .loc 2 718 0
 2127 003c FB1C     	 add r3,r7,#3
 2128 003e 1B78     	 ldrb r3,[r3]
 2129 0040 012B     	 cmp r3,#1
 2130 0042 09D1     	 bne .L92
 719:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 720:../Libraries/XMCLib/src/xmc_vadc.c ****     bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY1_Msk);
 2131              	 .loc 2 720 0
 2132 0044 FB68     	 ldr r3,[r7,#12]
 2133 0046 084A     	 ldr r2,.L93
 2134 0048 1340     	 and r3,r2
 2135 004a FB60     	 str r3,[r7,#12]
 721:../Libraries/XMCLib/src/xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY1_Pos);
 2136              	 .loc 2 721 0
 2137 004c 3B1C     	 mov r3,r7
 2138 004e 1B88     	 ldrh r3,[r3]
 2139 0050 1B04     	 lsl r3,r3,#16
 2140 0052 FA68     	 ldr r2,[r7,#12]
 2141 0054 1343     	 orr r3,r2
 2142 0056 FB60     	 str r3,[r7,#12]
 2143              	.L92:
 722:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 723:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 724:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 725:../Libraries/XMCLib/src/xmc_vadc.c ****     /* For MISRA*/
 726:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 727:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = bound;
 2144              	 .loc 2 727 0
 2145 0058 7B68     	 ldr r3,[r7,#4]
 2146 005a B821     	 mov r1,#184
 2147 005c FA68     	 ldr r2,[r7,#12]
 2148 005e 5A50     	 str r2,[r3,r1]
 728:../Libraries/XMCLib/src/xmc_vadc.c **** 
 729:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2149              	 .loc 2 729 0
 2150 0060 BD46     	 mov sp,r7
 2151 0062 04B0     	 add sp,sp,#16
 2152              	 
 2153 0064 80BD     	 pop {r7,pc}
 2154              	.L94:
 2155 0066 C046     	 .align 2
 2156              	.L93:
 2157 0068 FFFF00F0 	 .word -268369921
 2158              	 .cfi_endproc
 2159              	.LFE173:
 2161              	 .section .text.XMC_VADC_GROUP_TriggerServiceRequest,"ax",%progbits
 2162              	 .align 2
 2163              	 .global XMC_VADC_GROUP_TriggerServiceRequest
 2164              	 .code 16
 2165              	 .thumb_func
 2167              	XMC_VADC_GROUP_TriggerServiceRequest:
 2168              	.LFB174:
 730:../Libraries/XMCLib/src/xmc_vadc.c **** 
 731:../Libraries/XMCLib/src/xmc_vadc.c **** /* Manually assert service request (Interrupt) to NVIC */
 732:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr,
 733:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const uint32_t sr_num,
 734:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_IRQ_t type)
 735:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2169              	 .loc 2 735 0
 2170              	 .cfi_startproc
 2171 0000 80B5     	 push {r7,lr}
 2172              	.LCFI97:
 2173              	 .cfi_def_cfa_offset 8
 2174              	 .cfi_offset 7,-8
 2175              	 .cfi_offset 14,-4
 2176 0002 86B0     	 sub sp,sp,#24
 2177              	.LCFI98:
 2178              	 .cfi_def_cfa_offset 32
 2179 0004 00AF     	 add r7,sp,#0
 2180              	.LCFI99:
 2181              	 .cfi_def_cfa_register 7
 2182 0006 F860     	 str r0,[r7,#12]
 2183 0008 B960     	 str r1,[r7,#8]
 2184 000a FB1D     	 add r3,r7,#7
 2185 000c 1A70     	 strb r2,[r3]
 736:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sract;
 737:../Libraries/XMCLib/src/xmc_vadc.c **** 
 738:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
 739:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong SR number", (sr_num <= XMC_VADC_SR_SHARED_
 740:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong SR type", ((type)<= XMC_VADC_GROUP_IRQ_SHA
 741:../Libraries/XMCLib/src/xmc_vadc.c **** 
 742:../Libraries/XMCLib/src/xmc_vadc.c ****   sract = group_ptr->SRACT;
 2186              	 .loc 2 742 0
 2187 000e FA68     	 ldr r2,[r7,#12]
 2188 0010 E423     	 mov r3,#228
 2189 0012 5B00     	 lsl r3,r3,#1
 2190 0014 D358     	 ldr r3,[r2,r3]
 2191 0016 7B61     	 str r3,[r7,#20]
 743:../Libraries/XMCLib/src/xmc_vadc.c **** 
 744:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_GROUP_IRQ_KERNEL == type)
 2192              	 .loc 2 744 0
 2193 0018 FB1D     	 add r3,r7,#7
 2194 001a 1B78     	 ldrb r3,[r3]
 2195 001c 002B     	 cmp r3,#0
 2196 001e 07D1     	 bne .L96
 745:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 746:../Libraries/XMCLib/src/xmc_vadc.c ****     sract |= (uint32_t)((uint32_t)1 << sr_num);
 2197              	 .loc 2 746 0
 2198 0020 BB68     	 ldr r3,[r7,#8]
 2199 0022 0122     	 mov r2,#1
 2200 0024 9A40     	 lsl r2,r2,r3
 2201 0026 131C     	 mov r3,r2
 2202 0028 7A69     	 ldr r2,[r7,#20]
 2203 002a 1343     	 orr r3,r2
 2204 002c 7B61     	 str r3,[r7,#20]
 2205 002e 07E0     	 b .L97
 2206              	.L96:
 747:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 748:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 749:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 750:../Libraries/XMCLib/src/xmc_vadc.c ****     sract |= (uint32_t)((uint32_t)1 << (sr_num + (uint32_t)8));
 2207              	 .loc 2 750 0
 2208 0030 BB68     	 ldr r3,[r7,#8]
 2209 0032 0833     	 add r3,r3,#8
 2210 0034 1A1C     	 mov r2,r3
 2211 0036 0123     	 mov r3,#1
 2212 0038 9340     	 lsl r3,r3,r2
 2213 003a 7A69     	 ldr r2,[r7,#20]
 2214 003c 1343     	 orr r3,r2
 2215 003e 7B61     	 str r3,[r7,#20]
 2216              	.L97:
 751:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 752:../Libraries/XMCLib/src/xmc_vadc.c **** 
 753:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SRACT = sract;
 2217              	 .loc 2 753 0
 2218 0040 FA68     	 ldr r2,[r7,#12]
 2219 0042 E423     	 mov r3,#228
 2220 0044 5B00     	 lsl r3,r3,#1
 2221 0046 7969     	 ldr r1,[r7,#20]
 2222 0048 D150     	 str r1,[r2,r3]
 754:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2223              	 .loc 2 754 0
 2224 004a BD46     	 mov sp,r7
 2225 004c 06B0     	 add sp,sp,#24
 2226              	 
 2227 004e 80BD     	 pop {r7,pc}
 2228              	 .cfi_endproc
 2229              	.LFE174:
 2231              	 .section .text.XMC_VADC_GROUP_SetBoundaryEventInterruptNode,"ax",%progbits
 2232              	 .align 2
 2233              	 .global XMC_VADC_GROUP_SetBoundaryEventInterruptNode
 2234              	 .code 16
 2235              	 .thumb_func
 2237              	XMC_VADC_GROUP_SetBoundaryEventInterruptNode:
 2238              	.LFB175:
 755:../Libraries/XMCLib/src/xmc_vadc.c **** 
 756:../Libraries/XMCLib/src/xmc_vadc.c **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
 757:../Libraries/XMCLib/src/xmc_vadc.c **** 
 758:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the SR line for the Boundary flag node pointer*/
 759:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
 760:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                   const uint8_t boundary_flag_num,
 761:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                   const XMC_VADC_BOUNDARY_NODE_t sr
 762:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2239              	 .loc 2 762 0
 2240              	 .cfi_startproc
 2241 0000 80B5     	 push {r7,lr}
 2242              	.LCFI100:
 2243              	 .cfi_def_cfa_offset 8
 2244              	 .cfi_offset 7,-8
 2245              	 .cfi_offset 14,-4
 2246 0002 84B0     	 sub sp,sp,#16
 2247              	.LCFI101:
 2248              	 .cfi_def_cfa_offset 24
 2249 0004 00AF     	 add r7,sp,#0
 2250              	.LCFI102:
 2251              	 .cfi_def_cfa_register 7
 2252 0006 7860     	 str r0,[r7,#4]
 2253 0008 081C     	 mov r0,r1
 2254 000a 111C     	 mov r1,r2
 2255 000c FB1C     	 add r3,r7,#3
 2256 000e 021C     	 add r2,r0,#0
 2257 0010 1A70     	 strb r2,[r3]
 2258 0012 BB1C     	 add r3,r7,#2
 2259 0014 0A1C     	 add r2,r1,#0
 2260 0016 1A70     	 strb r2,[r3]
 763:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t flag_pos;
 764:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetBoundaryEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GRO
 765:../Libraries/XMCLib/src/xmc_vadc.c **** 
 766:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the GxBFLNP */
 767:../Libraries/XMCLib/src/xmc_vadc.c ****   flag_pos = (uint32_t)boundary_flag_num << (uint32_t)2;
 2261              	 .loc 2 767 0
 2262 0018 FB1C     	 add r3,r7,#3
 2263 001a 1B78     	 ldrb r3,[r3]
 2264 001c 9B00     	 lsl r3,r3,#2
 2265 001e FB60     	 str r3,[r7,#12]
 768:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLNP &= ~((uint32_t)VADC_G_BFLNP_BFL0NP_Msk << flag_pos);
 2266              	 .loc 2 768 0
 2267 0020 7B68     	 ldr r3,[r7,#4]
 2268 0022 D422     	 mov r2,#212
 2269 0024 9B58     	 ldr r3,[r3,r2]
 2270 0026 FA68     	 ldr r2,[r7,#12]
 2271 0028 0F21     	 mov r1,#15
 2272 002a 9140     	 lsl r1,r1,r2
 2273 002c 0A1C     	 mov r2,r1
 2274 002e D243     	 mvn r2,r2
 2275 0030 1A40     	 and r2,r3
 2276 0032 7B68     	 ldr r3,[r7,#4]
 2277 0034 D421     	 mov r1,#212
 2278 0036 5A50     	 str r2,[r3,r1]
 769:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLNP |= (uint32_t)sr << flag_pos;
 2279              	 .loc 2 769 0
 2280 0038 7B68     	 ldr r3,[r7,#4]
 2281 003a D422     	 mov r2,#212
 2282 003c 9A58     	 ldr r2,[r3,r2]
 2283 003e BB1C     	 add r3,r7,#2
 2284 0040 1978     	 ldrb r1,[r3]
 2285 0042 FB68     	 ldr r3,[r7,#12]
 2286 0044 9940     	 lsl r1,r1,r3
 2287 0046 0B1C     	 mov r3,r1
 2288 0048 1A43     	 orr r2,r3
 2289 004a 7B68     	 ldr r3,[r7,#4]
 2290 004c D421     	 mov r1,#212
 2291 004e 5A50     	 str r2,[r3,r1]
 770:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2292              	 .loc 2 770 0
 2293 0050 BD46     	 mov sp,r7
 2294 0052 04B0     	 add sp,sp,#16
 2295              	 
 2296 0054 80BD     	 pop {r7,pc}
 2297              	 .cfi_endproc
 2298              	.LFE175:
 2300 0056 C046     	 .section .text.XMC_VADC_GLOBAL_SHS_Init,"ax",%progbits
 2301              	 .align 2
 2302              	 .global XMC_VADC_GLOBAL_SHS_Init
 2303              	 .code 16
 2304              	 .thumb_func
 2306              	XMC_VADC_GLOBAL_SHS_Init:
 2307              	.LFB176:
 771:../Libraries/XMCLib/src/xmc_vadc.c **** 
 772:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 773:../Libraries/XMCLib/src/xmc_vadc.c **** 
 774:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 775:../Libraries/XMCLib/src/xmc_vadc.c **** 
 776:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 777:../Libraries/XMCLib/src/xmc_vadc.c **** 
 778:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to Initialize the Sample and hold features*/
 779:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONFI
 780:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2308              	 .loc 2 780 0
 2309              	 .cfi_startproc
 2310 0000 80B5     	 push {r7,lr}
 2311              	.LCFI103:
 2312              	 .cfi_def_cfa_offset 8
 2313              	 .cfi_offset 7,-8
 2314              	 .cfi_offset 14,-4
 2315 0002 82B0     	 sub sp,sp,#8
 2316              	.LCFI104:
 2317              	 .cfi_def_cfa_offset 16
 2318 0004 00AF     	 add r7,sp,#0
 2319              	.LCFI105:
 2320              	 .cfi_def_cfa_register 7
 2321 0006 7860     	 str r0,[r7,#4]
 2322 0008 3960     	 str r1,[r7]
 781:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_Init:Wrong SHS Pointer", (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(voi
 782:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_Init:Wrong Index number",(config == (XMC_VADC_GLOBAL_SHS_CONFIG_t
 783:../Libraries/XMCLib/src/xmc_vadc.c **** 
 784:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Initialize the SHS Configuration register*/
 785:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->SHSCFG = (uint32_t)((uint32_t)config->shscfg | (uint32_t)SHS_SHSCFG_SCWC_Msk);
 2323              	 .loc 2 785 0
 2324 000a 3B68     	 ldr r3,[r7]
 2325 000c 1B68     	 ldr r3,[r3]
 2326 000e 8022     	 mov r2,#128
 2327 0010 1202     	 lsl r2,r2,#8
 2328 0012 1A43     	 orr r2,r3
 2329 0014 7B68     	 ldr r3,[r7,#4]
 2330 0016 1A64     	 str r2,[r3,#64]
 786:../Libraries/XMCLib/src/xmc_vadc.c **** 
 787:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 788:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Select the Calibration order*/
 789:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALORD_Msk);
 2331              	 .loc 2 789 0
 2332 0018 7B68     	 ldr r3,[r7,#4]
 2333 001a BC22     	 mov r2,#188
 2334 001c 9B58     	 ldr r3,[r3,r2]
 2335 001e 0122     	 mov r2,#1
 2336 0020 9343     	 bic r3,r2
 2337 0022 1A1C     	 mov r2,r3
 2338 0024 7B68     	 ldr r3,[r7,#4]
 2339 0026 BC21     	 mov r1,#188
 2340 0028 5A50     	 str r2,[r3,r1]
 790:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->CALCTR |=  (uint32_t) ((uint32_t)config->calibration_order << SHS_CALCTR_CALORD_Pos);
 2341              	 .loc 2 790 0
 2342 002a 7B68     	 ldr r3,[r7,#4]
 2343 002c BC22     	 mov r2,#188
 2344 002e 9B58     	 ldr r3,[r3,r2]
 2345 0030 3A68     	 ldr r2,[r7]
 2346 0032 1279     	 ldrb r2,[r2,#4]
 2347 0034 1A43     	 orr r2,r3
 2348 0036 7B68     	 ldr r3,[r7,#4]
 2349 0038 BC21     	 mov r1,#188
 2350 003a 5A50     	 str r2,[r3,r1]
 791:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 792:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2351              	 .loc 2 792 0
 2352 003c BD46     	 mov sp,r7
 2353 003e 02B0     	 add sp,sp,#8
 2354              	 
 2355 0040 80BD     	 pop {r7,pc}
 2356              	 .cfi_endproc
 2357              	.LFE176:
 2359 0042 C046     	 .section .text.XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode,"ax",%progbits
 2360              	 .align 2
 2361              	 .global XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode
 2362              	 .code 16
 2363              	 .thumb_func
 2365              	XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:
 2366              	.LFB177:
 793:../Libraries/XMCLib/src/xmc_vadc.c **** 
 794:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 795:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the accelerated mode of conversion */
 796:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROUP
 797:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2367              	 .loc 2 797 0
 2368              	 .cfi_startproc
 2369 0000 80B5     	 push {r7,lr}
 2370              	.LCFI106:
 2371              	 .cfi_def_cfa_offset 8
 2372              	 .cfi_offset 7,-8
 2373              	 .cfi_offset 14,-4
 2374 0002 82B0     	 sub sp,sp,#8
 2375              	.LCFI107:
 2376              	 .cfi_def_cfa_offset 16
 2377 0004 00AF     	 add r7,sp,#0
 2378              	.LCFI108:
 2379              	 .cfi_def_cfa_register 7
 2380 0006 7860     	 str r0,[r7,#4]
 2381 0008 0A1C     	 mov r2,r1
 2382 000a FB1C     	 add r3,r7,#3
 2383 000c 1A70     	 strb r2,[r3]
 798:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong SHS Pointer",
 799:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 800:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC_
 801:../Libraries/XMCLib/src/xmc_vadc.c **** 
 802:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the converted to Accelerated mode from compatible mode*/
 803:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 2384              	 .loc 2 803 0
 2385 000e FB1C     	 add r3,r7,#3
 2386 0010 1B78     	 ldrb r3,[r3]
 2387 0012 002B     	 cmp r3,#0
 2388 0014 08D1     	 bne .L101
 804:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 805:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 |= (uint32_t)SHS_TIMCFG0_AT_Msk;
 2389              	 .loc 2 805 0
 2390 0016 7B68     	 ldr r3,[r7,#4]
 2391 0018 8022     	 mov r2,#128
 2392 001a 9B58     	 ldr r3,[r3,r2]
 2393 001c 0122     	 mov r2,#1
 2394 001e 1A43     	 orr r2,r3
 2395 0020 7B68     	 ldr r3,[r7,#4]
 2396 0022 8021     	 mov r1,#128
 2397 0024 5A50     	 str r2,[r3,r1]
 2398 0026 0BE0     	 b .L100
 2399              	.L101:
 806:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 807:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 2400              	 .loc 2 807 0
 2401 0028 FB1C     	 add r3,r7,#3
 2402 002a 1B78     	 ldrb r3,[r3]
 2403 002c 012B     	 cmp r3,#1
 2404 002e 07D1     	 bne .L100
 808:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 809:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 |= (uint32_t)SHS_TIMCFG1_AT_Msk;
 2405              	 .loc 2 809 0
 2406 0030 7B68     	 ldr r3,[r7,#4]
 2407 0032 8422     	 mov r2,#132
 2408 0034 9B58     	 ldr r3,[r3,r2]
 2409 0036 0122     	 mov r2,#1
 2410 0038 1A43     	 orr r2,r3
 2411 003a 7B68     	 ldr r3,[r7,#4]
 2412 003c 8421     	 mov r1,#132
 2413 003e 5A50     	 str r2,[r3,r1]
 2414              	.L100:
 810:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 811:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 812:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 813:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 814:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 815:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2415              	 .loc 2 815 0
 2416 0040 BD46     	 mov sp,r7
 2417 0042 02B0     	 add sp,sp,#8
 2418              	 
 2419 0044 80BD     	 pop {r7,pc}
 2420              	 .cfi_endproc
 2421              	.LFE177:
 2423 0046 C046     	 .section .text.XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode,"ax",%progbits
 2424              	 .align 2
 2425              	 .global XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode
 2426              	 .code 16
 2427              	 .thumb_func
 2429              	XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:
 2430              	.LFB178:
 816:../Libraries/XMCLib/src/xmc_vadc.c **** 
 817:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable the accelerated mode of conversion */
 818:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROU
 819:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2431              	 .loc 2 819 0
 2432              	 .cfi_startproc
 2433 0000 80B5     	 push {r7,lr}
 2434              	.LCFI109:
 2435              	 .cfi_def_cfa_offset 8
 2436              	 .cfi_offset 7,-8
 2437              	 .cfi_offset 14,-4
 2438 0002 82B0     	 sub sp,sp,#8
 2439              	.LCFI110:
 2440              	 .cfi_def_cfa_offset 16
 2441 0004 00AF     	 add r7,sp,#0
 2442              	.LCFI111:
 2443              	 .cfi_def_cfa_register 7
 2444 0006 7860     	 str r0,[r7,#4]
 2445 0008 0A1C     	 mov r2,r1
 2446 000a FB1C     	 add r3,r7,#3
 2447 000c 1A70     	 strb r2,[r3]
 820:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:Wrong SHS Pointer",
 821:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 822:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC
 823:../Libraries/XMCLib/src/xmc_vadc.c **** 
 824:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the converted to Accelerated mode from compatible mode*/
 825:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 2448              	 .loc 2 825 0
 2449 000e FB1C     	 add r3,r7,#3
 2450 0010 1B78     	 ldrb r3,[r3]
 2451 0012 002B     	 cmp r3,#0
 2452 0014 09D1     	 bne .L104
 826:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 827:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 &= ~(uint32_t)SHS_TIMCFG0_AT_Msk;
 2453              	 .loc 2 827 0
 2454 0016 7B68     	 ldr r3,[r7,#4]
 2455 0018 8022     	 mov r2,#128
 2456 001a 9B58     	 ldr r3,[r3,r2]
 2457 001c 0122     	 mov r2,#1
 2458 001e 9343     	 bic r3,r2
 2459 0020 1A1C     	 mov r2,r3
 2460 0022 7B68     	 ldr r3,[r7,#4]
 2461 0024 8021     	 mov r1,#128
 2462 0026 5A50     	 str r2,[r3,r1]
 2463 0028 0CE0     	 b .L103
 2464              	.L104:
 828:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 829:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 2465              	 .loc 2 829 0
 2466 002a FB1C     	 add r3,r7,#3
 2467 002c 1B78     	 ldrb r3,[r3]
 2468 002e 012B     	 cmp r3,#1
 2469 0030 08D1     	 bne .L103
 830:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 831:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 &= ~(uint32_t)SHS_TIMCFG1_AT_Msk;
 2470              	 .loc 2 831 0
 2471 0032 7B68     	 ldr r3,[r7,#4]
 2472 0034 8422     	 mov r2,#132
 2473 0036 9B58     	 ldr r3,[r3,r2]
 2474 0038 0122     	 mov r2,#1
 2475 003a 9343     	 bic r3,r2
 2476 003c 1A1C     	 mov r2,r3
 2477 003e 7B68     	 ldr r3,[r7,#4]
 2478 0040 8421     	 mov r1,#132
 2479 0042 5A50     	 str r2,[r3,r1]
 2480              	.L103:
 832:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 833:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 834:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 835:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 836:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 837:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2481              	 .loc 2 837 0
 2482 0044 BD46     	 mov sp,r7
 2483 0046 02B0     	 add sp,sp,#8
 2484              	 
 2485 0048 80BD     	 pop {r7,pc}
 2486              	 .cfi_endproc
 2487              	.LFE178:
 2489 004a C046     	 .section .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime,"ax",%progbits
 2490              	 .align 2
 2491              	 .global XMC_VADC_GLOBAL_SHS_SetShortSampleTime
 2492              	 .code 16
 2493              	 .thumb_func
 2495              	XMC_VADC_GLOBAL_SHS_SetShortSampleTime:
 2496              	.LFB179:
 838:../Libraries/XMCLib/src/xmc_vadc.c **** 
 839:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the Short sample time of the Sample and hold module*/
 840:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 841:../Libraries/XMCLib/src/xmc_vadc.c ****                                             XMC_VADC_GROUP_INDEX_t group_num,
 842:../Libraries/XMCLib/src/xmc_vadc.c ****                                             uint8_t sst_value)
 843:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2497              	 .loc 2 843 0
 2498              	 .cfi_startproc
 2499 0000 80B5     	 push {r7,lr}
 2500              	.LCFI112:
 2501              	 .cfi_def_cfa_offset 8
 2502              	 .cfi_offset 7,-8
 2503              	 .cfi_offset 14,-4
 2504 0002 82B0     	 sub sp,sp,#8
 2505              	.LCFI113:
 2506              	 .cfi_def_cfa_offset 16
 2507 0004 00AF     	 add r7,sp,#0
 2508              	.LCFI114:
 2509              	 .cfi_def_cfa_register 7
 2510 0006 7860     	 str r0,[r7,#4]
 2511 0008 081C     	 mov r0,r1
 2512 000a 111C     	 mov r1,r2
 2513 000c FB1C     	 add r3,r7,#3
 2514 000e 021C     	 add r2,r0,#0
 2515 0010 1A70     	 strb r2,[r3]
 2516 0012 BB1C     	 add r3,r7,#2
 2517 0014 0A1C     	 add r2,r1,#0
 2518 0016 1A70     	 strb r2,[r3]
 844:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong SHS Pointer",
 845:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 846:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong Index number",(group_num <= XMC_VADC_GRO
 847:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong SST value",(sst_value < 64U))
 848:../Libraries/XMCLib/src/xmc_vadc.c **** 
 849:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the short sample time for the Accelerated mode of operation*/
 850:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 2519              	 .loc 2 850 0
 2520 0018 FB1C     	 add r3,r7,#3
 2521 001a 1B78     	 ldrb r3,[r3]
 2522 001c 002B     	 cmp r3,#0
 2523 001e 12D1     	 bne .L107
 851:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 852:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 &= ~((uint32_t)SHS_TIMCFG0_SST_Msk);
 2524              	 .loc 2 852 0
 2525 0020 7B68     	 ldr r3,[r7,#4]
 2526 0022 8022     	 mov r2,#128
 2527 0024 9B58     	 ldr r3,[r3,r2]
 2528 0026 144A     	 ldr r2,.L109
 2529 0028 1A40     	 and r2,r3
 2530 002a 7B68     	 ldr r3,[r7,#4]
 2531 002c 8021     	 mov r1,#128
 2532 002e 5A50     	 str r2,[r3,r1]
 853:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 |= (uint32_t)((uint32_t)sst_value << SHS_TIMCFG0_SST_Pos );
 2533              	 .loc 2 853 0
 2534 0030 7B68     	 ldr r3,[r7,#4]
 2535 0032 8022     	 mov r2,#128
 2536 0034 9A58     	 ldr r2,[r3,r2]
 2537 0036 BB1C     	 add r3,r7,#2
 2538 0038 1B78     	 ldrb r3,[r3]
 2539 003a 1B02     	 lsl r3,r3,#8
 2540 003c 1A43     	 orr r2,r3
 2541 003e 7B68     	 ldr r3,[r7,#4]
 2542 0040 8021     	 mov r1,#128
 2543 0042 5A50     	 str r2,[r3,r1]
 2544 0044 15E0     	 b .L106
 2545              	.L107:
 854:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 855:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 2546              	 .loc 2 855 0
 2547 0046 FB1C     	 add r3,r7,#3
 2548 0048 1B78     	 ldrb r3,[r3]
 2549 004a 012B     	 cmp r3,#1
 2550 004c 11D1     	 bne .L106
 856:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 857:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 &= ~((uint32_t)SHS_TIMCFG1_SST_Msk);
 2551              	 .loc 2 857 0
 2552 004e 7B68     	 ldr r3,[r7,#4]
 2553 0050 8422     	 mov r2,#132
 2554 0052 9B58     	 ldr r3,[r3,r2]
 2555 0054 084A     	 ldr r2,.L109
 2556 0056 1A40     	 and r2,r3
 2557 0058 7B68     	 ldr r3,[r7,#4]
 2558 005a 8421     	 mov r1,#132
 2559 005c 5A50     	 str r2,[r3,r1]
 858:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 |= (uint32_t)((uint32_t)sst_value << SHS_TIMCFG1_SST_Pos );
 2560              	 .loc 2 858 0
 2561 005e 7B68     	 ldr r3,[r7,#4]
 2562 0060 8422     	 mov r2,#132
 2563 0062 9A58     	 ldr r2,[r3,r2]
 2564 0064 BB1C     	 add r3,r7,#2
 2565 0066 1B78     	 ldrb r3,[r3]
 2566 0068 1B02     	 lsl r3,r3,#8
 2567 006a 1A43     	 orr r2,r3
 2568 006c 7B68     	 ldr r3,[r7,#4]
 2569 006e 8421     	 mov r1,#132
 2570 0070 5A50     	 str r2,[r3,r1]
 2571              	.L106:
 859:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 860:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 861:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 862:../Libraries/XMCLib/src/xmc_vadc.c ****   /* for MISRA*/
 863:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 864:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2572              	 .loc 2 864 0
 2573 0072 BD46     	 mov sp,r7
 2574 0074 02B0     	 add sp,sp,#8
 2575              	 
 2576 0076 80BD     	 pop {r7,pc}
 2577              	.L110:
 2578              	 .align 2
 2579              	.L109:
 2580 0078 FFC0FFFF 	 .word -16129
 2581              	 .cfi_endproc
 2582              	.LFE179:
 2584              	 .section .text.XMC_VADC_GLOBAL_SHS_SetGainFactor,"ax",%progbits
 2585              	 .align 2
 2586              	 .global XMC_VADC_GLOBAL_SHS_SetGainFactor
 2587              	 .code 16
 2588              	 .thumb_func
 2590              	XMC_VADC_GLOBAL_SHS_SetGainFactor:
 2591              	.LFB180:
 865:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 866:../Libraries/XMCLib/src/xmc_vadc.c **** 
 867:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the gain factor of the Sample and hold module*/
 868:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 869:../Libraries/XMCLib/src/xmc_vadc.c ****                                        uint8_t gain_value,
 870:../Libraries/XMCLib/src/xmc_vadc.c ****                                        XMC_VADC_GROUP_INDEX_t group_num,
 871:../Libraries/XMCLib/src/xmc_vadc.c ****                                        uint8_t ch_num)
 872:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2592              	 .loc 2 872 0
 2593              	 .cfi_startproc
 2594 0000 90B5     	 push {r4,r7,lr}
 2595              	.LCFI115:
 2596              	 .cfi_def_cfa_offset 12
 2597              	 .cfi_offset 4,-12
 2598              	 .cfi_offset 7,-8
 2599              	 .cfi_offset 14,-4
 2600 0002 85B0     	 sub sp,sp,#20
 2601              	.LCFI116:
 2602              	 .cfi_def_cfa_offset 32
 2603 0004 00AF     	 add r7,sp,#0
 2604              	.LCFI117:
 2605              	 .cfi_def_cfa_register 7
 2606 0006 7860     	 str r0,[r7,#4]
 2607 0008 0C1C     	 mov r4,r1
 2608 000a 101C     	 mov r0,r2
 2609 000c 191C     	 mov r1,r3
 2610 000e FB1C     	 add r3,r7,#3
 2611 0010 221C     	 add r2,r4,#0
 2612 0012 1A70     	 strb r2,[r3]
 2613 0014 BB1C     	 add r3,r7,#2
 2614 0016 021C     	 add r2,r0,#0
 2615 0018 1A70     	 strb r2,[r3]
 2616 001a 7B1C     	 add r3,r7,#1
 2617 001c 0A1C     	 add r2,r1,#0
 2618 001e 1A70     	 strb r2,[r3]
 873:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ch_mask;
 874:../Libraries/XMCLib/src/xmc_vadc.c **** 
 875:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetGainFactor:Wrong SHS Pointer", (shs_ptr == (XMC_VADC_GLOBAL_SH
 876:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetGainFactor:Wrong Index number",(group_num <= XMC_VADC_GROUP_IN
 877:../Libraries/XMCLib/src/xmc_vadc.c **** 
 878:../Libraries/XMCLib/src/xmc_vadc.c ****   /*Calculate location of channel bit-field*/
 879:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_mask = ((uint32_t)ch_num << (uint32_t)2);
 2619              	 .loc 2 879 0
 2620 0020 7B1C     	 add r3,r7,#1
 2621 0022 1B78     	 ldrb r3,[r3]
 2622 0024 9B00     	 lsl r3,r3,#2
 2623 0026 FB60     	 str r3,[r7,#12]
 880:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 2624              	 .loc 2 880 0
 2625 0028 BB1C     	 add r3,r7,#2
 2626 002a 1B78     	 ldrb r3,[r3]
 2627 002c 002B     	 cmp r3,#0
 2628 002e 1ED1     	 bne .L112
 881:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 882:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR00 &= ~((uint32_t)SHS_GNCTR00_GAIN0_Msk << ch_mask) ;
 2629              	 .loc 2 882 0
 2630 0030 7A68     	 ldr r2,[r7,#4]
 2631 0032 C023     	 mov r3,#192
 2632 0034 5B00     	 lsl r3,r3,#1
 2633 0036 D358     	 ldr r3,[r2,r3]
 2634 0038 FA68     	 ldr r2,[r7,#12]
 2635 003a 0F21     	 mov r1,#15
 2636 003c 9140     	 lsl r1,r1,r2
 2637 003e 0A1C     	 mov r2,r1
 2638 0040 D243     	 mvn r2,r2
 2639 0042 1A40     	 and r2,r3
 2640 0044 111C     	 mov r1,r2
 2641 0046 7A68     	 ldr r2,[r7,#4]
 2642 0048 C023     	 mov r3,#192
 2643 004a 5B00     	 lsl r3,r3,#1
 2644 004c D150     	 str r1,[r2,r3]
 883:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR00 |=  ((uint32_t)gain_value << ch_mask);
 2645              	 .loc 2 883 0
 2646 004e 7A68     	 ldr r2,[r7,#4]
 2647 0050 C023     	 mov r3,#192
 2648 0052 5B00     	 lsl r3,r3,#1
 2649 0054 D258     	 ldr r2,[r2,r3]
 2650 0056 FB1C     	 add r3,r7,#3
 2651 0058 1978     	 ldrb r1,[r3]
 2652 005a FB68     	 ldr r3,[r7,#12]
 2653 005c 9940     	 lsl r1,r1,r3
 2654 005e 0B1C     	 mov r3,r1
 2655 0060 1A43     	 orr r2,r3
 2656 0062 111C     	 mov r1,r2
 2657 0064 7A68     	 ldr r2,[r7,#4]
 2658 0066 C023     	 mov r3,#192
 2659 0068 5B00     	 lsl r3,r3,#1
 2660 006a D150     	 str r1,[r2,r3]
 2661 006c 21E0     	 b .L111
 2662              	.L112:
 884:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 885:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 2663              	 .loc 2 885 0
 2664 006e BB1C     	 add r3,r7,#2
 2665 0070 1B78     	 ldrb r3,[r3]
 2666 0072 012B     	 cmp r3,#1
 2667 0074 1DD1     	 bne .L111
 886:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 887:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 &= ~((uint32_t)SHS_GNCTR10_GAIN0_Msk << ch_mask);
 2668              	 .loc 2 887 0
 2669 0076 7A68     	 ldr r2,[r7,#4]
 2670 0078 C823     	 mov r3,#200
 2671 007a 5B00     	 lsl r3,r3,#1
 2672 007c D358     	 ldr r3,[r2,r3]
 2673 007e FA68     	 ldr r2,[r7,#12]
 2674 0080 0F21     	 mov r1,#15
 2675 0082 9140     	 lsl r1,r1,r2
 2676 0084 0A1C     	 mov r2,r1
 2677 0086 D243     	 mvn r2,r2
 2678 0088 1A40     	 and r2,r3
 2679 008a 111C     	 mov r1,r2
 2680 008c 7A68     	 ldr r2,[r7,#4]
 2681 008e C823     	 mov r3,#200
 2682 0090 5B00     	 lsl r3,r3,#1
 2683 0092 D150     	 str r1,[r2,r3]
 888:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 |=  ((uint32_t)gain_value << ch_mask);
 2684              	 .loc 2 888 0
 2685 0094 7A68     	 ldr r2,[r7,#4]
 2686 0096 C823     	 mov r3,#200
 2687 0098 5B00     	 lsl r3,r3,#1
 2688 009a D258     	 ldr r2,[r2,r3]
 2689 009c FB1C     	 add r3,r7,#3
 2690 009e 1978     	 ldrb r1,[r3]
 2691 00a0 FB68     	 ldr r3,[r7,#12]
 2692 00a2 9940     	 lsl r1,r1,r3
 2693 00a4 0B1C     	 mov r3,r1
 2694 00a6 1A43     	 orr r2,r3
 2695 00a8 111C     	 mov r1,r2
 2696 00aa 7A68     	 ldr r2,[r7,#4]
 2697 00ac C823     	 mov r3,#200
 2698 00ae 5B00     	 lsl r3,r3,#1
 2699 00b0 D150     	 str r1,[r2,r3]
 2700              	.L111:
 889:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 890:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 891:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 892:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 893:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 894:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2701              	 .loc 2 894 0
 2702 00b2 BD46     	 mov sp,r7
 2703 00b4 05B0     	 add sp,sp,#20
 2704              	 
 2705 00b6 90BD     	 pop {r4,r7,pc}
 2706              	 .cfi_endproc
 2707              	.LFE180:
 2709              	 .section .text.XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations,"ax",%progbits
 2710              	 .align 2
 2711              	 .global XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations
 2712              	 .code 16
 2713              	 .thumb_func
 2715              	XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:
 2716              	.LFB181:
 895:../Libraries/XMCLib/src/xmc_vadc.c **** 
 896:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 897:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the gain and offset calibration of the Sample and hold module*/
 898:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 899:../Libraries/XMCLib/src/xmc_vadc.c ****                                                          XMC_VADC_GROUP_INDEX_t group_num)
 900:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2717              	 .loc 2 900 0
 2718              	 .cfi_startproc
 2719 0000 80B5     	 push {r7,lr}
 2720              	.LCFI118:
 2721              	 .cfi_def_cfa_offset 8
 2722              	 .cfi_offset 7,-8
 2723              	 .cfi_offset 14,-4
 2724 0002 82B0     	 sub sp,sp,#8
 2725              	.LCFI119:
 2726              	 .cfi_def_cfa_offset 16
 2727 0004 00AF     	 add r7,sp,#0
 2728              	.LCFI120:
 2729              	 .cfi_def_cfa_register 7
 2730 0006 7860     	 str r0,[r7,#4]
 2731 0008 0A1C     	 mov r2,r1
 2732 000a FB1C     	 add r3,r7,#3
 2733 000c 1A70     	 strb r2,[r3]
 901:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:Wrong SHS Pointer",
 902:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 903:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:Wrong group selected",
 904:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num <= (uint32_t)XMC_VADC_GROUP_INDEX_1))
 905:../Libraries/XMCLib/src/xmc_vadc.c **** 
 906:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable gain and offset calibration*/
 907:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 2734              	 .loc 2 907 0
 2735 000e FB1C     	 add r3,r7,#3
 2736 0010 1B78     	 ldrb r3,[r3]
 2737 0012 002B     	 cmp r3,#0
 2738 0014 08D1     	 bne .L115
 908:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 909:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 &= ~((uint32_t)SHS_CALOC0_DISCAL_Msk);
 2739              	 .loc 2 909 0
 2740 0016 7B68     	 ldr r3,[r7,#4]
 2741 0018 E022     	 mov r2,#224
 2742 001a 9B58     	 ldr r3,[r3,r2]
 2743 001c 5B00     	 lsl r3,r3,#1
 2744 001e 5A08     	 lsr r2,r3,#1
 2745 0020 7B68     	 ldr r3,[r7,#4]
 2746 0022 E021     	 mov r1,#224
 2747 0024 5A50     	 str r2,[r3,r1]
 2748 0026 0BE0     	 b .L114
 2749              	.L115:
 910:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 911:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 2750              	 .loc 2 911 0
 2751 0028 FB1C     	 add r3,r7,#3
 2752 002a 1B78     	 ldrb r3,[r3]
 2753 002c 012B     	 cmp r3,#1
 2754 002e 07D1     	 bne .L114
 912:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 913:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 &= ~((uint32_t)SHS_CALOC1_DISCAL_Msk);
 2755              	 .loc 2 913 0
 2756 0030 7B68     	 ldr r3,[r7,#4]
 2757 0032 E422     	 mov r2,#228
 2758 0034 9B58     	 ldr r3,[r3,r2]
 2759 0036 5B00     	 lsl r3,r3,#1
 2760 0038 5A08     	 lsr r2,r3,#1
 2761 003a 7B68     	 ldr r3,[r7,#4]
 2762 003c E421     	 mov r1,#228
 2763 003e 5A50     	 str r2,[r3,r1]
 2764              	.L114:
 914:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 915:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 916:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 917:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 918:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 919:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2765              	 .loc 2 919 0
 2766 0040 BD46     	 mov sp,r7
 2767 0042 02B0     	 add sp,sp,#8
 2768              	 
 2769 0044 80BD     	 pop {r7,pc}
 2770              	 .cfi_endproc
 2771              	.LFE181:
 2773 0046 C046     	 .section .text.XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations,"ax",%progbits
 2774              	 .align 2
 2775              	 .global XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations
 2776              	 .code 16
 2777              	 .thumb_func
 2779              	XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:
 2780              	.LFB182:
 920:../Libraries/XMCLib/src/xmc_vadc.c **** 
 921:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the gain and offset calibration of the Sample and hold module*/
 922:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 923:../Libraries/XMCLib/src/xmc_vadc.c ****                                                           XMC_VADC_GROUP_INDEX_t group_num)
 924:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2781              	 .loc 2 924 0
 2782              	 .cfi_startproc
 2783 0000 80B5     	 push {r7,lr}
 2784              	.LCFI121:
 2785              	 .cfi_def_cfa_offset 8
 2786              	 .cfi_offset 7,-8
 2787              	 .cfi_offset 14,-4
 2788 0002 82B0     	 sub sp,sp,#8
 2789              	.LCFI122:
 2790              	 .cfi_def_cfa_offset 16
 2791 0004 00AF     	 add r7,sp,#0
 2792              	.LCFI123:
 2793              	 .cfi_def_cfa_register 7
 2794 0006 7860     	 str r0,[r7,#4]
 2795 0008 0A1C     	 mov r2,r1
 2796 000a FB1C     	 add r3,r7,#3
 2797 000c 1A70     	 strb r2,[r3]
 925:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:Wrong SHS Pointer",
 926:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 927:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:Wrong group selected",
 928:../Libraries/XMCLib/src/xmc_vadc.c ****             (group_num <= (uint32_t)XMC_VADC_GROUP_INDEX_1))
 929:../Libraries/XMCLib/src/xmc_vadc.c **** 
 930:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 2798              	 .loc 2 930 0
 2799 000e FB1C     	 add r3,r7,#3
 2800 0010 1B78     	 ldrb r3,[r3]
 2801 0012 002B     	 cmp r3,#0
 2802 0014 09D1     	 bne .L118
 931:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 932:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 |= (uint32_t)SHS_CALOC0_DISCAL_Msk;
 2803              	 .loc 2 932 0
 2804 0016 7B68     	 ldr r3,[r7,#4]
 2805 0018 E022     	 mov r2,#224
 2806 001a 9B58     	 ldr r3,[r3,r2]
 2807 001c 8022     	 mov r2,#128
 2808 001e 1206     	 lsl r2,r2,#24
 2809 0020 1A43     	 orr r2,r3
 2810 0022 7B68     	 ldr r3,[r7,#4]
 2811 0024 E021     	 mov r1,#224
 2812 0026 5A50     	 str r2,[r3,r1]
 2813 0028 0CE0     	 b .L117
 2814              	.L118:
 933:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 934:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 2815              	 .loc 2 934 0
 2816 002a FB1C     	 add r3,r7,#3
 2817 002c 1B78     	 ldrb r3,[r3]
 2818 002e 012B     	 cmp r3,#1
 2819 0030 08D1     	 bne .L117
 935:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 936:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 |= (uint32_t)SHS_CALOC1_DISCAL_Msk;
 2820              	 .loc 2 936 0
 2821 0032 7B68     	 ldr r3,[r7,#4]
 2822 0034 E422     	 mov r2,#228
 2823 0036 9B58     	 ldr r3,[r3,r2]
 2824 0038 8022     	 mov r2,#128
 2825 003a 1206     	 lsl r2,r2,#24
 2826 003c 1A43     	 orr r2,r3
 2827 003e 7B68     	 ldr r3,[r7,#4]
 2828 0040 E421     	 mov r1,#228
 2829 0042 5A50     	 str r2,[r3,r1]
 2830              	.L117:
 937:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 938:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 939:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 940:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 941:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 942:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2831              	 .loc 2 942 0
 2832 0044 BD46     	 mov sp,r7
 2833 0046 02B0     	 add sp,sp,#8
 2834              	 
 2835 0048 80BD     	 pop {r7,pc}
 2836              	 .cfi_endproc
 2837              	.LFE182:
 2839 004a C046     	 .section .text.XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue,"ax",%progbits
 2840              	 .align 2
 2841              	 .global XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue
 2842              	 .code 16
 2843              	 .thumb_func
 2845              	XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:
 2846              	.LFB183:
 943:../Libraries/XMCLib/src/xmc_vadc.c **** 
 944:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to get the offset calibration value of the Sample and hold module*/
 945:../Libraries/XMCLib/src/xmc_vadc.c **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 946:../Libraries/XMCLib/src/xmc_vadc.c ****                                                       XMC_VADC_GROUP_INDEX_t group_num,
 947:../Libraries/XMCLib/src/xmc_vadc.c ****                                                       XMC_VADC_SHS_GAIN_LEVEL_t gain_level)
 948:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2847              	 .loc 2 948 0
 2848              	 .cfi_startproc
 2849 0000 80B5     	 push {r7,lr}
 2850              	.LCFI124:
 2851              	 .cfi_def_cfa_offset 8
 2852              	 .cfi_offset 7,-8
 2853              	 .cfi_offset 14,-4
 2854 0002 84B0     	 sub sp,sp,#16
 2855              	.LCFI125:
 2856              	 .cfi_def_cfa_offset 24
 2857 0004 00AF     	 add r7,sp,#0
 2858              	.LCFI126:
 2859              	 .cfi_def_cfa_register 7
 2860 0006 7860     	 str r0,[r7,#4]
 2861 0008 081C     	 mov r0,r1
 2862 000a 111C     	 mov r1,r2
 2863 000c FB1C     	 add r3,r7,#3
 2864 000e 021C     	 add r2,r0,#0
 2865 0010 1A70     	 strb r2,[r3]
 2866 0012 BB1C     	 add r3,r7,#2
 2867 0014 0A1C     	 add r2,r1,#0
 2868 0016 1A70     	 strb r2,[r3]
 949:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t calibration_value;
 950:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong SHS Pointer",
 951:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 952:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong Group number selected",
 953:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
 954:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong gain level selected",
 955:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_0)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_1)||
 956:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_2)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_3))
 957:../Libraries/XMCLib/src/xmc_vadc.c **** 
 958:../Libraries/XMCLib/src/xmc_vadc.c ****   calibration_value = 0U;
 2869              	 .loc 2 958 0
 2870 0018 0023     	 mov r3,#0
 2871 001a FB60     	 str r3,[r7,#12]
 959:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 2872              	 .loc 2 959 0
 2873 001c FB1C     	 add r3,r7,#3
 2874 001e 1B78     	 ldrb r3,[r3]
 2875 0020 002B     	 cmp r3,#0
 2876 0022 0AD1     	 bne .L121
 960:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 961:../Libraries/XMCLib/src/xmc_vadc.c ****     calibration_value = (shs_ptr->CALOC0 >> (uint32_t)gain_level) & (uint32_t)SHS_CALOC0_CALOFFVAL0
 2877              	 .loc 2 961 0
 2878 0024 7B68     	 ldr r3,[r7,#4]
 2879 0026 E022     	 mov r2,#224
 2880 0028 9A58     	 ldr r2,[r3,r2]
 2881 002a BB1C     	 add r3,r7,#2
 2882 002c 1B78     	 ldrb r3,[r3]
 2883 002e DA40     	 lsr r2,r2,r3
 2884 0030 131C     	 mov r3,r2
 2885 0032 7F22     	 mov r2,#127
 2886 0034 1340     	 and r3,r2
 2887 0036 FB60     	 str r3,[r7,#12]
 2888 0038 0DE0     	 b .L122
 2889              	.L121:
 962:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 963:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 2890              	 .loc 2 963 0
 2891 003a FB1C     	 add r3,r7,#3
 2892 003c 1B78     	 ldrb r3,[r3]
 2893 003e 012B     	 cmp r3,#1
 2894 0040 09D1     	 bne .L122
 964:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 965:../Libraries/XMCLib/src/xmc_vadc.c ****     calibration_value = (shs_ptr->CALOC1 >> (uint32_t)gain_level) & (uint32_t)SHS_CALOC1_CALOFFVAL0
 2895              	 .loc 2 965 0
 2896 0042 7B68     	 ldr r3,[r7,#4]
 2897 0044 E422     	 mov r2,#228
 2898 0046 9A58     	 ldr r2,[r3,r2]
 2899 0048 BB1C     	 add r3,r7,#2
 2900 004a 1B78     	 ldrb r3,[r3]
 2901 004c DA40     	 lsr r2,r2,r3
 2902 004e 131C     	 mov r3,r2
 2903 0050 7F22     	 mov r2,#127
 2904 0052 1340     	 and r3,r2
 2905 0054 FB60     	 str r3,[r7,#12]
 2906              	.L122:
 966:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 967:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 968:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 969:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 970:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 971:../Libraries/XMCLib/src/xmc_vadc.c ****   return ((uint8_t)calibration_value);
 2907              	 .loc 2 971 0
 2908 0056 FB68     	 ldr r3,[r7,#12]
 2909 0058 DBB2     	 uxtb r3,r3
 972:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2910              	 .loc 2 972 0
 2911 005a 181C     	 mov r0,r3
 2912 005c BD46     	 mov sp,r7
 2913 005e 04B0     	 add sp,sp,#16
 2914              	 
 2915 0060 80BD     	 pop {r7,pc}
 2916              	 .cfi_endproc
 2917              	.LFE183:
 2919 0062 C046     	 .section .text.XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue,"ax",%progbits
 2920              	 .align 2
 2921              	 .global XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue
 2922              	 .code 16
 2923              	 .thumb_func
 2925              	XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:
 2926              	.LFB184:
 973:../Libraries/XMCLib/src/xmc_vadc.c **** 
 974:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the offset calibration value of the Sample and hold module*/
 975:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 976:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    XMC_VADC_GROUP_INDEX_t group_num,
 977:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
 978:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    uint8_t offset_calibration_value)
 979:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2927              	 .loc 2 979 0
 2928              	 .cfi_startproc
 2929 0000 90B5     	 push {r4,r7,lr}
 2930              	.LCFI127:
 2931              	 .cfi_def_cfa_offset 12
 2932              	 .cfi_offset 4,-12
 2933              	 .cfi_offset 7,-8
 2934              	 .cfi_offset 14,-4
 2935 0002 83B0     	 sub sp,sp,#12
 2936              	.LCFI128:
 2937              	 .cfi_def_cfa_offset 24
 2938 0004 00AF     	 add r7,sp,#0
 2939              	.LCFI129:
 2940              	 .cfi_def_cfa_register 7
 2941 0006 7860     	 str r0,[r7,#4]
 2942 0008 0C1C     	 mov r4,r1
 2943 000a 101C     	 mov r0,r2
 2944 000c 191C     	 mov r1,r3
 2945 000e FB1C     	 add r3,r7,#3
 2946 0010 221C     	 add r2,r4,#0
 2947 0012 1A70     	 strb r2,[r3]
 2948 0014 BB1C     	 add r3,r7,#2
 2949 0016 021C     	 add r2,r0,#0
 2950 0018 1A70     	 strb r2,[r3]
 2951 001a 7B1C     	 add r3,r7,#1
 2952 001c 0A1C     	 add r2,r1,#0
 2953 001e 1A70     	 strb r2,[r3]
 980:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong SHS Pointer",
 981:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 982:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong Group number selected",
 983:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
 984:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong gain level selected",
 985:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_0)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_1)||
 986:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_2)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_3))
 987:../Libraries/XMCLib/src/xmc_vadc.c **** 
 988:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 2954              	 .loc 2 988 0
 2955 0020 FB1C     	 add r3,r7,#3
 2956 0022 1B78     	 ldrb r3,[r3]
 2957 0024 002B     	 cmp r3,#0
 2958 0026 20D1     	 bne .L125
 989:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 990:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 = (shs_ptr->CALOC0  & ~((uint32_t)SHS_CALOC0_CALOFFVAL0_Msk << (uint32_t)gain_l
 2959              	 .loc 2 990 0
 2960 0028 7B68     	 ldr r3,[r7,#4]
 2961 002a E022     	 mov r2,#224
 2962 002c 9B58     	 ldr r3,[r3,r2]
 2963 002e BA1C     	 add r2,r7,#2
 2964 0030 1278     	 ldrb r2,[r2]
 2965 0032 7F21     	 mov r1,#127
 2966 0034 9140     	 lsl r1,r1,r2
 2967 0036 0A1C     	 mov r2,r1
 2968 0038 D243     	 mvn r2,r2
 2969 003a 1340     	 and r3,r2
 2970 003c 8022     	 mov r2,#128
 2971 003e 1202     	 lsl r2,r2,#8
 2972 0040 1A43     	 orr r2,r3
 2973 0042 7B68     	 ldr r3,[r7,#4]
 2974 0044 E021     	 mov r1,#224
 2975 0046 5A50     	 str r2,[r3,r1]
 991:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC0_OFFWC_Msk;
 992:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 |=  ((uint32_t)offset_calibration_value << (uint32_t)gain_level) | (uint32_t)SH
 2976              	 .loc 2 992 0
 2977 0048 7B68     	 ldr r3,[r7,#4]
 2978 004a E022     	 mov r2,#224
 2979 004c 9A58     	 ldr r2,[r3,r2]
 2980 004e 7B1C     	 add r3,r7,#1
 2981 0050 1978     	 ldrb r1,[r3]
 2982 0052 BB1C     	 add r3,r7,#2
 2983 0054 1B78     	 ldrb r3,[r3]
 2984 0056 9940     	 lsl r1,r1,r3
 2985 0058 0B1C     	 mov r3,r1
 2986 005a 1343     	 orr r3,r2
 2987 005c 8022     	 mov r2,#128
 2988 005e 1202     	 lsl r2,r2,#8
 2989 0060 1A43     	 orr r2,r3
 2990 0062 7B68     	 ldr r3,[r7,#4]
 2991 0064 E021     	 mov r1,#224
 2992 0066 5A50     	 str r2,[r3,r1]
 2993 0068 23E0     	 b .L124
 2994              	.L125:
 993:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 994:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 2995              	 .loc 2 994 0
 2996 006a FB1C     	 add r3,r7,#3
 2997 006c 1B78     	 ldrb r3,[r3]
 2998 006e 012B     	 cmp r3,#1
 2999 0070 1FD1     	 bne .L124
 995:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 996:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 = (shs_ptr->CALOC1 & ~((uint32_t)SHS_CALOC1_CALOFFVAL0_Msk << (uint32_t)gain_le
 3000              	 .loc 2 996 0
 3001 0072 7B68     	 ldr r3,[r7,#4]
 3002 0074 E422     	 mov r2,#228
 3003 0076 9B58     	 ldr r3,[r3,r2]
 3004 0078 BA1C     	 add r2,r7,#2
 3005 007a 1278     	 ldrb r2,[r2]
 3006 007c 7F21     	 mov r1,#127
 3007 007e 9140     	 lsl r1,r1,r2
 3008 0080 0A1C     	 mov r2,r1
 3009 0082 D243     	 mvn r2,r2
 3010 0084 1340     	 and r3,r2
 3011 0086 8022     	 mov r2,#128
 3012 0088 1202     	 lsl r2,r2,#8
 3013 008a 1A43     	 orr r2,r3
 3014 008c 7B68     	 ldr r3,[r7,#4]
 3015 008e E421     	 mov r1,#228
 3016 0090 5A50     	 str r2,[r3,r1]
 997:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC1_OFFWC_Msk;
 998:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 |=  ((uint32_t)offset_calibration_value << (uint32_t)gain_level) | (uint32_t)SH
 3017              	 .loc 2 998 0
 3018 0092 7B68     	 ldr r3,[r7,#4]
 3019 0094 E422     	 mov r2,#228
 3020 0096 9A58     	 ldr r2,[r3,r2]
 3021 0098 7B1C     	 add r3,r7,#1
 3022 009a 1978     	 ldrb r1,[r3]
 3023 009c BB1C     	 add r3,r7,#2
 3024 009e 1B78     	 ldrb r3,[r3]
 3025 00a0 9940     	 lsl r1,r1,r3
 3026 00a2 0B1C     	 mov r3,r1
 3027 00a4 1343     	 orr r3,r2
 3028 00a6 8022     	 mov r2,#128
 3029 00a8 1202     	 lsl r2,r2,#8
 3030 00aa 1A43     	 orr r2,r3
 3031 00ac 7B68     	 ldr r3,[r7,#4]
 3032 00ae E421     	 mov r1,#228
 3033 00b0 5A50     	 str r2,[r3,r1]
 3034              	.L124:
 999:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1000:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1001:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1002:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
1003:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1004:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3035              	 .loc 2 1004 0
 3036 00b2 BD46     	 mov sp,r7
 3037 00b4 03B0     	 add sp,sp,#12
 3038              	 
 3039 00b6 90BD     	 pop {r4,r7,pc}
 3040              	 .cfi_endproc
 3041              	.LFE184:
 3043              	 .section .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop,"ax",%progbits
 3044              	 .align 2
 3045              	 .global XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop
 3046              	 .code 16
 3047              	 .thumb_func
 3049              	XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:
 3050              	.LFB185:
1005:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1006:../Libraries/XMCLib/src/xmc_vadc.c **** 
1007:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the values of sigma delta loop of the Sample and hold module*/
1008:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1009:../Libraries/XMCLib/src/xmc_vadc.c ****                                            XMC_VADC_GROUP_INDEX_t group_num,
1010:../Libraries/XMCLib/src/xmc_vadc.c ****                                            XMC_VADC_SHS_LOOP_CH_t loop_select,
1011:../Libraries/XMCLib/src/xmc_vadc.c ****                                            uint8_t ch_num)
1012:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3051              	 .loc 2 1012 0
 3052              	 .cfi_startproc
 3053 0000 90B5     	 push {r4,r7,lr}
 3054              	.LCFI130:
 3055              	 .cfi_def_cfa_offset 12
 3056              	 .cfi_offset 4,-12
 3057              	 .cfi_offset 7,-8
 3058              	 .cfi_offset 14,-4
 3059 0002 83B0     	 sub sp,sp,#12
 3060              	.LCFI131:
 3061              	 .cfi_def_cfa_offset 24
 3062 0004 00AF     	 add r7,sp,#0
 3063              	.LCFI132:
 3064              	 .cfi_def_cfa_register 7
 3065 0006 7860     	 str r0,[r7,#4]
 3066 0008 0C1C     	 mov r4,r1
 3067 000a 101C     	 mov r0,r2
 3068 000c 191C     	 mov r1,r3
 3069 000e FB1C     	 add r3,r7,#3
 3070 0010 221C     	 add r2,r4,#0
 3071 0012 1A70     	 strb r2,[r3]
 3072 0014 BB1C     	 add r3,r7,#2
 3073 0016 021C     	 add r2,r0,#0
 3074 0018 1A70     	 strb r2,[r3]
 3075 001a 7B1C     	 add r3,r7,#1
 3076 001c 0A1C     	 add r2,r1,#0
 3077 001e 1A70     	 strb r2,[r3]
1013:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong SHS Pointer",
1014:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1015:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Group number selected",
1016:../Libraries/XMCLib/src/xmc_vadc.c ****                (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
1017:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Delta sigma loop selected",
1018:../Libraries/XMCLib/src/xmc_vadc.c ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
1019:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Channel Number",
1020:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1021:../Libraries/XMCLib/src/xmc_vadc.c **** 
1022:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->LOOP &= ~(((uint32_t)SHS_LOOP_LPCH0_Msk | (uint32_t)SHS_LOOP_LPSH0_Msk | (uint32_t)SHS_L
 3078              	 .loc 2 1022 0
 3079 0020 7B68     	 ldr r3,[r7,#4]
 3080 0022 1B6D     	 ldr r3,[r3,#80]
1023:../Libraries/XMCLib/src/xmc_vadc.c ****                      << (uint32_t)loop_select);
 3081              	 .loc 2 1023 0
 3082 0024 BA1C     	 add r2,r7,#2
 3083 0026 1278     	 ldrb r2,[r2]
 3084 0028 0C49     	 ldr r1,.L128
 3085 002a 9140     	 lsl r1,r1,r2
 3086 002c 0A1C     	 mov r2,r1
1022:../Libraries/XMCLib/src/xmc_vadc.c ****                      << (uint32_t)loop_select);
 3087              	 .loc 2 1022 0
 3088 002e D243     	 mvn r2,r2
 3089 0030 1A40     	 and r2,r3
 3090 0032 7B68     	 ldr r3,[r7,#4]
 3091 0034 1A65     	 str r2,[r3,#80]
1024:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->LOOP |= ((uint32_t)ch_num | ((uint32_t)group_num << (uint32_t)SHS_LOOP_LPSH0_Pos)) << (u
 3092              	 .loc 2 1024 0
 3093 0036 7B68     	 ldr r3,[r7,#4]
 3094 0038 1A6D     	 ldr r2,[r3,#80]
 3095 003a 7B1C     	 add r3,r7,#1
 3096 003c 1978     	 ldrb r1,[r3]
 3097 003e FB1C     	 add r3,r7,#3
 3098 0040 1B78     	 ldrb r3,[r3]
 3099 0042 1B02     	 lsl r3,r3,#8
 3100 0044 1943     	 orr r1,r3
 3101 0046 BB1C     	 add r3,r7,#2
 3102 0048 1B78     	 ldrb r3,[r3]
 3103 004a 9940     	 lsl r1,r1,r3
 3104 004c 0B1C     	 mov r3,r1
 3105 004e 1A43     	 orr r2,r3
 3106 0050 7B68     	 ldr r3,[r7,#4]
 3107 0052 1A65     	 str r2,[r3,#80]
1025:../Libraries/XMCLib/src/xmc_vadc.c **** 
1026:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3108              	 .loc 2 1026 0
 3109 0054 BD46     	 mov sp,r7
 3110 0056 03B0     	 add sp,sp,#12
 3111              	 
 3112 0058 90BD     	 pop {r4,r7,pc}
 3113              	.L129:
 3114 005a C046     	 .align 2
 3115              	.L128:
 3116 005c 1F810000 	 .word 33055
 3117              	 .cfi_endproc
 3118              	.LFE185:
 3120              	 .section .text.XMC_VADC_GROUP_ScanInit,"ax",%progbits
 3121              	 .align 2
 3122              	 .global XMC_VADC_GROUP_ScanInit
 3123              	 .code 16
 3124              	 .thumb_func
 3126              	XMC_VADC_GROUP_ScanInit:
 3127              	.LFB186:
1027:../Libraries/XMCLib/src/xmc_vadc.c **** 
1028:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1029:../Libraries/XMCLib/src/xmc_vadc.c **** 
1030:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)   
1031:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize the group scan hardware of a kernel */
1032:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
1033:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3128              	 .loc 2 1033 0
 3129              	 .cfi_startproc
 3130 0000 80B5     	 push {r7,lr}
 3131              	.LCFI133:
 3132              	 .cfi_def_cfa_offset 8
 3133              	 .cfi_offset 7,-8
 3134              	 .cfi_offset 14,-4
 3135 0002 84B0     	 sub sp,sp,#16
 3136              	.LCFI134:
 3137              	 .cfi_def_cfa_offset 24
 3138 0004 00AF     	 add r7,sp,#0
 3139              	.LCFI135:
 3140              	 .cfi_def_cfa_register 7
 3141 0006 7860     	 str r0,[r7,#4]
 3142 0008 3960     	 str r1,[r7]
1034:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t      reg;
1035:../Libraries/XMCLib/src/xmc_vadc.c **** 
1036:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1037:../Libraries/XMCLib/src/xmc_vadc.c **** 
1038:../Libraries/XMCLib/src/xmc_vadc.c ****   /* All configurations have to be performed with the arbitration slot disabled */
1039:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
 3143              	 .loc 2 1039 0
 3144 000a 7B68     	 ldr r3,[r7,#4]
 3145 000c 181C     	 mov r0,r3
 3146 000e FFF7FEFF 	 bl XMC_VADC_GROUP_ScanDisableArbitrationSlot
1040:../Libraries/XMCLib/src/xmc_vadc.c ****   
1041:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Read in the existing contents of arbitration priority register */
1042:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = group_ptr->ARBPR;
 3147              	 .loc 2 1042 0
 3148 0012 7B68     	 ldr r3,[r7,#4]
 3149 0014 8422     	 mov r2,#132
 3150 0016 9B58     	 ldr r3,[r3,r2]
 3151 0018 FB60     	 str r3,[r7,#12]
1043:../Libraries/XMCLib/src/xmc_vadc.c **** 
1044:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the priority of the request source */
1045:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~(uint32_t)VADC_G_ARBPR_PRIO1_Msk;
 3152              	 .loc 2 1045 0
 3153 001a FB68     	 ldr r3,[r7,#12]
 3154 001c 3022     	 mov r2,#48
 3155 001e 9343     	 bic r3,r2
 3156 0020 FB60     	 str r3,[r7,#12]
1046:../Libraries/XMCLib/src/xmc_vadc.c ****   reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO1_Pos);
 3157              	 .loc 2 1046 0
 3158 0022 3B68     	 ldr r3,[r7]
 3159 0024 1B78     	 ldrb r3,[r3]
 3160 0026 1B07     	 lsl r3,r3,#28
 3161 0028 9B0F     	 lsr r3,r3,#30
 3162 002a DBB2     	 uxtb r3,r3
 3163 002c 1B01     	 lsl r3,r3,#4
 3164 002e FA68     	 ldr r2,[r7,#12]
 3165 0030 1343     	 orr r3,r2
 3166 0032 FB60     	 str r3,[r7,#12]
1047:../Libraries/XMCLib/src/xmc_vadc.c ****   
1048:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the start mode */
1049:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 3167              	 .loc 2 1049 0
 3168 0034 3B68     	 ldr r3,[r7]
 3169 0036 1B78     	 ldrb r3,[r3]
 3170 0038 0322     	 mov r2,#3
 3171 003a 1340     	 and r3,r2
 3172 003c DBB2     	 uxtb r3,r3
 3173 003e 002B     	 cmp r3,#0
 3174 0040 03D0     	 beq .L131
1050:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1051:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)(VADC_G_ARBPR_CSM1_Msk);
 3175              	 .loc 2 1051 0
 3176 0042 FB68     	 ldr r3,[r7,#12]
 3177 0044 8022     	 mov r2,#128
 3178 0046 1343     	 orr r3,r2
 3179 0048 FB60     	 str r3,[r7,#12]
 3180              	.L131:
1052:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1053:../Libraries/XMCLib/src/xmc_vadc.c **** 
1054:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR = reg;
 3181              	 .loc 2 1054 0
 3182 004a 7B68     	 ldr r3,[r7,#4]
 3183 004c 8421     	 mov r1,#132
 3184 004e FA68     	 ldr r2,[r7,#12]
 3185 0050 5A50     	 str r2,[r3,r1]
1055:../Libraries/XMCLib/src/xmc_vadc.c **** 
1056:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL = (uint32_t)(config->asctrl |(VADC_G_ASCTRL_XTWC_Msk) |(VADC_G_ASCTRL_GTWC_Msk)
 3186              	 .loc 2 1056 0
 3187 0052 3B68     	 ldr r3,[r7]
 3188 0054 5B68     	 ldr r3,[r3,#4]
 3189 0056 154A     	 ldr r2,.L133
 3190 0058 1A43     	 orr r2,r3
 3191 005a 111C     	 mov r1,r2
 3192 005c 7A68     	 ldr r2,[r7,#4]
 3193 005e 9023     	 mov r3,#144
 3194 0060 5B00     	 lsl r3,r3,#1
 3195 0062 D150     	 str r1,[r2,r3]
1057:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  (VADC_G_ASCTRL_TMWC_Msk));
1058:../Libraries/XMCLib/src/xmc_vadc.c **** 
1059:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR  = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VA
 3196              	 .loc 2 1059 0
 3197 0064 3B68     	 ldr r3,[r7]
 3198 0066 9B68     	 ldr r3,[r3,#8]
 3199 0068 0122     	 mov r2,#1
 3200 006a 1A43     	 orr r2,r3
 3201 006c 111C     	 mov r1,r2
 3202 006e 7A68     	 ldr r2,[r7,#4]
 3203 0070 9223     	 mov r3,#146
 3204 0072 5B00     	 lsl r3,r3,#1
 3205 0074 D150     	 str r1,[r2,r3]
1060:../Libraries/XMCLib/src/xmc_vadc.c ****   
1061:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 3206              	 .loc 2 1061 0
 3207 0076 3B68     	 ldr r3,[r7]
 3208 0078 1B78     	 ldrb r3,[r3]
 3209 007a 0322     	 mov r2,#3
 3210 007c 1340     	 and r3,r2
 3211 007e DBB2     	 uxtb r3,r3
 3212 0080 022B     	 cmp r3,#2
 3213 0082 0BD1     	 bne .L132
1062:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1063:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_RPTDIS_Msk;
 3214              	 .loc 2 1063 0
 3215 0084 7A68     	 ldr r2,[r7,#4]
 3216 0086 9223     	 mov r3,#146
 3217 0088 5B00     	 lsl r3,r3,#1
 3218 008a D358     	 ldr r3,[r2,r3]
 3219 008c 8022     	 mov r2,#128
 3220 008e 5202     	 lsl r2,r2,#9
 3221 0090 1A43     	 orr r2,r3
 3222 0092 111C     	 mov r1,r2
 3223 0094 7A68     	 ldr r2,[r7,#4]
 3224 0096 9223     	 mov r3,#146
 3225 0098 5B00     	 lsl r3,r3,#1
 3226 009a D150     	 str r1,[r2,r3]
 3227              	.L132:
1064:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1065:../Libraries/XMCLib/src/xmc_vadc.c ****   
1066:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable arbitration slot now */
1067:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanEnableArbitrationSlot(group_ptr);
 3228              	 .loc 2 1067 0
 3229 009c 7B68     	 ldr r3,[r7,#4]
 3230 009e 181C     	 mov r0,r3
 3231 00a0 FFF7FEFF 	 bl XMC_VADC_GROUP_ScanEnableArbitrationSlot
1068:../Libraries/XMCLib/src/xmc_vadc.c ****   
1069:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3232              	 .loc 2 1069 0
 3233 00a4 BD46     	 mov sp,r7
 3234 00a6 04B0     	 add sp,sp,#16
 3235              	 
 3236 00a8 80BD     	 pop {r7,pc}
 3237              	.L134:
 3238 00aa C046     	 .align 2
 3239              	.L133:
 3240 00ac 00808080 	 .word -2139062272
 3241              	 .cfi_endproc
 3242              	.LFE186:
 3244              	 .section .text.XMC_VADC_GROUP_ScanSelectTrigger,"ax",%progbits
 3245              	 .align 2
 3246              	 .global XMC_VADC_GROUP_ScanSelectTrigger
 3247              	 .code 16
 3248              	 .thumb_func
 3250              	XMC_VADC_GROUP_ScanSelectTrigger:
 3251              	.LFB187:
1070:../Libraries/XMCLib/src/xmc_vadc.c **** 
1071:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger input for Group Scan request source */
1072:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
1073:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3252              	 .loc 2 1073 0
 3253              	 .cfi_startproc
 3254 0000 80B5     	 push {r7,lr}
 3255              	.LCFI136:
 3256              	 .cfi_def_cfa_offset 8
 3257              	 .cfi_offset 7,-8
 3258              	 .cfi_offset 14,-4
 3259 0002 84B0     	 sub sp,sp,#16
 3260              	.LCFI137:
 3261              	 .cfi_def_cfa_offset 24
 3262 0004 00AF     	 add r7,sp,#0
 3263              	.LCFI138:
 3264              	 .cfi_def_cfa_register 7
 3265 0006 7860     	 str r0,[r7,#4]
 3266 0008 0A1C     	 mov r2,r1
 3267 000a FB1C     	 add r3,r7,#3
 3268 000c 1A70     	 strb r2,[r3]
1074:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1075:../Libraries/XMCLib/src/xmc_vadc.c **** 
1076:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1077:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTrigger:Wrong Trigger Port", ((trigger_input)< XMC_VADC_NUM_
1078:../Libraries/XMCLib/src/xmc_vadc.c **** 
1079:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 3269              	 .loc 2 1079 0
 3270 000e 7A68     	 ldr r2,[r7,#4]
 3271 0010 9023     	 mov r3,#144
 3272 0012 5B00     	 lsl r3,r3,#1
 3273 0014 D358     	 ldr r3,[r2,r3]
 3274 0016 FB60     	 str r3,[r7,#12]
1080:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
 3275              	 .loc 2 1080 0
 3276 0018 FB68     	 ldr r3,[r7,#12]
 3277 001a 8022     	 mov r2,#128
 3278 001c 1202     	 lsl r2,r2,#8
 3279 001e 1343     	 orr r3,r2
 3280 0020 FB60     	 str r3,[r7,#12]
1081:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_XTSEL_Msk);
 3281              	 .loc 2 1081 0
 3282 0022 FB68     	 ldr r3,[r7,#12]
 3283 0024 084A     	 ldr r2,.L136
 3284 0026 1340     	 and r3,r2
 3285 0028 FB60     	 str r3,[r7,#12]
1082:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_input << VADC_G_ASCTRL_XTSEL_Pos);
 3286              	 .loc 2 1082 0
 3287 002a FB1C     	 add r3,r7,#3
 3288 002c 1B78     	 ldrb r3,[r3]
 3289 002e 1B02     	 lsl r3,r3,#8
 3290 0030 FA68     	 ldr r2,[r7,#12]
 3291 0032 1343     	 orr r3,r2
 3292 0034 FB60     	 str r3,[r7,#12]
1083:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 3293              	 .loc 2 1083 0
 3294 0036 7A68     	 ldr r2,[r7,#4]
 3295 0038 9023     	 mov r3,#144
 3296 003a 5B00     	 lsl r3,r3,#1
 3297 003c F968     	 ldr r1,[r7,#12]
 3298 003e D150     	 str r1,[r2,r3]
1084:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3299              	 .loc 2 1084 0
 3300 0040 BD46     	 mov sp,r7
 3301 0042 04B0     	 add sp,sp,#16
 3302              	 
 3303 0044 80BD     	 pop {r7,pc}
 3304              	.L137:
 3305 0046 C046     	 .align 2
 3306              	.L136:
 3307 0048 FFF0FFFF 	 .word -3841
 3308              	 .cfi_endproc
 3309              	.LFE187:
 3311              	 .section .text.XMC_VADC_GROUP_ScanSelectTriggerEdge,"ax",%progbits
 3312              	 .align 2
 3313              	 .global XMC_VADC_GROUP_ScanSelectTriggerEdge
 3314              	 .code 16
 3315              	 .thumb_func
 3317              	XMC_VADC_GROUP_ScanSelectTriggerEdge:
 3318              	.LFB188:
1085:../Libraries/XMCLib/src/xmc_vadc.c **** 
1086:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1087:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
1088:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3319              	 .loc 2 1088 0
 3320              	 .cfi_startproc
 3321 0000 80B5     	 push {r7,lr}
 3322              	.LCFI139:
 3323              	 .cfi_def_cfa_offset 8
 3324              	 .cfi_offset 7,-8
 3325              	 .cfi_offset 14,-4
 3326 0002 84B0     	 sub sp,sp,#16
 3327              	.LCFI140:
 3328              	 .cfi_def_cfa_offset 24
 3329 0004 00AF     	 add r7,sp,#0
 3330              	.LCFI141:
 3331              	 .cfi_def_cfa_register 7
 3332 0006 7860     	 str r0,[r7,#4]
 3333 0008 0A1C     	 mov r2,r1
 3334 000a FB1C     	 add r3,r7,#3
 3335 000c 1A70     	 strb r2,[r3]
1089:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1090:../Libraries/XMCLib/src/xmc_vadc.c **** 
1091:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTriggerEdge:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
1092:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTriggerEdge:Wrong Trigger Port", ((trigger_edge)<= XMC_VADC_
1093:../Libraries/XMCLib/src/xmc_vadc.c **** 
1094:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 3336              	 .loc 2 1094 0
 3337 000e 7A68     	 ldr r2,[r7,#4]
 3338 0010 9023     	 mov r3,#144
 3339 0012 5B00     	 lsl r3,r3,#1
 3340 0014 D358     	 ldr r3,[r2,r3]
 3341 0016 FB60     	 str r3,[r7,#12]
1095:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
 3342              	 .loc 2 1095 0
 3343 0018 FB68     	 ldr r3,[r7,#12]
 3344 001a 8022     	 mov r2,#128
 3345 001c 1202     	 lsl r2,r2,#8
 3346 001e 1343     	 orr r3,r2
 3347 0020 FB60     	 str r3,[r7,#12]
1096:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_XTMODE_Msk);
 3348              	 .loc 2 1096 0
 3349 0022 FB68     	 ldr r3,[r7,#12]
 3350 0024 084A     	 ldr r2,.L139
 3351 0026 1340     	 and r3,r2
 3352 0028 FB60     	 str r3,[r7,#12]
1097:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_G_ASCTRL_XTMODE_Pos);
 3353              	 .loc 2 1097 0
 3354 002a FB1C     	 add r3,r7,#3
 3355 002c 1B78     	 ldrb r3,[r3]
 3356 002e 5B03     	 lsl r3,r3,#13
 3357 0030 FA68     	 ldr r2,[r7,#12]
 3358 0032 1343     	 orr r3,r2
 3359 0034 FB60     	 str r3,[r7,#12]
1098:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 3360              	 .loc 2 1098 0
 3361 0036 7A68     	 ldr r2,[r7,#4]
 3362 0038 9023     	 mov r3,#144
 3363 003a 5B00     	 lsl r3,r3,#1
 3364 003c F968     	 ldr r1,[r7,#12]
 3365 003e D150     	 str r1,[r2,r3]
1099:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3366              	 .loc 2 1099 0
 3367 0040 BD46     	 mov sp,r7
 3368 0042 04B0     	 add sp,sp,#16
 3369              	 
 3370 0044 80BD     	 pop {r7,pc}
 3371              	.L140:
 3372 0046 C046     	 .align 2
 3373              	.L139:
 3374 0048 FF9FFFFF 	 .word -24577
 3375              	 .cfi_endproc
 3376              	.LFE188:
 3378              	 .section .text.XMC_VADC_GROUP_ScanSelectGating,"ax",%progbits
 3379              	 .align 2
 3380              	 .global XMC_VADC_GROUP_ScanSelectGating
 3381              	 .code 16
 3382              	 .thumb_func
 3384              	XMC_VADC_GROUP_ScanSelectGating:
 3385              	.LFB189:
1100:../Libraries/XMCLib/src/xmc_vadc.c **** 
1101:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger gating input for Group Scan request source */
1102:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
1103:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3386              	 .loc 2 1103 0
 3387              	 .cfi_startproc
 3388 0000 80B5     	 push {r7,lr}
 3389              	.LCFI142:
 3390              	 .cfi_def_cfa_offset 8
 3391              	 .cfi_offset 7,-8
 3392              	 .cfi_offset 14,-4
 3393 0002 84B0     	 sub sp,sp,#16
 3394              	.LCFI143:
 3395              	 .cfi_def_cfa_offset 24
 3396 0004 00AF     	 add r7,sp,#0
 3397              	.LCFI144:
 3398              	 .cfi_def_cfa_register 7
 3399 0006 7860     	 str r0,[r7,#4]
 3400 0008 0A1C     	 mov r2,r1
 3401 000a FB1C     	 add r3,r7,#3
 3402 000c 1A70     	 strb r2,[r3]
1104:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1105:../Libraries/XMCLib/src/xmc_vadc.c **** 
1106:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectGating:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
1107:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectGating:Wrong Gating Port", ((gating_input)< XMC_VADC_NUM_POR
1108:../Libraries/XMCLib/src/xmc_vadc.c **** 
1109:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 3403              	 .loc 2 1109 0
 3404 000e 7A68     	 ldr r2,[r7,#4]
 3405 0010 9023     	 mov r3,#144
 3406 0012 5B00     	 lsl r3,r3,#1
 3407 0014 D358     	 ldr r3,[r2,r3]
 3408 0016 FB60     	 str r3,[r7,#12]
1110:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)VADC_G_ASCTRL_GTWC_Msk;
 3409              	 .loc 2 1110 0
 3410 0018 FB68     	 ldr r3,[r7,#12]
 3411 001a 8022     	 mov r2,#128
 3412 001c 1204     	 lsl r2,r2,#16
 3413 001e 1343     	 orr r3,r2
 3414 0020 FB60     	 str r3,[r7,#12]
1111:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_GTSEL_Msk);
 3415              	 .loc 2 1111 0
 3416 0022 FB68     	 ldr r3,[r7,#12]
 3417 0024 084A     	 ldr r2,.L142
 3418 0026 1340     	 and r3,r2
 3419 0028 FB60     	 str r3,[r7,#12]
1112:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)gating_input << VADC_G_ASCTRL_GTSEL_Pos);
 3420              	 .loc 2 1112 0
 3421 002a FB1C     	 add r3,r7,#3
 3422 002c 1B78     	 ldrb r3,[r3]
 3423 002e 1B04     	 lsl r3,r3,#16
 3424 0030 FA68     	 ldr r2,[r7,#12]
 3425 0032 1343     	 orr r3,r2
 3426 0034 FB60     	 str r3,[r7,#12]
1113:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 3427              	 .loc 2 1113 0
 3428 0036 7A68     	 ldr r2,[r7,#4]
 3429 0038 9023     	 mov r3,#144
 3430 003a 5B00     	 lsl r3,r3,#1
 3431 003c F968     	 ldr r1,[r7,#12]
 3432 003e D150     	 str r1,[r2,r3]
1114:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3433              	 .loc 2 1114 0
 3434 0040 BD46     	 mov sp,r7
 3435 0042 04B0     	 add sp,sp,#16
 3436              	 
 3437 0044 80BD     	 pop {r7,pc}
 3438              	.L143:
 3439 0046 C046     	 .align 2
 3440              	.L142:
 3441 0048 FFFFF0FF 	 .word -983041
 3442              	 .cfi_endproc
 3443              	.LFE189:
 3445              	 .section .text.XMC_VADC_GROUP_ScanSequenceAbort,"ax",%progbits
 3446              	 .align 2
 3447              	 .global XMC_VADC_GROUP_ScanSequenceAbort
 3448              	 .code 16
 3449              	 .thumb_func
 3451              	XMC_VADC_GROUP_ScanSequenceAbort:
 3452              	.LFB190:
1115:../Libraries/XMCLib/src/xmc_vadc.c **** 
1116:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to stop an ongoing conversion of a sequence */
1117:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr)
1118:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3453              	 .loc 2 1118 0
 3454              	 .cfi_startproc
 3455 0000 80B5     	 push {r7,lr}
 3456              	.LCFI145:
 3457              	 .cfi_def_cfa_offset 8
 3458              	 .cfi_offset 7,-8
 3459              	 .cfi_offset 14,-4
 3460 0002 84B0     	 sub sp,sp,#16
 3461              	.LCFI146:
 3462              	 .cfi_def_cfa_offset 24
 3463 0004 00AF     	 add r7,sp,#0
 3464              	.LCFI147:
 3465              	 .cfi_def_cfa_register 7
 3466 0006 7860     	 str r0,[r7,#4]
1119:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t asctrl;
1120:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1121:../Libraries/XMCLib/src/xmc_vadc.c **** 
1122:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSequenceAbort:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1123:../Libraries/XMCLib/src/xmc_vadc.c **** 
1124:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable trigger and gating before abort*/
1125:../Libraries/XMCLib/src/xmc_vadc.c ****   asctrl = group_ptr->ASCTRL;
 3467              	 .loc 2 1125 0
 3468 0008 7A68     	 ldr r2,[r7,#4]
 3469 000a 9023     	 mov r3,#144
 3470 000c 5B00     	 lsl r3,r3,#1
 3471 000e D358     	 ldr r3,[r2,r3]
 3472 0010 FB60     	 str r3,[r7,#12]
1126:../Libraries/XMCLib/src/xmc_vadc.c **** 
1127:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL =(0U | (uint32_t)VADC_G_ASCTRL_XTWC_Msk |
 3473              	 .loc 2 1127 0
 3474 0012 7A68     	 ldr r2,[r7,#4]
 3475 0014 9023     	 mov r3,#144
 3476 0016 5B00     	 lsl r3,r3,#1
 3477 0018 1E49     	 ldr r1,.L145
 3478 001a D150     	 str r1,[r2,r3]
1128:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
1129:../Libraries/XMCLib/src/xmc_vadc.c **** 
1130:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable Arbitration before abort*/
1131:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN1_Pos) & 1U);
 3479              	 .loc 2 1131 0
 3480 001c 7B68     	 ldr r3,[r7,#4]
 3481 001e 8422     	 mov r2,#132
 3482 0020 9B58     	 ldr r3,[r3,r2]
 3483 0022 5B0E     	 lsr r3,r3,#25
 3484 0024 0122     	 mov r2,#1
 3485 0026 1A40     	 and r2,r3
 3486 0028 0B23     	 mov r3,#11
 3487 002a FB18     	 add r3,r7,r3
 3488 002c 511E     	 sub r1,r2,#1
 3489 002e 8A41     	 sbc r2,r2,r1
 3490 0030 1A70     	 strb r2,[r3]
1132:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
 3491              	 .loc 2 1132 0
 3492 0032 7B68     	 ldr r3,[r7,#4]
 3493 0034 181C     	 mov r0,r3
 3494 0036 FFF7FEFF 	 bl XMC_VADC_GROUP_ScanDisableArbitrationSlot
1133:../Libraries/XMCLib/src/xmc_vadc.c **** 
1134:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENGT_Msk);
 3495              	 .loc 2 1134 0
 3496 003a 7A68     	 ldr r2,[r7,#4]
 3497 003c 9223     	 mov r3,#146
 3498 003e 5B00     	 lsl r3,r3,#1
 3499 0040 D358     	 ldr r3,[r2,r3]
 3500 0042 0322     	 mov r2,#3
 3501 0044 9343     	 bic r3,r2
 3502 0046 191C     	 mov r1,r3
 3503 0048 7A68     	 ldr r2,[r7,#4]
 3504 004a 9223     	 mov r3,#146
 3505 004c 5B00     	 lsl r3,r3,#1
 3506 004e D150     	 str r1,[r2,r3]
1135:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_CLRPND_Msk;
 3507              	 .loc 2 1135 0
 3508 0050 7A68     	 ldr r2,[r7,#4]
 3509 0052 9223     	 mov r3,#146
 3510 0054 5B00     	 lsl r3,r3,#1
 3511 0056 D358     	 ldr r3,[r2,r3]
 3512 0058 8022     	 mov r2,#128
 3513 005a 5200     	 lsl r2,r2,#1
 3514 005c 1A43     	 orr r2,r3
 3515 005e 111C     	 mov r1,r2
 3516 0060 7A68     	 ldr r2,[r7,#4]
 3517 0062 9223     	 mov r3,#146
 3518 0064 5B00     	 lsl r3,r3,#1
 3519 0066 D150     	 str r1,[r2,r3]
1136:../Libraries/XMCLib/src/xmc_vadc.c **** 
1137:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Enable the arbitration slot 1*/
1138:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN1_Pos);
 3520              	 .loc 2 1138 0
 3521 0068 7B68     	 ldr r3,[r7,#4]
 3522 006a 8422     	 mov r2,#132
 3523 006c 9A58     	 ldr r2,[r3,r2]
 3524 006e 0B23     	 mov r3,#11
 3525 0070 FB18     	 add r3,r7,r3
 3526 0072 1B78     	 ldrb r3,[r3]
 3527 0074 5B06     	 lsl r3,r3,#25
 3528 0076 1A43     	 orr r2,r3
 3529 0078 7B68     	 ldr r3,[r7,#4]
 3530 007a 8421     	 mov r1,#132
 3531 007c 5A50     	 str r2,[r3,r1]
1139:../Libraries/XMCLib/src/xmc_vadc.c **** 
1140:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1141:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL =(asctrl | (uint32_t)VADC_G_ASCTRL_XTWC_Msk |
1142:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
 3532              	 .loc 2 1142 0
 3533 007e FB68     	 ldr r3,[r7,#12]
 3534 0080 044A     	 ldr r2,.L145
 3535 0082 1A43     	 orr r2,r3
 3536 0084 111C     	 mov r1,r2
1141:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
 3537              	 .loc 2 1141 0
 3538 0086 7A68     	 ldr r2,[r7,#4]
 3539 0088 9023     	 mov r3,#144
 3540 008a 5B00     	 lsl r3,r3,#1
 3541 008c D150     	 str r1,[r2,r3]
1143:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3542              	 .loc 2 1143 0
 3543 008e BD46     	 mov sp,r7
 3544 0090 04B0     	 add sp,sp,#16
 3545              	 
 3546 0092 80BD     	 pop {r7,pc}
 3547              	.L146:
 3548              	 .align 2
 3549              	.L145:
 3550 0094 00808080 	 .word -2139062272
 3551              	 .cfi_endproc
 3552              	.LFE190:
 3554              	 .section .text.XMC_VADC_GROUP_ScanGetNumChannelsPending,"ax",%progbits
 3555              	 .align 2
 3556              	 .global XMC_VADC_GROUP_ScanGetNumChannelsPending
 3557              	 .code 16
 3558              	 .thumb_func
 3560              	XMC_VADC_GROUP_ScanGetNumChannelsPending:
 3561              	.LFB191:
1144:../Libraries/XMCLib/src/xmc_vadc.c **** 
1145:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to find out number of channels awaiting conversion */
1146:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr)
1147:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3562              	 .loc 2 1147 0
 3563              	 .cfi_startproc
 3564 0000 80B5     	 push {r7,lr}
 3565              	.LCFI148:
 3566              	 .cfi_def_cfa_offset 8
 3567              	 .cfi_offset 7,-8
 3568              	 .cfi_offset 14,-4
 3569 0002 86B0     	 sub sp,sp,#24
 3570              	.LCFI149:
 3571              	 .cfi_def_cfa_offset 32
 3572 0004 00AF     	 add r7,sp,#0
 3573              	.LCFI150:
 3574              	 .cfi_def_cfa_register 7
 3575 0006 7860     	 str r0,[r7,#4]
1148:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1149:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1150:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t count;
1151:../Libraries/XMCLib/src/xmc_vadc.c **** 
1152:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanGetNumChannelsPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1153:../Libraries/XMCLib/src/xmc_vadc.c **** 
1154:../Libraries/XMCLib/src/xmc_vadc.c **** 
1155:../Libraries/XMCLib/src/xmc_vadc.c ****   count = 0U;
 3576              	 .loc 2 1155 0
 3577 0008 0023     	 mov r3,#0
 3578 000a FB60     	 str r3,[r7,#12]
1156:../Libraries/XMCLib/src/xmc_vadc.c **** 
1157:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_ptr->ASPND)
 3579              	 .loc 2 1157 0
 3580 000c 7A68     	 ldr r2,[r7,#4]
 3581 000e 9623     	 mov r3,#150
 3582 0010 5B00     	 lsl r3,r3,#1
 3583 0012 D358     	 ldr r3,[r2,r3]
 3584 0014 002B     	 cmp r3,#0
 3585 0016 17D0     	 beq .L148
1158:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1159:../Libraries/XMCLib/src/xmc_vadc.c ****     reg = group_ptr->ASPND;
 3586              	 .loc 2 1159 0
 3587 0018 7A68     	 ldr r2,[r7,#4]
 3588 001a 9623     	 mov r3,#150
 3589 001c 5B00     	 lsl r3,r3,#1
 3590 001e D358     	 ldr r3,[r2,r3]
 3591 0020 7B61     	 str r3,[r7,#20]
1160:../Libraries/XMCLib/src/xmc_vadc.c **** 
1161:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i=0U;i<XMC_VADC_NUM_CHANNELS_PER_GROUP;i++)
 3592              	 .loc 2 1161 0
 3593 0022 0023     	 mov r3,#0
 3594 0024 3B61     	 str r3,[r7,#16]
 3595 0026 0CE0     	 b .L149
 3596              	.L151:
1162:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1163:../Libraries/XMCLib/src/xmc_vadc.c ****       if (reg & 1U)
 3597              	 .loc 2 1163 0
 3598 0028 7B69     	 ldr r3,[r7,#20]
 3599 002a 0122     	 mov r2,#1
 3600 002c 1340     	 and r3,r2
 3601 002e 02D0     	 beq .L150
1164:../Libraries/XMCLib/src/xmc_vadc.c ****       {
1165:../Libraries/XMCLib/src/xmc_vadc.c ****         count++;
 3602              	 .loc 2 1165 0
 3603 0030 FB68     	 ldr r3,[r7,#12]
 3604 0032 0133     	 add r3,r3,#1
 3605 0034 FB60     	 str r3,[r7,#12]
 3606              	.L150:
1166:../Libraries/XMCLib/src/xmc_vadc.c ****       }
1167:../Libraries/XMCLib/src/xmc_vadc.c ****       reg = (uint32_t)(reg >> (uint32_t)1);
 3607              	 .loc 2 1167 0 discriminator 2
 3608 0036 7B69     	 ldr r3,[r7,#20]
 3609 0038 5B08     	 lsr r3,r3,#1
 3610 003a 7B61     	 str r3,[r7,#20]
1161:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 3611              	 .loc 2 1161 0 discriminator 2
 3612 003c 3B69     	 ldr r3,[r7,#16]
 3613 003e 0133     	 add r3,r3,#1
 3614 0040 3B61     	 str r3,[r7,#16]
 3615              	.L149:
1161:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 3616              	 .loc 2 1161 0 is_stmt 0 discriminator 1
 3617 0042 3B69     	 ldr r3,[r7,#16]
 3618 0044 072B     	 cmp r3,#7
 3619 0046 EFD9     	 bls .L151
 3620              	.L148:
1168:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1169:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1170:../Libraries/XMCLib/src/xmc_vadc.c **** 
1171:../Libraries/XMCLib/src/xmc_vadc.c ****   return count;
 3621              	 .loc 2 1171 0 is_stmt 1
 3622 0048 FB68     	 ldr r3,[r7,#12]
1172:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3623              	 .loc 2 1172 0
 3624 004a 181C     	 mov r0,r3
 3625 004c BD46     	 mov sp,r7
 3626 004e 06B0     	 add sp,sp,#24
 3627              	 
 3628 0050 80BD     	 pop {r7,pc}
 3629              	 .cfi_endproc
 3630              	.LFE191:
 3632 0052 C046     	 .section .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode,"ax",%progbits
 3633              	 .align 2
 3634              	 .global XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode
 3635              	 .code 16
 3636              	 .thumb_func
 3638              	XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:
 3639              	.LFB192:
1173:../Libraries/XMCLib/src/xmc_vadc.c **** 
1174:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select a service request line (NVIC Node) for request source event */
1175:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
1176:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3640              	 .loc 2 1176 0
 3641              	 .cfi_startproc
 3642 0000 80B5     	 push {r7,lr}
 3643              	.LCFI151:
 3644              	 .cfi_def_cfa_offset 8
 3645              	 .cfi_offset 7,-8
 3646              	 .cfi_offset 14,-4
 3647 0002 84B0     	 sub sp,sp,#16
 3648              	.LCFI152:
 3649              	 .cfi_def_cfa_offset 24
 3650 0004 00AF     	 add r7,sp,#0
 3651              	.LCFI153:
 3652              	 .cfi_def_cfa_register 7
 3653 0006 7860     	 str r0,[r7,#4]
 3654 0008 0A1C     	 mov r2,r1
 3655 000a FB1C     	 add r3,r7,#3
 3656 000c 1A70     	 strb r2,[r3]
1177:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sevnp;
1178:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp = group_ptr->SEVNP;
 3657              	 .loc 2 1178 0
 3658 000e 7A68     	 ldr r2,[r7,#4]
 3659 0010 E023     	 mov r3,#224
 3660 0012 5B00     	 lsl r3,r3,#1
 3661 0014 D358     	 ldr r3,[r2,r3]
 3662 0016 FB60     	 str r3,[r7,#12]
1179:../Libraries/XMCLib/src/xmc_vadc.c **** 
1180:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_G
1181:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_
1182:../Libraries/XMCLib/src/xmc_vadc.c **** 
1183:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV1NP_Msk);
 3663              	 .loc 2 1183 0
 3664 0018 FB68     	 ldr r3,[r7,#12]
 3665 001a F022     	 mov r2,#240
 3666 001c 9343     	 bic r3,r2
 3667 001e FB60     	 str r3,[r7,#12]
1184:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV1NP_Pos);
 3668              	 .loc 2 1184 0
 3669 0020 FB1C     	 add r3,r7,#3
 3670 0022 1B78     	 ldrb r3,[r3]
 3671 0024 1B01     	 lsl r3,r3,#4
 3672 0026 FA68     	 ldr r2,[r7,#12]
 3673 0028 1343     	 orr r3,r2
 3674 002a FB60     	 str r3,[r7,#12]
1185:../Libraries/XMCLib/src/xmc_vadc.c **** 
1186:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SEVNP = sevnp;
 3675              	 .loc 2 1186 0
 3676 002c 7A68     	 ldr r2,[r7,#4]
 3677 002e E023     	 mov r3,#224
 3678 0030 5B00     	 lsl r3,r3,#1
 3679 0032 F968     	 ldr r1,[r7,#12]
 3680 0034 D150     	 str r1,[r2,r3]
1187:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3681              	 .loc 2 1187 0
 3682 0036 BD46     	 mov sp,r7
 3683 0038 04B0     	 add sp,sp,#16
 3684              	 
 3685 003a 80BD     	 pop {r7,pc}
 3686              	 .cfi_endproc
 3687              	.LFE192:
 3689              	 .section .text.XMC_VADC_GROUP_ScanRemoveChannel,"ax",%progbits
 3690              	 .align 2
 3691              	 .global XMC_VADC_GROUP_ScanRemoveChannel
 3692              	 .code 16
 3693              	 .thumb_func
 3695              	XMC_VADC_GROUP_ScanRemoveChannel:
 3696              	.LFB193:
1188:../Libraries/XMCLib/src/xmc_vadc.c **** 
1189:../Libraries/XMCLib/src/xmc_vadc.c **** /* Removes the selected channel from conversion*/
1190:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
1191:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3697              	 .loc 2 1191 0
 3698              	 .cfi_startproc
 3699 0000 80B5     	 push {r7,lr}
 3700              	.LCFI154:
 3701              	 .cfi_def_cfa_offset 8
 3702              	 .cfi_offset 7,-8
 3703              	 .cfi_offset 14,-4
 3704 0002 84B0     	 sub sp,sp,#16
 3705              	.LCFI155:
 3706              	 .cfi_def_cfa_offset 24
 3707 0004 00AF     	 add r7,sp,#0
 3708              	.LCFI156:
 3709              	 .cfi_def_cfa_register 7
 3710 0006 7860     	 str r0,[r7,#4]
 3711 0008 3960     	 str r1,[r7]
1192:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t assel;
1193:../Libraries/XMCLib/src/xmc_vadc.c **** 
1194:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanRemoveChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1195:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanRemoveChannel:Wrong channel number", ((channel_num)< XMC_VADC_NUM_
1196:../Libraries/XMCLib/src/xmc_vadc.c **** 
1197:../Libraries/XMCLib/src/xmc_vadc.c ****   assel = group_ptr->ASSEL; 
 3712              	 .loc 2 1197 0
 3713 000a 7A68     	 ldr r2,[r7,#4]
 3714 000c 9423     	 mov r3,#148
 3715 000e 5B00     	 lsl r3,r3,#1
 3716 0010 D358     	 ldr r3,[r2,r3]
 3717 0012 FB60     	 str r3,[r7,#12]
1198:../Libraries/XMCLib/src/xmc_vadc.c ****   assel &= (~( 1 << channel_num));
 3718              	 .loc 2 1198 0
 3719 0014 3B68     	 ldr r3,[r7]
 3720 0016 0122     	 mov r2,#1
 3721 0018 9A40     	 lsl r2,r2,r3
 3722 001a 131C     	 mov r3,r2
 3723 001c DB43     	 mvn r3,r3
 3724 001e 1A1C     	 mov r2,r3
 3725 0020 FB68     	 ldr r3,[r7,#12]
 3726 0022 1340     	 and r3,r2
 3727 0024 FB60     	 str r3,[r7,#12]
1199:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASSEL  = assel;
 3728              	 .loc 2 1199 0
 3729 0026 7A68     	 ldr r2,[r7,#4]
 3730 0028 9423     	 mov r3,#148
 3731 002a 5B00     	 lsl r3,r3,#1
 3732 002c F968     	 ldr r1,[r7,#12]
 3733 002e D150     	 str r1,[r2,r3]
1200:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3734              	 .loc 2 1200 0
 3735 0030 BD46     	 mov sp,r7
 3736 0032 04B0     	 add sp,sp,#16
 3737              	 
 3738 0034 80BD     	 pop {r7,pc}
 3739              	 .cfi_endproc
 3740              	.LFE193:
 3742 0036 C046     	 .section .text.XMC_VADC_GLOBAL_BackgroundInit,"ax",%progbits
 3743              	 .align 2
 3744              	 .global XMC_VADC_GLOBAL_BackgroundInit
 3745              	 .code 16
 3746              	 .thumb_func
 3748              	XMC_VADC_GLOBAL_BackgroundInit:
 3749              	.LFB194:
1201:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1202:../Libraries/XMCLib/src/xmc_vadc.c **** 
1203:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize background scan request source hardware */
1204:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
1205:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3750              	 .loc 2 1205 0
 3751              	 .cfi_startproc
 3752 0000 80B5     	 push {r7,lr}
 3753              	.LCFI157:
 3754              	 .cfi_def_cfa_offset 8
 3755              	 .cfi_offset 7,-8
 3756              	 .cfi_offset 14,-4
 3757 0002 86B0     	 sub sp,sp,#24
 3758              	.LCFI158:
 3759              	 .cfi_def_cfa_offset 32
 3760 0004 00AF     	 add r7,sp,#0
 3761              	.LCFI159:
 3762              	 .cfi_def_cfa_register 7
 3763 0006 7860     	 str r0,[r7,#4]
 3764 0008 3960     	 str r1,[r7]
1206:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1207:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t i;
1208:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1209:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t conv_start_mask;
1210:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1211:../Libraries/XMCLib/src/xmc_vadc.c ****   
1212:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))
1213:../Libraries/XMCLib/src/xmc_vadc.c **** 
1214:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1215:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3765              	 .loc 2 1215 0
 3766 000a 1723     	 mov r3,#23
 3767 000c FB18     	 add r3,r7,r3
 3768 000e 0022     	 mov r2,#0
 3769 0010 1A70     	 strb r2,[r3]
 3770 0012 0FE0     	 b .L156
 3771              	.L157:
1216:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1217:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 3772              	 .loc 2 1217 0 discriminator 3
 3773 0014 1723     	 mov r3,#23
 3774 0016 FB18     	 add r3,r7,r3
 3775 0018 1A78     	 ldrb r2,[r3]
 3776 001a 4A4B     	 ldr r3,.L164
 3777 001c 9200     	 lsl r2,r2,#2
 3778 001e D358     	 ldr r3,[r2,r3]
 3779 0020 181C     	 mov r0,r3
 3780 0022 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
1215:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3781              	 .loc 2 1215 0 discriminator 3
 3782 0026 1723     	 mov r3,#23
 3783 0028 FB18     	 add r3,r7,r3
 3784 002a 1A78     	 ldrb r2,[r3]
 3785 002c 1723     	 mov r3,#23
 3786 002e FB18     	 add r3,r7,r3
 3787 0030 0132     	 add r2,r2,#1
 3788 0032 1A70     	 strb r2,[r3]
 3789              	.L156:
1215:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3790              	 .loc 2 1215 0 is_stmt 0 discriminator 1
 3791 0034 1723     	 mov r3,#23
 3792 0036 FB18     	 add r3,r7,r3
 3793 0038 1B78     	 ldrb r3,[r3]
 3794 003a 012B     	 cmp r3,#1
 3795 003c EAD9     	 bls .L157
1218:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1219:../Libraries/XMCLib/src/xmc_vadc.c ****   
1220:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_start_mask = (uint32_t) 0;
 3796              	 .loc 2 1220 0 is_stmt 1
 3797 003e 0023     	 mov r3,#0
 3798 0040 3B61     	 str r3,[r7,#16]
1221:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 3799              	 .loc 2 1221 0
 3800 0042 3B68     	 ldr r3,[r7]
 3801 0044 1B78     	 ldrb r3,[r3]
 3802 0046 0322     	 mov r2,#3
 3803 0048 1340     	 and r3,r2
 3804 004a DBB2     	 uxtb r3,r3
 3805 004c 002B     	 cmp r3,#0
 3806 004e 02D0     	 beq .L158
1222:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1223:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 3807              	 .loc 2 1223 0
 3808 0050 8023     	 mov r3,#128
 3809 0052 1B01     	 lsl r3,r3,#4
 3810 0054 3B61     	 str r3,[r7,#16]
 3811              	.L158:
1224:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1225:../Libraries/XMCLib/src/xmc_vadc.c ****   
1226:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3812              	 .loc 2 1226 0
 3813 0056 1723     	 mov r3,#23
 3814 0058 FB18     	 add r3,r7,r3
 3815 005a 0022     	 mov r2,#0
 3816 005c 1A70     	 strb r2,[r3]
 3817 005e 29E0     	 b .L159
 3818              	.L160:
1227:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1228:../Libraries/XMCLib/src/xmc_vadc.c ****     reg = g_xmc_vadc_group_array[i]->ARBPR;
 3819              	 .loc 2 1228 0 discriminator 3
 3820 0060 1723     	 mov r3,#23
 3821 0062 FB18     	 add r3,r7,r3
 3822 0064 1A78     	 ldrb r2,[r3]
 3823 0066 374B     	 ldr r3,.L164
 3824 0068 9200     	 lsl r2,r2,#2
 3825 006a D358     	 ldr r3,[r2,r3]
 3826 006c 8422     	 mov r2,#132
 3827 006e 9B58     	 ldr r3,[r3,r2]
 3828 0070 FB60     	 str r3,[r7,#12]
1229:../Libraries/XMCLib/src/xmc_vadc.c **** 
1230:../Libraries/XMCLib/src/xmc_vadc.c ****     reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 3829              	 .loc 2 1230 0 discriminator 3
 3830 0072 FB68     	 ldr r3,[r7,#12]
 3831 0074 344A     	 ldr r2,.L164+4
 3832 0076 1340     	 and r3,r2
 3833 0078 FB60     	 str r3,[r7,#12]
1231:../Libraries/XMCLib/src/xmc_vadc.c **** 
1232:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Program the priority of the request source */
1233:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 3834              	 .loc 2 1233 0 discriminator 3
 3835 007a 3B68     	 ldr r3,[r7]
 3836 007c 1B78     	 ldrb r3,[r3]
 3837 007e 1B07     	 lsl r3,r3,#28
 3838 0080 9B0F     	 lsr r3,r3,#30
 3839 0082 DBB2     	 uxtb r3,r3
 3840 0084 1B02     	 lsl r3,r3,#8
 3841 0086 FA68     	 ldr r2,[r7,#12]
 3842 0088 1343     	 orr r3,r2
 3843 008a FB60     	 str r3,[r7,#12]
1234:../Libraries/XMCLib/src/xmc_vadc.c ****   
1235:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Program the start mode */
1236:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= conv_start_mask;
 3844              	 .loc 2 1236 0 discriminator 3
 3845 008c FA68     	 ldr r2,[r7,#12]
 3846 008e 3B69     	 ldr r3,[r7,#16]
 3847 0090 1343     	 orr r3,r2
 3848 0092 FB60     	 str r3,[r7,#12]
1237:../Libraries/XMCLib/src/xmc_vadc.c **** 
1238:../Libraries/XMCLib/src/xmc_vadc.c ****     g_xmc_vadc_group_array[i]->ARBPR = reg;
 3849              	 .loc 2 1238 0 discriminator 3
 3850 0094 1723     	 mov r3,#23
 3851 0096 FB18     	 add r3,r7,r3
 3852 0098 1A78     	 ldrb r2,[r3]
 3853 009a 2A4B     	 ldr r3,.L164
 3854 009c 9200     	 lsl r2,r2,#2
 3855 009e D358     	 ldr r3,[r2,r3]
 3856 00a0 8421     	 mov r1,#132
 3857 00a2 FA68     	 ldr r2,[r7,#12]
 3858 00a4 5A50     	 str r2,[r3,r1]
1226:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3859              	 .loc 2 1226 0 discriminator 3
 3860 00a6 1723     	 mov r3,#23
 3861 00a8 FB18     	 add r3,r7,r3
 3862 00aa 1A78     	 ldrb r2,[r3]
 3863 00ac 1723     	 mov r3,#23
 3864 00ae FB18     	 add r3,r7,r3
 3865 00b0 0132     	 add r2,r2,#1
 3866 00b2 1A70     	 strb r2,[r3]
 3867              	.L159:
1226:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3868              	 .loc 2 1226 0 is_stmt 0 discriminator 1
 3869 00b4 1723     	 mov r3,#23
 3870 00b6 FB18     	 add r3,r7,r3
 3871 00b8 1B78     	 ldrb r3,[r3]
 3872 00ba 012B     	 cmp r3,#1
 3873 00bc D0D9     	 bls .L160
1239:../Libraries/XMCLib/src/xmc_vadc.c ****   
1240:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1241:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1242:../Libraries/XMCLib/src/xmc_vadc.c **** 
1243:../Libraries/XMCLib/src/xmc_vadc.c ****   /* program BRSCTRL register */
1244:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VAD
 3874              	 .loc 2 1244 0 is_stmt 1
 3875 00be 3B68     	 ldr r3,[r7]
 3876 00c0 5B68     	 ldr r3,[r3,#4]
 3877 00c2 224A     	 ldr r2,.L164+8
 3878 00c4 1A43     	 orr r2,r3
 3879 00c6 111C     	 mov r1,r2
 3880 00c8 7A68     	 ldr r2,[r7,#4]
 3881 00ca 8023     	 mov r3,#128
 3882 00cc 9B00     	 lsl r3,r3,#2
 3883 00ce D150     	 str r1,[r2,r3]
1245:../Libraries/XMCLib/src/xmc_vadc.c **** 
1246:../Libraries/XMCLib/src/xmc_vadc.c ****   /* program BRSMR register */
1247:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << V
 3884              	 .loc 2 1247 0
 3885 00d0 3B68     	 ldr r3,[r7]
 3886 00d2 9B68     	 ldr r3,[r3,#8]
 3887 00d4 0122     	 mov r2,#1
 3888 00d6 1A43     	 orr r2,r3
 3889 00d8 111C     	 mov r1,r2
 3890 00da 7A68     	 ldr r2,[r7,#4]
 3891 00dc 8123     	 mov r3,#129
 3892 00de 9B00     	 lsl r3,r3,#2
 3893 00e0 D150     	 str r1,[r2,r3]
1248:../Libraries/XMCLib/src/xmc_vadc.c ****   
1249:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1250:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 3894              	 .loc 2 1250 0
 3895 00e2 3B68     	 ldr r3,[r7]
 3896 00e4 1B78     	 ldrb r3,[r3]
 3897 00e6 0322     	 mov r2,#3
 3898 00e8 1340     	 and r3,r2
 3899 00ea DBB2     	 uxtb r3,r3
 3900 00ec 022B     	 cmp r3,#2
 3901 00ee 0BD1     	 bne .L161
1251:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1252:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 3902              	 .loc 2 1252 0
 3903 00f0 7A68     	 ldr r2,[r7,#4]
 3904 00f2 8123     	 mov r3,#129
 3905 00f4 9B00     	 lsl r3,r3,#2
 3906 00f6 D358     	 ldr r3,[r2,r3]
 3907 00f8 8022     	 mov r2,#128
 3908 00fa 5202     	 lsl r2,r2,#9
 3909 00fc 1A43     	 orr r2,r3
 3910 00fe 111C     	 mov r1,r2
 3911 0100 7A68     	 ldr r2,[r7,#4]
 3912 0102 8123     	 mov r3,#129
 3913 0104 9B00     	 lsl r3,r3,#2
 3914 0106 D150     	 str r1,[r2,r3]
 3915              	.L161:
1253:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1254:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1255:../Libraries/XMCLib/src/xmc_vadc.c ****   
1256:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1257:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3916              	 .loc 2 1257 0
 3917 0108 1723     	 mov r3,#23
 3918 010a FB18     	 add r3,r7,r3
 3919 010c 0022     	 mov r2,#0
 3920 010e 1A70     	 strb r2,[r3]
 3921 0110 0FE0     	 b .L162
 3922              	.L163:
1258:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1259:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 3923              	 .loc 2 1259 0 discriminator 3
 3924 0112 1723     	 mov r3,#23
 3925 0114 FB18     	 add r3,r7,r3
 3926 0116 1A78     	 ldrb r2,[r3]
 3927 0118 0A4B     	 ldr r3,.L164
 3928 011a 9200     	 lsl r2,r2,#2
 3929 011c D358     	 ldr r3,[r2,r3]
 3930 011e 181C     	 mov r0,r3
 3931 0120 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
1257:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3932              	 .loc 2 1257 0 discriminator 3
 3933 0124 1723     	 mov r3,#23
 3934 0126 FB18     	 add r3,r7,r3
 3935 0128 1A78     	 ldrb r2,[r3]
 3936 012a 1723     	 mov r3,#23
 3937 012c FB18     	 add r3,r7,r3
 3938 012e 0132     	 add r2,r2,#1
 3939 0130 1A70     	 strb r2,[r3]
 3940              	.L162:
1257:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3941              	 .loc 2 1257 0 is_stmt 0 discriminator 1
 3942 0132 1723     	 mov r3,#23
 3943 0134 FB18     	 add r3,r7,r3
 3944 0136 1B78     	 ldrb r3,[r3]
 3945 0138 012B     	 cmp r3,#1
 3946 013a EAD9     	 bls .L163
1260:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1261:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1262:../Libraries/XMCLib/src/xmc_vadc.c ****   
1263:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3947              	 .loc 2 1263 0 is_stmt 1
 3948 013c BD46     	 mov sp,r7
 3949 013e 06B0     	 add sp,sp,#24
 3950              	 
 3951 0140 80BD     	 pop {r7,pc}
 3952              	.L165:
 3953 0142 C046     	 .align 2
 3954              	.L164:
 3955 0144 00000000 	 .word g_xmc_vadc_group_array
 3956 0148 FFFCFFFF 	 .word -769
 3957 014c 00808000 	 .word 8421376
 3958              	 .cfi_endproc
 3959              	.LFE194:
 3961              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger,"ax",%progbits
 3962              	 .align 2
 3963              	 .global XMC_VADC_GLOBAL_BackgroundSelectTrigger
 3964              	 .code 16
 3965              	 .thumb_func
 3967              	XMC_VADC_GLOBAL_BackgroundSelectTrigger:
 3968              	.LFB195:
1264:../Libraries/XMCLib/src/xmc_vadc.c **** 
1265:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger for background scan request source */
1266:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
1267:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3969              	 .loc 2 1267 0
 3970              	 .cfi_startproc
 3971 0000 80B5     	 push {r7,lr}
 3972              	.LCFI160:
 3973              	 .cfi_def_cfa_offset 8
 3974              	 .cfi_offset 7,-8
 3975              	 .cfi_offset 14,-4
 3976 0002 84B0     	 sub sp,sp,#16
 3977              	.LCFI161:
 3978              	 .cfi_def_cfa_offset 24
 3979 0004 00AF     	 add r7,sp,#0
 3980              	.LCFI162:
 3981              	 .cfi_def_cfa_register 7
 3982 0006 7860     	 str r0,[r7,#4]
 3983 0008 3960     	 str r1,[r7]
1268:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1269:../Libraries/XMCLib/src/xmc_vadc.c **** 
1270:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("VADC_BCKGND_SelectTriggerInput:Wrong Module Pointer", (global_ptr == VADC))
1271:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTrigger:Wrong Trigger Port", ((input_num)< XMC_VADC_N
1272:../Libraries/XMCLib/src/xmc_vadc.c **** 
1273:../Libraries/XMCLib/src/xmc_vadc.c ****   
1274:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl       = global_ptr->BRSCTRL;
 3984              	 .loc 2 1274 0
 3985 000a 7A68     	 ldr r2,[r7,#4]
 3986 000c 8023     	 mov r3,#128
 3987 000e 9B00     	 lsl r3,r3,#2
 3988 0010 D358     	 ldr r3,[r2,r3]
 3989 0012 FB60     	 str r3,[r7,#12]
1275:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)VADC_BRSCTRL_XTWC_Msk;
 3990              	 .loc 2 1275 0
 3991 0014 FB68     	 ldr r3,[r7,#12]
 3992 0016 8022     	 mov r2,#128
 3993 0018 1202     	 lsl r2,r2,#8
 3994 001a 1343     	 orr r3,r2
 3995 001c FB60     	 str r3,[r7,#12]
1276:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      &= ~((uint32_t)VADC_BRSCTRL_XTSEL_Msk);
 3996              	 .loc 2 1276 0
 3997 001e FB68     	 ldr r3,[r7,#12]
 3998 0020 074A     	 ldr r2,.L167
 3999 0022 1340     	 and r3,r2
 4000 0024 FB60     	 str r3,[r7,#12]
1277:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_XTSEL_Pos);
 4001              	 .loc 2 1277 0
 4002 0026 3B68     	 ldr r3,[r7]
 4003 0028 1B02     	 lsl r3,r3,#8
 4004 002a FA68     	 ldr r2,[r7,#12]
 4005 002c 1343     	 orr r3,r2
 4006 002e FB60     	 str r3,[r7,#12]
1278:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 4007              	 .loc 2 1278 0
 4008 0030 7A68     	 ldr r2,[r7,#4]
 4009 0032 8023     	 mov r3,#128
 4010 0034 9B00     	 lsl r3,r3,#2
 4011 0036 F968     	 ldr r1,[r7,#12]
 4012 0038 D150     	 str r1,[r2,r3]
1279:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4013              	 .loc 2 1279 0
 4014 003a BD46     	 mov sp,r7
 4015 003c 04B0     	 add sp,sp,#16
 4016              	 
 4017 003e 80BD     	 pop {r7,pc}
 4018              	.L168:
 4019              	 .align 2
 4020              	.L167:
 4021 0040 FFF0FFFF 	 .word -3841
 4022              	 .cfi_endproc
 4023              	.LFE195:
 4025              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge,"ax",%progbits
 4026              	 .align 2
 4027              	 .global XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge
 4028              	 .code 16
 4029              	 .thumb_func
 4031              	XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:
 4032              	.LFB196:
1280:../Libraries/XMCLib/src/xmc_vadc.c **** 
1281:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1282:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr,
1283:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const XMC_VADC_TRIGGER_EDGE_t trigger_edge)
1284:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4033              	 .loc 2 1284 0
 4034              	 .cfi_startproc
 4035 0000 80B5     	 push {r7,lr}
 4036              	.LCFI163:
 4037              	 .cfi_def_cfa_offset 8
 4038              	 .cfi_offset 7,-8
 4039              	 .cfi_offset 14,-4
 4040 0002 84B0     	 sub sp,sp,#16
 4041              	.LCFI164:
 4042              	 .cfi_def_cfa_offset 24
 4043 0004 00AF     	 add r7,sp,#0
 4044              	.LCFI165:
 4045              	 .cfi_def_cfa_register 7
 4046 0006 7860     	 str r0,[r7,#4]
 4047 0008 0A1C     	 mov r2,r1
 4048 000a FB1C     	 add r3,r7,#3
 4049 000c 1A70     	 strb r2,[r3]
1285:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1286:../Libraries/XMCLib/src/xmc_vadc.c **** 
1287:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:Wrong Global Pointer", (global_ptr == VAD
1288:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:Wrong Trigger Port",
1289:../Libraries/XMCLib/src/xmc_vadc.c ****             ((trigger_edge)<= XMC_VADC_TRIGGER_EDGE_ANY))
1290:../Libraries/XMCLib/src/xmc_vadc.c **** 
1291:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = global_ptr->BRSCTRL;
 4050              	 .loc 2 1291 0
 4051 000e 7A68     	 ldr r2,[r7,#4]
 4052 0010 8023     	 mov r3,#128
 4053 0012 9B00     	 lsl r3,r3,#2
 4054 0014 D358     	 ldr r3,[r2,r3]
 4055 0016 FB60     	 str r3,[r7,#12]
1292:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_BRSCTRL_XTWC_Msk;
 4056              	 .loc 2 1292 0
 4057 0018 FB68     	 ldr r3,[r7,#12]
 4058 001a 8022     	 mov r2,#128
 4059 001c 1202     	 lsl r2,r2,#8
 4060 001e 1343     	 orr r3,r2
 4061 0020 FB60     	 str r3,[r7,#12]
1293:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_BRSCTRL_XTMODE_Msk);
 4062              	 .loc 2 1293 0
 4063 0022 FB68     	 ldr r3,[r7,#12]
 4064 0024 084A     	 ldr r2,.L170
 4065 0026 1340     	 and r3,r2
 4066 0028 FB60     	 str r3,[r7,#12]
1294:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_BRSCTRL_XTMODE_Pos);
 4067              	 .loc 2 1294 0
 4068 002a FB1C     	 add r3,r7,#3
 4069 002c 1B78     	 ldrb r3,[r3]
 4070 002e 5B03     	 lsl r3,r3,#13
 4071 0030 FA68     	 ldr r2,[r7,#12]
 4072 0032 1343     	 orr r3,r2
 4073 0034 FB60     	 str r3,[r7,#12]
1295:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 4074              	 .loc 2 1295 0
 4075 0036 7A68     	 ldr r2,[r7,#4]
 4076 0038 8023     	 mov r3,#128
 4077 003a 9B00     	 lsl r3,r3,#2
 4078 003c F968     	 ldr r1,[r7,#12]
 4079 003e D150     	 str r1,[r2,r3]
1296:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4080              	 .loc 2 1296 0
 4081 0040 BD46     	 mov sp,r7
 4082 0042 04B0     	 add sp,sp,#16
 4083              	 
 4084 0044 80BD     	 pop {r7,pc}
 4085              	.L171:
 4086 0046 C046     	 .align 2
 4087              	.L170:
 4088 0048 FF9FFFFF 	 .word -24577
 4089              	 .cfi_endproc
 4090              	.LFE196:
 4092              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectGating,"ax",%progbits
 4093              	 .align 2
 4094              	 .global XMC_VADC_GLOBAL_BackgroundSelectGating
 4095              	 .code 16
 4096              	 .thumb_func
 4098              	XMC_VADC_GLOBAL_BackgroundSelectGating:
 4099              	.LFB197:
1297:../Libraries/XMCLib/src/xmc_vadc.c **** 
1298:../Libraries/XMCLib/src/xmc_vadc.c **** 
1299:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger gate for background scan request source */
1300:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
1301:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4100              	 .loc 2 1301 0
 4101              	 .cfi_startproc
 4102 0000 80B5     	 push {r7,lr}
 4103              	.LCFI166:
 4104              	 .cfi_def_cfa_offset 8
 4105              	 .cfi_offset 7,-8
 4106              	 .cfi_offset 14,-4
 4107 0002 84B0     	 sub sp,sp,#16
 4108              	.LCFI167:
 4109              	 .cfi_def_cfa_offset 24
 4110 0004 00AF     	 add r7,sp,#0
 4111              	.LCFI168:
 4112              	 .cfi_def_cfa_register 7
 4113 0006 7860     	 str r0,[r7,#4]
 4114 0008 3960     	 str r1,[r7]
1302:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1303:../Libraries/XMCLib/src/xmc_vadc.c **** 
1304:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectGating:Wrong Module Pointer", (global_ptr == VADC))
1305:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectGating:Wrong Gating Port", ((input_num)< XMC_VADC_NUM
1306:../Libraries/XMCLib/src/xmc_vadc.c **** 
1307:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl       = global_ptr->BRSCTRL;
 4115              	 .loc 2 1307 0
 4116 000a 7A68     	 ldr r2,[r7,#4]
 4117 000c 8023     	 mov r3,#128
 4118 000e 9B00     	 lsl r3,r3,#2
 4119 0010 D358     	 ldr r3,[r2,r3]
 4120 0012 FB60     	 str r3,[r7,#12]
1308:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)VADC_BRSCTRL_GTWC_Msk;
 4121              	 .loc 2 1308 0
 4122 0014 FB68     	 ldr r3,[r7,#12]
 4123 0016 8022     	 mov r2,#128
 4124 0018 1204     	 lsl r2,r2,#16
 4125 001a 1343     	 orr r3,r2
 4126 001c FB60     	 str r3,[r7,#12]
1309:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      &= ~((uint32_t)VADC_BRSCTRL_GTSEL_Msk);
 4127              	 .loc 2 1309 0
 4128 001e FB68     	 ldr r3,[r7,#12]
 4129 0020 074A     	 ldr r2,.L173
 4130 0022 1340     	 and r3,r2
 4131 0024 FB60     	 str r3,[r7,#12]
1310:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_GTSEL_Pos);
 4132              	 .loc 2 1310 0
 4133 0026 3B68     	 ldr r3,[r7]
 4134 0028 1B04     	 lsl r3,r3,#16
 4135 002a FA68     	 ldr r2,[r7,#12]
 4136 002c 1343     	 orr r3,r2
 4137 002e FB60     	 str r3,[r7,#12]
1311:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 4138              	 .loc 2 1311 0
 4139 0030 7A68     	 ldr r2,[r7,#4]
 4140 0032 8023     	 mov r3,#128
 4141 0034 9B00     	 lsl r3,r3,#2
 4142 0036 F968     	 ldr r1,[r7,#12]
 4143 0038 D150     	 str r1,[r2,r3]
1312:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4144              	 .loc 2 1312 0
 4145 003a BD46     	 mov sp,r7
 4146 003c 04B0     	 add sp,sp,#16
 4147              	 
 4148 003e 80BD     	 pop {r7,pc}
 4149              	.L174:
 4150              	 .align 2
 4151              	.L173:
 4152 0040 FFFFF0FF 	 .word -983041
 4153              	 .cfi_endproc
 4154              	.LFE197:
 4156              	 .section .text.XMC_VADC_GLOBAL_BackgroundAbortSequence,"ax",%progbits
 4157              	 .align 2
 4158              	 .global XMC_VADC_GLOBAL_BackgroundAbortSequence
 4159              	 .code 16
 4160              	 .thumb_func
 4162              	XMC_VADC_GLOBAL_BackgroundAbortSequence:
 4163              	.LFB198:
1313:../Libraries/XMCLib/src/xmc_vadc.c **** 
1314:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort ongoing conversion of a sequence */
1315:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr)
1316:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4164              	 .loc 2 1316 0
 4165              	 .cfi_startproc
 4166 0000 80B5     	 push {r7,lr}
 4167              	.LCFI169:
 4168              	 .cfi_def_cfa_offset 8
 4169              	 .cfi_offset 7,-8
 4170              	 .cfi_offset 14,-4
 4171 0002 86B0     	 sub sp,sp,#24
 4172              	.LCFI170:
 4173              	 .cfi_def_cfa_offset 32
 4174 0004 00AF     	 add r7,sp,#0
 4175              	.LCFI171:
 4176              	 .cfi_def_cfa_register 7
 4177 0006 7860     	 str r0,[r7,#4]
1317:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t brsctrl;
1318:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1319:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1320:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t grp_asen2_flag[XMC_VADC_MAXIMUM_NUM_GROUPS];
1321:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1322:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAbortSequence:Wrong Module Pointer", (global_ptr == VADC))
1323:../Libraries/XMCLib/src/xmc_vadc.c **** 
1324:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable trigger and gating before abort*/
1325:../Libraries/XMCLib/src/xmc_vadc.c ****   brsctrl = global_ptr->BRSCTRL;
 4178              	 .loc 2 1325 0
 4179 0008 7A68     	 ldr r2,[r7,#4]
 4180 000a 8023     	 mov r3,#128
 4181 000c 9B00     	 lsl r3,r3,#2
 4182 000e D358     	 ldr r3,[r2,r3]
 4183 0010 3B61     	 str r3,[r7,#16]
1326:../Libraries/XMCLib/src/xmc_vadc.c **** 
1327:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL =(0U | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 4184              	 .loc 2 1327 0
 4185 0012 7A68     	 ldr r2,[r7,#4]
 4186 0014 8023     	 mov r3,#128
 4187 0016 9B00     	 lsl r3,r3,#2
 4188 0018 2649     	 ldr r1,.L181
 4189 001a D150     	 str r1,[r2,r3]
1328:../Libraries/XMCLib/src/xmc_vadc.c **** 
1329:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable Background Request source */
1330:../Libraries/XMCLib/src/xmc_vadc.c **** 
1331:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1332:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 4190              	 .loc 2 1332 0
 4191 001c 0023     	 mov r3,#0
 4192 001e 7B61     	 str r3,[r7,#20]
 4193 0020 17E0     	 b .L176
 4194              	.L177:
1333:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1334:../Libraries/XMCLib/src/xmc_vadc.c ****     grp_asen2_flag[i] = (uint8_t)(g_xmc_vadc_group_array[i]->ARBPR >> VADC_G_ARBPR_ASEN2_Pos);
 4195              	 .loc 2 1334 0 discriminator 3
 4196 0022 254B     	 ldr r3,.L181+4
 4197 0024 7A69     	 ldr r2,[r7,#20]
 4198 0026 9200     	 lsl r2,r2,#2
 4199 0028 D358     	 ldr r3,[r2,r3]
 4200 002a 8422     	 mov r2,#132
 4201 002c 9B58     	 ldr r3,[r3,r2]
 4202 002e 9B0E     	 lsr r3,r3,#26
 4203 0030 D9B2     	 uxtb r1,r3
 4204 0032 0C23     	 mov r3,#12
 4205 0034 FA18     	 add r2,r7,r3
 4206 0036 7B69     	 ldr r3,[r7,#20]
 4207 0038 D318     	 add r3,r2,r3
 4208 003a 0A1C     	 add r2,r1,#0
 4209 003c 1A70     	 strb r2,[r3]
1335:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 4210              	 .loc 2 1335 0 discriminator 3
 4211 003e 1E4B     	 ldr r3,.L181+4
 4212 0040 7A69     	 ldr r2,[r7,#20]
 4213 0042 9200     	 lsl r2,r2,#2
 4214 0044 D358     	 ldr r3,[r2,r3]
 4215 0046 181C     	 mov r0,r3
 4216 0048 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
1332:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4217              	 .loc 2 1332 0 discriminator 3
 4218 004c 7B69     	 ldr r3,[r7,#20]
 4219 004e 0133     	 add r3,r3,#1
 4220 0050 7B61     	 str r3,[r7,#20]
 4221              	.L176:
1332:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4222              	 .loc 2 1332 0 is_stmt 0 discriminator 1
 4223 0052 7B69     	 ldr r3,[r7,#20]
 4224 0054 012B     	 cmp r3,#1
 4225 0056 E4D9     	 bls .L177
1336:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1337:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1338:../Libraries/XMCLib/src/xmc_vadc.c **** 
1339:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Abort the ongoing sequence */
1340:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_CLRPND_Msk;
 4226              	 .loc 2 1340 0 is_stmt 1
 4227 0058 7A68     	 ldr r2,[r7,#4]
 4228 005a 8123     	 mov r3,#129
 4229 005c 9B00     	 lsl r3,r3,#2
 4230 005e D358     	 ldr r3,[r2,r3]
 4231 0060 8022     	 mov r2,#128
 4232 0062 5200     	 lsl r2,r2,#1
 4233 0064 1A43     	 orr r2,r3
 4234 0066 111C     	 mov r1,r2
 4235 0068 7A68     	 ldr r2,[r7,#4]
 4236 006a 8123     	 mov r3,#129
 4237 006c 9B00     	 lsl r3,r3,#2
 4238 006e D150     	 str r1,[r2,r3]
1341:../Libraries/XMCLib/src/xmc_vadc.c **** 
1342:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1343:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable Background Request source */
1344:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 4239              	 .loc 2 1344 0
 4240 0070 0023     	 mov r3,#0
 4241 0072 7B61     	 str r3,[r7,#20]
 4242 0074 10E0     	 b .L178
 4243              	.L180:
1345:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1346:../Libraries/XMCLib/src/xmc_vadc.c ****     if ((uint8_t)1 == grp_asen2_flag[i])
 4244              	 .loc 2 1346 0
 4245 0076 0C23     	 mov r3,#12
 4246 0078 FA18     	 add r2,r7,r3
 4247 007a 7B69     	 ldr r3,[r7,#20]
 4248 007c D318     	 add r3,r2,r3
 4249 007e 1B78     	 ldrb r3,[r3]
 4250 0080 012B     	 cmp r3,#1
 4251 0082 06D1     	 bne .L179
1347:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1348:../Libraries/XMCLib/src/xmc_vadc.c ****       XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t*)g_xmc_vadc_group_array[i]);
 4252              	 .loc 2 1348 0
 4253 0084 0C4B     	 ldr r3,.L181+4
 4254 0086 7A69     	 ldr r2,[r7,#20]
 4255 0088 9200     	 lsl r2,r2,#2
 4256 008a D358     	 ldr r3,[r2,r3]
 4257 008c 181C     	 mov r0,r3
 4258 008e FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
 4259              	.L179:
1344:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4260              	 .loc 2 1344 0 discriminator 2
 4261 0092 7B69     	 ldr r3,[r7,#20]
 4262 0094 0133     	 add r3,r3,#1
 4263 0096 7B61     	 str r3,[r7,#20]
 4264              	.L178:
1344:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4265              	 .loc 2 1344 0 is_stmt 0 discriminator 1
 4266 0098 7B69     	 ldr r3,[r7,#20]
 4267 009a 012B     	 cmp r3,#1
 4268 009c EBD9     	 bls .L180
1349:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1350:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1351:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1352:../Libraries/XMCLib/src/xmc_vadc.c **** 
1353:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Re-enable any disabled trigger and gating*/
1354:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL =(brsctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk
 4269              	 .loc 2 1354 0 is_stmt 1
 4270 009e 3B69     	 ldr r3,[r7,#16]
 4271 00a0 044A     	 ldr r2,.L181
 4272 00a2 1A43     	 orr r2,r3
 4273 00a4 111C     	 mov r1,r2
 4274 00a6 7A68     	 ldr r2,[r7,#4]
 4275 00a8 8023     	 mov r3,#128
 4276 00aa 9B00     	 lsl r3,r3,#2
 4277 00ac D150     	 str r1,[r2,r3]
1355:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4278              	 .loc 2 1355 0
 4279 00ae BD46     	 mov sp,r7
 4280 00b0 06B0     	 add sp,sp,#24
 4281              	 
 4282 00b2 80BD     	 pop {r7,pc}
 4283              	.L182:
 4284              	 .align 2
 4285              	.L181:
 4286 00b4 00808000 	 .word 8421376
 4287 00b8 00000000 	 .word g_xmc_vadc_group_array
 4288              	 .cfi_endproc
 4289              	.LFE198:
 4291              	 .section .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending,"ax",%progbits
 4292              	 .align 2
 4293              	 .global XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending
 4294              	 .code 16
 4295              	 .thumb_func
 4297              	XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:
 4298              	.LFB199:
1356:../Libraries/XMCLib/src/xmc_vadc.c **** 
1357:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine how many channels are awaiting conversion */
1358:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr)
1359:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4299              	 .loc 2 1359 0
 4300              	 .cfi_startproc
 4301 0000 80B5     	 push {r7,lr}
 4302              	.LCFI172:
 4303              	 .cfi_def_cfa_offset 8
 4304              	 .cfi_offset 7,-8
 4305              	 .cfi_offset 14,-4
 4306 0002 86B0     	 sub sp,sp,#24
 4307              	.LCFI173:
 4308              	 .cfi_def_cfa_offset 32
 4309 0004 00AF     	 add r7,sp,#0
 4310              	.LCFI174:
 4311              	 .cfi_def_cfa_register 7
 4312 0006 7860     	 str r0,[r7,#4]
1360:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1361:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1362:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t j;
1363:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t count;
1364:../Libraries/XMCLib/src/xmc_vadc.c **** 
1365:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:Wrong Module Pointer", (global_ptr ==
1366:../Libraries/XMCLib/src/xmc_vadc.c **** 
1367:../Libraries/XMCLib/src/xmc_vadc.c ****   count = 0U;
 4313              	 .loc 2 1367 0
 4314 0008 0023     	 mov r3,#0
 4315 000a BB60     	 str r3,[r7,#8]
1368:../Libraries/XMCLib/src/xmc_vadc.c ****   
1369:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop through all groups and find out who is awaiting conversion */
1370:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 4316              	 .loc 2 1370 0
 4317 000c 0023     	 mov r3,#0
 4318 000e 3B61     	 str r3,[r7,#16]
 4319 0010 22E0     	 b .L184
 4320              	.L189:
1371:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1372:../Libraries/XMCLib/src/xmc_vadc.c ****     if (global_ptr->BRSSEL[i])
 4321              	 .loc 2 1372 0
 4322 0012 7B68     	 ldr r3,[r7,#4]
 4323 0014 3A69     	 ldr r2,[r7,#16]
 4324 0016 6032     	 add r2,r2,#96
 4325 0018 9200     	 lsl r2,r2,#2
 4326 001a D358     	 ldr r3,[r2,r3]
 4327 001c 002B     	 cmp r3,#0
 4328 001e 18D0     	 beq .L185
1373:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1374:../Libraries/XMCLib/src/xmc_vadc.c ****       reg = global_ptr->BRSPND[i];
 4329              	 .loc 2 1374 0
 4330 0020 7B68     	 ldr r3,[r7,#4]
 4331 0022 3A69     	 ldr r2,[r7,#16]
 4332 0024 7032     	 add r2,r2,#112
 4333 0026 9200     	 lsl r2,r2,#2
 4334 0028 D358     	 ldr r3,[r2,r3]
 4335 002a 7B61     	 str r3,[r7,#20]
1375:../Libraries/XMCLib/src/xmc_vadc.c **** 
1376:../Libraries/XMCLib/src/xmc_vadc.c ****       for(j=0U;j<XMC_VADC_NUM_CHANNELS_PER_GROUP;j++)
 4336              	 .loc 2 1376 0
 4337 002c 0023     	 mov r3,#0
 4338 002e FB60     	 str r3,[r7,#12]
 4339 0030 0CE0     	 b .L186
 4340              	.L188:
1377:../Libraries/XMCLib/src/xmc_vadc.c ****       {
1378:../Libraries/XMCLib/src/xmc_vadc.c ****         if (reg & 1U)
 4341              	 .loc 2 1378 0
 4342 0032 7B69     	 ldr r3,[r7,#20]
 4343 0034 0122     	 mov r2,#1
 4344 0036 1340     	 and r3,r2
 4345 0038 02D0     	 beq .L187
1379:../Libraries/XMCLib/src/xmc_vadc.c ****         {
1380:../Libraries/XMCLib/src/xmc_vadc.c ****           count++;
 4346              	 .loc 2 1380 0
 4347 003a BB68     	 ldr r3,[r7,#8]
 4348 003c 0133     	 add r3,r3,#1
 4349 003e BB60     	 str r3,[r7,#8]
 4350              	.L187:
1381:../Libraries/XMCLib/src/xmc_vadc.c ****         }
1382:../Libraries/XMCLib/src/xmc_vadc.c **** 
1383:../Libraries/XMCLib/src/xmc_vadc.c ****         reg = reg >> 1U;
 4351              	 .loc 2 1383 0 discriminator 2
 4352 0040 7B69     	 ldr r3,[r7,#20]
 4353 0042 5B08     	 lsr r3,r3,#1
 4354 0044 7B61     	 str r3,[r7,#20]
1376:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 4355              	 .loc 2 1376 0 discriminator 2
 4356 0046 FB68     	 ldr r3,[r7,#12]
 4357 0048 0133     	 add r3,r3,#1
 4358 004a FB60     	 str r3,[r7,#12]
 4359              	.L186:
1376:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 4360              	 .loc 2 1376 0 is_stmt 0 discriminator 1
 4361 004c FB68     	 ldr r3,[r7,#12]
 4362 004e 072B     	 cmp r3,#7
 4363 0050 EFD9     	 bls .L188
 4364              	.L185:
1370:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4365              	 .loc 2 1370 0 is_stmt 1 discriminator 2
 4366 0052 3B69     	 ldr r3,[r7,#16]
 4367 0054 0133     	 add r3,r3,#1
 4368 0056 3B61     	 str r3,[r7,#16]
 4369              	.L184:
1370:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4370              	 .loc 2 1370 0 is_stmt 0 discriminator 1
 4371 0058 3B69     	 ldr r3,[r7,#16]
 4372 005a 012B     	 cmp r3,#1
 4373 005c D9D9     	 bls .L189
1384:../Libraries/XMCLib/src/xmc_vadc.c ****       }
1385:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1386:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1387:../Libraries/XMCLib/src/xmc_vadc.c **** 
1388:../Libraries/XMCLib/src/xmc_vadc.c ****   return count;
 4374              	 .loc 2 1388 0 is_stmt 1
 4375 005e BB68     	 ldr r3,[r7,#8]
1389:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4376              	 .loc 2 1389 0
 4377 0060 181C     	 mov r0,r3
 4378 0062 BD46     	 mov sp,r7
 4379 0064 06B0     	 add sp,sp,#24
 4380              	 
 4381 0066 80BD     	 pop {r7,pc}
 4382              	 .cfi_endproc
 4383              	.LFE199:
 4385              	 .section .text.XMC_VADC_GROUP_QueueInit,"ax",%progbits
 4386              	 .align 2
 4387              	 .global XMC_VADC_GROUP_QueueInit
 4388              	 .code 16
 4389              	 .thumb_func
 4391              	XMC_VADC_GROUP_QueueInit:
 4392              	.LFB200:
1390:../Libraries/XMCLib/src/xmc_vadc.c **** 
1391:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)  
1392:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize queue request source */
1393:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
1394:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4393              	 .loc 2 1394 0
 4394              	 .cfi_startproc
 4395 0000 80B5     	 push {r7,lr}
 4396              	.LCFI175:
 4397              	 .cfi_def_cfa_offset 8
 4398              	 .cfi_offset 7,-8
 4399              	 .cfi_offset 14,-4
 4400 0002 84B0     	 sub sp,sp,#16
 4401              	.LCFI176:
 4402              	 .cfi_def_cfa_offset 24
 4403 0004 00AF     	 add r7,sp,#0
 4404              	.LCFI177:
 4405              	 .cfi_def_cfa_register 7
 4406 0006 7860     	 str r0,[r7,#4]
 4407 0008 3960     	 str r1,[r7]
1395:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t          reg;
1396:../Libraries/XMCLib/src/xmc_vadc.c **** 
1397:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1398:../Libraries/XMCLib/src/xmc_vadc.c **** 
1399:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable arbitration slot of the queue request source */
1400:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 4408              	 .loc 2 1400 0
 4409 000a 7B68     	 ldr r3,[r7,#4]
 4410 000c 181C     	 mov r0,r3
 4411 000e FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1401:../Libraries/XMCLib/src/xmc_vadc.c ****   
1402:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = group_ptr->ARBPR;
 4412              	 .loc 2 1402 0
 4413 0012 7B68     	 ldr r3,[r7,#4]
 4414 0014 8422     	 mov r2,#132
 4415 0016 9B58     	 ldr r3,[r3,r2]
 4416 0018 FB60     	 str r3,[r7,#12]
1403:../Libraries/XMCLib/src/xmc_vadc.c **** 
1404:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Request Source priority */
1405:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~((uint32_t)VADC_G_ARBPR_PRIO0_Msk);
 4417              	 .loc 2 1405 0
 4418 001a FB68     	 ldr r3,[r7,#12]
 4419 001c 0322     	 mov r2,#3
 4420 001e 9343     	 bic r3,r2
 4421 0020 FB60     	 str r3,[r7,#12]
1406:../Libraries/XMCLib/src/xmc_vadc.c ****   reg |= (uint32_t) ((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO0_Pos);
 4422              	 .loc 2 1406 0
 4423 0022 3B68     	 ldr r3,[r7]
 4424 0024 1B78     	 ldrb r3,[r3]
 4425 0026 1B07     	 lsl r3,r3,#28
 4426 0028 9B0F     	 lsr r3,r3,#30
 4427 002a DBB2     	 uxtb r3,r3
 4428 002c 1A1C     	 mov r2,r3
 4429 002e FB68     	 ldr r3,[r7,#12]
 4430 0030 1343     	 orr r3,r2
 4431 0032 FB60     	 str r3,[r7,#12]
1407:../Libraries/XMCLib/src/xmc_vadc.c **** 
1408:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Conversion Start mode */
1409:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 4432              	 .loc 2 1409 0
 4433 0034 3B68     	 ldr r3,[r7]
 4434 0036 1B78     	 ldrb r3,[r3]
 4435 0038 0322     	 mov r2,#3
 4436 003a 1340     	 and r3,r2
 4437 003c DBB2     	 uxtb r3,r3
 4438 003e 002B     	 cmp r3,#0
 4439 0040 03D0     	 beq .L192
1410:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1411:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)(VADC_G_ARBPR_CSM0_Msk);
 4440              	 .loc 2 1411 0
 4441 0042 FB68     	 ldr r3,[r7,#12]
 4442 0044 0822     	 mov r2,#8
 4443 0046 1343     	 orr r3,r2
 4444 0048 FB60     	 str r3,[r7,#12]
 4445              	.L192:
1412:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1413:../Libraries/XMCLib/src/xmc_vadc.c **** 
1414:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR = reg;
 4446              	 .loc 2 1414 0
 4447 004a 7B68     	 ldr r3,[r7,#4]
 4448 004c 8421     	 mov r1,#132
 4449 004e FA68     	 ldr r2,[r7,#12]
 4450 0050 5A50     	 str r2,[r3,r1]
1415:../Libraries/XMCLib/src/xmc_vadc.c **** 
1416:../Libraries/XMCLib/src/xmc_vadc.c **** 
1417:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (uint32_t)((config->qctrl0)|(uint32_t)(VADC_G_QCTRL0_XTWC_Msk)|
 4451              	 .loc 2 1417 0
 4452 0052 3B68     	 ldr r3,[r7]
 4453 0054 5B68     	 ldr r3,[r3,#4]
 4454 0056 154A     	 ldr r2,.L194
 4455 0058 1A43     	 orr r2,r3
 4456 005a 111C     	 mov r1,r2
 4457 005c 7A68     	 ldr r2,[r7,#4]
 4458 005e 8023     	 mov r3,#128
 4459 0060 5B00     	 lsl r3,r3,#1
 4460 0062 D150     	 str r1,[r2,r3]
1418:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     (uint32_t)(VADC_G_QCTRL0_TMWC_Msk)|
1419:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     (uint32_t)(VADC_G_QCTRL0_GTWC_Msk));
1420:../Libraries/XMCLib/src/xmc_vadc.c **** 
1421:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Gating mode */
1422:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QMR0 = ((uint32_t)(config->qmr0) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VA
 4461              	 .loc 2 1422 0
 4462 0064 3B68     	 ldr r3,[r7]
 4463 0066 9B68     	 ldr r3,[r3,#8]
 4464 0068 0122     	 mov r2,#1
 4465 006a 1A43     	 orr r2,r3
 4466 006c 111C     	 mov r1,r2
 4467 006e 7A68     	 ldr r2,[r7,#4]
 4468 0070 8223     	 mov r3,#130
 4469 0072 5B00     	 lsl r3,r3,#1
 4470 0074 D150     	 str r1,[r2,r3]
1423:../Libraries/XMCLib/src/xmc_vadc.c **** 
1424:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode) )
 4471              	 .loc 2 1424 0
 4472 0076 3B68     	 ldr r3,[r7]
 4473 0078 1B78     	 ldrb r3,[r3]
 4474 007a 0322     	 mov r2,#3
 4475 007c 1340     	 and r3,r2
 4476 007e DBB2     	 uxtb r3,r3
 4477 0080 022B     	 cmp r3,#2
 4478 0082 0BD1     	 bne .L193
1425:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1426:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_RPTDIS_Pos);
 4479              	 .loc 2 1426 0
 4480 0084 7A68     	 ldr r2,[r7,#4]
 4481 0086 8223     	 mov r3,#130
 4482 0088 5B00     	 lsl r3,r3,#1
 4483 008a D358     	 ldr r3,[r2,r3]
 4484 008c 8022     	 mov r2,#128
 4485 008e 5202     	 lsl r2,r2,#9
 4486 0090 1A43     	 orr r2,r3
 4487 0092 111C     	 mov r1,r2
 4488 0094 7A68     	 ldr r2,[r7,#4]
 4489 0096 8223     	 mov r3,#130
 4490 0098 5B00     	 lsl r3,r3,#1
 4491 009a D150     	 str r1,[r2,r3]
 4492              	.L193:
1427:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1428:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable arbitration slot for the queue request source */
1429:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptr);
 4493              	 .loc 2 1429 0
 4494 009c 7B68     	 ldr r3,[r7,#4]
 4495 009e 181C     	 mov r0,r3
 4496 00a0 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueEnableArbitrationSlot
1430:../Libraries/XMCLib/src/xmc_vadc.c **** 
1431:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4497              	 .loc 2 1431 0
 4498 00a4 BD46     	 mov sp,r7
 4499 00a6 04B0     	 add sp,sp,#16
 4500              	 
 4501 00a8 80BD     	 pop {r7,pc}
 4502              	.L195:
 4503 00aa C046     	 .align 2
 4504              	.L194:
 4505 00ac 00808080 	 .word -2139062272
 4506              	 .cfi_endproc
 4507              	.LFE200:
 4509              	 .section .text.XMC_VADC_GROUP_QueueSelectTrigger,"ax",%progbits
 4510              	 .align 2
 4511              	 .global XMC_VADC_GROUP_QueueSelectTrigger
 4512              	 .code 16
 4513              	 .thumb_func
 4515              	XMC_VADC_GROUP_QueueSelectTrigger:
 4516              	.LFB201:
1432:../Libraries/XMCLib/src/xmc_vadc.c **** 
1433:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 possible triggers as a conversion trigger for queue request source *
1434:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr,
1435:../Libraries/XMCLib/src/xmc_vadc.c ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num)
1436:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4517              	 .loc 2 1436 0
 4518              	 .cfi_startproc
 4519 0000 80B5     	 push {r7,lr}
 4520              	.LCFI178:
 4521              	 .cfi_def_cfa_offset 8
 4522              	 .cfi_offset 7,-8
 4523              	 .cfi_offset 14,-4
 4524 0002 84B0     	 sub sp,sp,#16
 4525              	.LCFI179:
 4526              	 .cfi_def_cfa_offset 24
 4527 0004 00AF     	 add r7,sp,#0
 4528              	.LCFI180:
 4529              	 .cfi_def_cfa_register 7
 4530 0006 7860     	 str r0,[r7,#4]
 4531 0008 0A1C     	 mov r2,r1
 4532 000a FB1C     	 add r3,r7,#3
 4533 000c 1A70     	 strb r2,[r3]
1437:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    qctrl;
1438:../Libraries/XMCLib/src/xmc_vadc.c ****   
1439:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1440:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTrigger:Wrong Trigger Port", ((input_num)< XMC_VADC_NUM_POR
1441:../Libraries/XMCLib/src/xmc_vadc.c **** 
1442:../Libraries/XMCLib/src/xmc_vadc.c ****   
1443:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the conversion trigger */
1444:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 4534              	 .loc 2 1444 0
 4535 000e 7A68     	 ldr r2,[r7,#4]
 4536 0010 8023     	 mov r3,#128
 4537 0012 5B00     	 lsl r3,r3,#1
 4538 0014 D358     	 ldr r3,[r2,r3]
 4539 0016 FB60     	 str r3,[r7,#12]
1445:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
 4540              	 .loc 2 1445 0
 4541 0018 FB68     	 ldr r3,[r7,#12]
 4542 001a 8022     	 mov r2,#128
 4543 001c 1202     	 lsl r2,r2,#8
 4544 001e 1343     	 orr r3,r2
 4545 0020 FB60     	 str r3,[r7,#12]
1446:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_XTSEL_Msk);
 4546              	 .loc 2 1446 0
 4547 0022 FB68     	 ldr r3,[r7,#12]
 4548 0024 084A     	 ldr r2,.L197
 4549 0026 1340     	 and r3,r2
 4550 0028 FB60     	 str r3,[r7,#12]
1447:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_XTSEL_Pos);
 4551              	 .loc 2 1447 0
 4552 002a FB1C     	 add r3,r7,#3
 4553 002c 1B78     	 ldrb r3,[r3]
 4554 002e 1B02     	 lsl r3,r3,#8
 4555 0030 FA68     	 ldr r2,[r7,#12]
 4556 0032 1343     	 orr r3,r2
 4557 0034 FB60     	 str r3,[r7,#12]
1448:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 4558              	 .loc 2 1448 0
 4559 0036 7A68     	 ldr r2,[r7,#4]
 4560 0038 8023     	 mov r3,#128
 4561 003a 5B00     	 lsl r3,r3,#1
 4562 003c F968     	 ldr r1,[r7,#12]
 4563 003e D150     	 str r1,[r2,r3]
1449:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4564              	 .loc 2 1449 0
 4565 0040 BD46     	 mov sp,r7
 4566 0042 04B0     	 add sp,sp,#16
 4567              	 
 4568 0044 80BD     	 pop {r7,pc}
 4569              	.L198:
 4570 0046 C046     	 .align 2
 4571              	.L197:
 4572 0048 FFF0FFFF 	 .word -3841
 4573              	 .cfi_endproc
 4574              	.LFE201:
 4576              	 .section .text.XMC_VADC_GROUP_QueueSelectTriggerEdge,"ax",%progbits
 4577              	 .align 2
 4578              	 .global XMC_VADC_GROUP_QueueSelectTriggerEdge
 4579              	 .code 16
 4580              	 .thumb_func
 4582              	XMC_VADC_GROUP_QueueSelectTriggerEdge:
 4583              	.LFB202:
1450:../Libraries/XMCLib/src/xmc_vadc.c **** 
1451:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1452:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
1453:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4584              	 .loc 2 1453 0
 4585              	 .cfi_startproc
 4586 0000 80B5     	 push {r7,lr}
 4587              	.LCFI181:
 4588              	 .cfi_def_cfa_offset 8
 4589              	 .cfi_offset 7,-8
 4590              	 .cfi_offset 14,-4
 4591 0002 84B0     	 sub sp,sp,#16
 4592              	.LCFI182:
 4593              	 .cfi_def_cfa_offset 24
 4594 0004 00AF     	 add r7,sp,#0
 4595              	.LCFI183:
 4596              	 .cfi_def_cfa_register 7
 4597 0006 7860     	 str r0,[r7,#4]
 4598 0008 0A1C     	 mov r2,r1
 4599 000a FB1C     	 add r3,r7,#3
 4600 000c 1A70     	 strb r2,[r3]
1454:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl;
1455:../Libraries/XMCLib/src/xmc_vadc.c **** 
1456:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTriggerEdge:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
1457:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTriggerEdge:Wrong Gating Port", ((trigger_edge)<= XMC_VADC_
1458:../Libraries/XMCLib/src/xmc_vadc.c **** 
1459:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the gating input */
1460:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 4601              	 .loc 2 1460 0
 4602 000e 7A68     	 ldr r2,[r7,#4]
 4603 0010 8023     	 mov r3,#128
 4604 0012 5B00     	 lsl r3,r3,#1
 4605 0014 D358     	 ldr r3,[r2,r3]
 4606 0016 FB60     	 str r3,[r7,#12]
1461:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
 4607              	 .loc 2 1461 0
 4608 0018 FB68     	 ldr r3,[r7,#12]
 4609 001a 8022     	 mov r2,#128
 4610 001c 1202     	 lsl r2,r2,#8
 4611 001e 1343     	 orr r3,r2
 4612 0020 FB60     	 str r3,[r7,#12]
1462:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_XTMODE_Msk);
 4613              	 .loc 2 1462 0
 4614 0022 FB68     	 ldr r3,[r7,#12]
 4615 0024 084A     	 ldr r2,.L200
 4616 0026 1340     	 and r3,r2
 4617 0028 FB60     	 str r3,[r7,#12]
1463:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)trigger_edge << VADC_G_QCTRL0_XTMODE_Pos);
 4618              	 .loc 2 1463 0
 4619 002a FB1C     	 add r3,r7,#3
 4620 002c 1B78     	 ldrb r3,[r3]
 4621 002e 5B03     	 lsl r3,r3,#13
 4622 0030 FA68     	 ldr r2,[r7,#12]
 4623 0032 1343     	 orr r3,r2
 4624 0034 FB60     	 str r3,[r7,#12]
1464:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 4625              	 .loc 2 1464 0
 4626 0036 7A68     	 ldr r2,[r7,#4]
 4627 0038 8023     	 mov r3,#128
 4628 003a 5B00     	 lsl r3,r3,#1
 4629 003c F968     	 ldr r1,[r7,#12]
 4630 003e D150     	 str r1,[r2,r3]
1465:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4631              	 .loc 2 1465 0
 4632 0040 BD46     	 mov sp,r7
 4633 0042 04B0     	 add sp,sp,#16
 4634              	 
 4635 0044 80BD     	 pop {r7,pc}
 4636              	.L201:
 4637 0046 C046     	 .align 2
 4638              	.L200:
 4639 0048 FF9FFFFF 	 .word -24577
 4640              	 .cfi_endproc
 4641              	.LFE202:
 4643              	 .section .text.XMC_VADC_GROUP_QueueSelectGating,"ax",%progbits
 4644              	 .align 2
 4645              	 .global XMC_VADC_GROUP_QueueSelectGating
 4646              	 .code 16
 4647              	 .thumb_func
 4649              	XMC_VADC_GROUP_QueueSelectGating:
 4650              	.LFB203:
1466:../Libraries/XMCLib/src/xmc_vadc.c **** 
1467:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 possible trigger gates as a trigger gating signal for queue request 
1468:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
1469:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4651              	 .loc 2 1469 0
 4652              	 .cfi_startproc
 4653 0000 80B5     	 push {r7,lr}
 4654              	.LCFI184:
 4655              	 .cfi_def_cfa_offset 8
 4656              	 .cfi_offset 7,-8
 4657              	 .cfi_offset 14,-4
 4658 0002 84B0     	 sub sp,sp,#16
 4659              	.LCFI185:
 4660              	 .cfi_def_cfa_offset 24
 4661 0004 00AF     	 add r7,sp,#0
 4662              	.LCFI186:
 4663              	 .cfi_def_cfa_register 7
 4664 0006 7860     	 str r0,[r7,#4]
 4665 0008 0A1C     	 mov r2,r1
 4666 000a FB1C     	 add r3,r7,#3
 4667 000c 1A70     	 strb r2,[r3]
1470:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl;
1471:../Libraries/XMCLib/src/xmc_vadc.c **** 
1472:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectGating:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1473:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectGating:Wrong Gating Port", ((input_num)< XMC_VADC_NUM_PORTS
1474:../Libraries/XMCLib/src/xmc_vadc.c ****   
1475:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the gating input */
1476:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 4668              	 .loc 2 1476 0
 4669 000e 7A68     	 ldr r2,[r7,#4]
 4670 0010 8023     	 mov r3,#128
 4671 0012 5B00     	 lsl r3,r3,#1
 4672 0014 D358     	 ldr r3,[r2,r3]
 4673 0016 FB60     	 str r3,[r7,#12]
1477:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)VADC_G_QCTRL0_GTWC_Msk;
 4674              	 .loc 2 1477 0
 4675 0018 FB68     	 ldr r3,[r7,#12]
 4676 001a 8022     	 mov r2,#128
 4677 001c 1204     	 lsl r2,r2,#16
 4678 001e 1343     	 orr r3,r2
 4679 0020 FB60     	 str r3,[r7,#12]
1478:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_GTSEL_Msk);
 4680              	 .loc 2 1478 0
 4681 0022 FB68     	 ldr r3,[r7,#12]
 4682 0024 084A     	 ldr r2,.L203
 4683 0026 1340     	 and r3,r2
 4684 0028 FB60     	 str r3,[r7,#12]
1479:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_GTSEL_Pos);
 4685              	 .loc 2 1479 0
 4686 002a FB1C     	 add r3,r7,#3
 4687 002c 1B78     	 ldrb r3,[r3]
 4688 002e 1B04     	 lsl r3,r3,#16
 4689 0030 FA68     	 ldr r2,[r7,#12]
 4690 0032 1343     	 orr r3,r2
 4691 0034 FB60     	 str r3,[r7,#12]
1480:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 4692              	 .loc 2 1480 0
 4693 0036 7A68     	 ldr r2,[r7,#4]
 4694 0038 8023     	 mov r3,#128
 4695 003a 5B00     	 lsl r3,r3,#1
 4696 003c F968     	 ldr r1,[r7,#12]
 4697 003e D150     	 str r1,[r2,r3]
1481:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4698              	 .loc 2 1481 0
 4699 0040 BD46     	 mov sp,r7
 4700 0042 04B0     	 add sp,sp,#16
 4701              	 
 4702 0044 80BD     	 pop {r7,pc}
 4703              	.L204:
 4704 0046 C046     	 .align 2
 4705              	.L203:
 4706 0048 FFFFF0FF 	 .word -983041
 4707              	 .cfi_endproc
 4708              	.LFE203:
 4710              	 .section .text.XMC_VADC_GROUP_QueueGetLength,"ax",%progbits
 4711              	 .align 2
 4712              	 .global XMC_VADC_GROUP_QueueGetLength
 4713              	 .code 16
 4714              	 .thumb_func
 4716              	XMC_VADC_GROUP_QueueGetLength:
 4717              	.LFB204:
1482:../Libraries/XMCLib/src/xmc_vadc.c **** 
1483:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine the number of channels in the queue (length includes the valid channel in the B
1484:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr)
1485:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4718              	 .loc 2 1485 0
 4719              	 .cfi_startproc
 4720 0000 80B5     	 push {r7,lr}
 4721              	.LCFI187:
 4722              	 .cfi_def_cfa_offset 8
 4723              	 .cfi_offset 7,-8
 4724              	 .cfi_offset 14,-4
 4725 0002 86B0     	 sub sp,sp,#24
 4726              	.LCFI188:
 4727              	 .cfi_def_cfa_offset 32
 4728 0004 00AF     	 add r7,sp,#0
 4729              	.LCFI189:
 4730              	 .cfi_def_cfa_register 7
 4731 0006 7860     	 str r0,[r7,#4]
1486:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        qsr;
1487:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        qbur0;
1488:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        length;
1489:../Libraries/XMCLib/src/xmc_vadc.c **** 
1490:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetLength:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_pt
1491:../Libraries/XMCLib/src/xmc_vadc.c **** 
1492:../Libraries/XMCLib/src/xmc_vadc.c ****   qsr = group_ptr->QSR0;
 4732              	 .loc 2 1492 0
 4733 0008 7A68     	 ldr r2,[r7,#4]
 4734 000a 8423     	 mov r3,#132
 4735 000c 5B00     	 lsl r3,r3,#1
 4736 000e D358     	 ldr r3,[r2,r3]
 4737 0010 3B61     	 str r3,[r7,#16]
1493:../Libraries/XMCLib/src/xmc_vadc.c ****   qbur0 = group_ptr->QBUR0;
 4738              	 .loc 2 1493 0
 4739 0012 7A68     	 ldr r2,[r7,#4]
 4740 0014 8823     	 mov r3,#136
 4741 0016 5B00     	 lsl r3,r3,#1
 4742 0018 D358     	 ldr r3,[r2,r3]
 4743 001a FB60     	 str r3,[r7,#12]
1494:../Libraries/XMCLib/src/xmc_vadc.c **** 
1495:../Libraries/XMCLib/src/xmc_vadc.c ****   if (qsr & (uint32_t)VADC_G_QSR0_EMPTY_Msk)
 4744              	 .loc 2 1495 0
 4745 001c 3B69     	 ldr r3,[r7,#16]
 4746 001e 2022     	 mov r2,#32
 4747 0020 1340     	 and r3,r2
 4748 0022 02D0     	 beq .L206
1496:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1497:../Libraries/XMCLib/src/xmc_vadc.c ****     length = 0U;
 4749              	 .loc 2 1497 0
 4750 0024 0023     	 mov r3,#0
 4751 0026 7B61     	 str r3,[r7,#20]
 4752 0028 04E0     	 b .L207
 4753              	.L206:
1498:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1499:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1500:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1501:../Libraries/XMCLib/src/xmc_vadc.c ****     length = (qsr & (uint32_t)VADC_G_QSR0_FILL_Msk) + 1U;
 4754              	 .loc 2 1501 0
 4755 002a 3B69     	 ldr r3,[r7,#16]
 4756 002c 0F22     	 mov r2,#15
 4757 002e 1340     	 and r3,r2
 4758 0030 0133     	 add r3,r3,#1
 4759 0032 7B61     	 str r3,[r7,#20]
 4760              	.L207:
1502:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1503:../Libraries/XMCLib/src/xmc_vadc.c ****   
1504:../Libraries/XMCLib/src/xmc_vadc.c ****   if (qbur0 & (uint32_t)VADC_G_QBUR0_V_Msk )
 4761              	 .loc 2 1504 0
 4762 0034 FA68     	 ldr r2,[r7,#12]
 4763 0036 8023     	 mov r3,#128
 4764 0038 5B00     	 lsl r3,r3,#1
 4765 003a 1340     	 and r3,r2
 4766 003c 02D0     	 beq .L208
1505:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1506:../Libraries/XMCLib/src/xmc_vadc.c ****     length++;
 4767              	 .loc 2 1506 0
 4768 003e 7B69     	 ldr r3,[r7,#20]
 4769 0040 0133     	 add r3,r3,#1
 4770 0042 7B61     	 str r3,[r7,#20]
 4771              	.L208:
1507:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1508:../Libraries/XMCLib/src/xmc_vadc.c **** 
1509:../Libraries/XMCLib/src/xmc_vadc.c ****   return length;
 4772              	 .loc 2 1509 0
 4773 0044 7B69     	 ldr r3,[r7,#20]
1510:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4774              	 .loc 2 1510 0
 4775 0046 181C     	 mov r0,r3
 4776 0048 BD46     	 mov sp,r7
 4777 004a 06B0     	 add sp,sp,#24
 4778              	 
 4779 004c 80BD     	 pop {r7,pc}
 4780              	 .cfi_endproc
 4781              	.LFE204:
 4783 004e C046     	 .section .text.XMC_VADC_GROUP_QueueAbortSequence,"ax",%progbits
 4784              	 .align 2
 4785              	 .global XMC_VADC_GROUP_QueueAbortSequence
 4786              	 .code 16
 4787              	 .thumb_func
 4789              	XMC_VADC_GROUP_QueueAbortSequence:
 4790              	.LFB205:
1511:../Libraries/XMCLib/src/xmc_vadc.c **** 
1512:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort ongoing conversion of a channel sequence */
1513:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr)
1514:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4791              	 .loc 2 1514 0
 4792              	 .cfi_startproc
 4793 0000 80B5     	 push {r7,lr}
 4794              	.LCFI190:
 4795              	 .cfi_def_cfa_offset 8
 4796              	 .cfi_offset 7,-8
 4797              	 .cfi_offset 14,-4
 4798 0002 84B0     	 sub sp,sp,#16
 4799              	.LCFI191:
 4800              	 .cfi_def_cfa_offset 24
 4801 0004 00AF     	 add r7,sp,#0
 4802              	.LCFI192:
 4803              	 .cfi_def_cfa_register 7
 4804 0006 7860     	 str r0,[r7,#4]
1515:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl0;
1516:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1517:../Libraries/XMCLib/src/xmc_vadc.c **** 
1518:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueAbortSequence:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1519:../Libraries/XMCLib/src/xmc_vadc.c **** 
1520:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable any gating if present*/
1521:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl0 = group_ptr->QCTRL0;
 4805              	 .loc 2 1521 0
 4806 0008 7A68     	 ldr r2,[r7,#4]
 4807 000a 8023     	 mov r3,#128
 4808 000c 5B00     	 lsl r3,r3,#1
 4809 000e D358     	 ldr r3,[r2,r3]
 4810 0010 FB60     	 str r3,[r7,#12]
1522:../Libraries/XMCLib/src/xmc_vadc.c **** 
1523:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 =(0U | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 4811              	 .loc 2 1523 0
 4812 0012 7A68     	 ldr r2,[r7,#4]
 4813 0014 8023     	 mov r3,#128
 4814 0016 5B00     	 lsl r3,r3,#1
 4815 0018 1549     	 ldr r1,.L211
 4816 001a D150     	 str r1,[r2,r3]
1524:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_M
1525:../Libraries/XMCLib/src/xmc_vadc.c ****   
1526:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable the Arbitration 0 in the group before abort*/
1527:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN0_Pos) & 1U);
 4817              	 .loc 2 1527 0
 4818 001c 7B68     	 ldr r3,[r7,#4]
 4819 001e 8422     	 mov r2,#132
 4820 0020 9B58     	 ldr r3,[r3,r2]
 4821 0022 1B0E     	 lsr r3,r3,#24
 4822 0024 0122     	 mov r2,#1
 4823 0026 1A40     	 and r2,r3
 4824 0028 0B23     	 mov r3,#11
 4825 002a FB18     	 add r3,r7,r3
 4826 002c 511E     	 sub r1,r2,#1
 4827 002e 8A41     	 sbc r2,r2,r1
 4828 0030 1A70     	 strb r2,[r3]
1528:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 4829              	 .loc 2 1528 0
 4830 0032 7B68     	 ldr r3,[r7,#4]
 4831 0034 181C     	 mov r0,r3
 4832 0036 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1529:../Libraries/XMCLib/src/xmc_vadc.c ****    
1530:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Flush the Entries from queue*/
1531:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueFlushEntries(group_ptr);
 4833              	 .loc 2 1531 0
 4834 003a 7B68     	 ldr r3,[r7,#4]
 4835 003c 181C     	 mov r0,r3
 4836 003e FFF7FEFF 	 bl XMC_VADC_GROUP_QueueFlushEntries
1532:../Libraries/XMCLib/src/xmc_vadc.c ****   
1533:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the arbitration slot 0*/
1534:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
 4837              	 .loc 2 1534 0
 4838 0042 7B68     	 ldr r3,[r7,#4]
 4839 0044 8422     	 mov r2,#132
 4840 0046 9A58     	 ldr r2,[r3,r2]
 4841 0048 0B23     	 mov r3,#11
 4842 004a FB18     	 add r3,r7,r3
 4843 004c 1B78     	 ldrb r3,[r3]
 4844 004e 1B06     	 lsl r3,r3,#24
 4845 0050 1A43     	 orr r2,r3
 4846 0052 7B68     	 ldr r3,[r7,#4]
 4847 0054 8421     	 mov r1,#132
 4848 0056 5A50     	 str r2,[r3,r1]
1535:../Libraries/XMCLib/src/xmc_vadc.c ****   
1536:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1537:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
1538:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 4849              	 .loc 2 1538 0
 4850 0058 FB68     	 ldr r3,[r7,#12]
 4851 005a 054A     	 ldr r2,.L211
 4852 005c 1A43     	 orr r2,r3
 4853 005e 111C     	 mov r1,r2
1537:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 4854              	 .loc 2 1537 0
 4855 0060 7A68     	 ldr r2,[r7,#4]
 4856 0062 8023     	 mov r3,#128
 4857 0064 5B00     	 lsl r3,r3,#1
 4858 0066 D150     	 str r1,[r2,r3]
1539:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4859              	 .loc 2 1539 0
 4860 0068 BD46     	 mov sp,r7
 4861 006a 04B0     	 add sp,sp,#16
 4862              	 
 4863 006c 80BD     	 pop {r7,pc}
 4864              	.L212:
 4865 006e C046     	 .align 2
 4866              	.L211:
 4867 0070 00808080 	 .word -2139062272
 4868              	 .cfi_endproc
 4869              	.LFE205:
 4871              	 .section .text.XMC_VADC_GROUP_QueueRemoveChannel,"ax",%progbits
 4872              	 .align 2
 4873              	 .global XMC_VADC_GROUP_QueueRemoveChannel
 4874              	 .code 16
 4875              	 .thumb_func
 4877              	XMC_VADC_GROUP_QueueRemoveChannel:
 4878              	.LFB206:
1540:../Libraries/XMCLib/src/xmc_vadc.c **** 
1541:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort conversion of the channel queued up next */
1542:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueRemoveChannel(XMC_VADC_GROUP_t *const group_ptr)
1543:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4879              	 .loc 2 1543 0
 4880              	 .cfi_startproc
 4881 0000 80B5     	 push {r7,lr}
 4882              	.LCFI193:
 4883              	 .cfi_def_cfa_offset 8
 4884              	 .cfi_offset 7,-8
 4885              	 .cfi_offset 14,-4
 4886 0002 86B0     	 sub sp,sp,#24
 4887              	.LCFI194:
 4888              	 .cfi_def_cfa_offset 32
 4889 0004 00AF     	 add r7,sp,#0
 4890              	.LCFI195:
 4891              	 .cfi_def_cfa_register 7
 4892 0006 7860     	 str r0,[r7,#4]
1544:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t length_before_abort;
1545:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t length_after_abort;
1546:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl0;
1547:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1548:../Libraries/XMCLib/src/xmc_vadc.c **** 
1549:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueRemoveChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1550:../Libraries/XMCLib/src/xmc_vadc.c ****   
1551:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable any gating if present*/
1552:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl0= group_ptr->QCTRL0;
 4893              	 .loc 2 1552 0
 4894 0008 7A68     	 ldr r2,[r7,#4]
 4895 000a 8023     	 mov r3,#128
 4896 000c 5B00     	 lsl r3,r3,#1
 4897 000e D358     	 ldr r3,[r2,r3]
 4898 0010 3B61     	 str r3,[r7,#16]
1553:../Libraries/XMCLib/src/xmc_vadc.c **** 
1554:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 =(0U | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 4899              	 .loc 2 1554 0
 4900 0012 7A68     	 ldr r2,[r7,#4]
 4901 0014 8023     	 mov r3,#128
 4902 0016 5B00     	 lsl r3,r3,#1
 4903 0018 2649     	 ldr r1,.L217
 4904 001a D150     	 str r1,[r2,r3]
1555:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_M
1556:../Libraries/XMCLib/src/xmc_vadc.c ****   
1557:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable the Arbitration 0 in the group before abort*/
1558:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN0_Pos) & 1U);
 4905              	 .loc 2 1558 0
 4906 001c 7B68     	 ldr r3,[r7,#4]
 4907 001e 8422     	 mov r2,#132
 4908 0020 9B58     	 ldr r3,[r3,r2]
 4909 0022 1B0E     	 lsr r3,r3,#24
 4910 0024 0122     	 mov r2,#1
 4911 0026 1A40     	 and r2,r3
 4912 0028 0F23     	 mov r3,#15
 4913 002a FB18     	 add r3,r7,r3
 4914 002c 511E     	 sub r1,r2,#1
 4915 002e 8A41     	 sbc r2,r2,r1
 4916 0030 1A70     	 strb r2,[r3]
1559:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 4917              	 .loc 2 1559 0
 4918 0032 7B68     	 ldr r3,[r7,#4]
 4919 0034 181C     	 mov r0,r3
 4920 0036 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1560:../Libraries/XMCLib/src/xmc_vadc.c **** 
1561:../Libraries/XMCLib/src/xmc_vadc.c ****   length_before_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 4921              	 .loc 2 1561 0
 4922 003a 7B68     	 ldr r3,[r7,#4]
 4923 003c 181C     	 mov r0,r3
 4924 003e FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 4925 0042 031C     	 mov r3,r0
 4926 0044 BB60     	 str r3,[r7,#8]
1562:../Libraries/XMCLib/src/xmc_vadc.c **** 
1563:../Libraries/XMCLib/src/xmc_vadc.c ****   if (length_before_abort)
 4927              	 .loc 2 1563 0
 4928 0046 BB68     	 ldr r3,[r7,#8]
 4929 0048 002B     	 cmp r3,#0
 4930 004a 1CD0     	 beq .L214
1564:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1565:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Remove the first entry of the queue */
1566:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_CLRV_Msk;
 4931              	 .loc 2 1566 0
 4932 004c 7A68     	 ldr r2,[r7,#4]
 4933 004e 8223     	 mov r3,#130
 4934 0050 5B00     	 lsl r3,r3,#1
 4935 0052 D358     	 ldr r3,[r2,r3]
 4936 0054 8022     	 mov r2,#128
 4937 0056 5200     	 lsl r2,r2,#1
 4938 0058 1A43     	 orr r2,r3
 4939 005a 111C     	 mov r1,r2
 4940 005c 7A68     	 ldr r2,[r7,#4]
 4941 005e 8223     	 mov r3,#130
 4942 0060 5B00     	 lsl r3,r3,#1
 4943 0062 D150     	 str r1,[r2,r3]
1567:../Libraries/XMCLib/src/xmc_vadc.c **** 
1568:../Libraries/XMCLib/src/xmc_vadc.c ****     length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 4944              	 .loc 2 1568 0
 4945 0064 7B68     	 ldr r3,[r7,#4]
 4946 0066 181C     	 mov r0,r3
 4947 0068 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 4948 006c 031C     	 mov r3,r0
 4949 006e 7B61     	 str r3,[r7,#20]
1569:../Libraries/XMCLib/src/xmc_vadc.c **** 
1570:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Loop until a reduction in queue length is assessed */
1571:../Libraries/XMCLib/src/xmc_vadc.c ****     while(length_after_abort == length_before_abort)
 4950              	 .loc 2 1571 0
 4951 0070 05E0     	 b .L215
 4952              	.L216:
1572:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1573:../Libraries/XMCLib/src/xmc_vadc.c ****       length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 4953              	 .loc 2 1573 0
 4954 0072 7B68     	 ldr r3,[r7,#4]
 4955 0074 181C     	 mov r0,r3
 4956 0076 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 4957 007a 031C     	 mov r3,r0
 4958 007c 7B61     	 str r3,[r7,#20]
 4959              	.L215:
1571:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 4960              	 .loc 2 1571 0
 4961 007e 7A69     	 ldr r2,[r7,#20]
 4962 0080 BB68     	 ldr r3,[r7,#8]
 4963 0082 9A42     	 cmp r2,r3
 4964 0084 F5D0     	 beq .L216
 4965              	.L214:
1574:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1575:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1576:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the arbitration slot 0*/
1577:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
 4966              	 .loc 2 1577 0
 4967 0086 7B68     	 ldr r3,[r7,#4]
 4968 0088 8422     	 mov r2,#132
 4969 008a 9A58     	 ldr r2,[r3,r2]
 4970 008c 0F23     	 mov r3,#15
 4971 008e FB18     	 add r3,r7,r3
 4972 0090 1B78     	 ldrb r3,[r3]
 4973 0092 1B06     	 lsl r3,r3,#24
 4974 0094 1A43     	 orr r2,r3
 4975 0096 7B68     	 ldr r3,[r7,#4]
 4976 0098 8421     	 mov r1,#132
 4977 009a 5A50     	 str r2,[r3,r1]
1578:../Libraries/XMCLib/src/xmc_vadc.c ****   
1579:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1580:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
1581:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 4978              	 .loc 2 1581 0
 4979 009c 3B69     	 ldr r3,[r7,#16]
 4980 009e 054A     	 ldr r2,.L217
 4981 00a0 1A43     	 orr r2,r3
 4982 00a2 111C     	 mov r1,r2
1580:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 4983              	 .loc 2 1580 0
 4984 00a4 7A68     	 ldr r2,[r7,#4]
 4985 00a6 8023     	 mov r3,#128
 4986 00a8 5B00     	 lsl r3,r3,#1
 4987 00aa D150     	 str r1,[r2,r3]
1582:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4988              	 .loc 2 1582 0
 4989 00ac BD46     	 mov sp,r7
 4990 00ae 06B0     	 add sp,sp,#24
 4991              	 
 4992 00b0 80BD     	 pop {r7,pc}
 4993              	.L218:
 4994 00b2 C046     	 .align 2
 4995              	.L217:
 4996 00b4 00808080 	 .word -2139062272
 4997              	 .cfi_endproc
 4998              	.LFE206:
 5000              	 .section .text.XMC_VADC_GROUP_QueueGetNextChannel,"ax",%progbits
 5001              	 .align 2
 5002              	 .global XMC_VADC_GROUP_QueueGetNextChannel
 5003              	 .code 16
 5004              	 .thumb_func
 5006              	XMC_VADC_GROUP_QueueGetNextChannel:
 5007              	.LFB207:
1583:../Libraries/XMCLib/src/xmc_vadc.c **** 
1584:../Libraries/XMCLib/src/xmc_vadc.c **** /* Get details of channel meant to be converted right after the ongoing conversion */
1585:../Libraries/XMCLib/src/xmc_vadc.c **** int32_t XMC_VADC_GROUP_QueueGetNextChannel(XMC_VADC_GROUP_t *const group_ptr)
1586:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5008              	 .loc 2 1586 0
 5009              	 .cfi_startproc
 5010 0000 80B5     	 push {r7,lr}
 5011              	.LCFI196:
 5012              	 .cfi_def_cfa_offset 8
 5013              	 .cfi_offset 7,-8
 5014              	 .cfi_offset 14,-4
 5015 0002 84B0     	 sub sp,sp,#16
 5016              	.LCFI197:
 5017              	 .cfi_def_cfa_offset 24
 5018 0004 00AF     	 add r7,sp,#0
 5019              	.LCFI198:
 5020              	 .cfi_def_cfa_register 7
 5021 0006 7860     	 str r0,[r7,#4]
1587:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t ch_num;
1588:../Libraries/XMCLib/src/xmc_vadc.c **** 
1589:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetNextChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
1590:../Libraries/XMCLib/src/xmc_vadc.c ****   
1591:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
1592:../Libraries/XMCLib/src/xmc_vadc.c ****    * Check if there is something in the backup stage. If not, read queue-0
1593:../Libraries/XMCLib/src/xmc_vadc.c ****    * entry.
1594:../Libraries/XMCLib/src/xmc_vadc.c ****    */
1595:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( (group_ptr->QBUR0) & (uint32_t)VADC_G_QBUR0_V_Msk)
 5022              	 .loc 2 1595 0
 5023 0008 7A68     	 ldr r2,[r7,#4]
 5024 000a 8823     	 mov r3,#136
 5025 000c 5B00     	 lsl r3,r3,#1
 5026 000e D258     	 ldr r2,[r2,r3]
 5027 0010 8023     	 mov r3,#128
 5028 0012 5B00     	 lsl r3,r3,#1
 5029 0014 1340     	 and r3,r2
 5030 0016 08D0     	 beq .L220
1596:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1597:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->QBUR0 & (uint32_t)VADC_G_QBUR0_REQCHNR_Msk);
 5031              	 .loc 2 1597 0
 5032 0018 7A68     	 ldr r2,[r7,#4]
 5033 001a 8823     	 mov r3,#136
 5034 001c 5B00     	 lsl r3,r3,#1
 5035 001e D358     	 ldr r3,[r2,r3]
 5036 0020 1A1C     	 mov r2,r3
 5037 0022 1F23     	 mov r3,#31
 5038 0024 1340     	 and r3,r2
 5039 0026 FB60     	 str r3,[r7,#12]
 5040 0028 13E0     	 b .L221
 5041              	.L220:
1598:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1599:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( (group_ptr->Q0R0) & (uint32_t)VADC_G_Q0R0_V_Msk)
 5042              	 .loc 2 1599 0
 5043 002a 7A68     	 ldr r2,[r7,#4]
 5044 002c 8623     	 mov r3,#134
 5045 002e 5B00     	 lsl r3,r3,#1
 5046 0030 D258     	 ldr r2,[r2,r3]
 5047 0032 8023     	 mov r3,#128
 5048 0034 5B00     	 lsl r3,r3,#1
 5049 0036 1340     	 and r3,r2
 5050 0038 08D0     	 beq .L222
1600:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1601:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->Q0R0 & (uint32_t)VADC_G_Q0R0_REQCHNR_Msk);
 5051              	 .loc 2 1601 0
 5052 003a 7A68     	 ldr r2,[r7,#4]
 5053 003c 8623     	 mov r3,#134
 5054 003e 5B00     	 lsl r3,r3,#1
 5055 0040 D358     	 ldr r3,[r2,r3]
 5056 0042 1A1C     	 mov r2,r3
 5057 0044 1F23     	 mov r3,#31
 5058 0046 1340     	 and r3,r2
 5059 0048 FB60     	 str r3,[r7,#12]
 5060 004a 02E0     	 b .L221
 5061              	.L222:
1602:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1603:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1604:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1605:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Nothing is pending */
1606:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = -1;
 5062              	 .loc 2 1606 0
 5063 004c 0123     	 mov r3,#1
 5064 004e 5B42     	 neg r3,r3
 5065 0050 FB60     	 str r3,[r7,#12]
 5066              	.L221:
1607:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1608:../Libraries/XMCLib/src/xmc_vadc.c **** 
1609:../Libraries/XMCLib/src/xmc_vadc.c ****   return ch_num;
 5067              	 .loc 2 1609 0
 5068 0052 FB68     	 ldr r3,[r7,#12]
1610:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5069              	 .loc 2 1610 0
 5070 0054 181C     	 mov r0,r3
 5071 0056 BD46     	 mov sp,r7
 5072 0058 04B0     	 add sp,sp,#16
 5073              	 
 5074 005a 80BD     	 pop {r7,pc}
 5075              	 .cfi_endproc
 5076              	.LFE207:
 5078              	 .section .text.XMC_VADC_GROUP_QueueGetInterruptedChannel,"ax",%progbits
 5079              	 .align 2
 5080              	 .global XMC_VADC_GROUP_QueueGetInterruptedChannel
 5081              	 .code 16
 5082              	 .thumb_func
 5084              	XMC_VADC_GROUP_QueueGetInterruptedChannel:
 5085              	.LFB208:
1611:../Libraries/XMCLib/src/xmc_vadc.c **** 
1612:../Libraries/XMCLib/src/xmc_vadc.c **** /* Get the channel number of the channel whose conversion had been interrupted */
1613:../Libraries/XMCLib/src/xmc_vadc.c **** int32_t XMC_VADC_GROUP_QueueGetInterruptedChannel(XMC_VADC_GROUP_t *const group_ptr)
1614:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5086              	 .loc 2 1614 0
 5087              	 .cfi_startproc
 5088 0000 80B5     	 push {r7,lr}
 5089              	.LCFI199:
 5090              	 .cfi_def_cfa_offset 8
 5091              	 .cfi_offset 7,-8
 5092              	 .cfi_offset 14,-4
 5093 0002 84B0     	 sub sp,sp,#16
 5094              	.LCFI200:
 5095              	 .cfi_def_cfa_offset 24
 5096 0004 00AF     	 add r7,sp,#0
 5097              	.LCFI201:
 5098              	 .cfi_def_cfa_register 7
 5099 0006 7860     	 str r0,[r7,#4]
1615:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t ch_num;
1616:../Libraries/XMCLib/src/xmc_vadc.c **** 
1617:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetInterruptedChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
1618:../Libraries/XMCLib/src/xmc_vadc.c ****   
1619:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((group_ptr->QBUR0) & (uint32_t)VADC_G_QBUR0_V_Msk)
 5100              	 .loc 2 1619 0
 5101 0008 7A68     	 ldr r2,[r7,#4]
 5102 000a 8823     	 mov r3,#136
 5103 000c 5B00     	 lsl r3,r3,#1
 5104 000e D258     	 ldr r2,[r2,r3]
 5105 0010 8023     	 mov r3,#128
 5106 0012 5B00     	 lsl r3,r3,#1
 5107 0014 1340     	 and r3,r2
 5108 0016 08D0     	 beq .L225
1620:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1621:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->QBUR0 & (uint32_t)VADC_G_QBUR0_REQCHNR_Msk);
 5109              	 .loc 2 1621 0
 5110 0018 7A68     	 ldr r2,[r7,#4]
 5111 001a 8823     	 mov r3,#136
 5112 001c 5B00     	 lsl r3,r3,#1
 5113 001e D358     	 ldr r3,[r2,r3]
 5114 0020 1A1C     	 mov r2,r3
 5115 0022 1F23     	 mov r3,#31
 5116 0024 1340     	 and r3,r2
 5117 0026 FB60     	 str r3,[r7,#12]
 5118 0028 02E0     	 b .L226
 5119              	.L225:
1622:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1623:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1624:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1625:../Libraries/XMCLib/src/xmc_vadc.c ****     /* No such channel */
1626:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = -1;
 5120              	 .loc 2 1626 0
 5121 002a 0123     	 mov r3,#1
 5122 002c 5B42     	 neg r3,r3
 5123 002e FB60     	 str r3,[r7,#12]
 5124              	.L226:
1627:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1628:../Libraries/XMCLib/src/xmc_vadc.c **** 
1629:../Libraries/XMCLib/src/xmc_vadc.c ****   return ch_num;
 5125              	 .loc 2 1629 0
 5126 0030 FB68     	 ldr r3,[r7,#12]
1630:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5127              	 .loc 2 1630 0
 5128 0032 181C     	 mov r0,r3
 5129 0034 BD46     	 mov sp,r7
 5130 0036 04B0     	 add sp,sp,#16
 5131              	 
 5132 0038 80BD     	 pop {r7,pc}
 5133              	 .cfi_endproc
 5134              	.LFE208:
 5136 003a C046     	 .section .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode,"ax",%progbits
 5137              	 .align 2
 5138              	 .global XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode
 5139              	 .code 16
 5140              	 .thumb_func
 5142              	XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:
 5143              	.LFB209:
1631:../Libraries/XMCLib/src/xmc_vadc.c **** 
1632:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a Service Request line for the request source event */
1633:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_V
1634:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5144              	 .loc 2 1634 0
 5145              	 .cfi_startproc
 5146 0000 80B5     	 push {r7,lr}
 5147              	.LCFI202:
 5148              	 .cfi_def_cfa_offset 8
 5149              	 .cfi_offset 7,-8
 5150              	 .cfi_offset 14,-4
 5151 0002 84B0     	 sub sp,sp,#16
 5152              	.LCFI203:
 5153              	 .cfi_def_cfa_offset 24
 5154 0004 00AF     	 add r7,sp,#0
 5155              	.LCFI204:
 5156              	 .cfi_def_cfa_register 7
 5157 0006 7860     	 str r0,[r7,#4]
 5158 0008 0A1C     	 mov r2,r1
 5159 000a FB1C     	 add r3,r7,#3
 5160 000c 1A70     	 strb r2,[r3]
1635:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sevnp;
1636:../Libraries/XMCLib/src/xmc_vadc.c **** 
1637:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_
1638:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC
1639:../Libraries/XMCLib/src/xmc_vadc.c **** 
1640:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp = group_ptr->SEVNP;
 5161              	 .loc 2 1640 0
 5162 000e 7A68     	 ldr r2,[r7,#4]
 5163 0010 E023     	 mov r3,#224
 5164 0012 5B00     	 lsl r3,r3,#1
 5165 0014 D358     	 ldr r3,[r2,r3]
 5166 0016 FB60     	 str r3,[r7,#12]
1641:../Libraries/XMCLib/src/xmc_vadc.c **** 
1642:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV0NP_Msk);
 5167              	 .loc 2 1642 0
 5168 0018 FB68     	 ldr r3,[r7,#12]
 5169 001a 0F22     	 mov r2,#15
 5170 001c 9343     	 bic r3,r2
 5171 001e FB60     	 str r3,[r7,#12]
1643:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV0NP_Pos);
 5172              	 .loc 2 1643 0
 5173 0020 FB1C     	 add r3,r7,#3
 5174 0022 1B78     	 ldrb r3,[r3]
 5175 0024 FA68     	 ldr r2,[r7,#12]
 5176 0026 1343     	 orr r3,r2
 5177 0028 FB60     	 str r3,[r7,#12]
1644:../Libraries/XMCLib/src/xmc_vadc.c **** 
1645:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SEVNP = sevnp;
 5178              	 .loc 2 1645 0
 5179 002a 7A68     	 ldr r2,[r7,#4]
 5180 002c E023     	 mov r3,#224
 5181 002e 5B00     	 lsl r3,r3,#1
 5182 0030 F968     	 ldr r1,[r7,#12]
 5183 0032 D150     	 str r1,[r2,r3]
1646:../Libraries/XMCLib/src/xmc_vadc.c **** 
1647:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5184              	 .loc 2 1647 0
 5185 0034 BD46     	 mov sp,r7
 5186 0036 04B0     	 add sp,sp,#16
 5187              	 
 5188 0038 80BD     	 pop {r7,pc}
 5189              	 .cfi_endproc
 5190              	.LFE209:
 5192 003a C046     	 .section .text.XMC_VADC_GROUP_ChannelInit,"ax",%progbits
 5193              	 .align 2
 5194              	 .global XMC_VADC_GROUP_ChannelInit
 5195              	 .code 16
 5196              	 .thumb_func
 5198              	XMC_VADC_GROUP_ChannelInit:
 5199              	.LFB210:
1648:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1649:../Libraries/XMCLib/src/xmc_vadc.c **** 
1650:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1651:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize a channel unit */
1652:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
1653:../Libraries/XMCLib/src/xmc_vadc.c ****                                         const XMC_VADC_CHANNEL_CONFIG_t *config)
1654:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5200              	 .loc 2 1654 0
 5201              	 .cfi_startproc
 5202 0000 80B5     	 push {r7,lr}
 5203              	.LCFI205:
 5204              	 .cfi_def_cfa_offset 8
 5205              	 .cfi_offset 7,-8
 5206              	 .cfi_offset 14,-4
 5207 0002 88B0     	 sub sp,sp,#32
 5208              	.LCFI206:
 5209              	 .cfi_def_cfa_offset 40
 5210 0004 00AF     	 add r7,sp,#0
 5211              	.LCFI207:
 5212              	 .cfi_def_cfa_register 7
 5213 0006 F860     	 str r0,[r7,#12]
 5214 0008 B960     	 str r1,[r7,#8]
 5215 000a 7A60     	 str r2,[r7,#4]
1655:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t prio;
1656:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ch_assign;
1657:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
1658:../Libraries/XMCLib/src/xmc_vadc.c **** 
1659:../Libraries/XMCLib/src/xmc_vadc.c **** 
1660:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1661:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_P
1662:../Libraries/XMCLib/src/xmc_vadc.c ****   
1663:../Libraries/XMCLib/src/xmc_vadc.c ****   prio  = (uint32_t)config->channel_priority;
 5216              	 .loc 2 1663 0
 5217 000c 7B68     	 ldr r3,[r7,#4]
 5218 000e 1B7B     	 ldrb r3,[r3,#12]
 5219 0010 BB61     	 str r3,[r7,#24]
1664:../Libraries/XMCLib/src/xmc_vadc.c **** 
1665:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Priority channel */
1666:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign  = group_ptr->CHASS;
 5220              	 .loc 2 1666 0
 5221 0012 FB68     	 ldr r3,[r7,#12]
 5222 0014 8822     	 mov r2,#136
 5223 0016 9B58     	 ldr r3,[r3,r2]
 5224 0018 7B61     	 str r3,[r7,#20]
1667:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 5225              	 .loc 2 1667 0
 5226 001a BB68     	 ldr r3,[r7,#8]
 5227 001c 0122     	 mov r2,#1
 5228 001e 9A40     	 lsl r2,r2,r3
 5229 0020 131C     	 mov r3,r2
 5230 0022 DA43     	 mvn r2,r3
 5231 0024 7B69     	 ldr r3,[r7,#20]
 5232 0026 1340     	 and r3,r2
 5233 0028 7B61     	 str r3,[r7,#20]
1668:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign |= (uint32_t)(prio << ch_num);
 5234              	 .loc 2 1668 0
 5235 002a BB68     	 ldr r3,[r7,#8]
 5236 002c BA69     	 ldr r2,[r7,#24]
 5237 002e 9A40     	 lsl r2,r2,r3
 5238 0030 131C     	 mov r3,r2
 5239 0032 7A69     	 ldr r2,[r7,#20]
 5240 0034 1343     	 orr r3,r2
 5241 0036 7B61     	 str r3,[r7,#20]
1669:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHASS = ch_assign;
 5242              	 .loc 2 1669 0
 5243 0038 FB68     	 ldr r3,[r7,#12]
 5244 003a 8821     	 mov r1,#136
 5245 003c 7A69     	 ldr r2,[r7,#20]
 5246 003e 5A50     	 str r2,[r3,r1]
1670:../Libraries/XMCLib/src/xmc_vadc.c **** 
1671:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Alias channel */
1672:../Libraries/XMCLib/src/xmc_vadc.c ****   if (config->alias_channel >= (int32_t)0)
 5247              	 .loc 2 1672 0
 5248 0040 7B68     	 ldr r3,[r7,#4]
 5249 0042 5B7B     	 ldrb r3,[r3,#13]
 5250 0044 5BB2     	 sxtb r3,r3
 5251 0046 002B     	 cmp r3,#0
 5252 0048 2ADB     	 blt .L230
1673:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1674:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)0;
 5253              	 .loc 2 1674 0
 5254 004a 0023     	 mov r3,#0
 5255 004c FB61     	 str r3,[r7,#28]
1675:../Libraries/XMCLib/src/xmc_vadc.c ****     if ((uint32_t)1 == ch_num)
 5256              	 .loc 2 1675 0
 5257 004e BB68     	 ldr r3,[r7,#8]
 5258 0050 012B     	 cmp r3,#1
 5259 0052 0AD1     	 bne .L231
1676:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1677:../Libraries/XMCLib/src/xmc_vadc.c ****       mask = VADC_G_ALIAS_ALIAS1_Pos;
 5260              	 .loc 2 1677 0
 5261 0054 0823     	 mov r3,#8
 5262 0056 FB61     	 str r3,[r7,#28]
1678:../Libraries/XMCLib/src/xmc_vadc.c ****       group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 5263              	 .loc 2 1678 0
 5264 0058 FB68     	 ldr r3,[r7,#12]
 5265 005a B022     	 mov r2,#176
 5266 005c 9B58     	 ldr r3,[r3,r2]
 5267 005e 1E4A     	 ldr r2,.L233
 5268 0060 1A40     	 and r2,r3
 5269 0062 FB68     	 ldr r3,[r7,#12]
 5270 0064 B021     	 mov r1,#176
 5271 0066 5A50     	 str r2,[r3,r1]
 5272 0068 0DE0     	 b .L232
 5273              	.L231:
1679:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1680:../Libraries/XMCLib/src/xmc_vadc.c ****     else if ((uint32_t)0 == ch_num)
 5274              	 .loc 2 1680 0
 5275 006a BB68     	 ldr r3,[r7,#8]
 5276 006c 002B     	 cmp r3,#0
 5277 006e 0AD1     	 bne .L232
1681:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1682:../Libraries/XMCLib/src/xmc_vadc.c ****       mask = VADC_G_ALIAS_ALIAS0_Pos;
 5278              	 .loc 2 1682 0
 5279 0070 0023     	 mov r3,#0
 5280 0072 FB61     	 str r3,[r7,#28]
1683:../Libraries/XMCLib/src/xmc_vadc.c ****       group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 5281              	 .loc 2 1683 0
 5282 0074 FB68     	 ldr r3,[r7,#12]
 5283 0076 B022     	 mov r2,#176
 5284 0078 9B58     	 ldr r3,[r3,r2]
 5285 007a 1F22     	 mov r2,#31
 5286 007c 9343     	 bic r3,r2
 5287 007e 1A1C     	 mov r2,r3
 5288 0080 FB68     	 ldr r3,[r7,#12]
 5289 0082 B021     	 mov r1,#176
 5290 0084 5A50     	 str r2,[r3,r1]
 5291              	.L232:
1684:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1685:../Libraries/XMCLib/src/xmc_vadc.c **** 
1686:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 5292              	 .loc 2 1686 0
 5293 0086 FB68     	 ldr r3,[r7,#12]
 5294 0088 B022     	 mov r2,#176
 5295 008a 9B58     	 ldr r3,[r3,r2]
 5296 008c 7A68     	 ldr r2,[r7,#4]
 5297 008e 527B     	 ldrb r2,[r2,#13]
 5298 0090 51B2     	 sxtb r1,r2
 5299 0092 FA69     	 ldr r2,[r7,#28]
 5300 0094 9140     	 lsl r1,r1,r2
 5301 0096 0A1C     	 mov r2,r1
 5302 0098 1A43     	 orr r2,r3
 5303 009a FB68     	 ldr r3,[r7,#12]
 5304 009c B021     	 mov r1,#176
 5305 009e 5A50     	 str r2,[r3,r1]
 5306              	.L230:
1687:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1688:../Libraries/XMCLib/src/xmc_vadc.c **** 
1689:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFL |= config->bfl;
 5307              	 .loc 2 1689 0
 5308 00a0 FB68     	 ldr r3,[r7,#12]
 5309 00a2 C822     	 mov r2,#200
 5310 00a4 9A58     	 ldr r2,[r3,r2]
 5311 00a6 7B68     	 ldr r3,[r7,#4]
 5312 00a8 5B68     	 ldr r3,[r3,#4]
 5313 00aa 1A43     	 orr r2,r3
 5314 00ac FB68     	 ldr r3,[r7,#12]
 5315 00ae C821     	 mov r1,#200
 5316 00b0 5A50     	 str r2,[r3,r1]
1690:../Libraries/XMCLib/src/xmc_vadc.c **** 
1691:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
1692:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLC |= config->bflc;
 5317              	 .loc 2 1692 0
 5318 00b2 FB68     	 ldr r3,[r7,#12]
 5319 00b4 D022     	 mov r2,#208
 5320 00b6 9A58     	 ldr r2,[r3,r2]
 5321 00b8 7B68     	 ldr r3,[r7,#4]
 5322 00ba 9B68     	 ldr r3,[r3,#8]
 5323 00bc 1A43     	 orr r2,r3
 5324 00be FB68     	 ldr r3,[r7,#12]
 5325 00c0 D021     	 mov r1,#208
 5326 00c2 5A50     	 str r2,[r3,r1]
1693:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1694:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the CHCTR register */
1695:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = config->chctr;
 5327              	 .loc 2 1695 0
 5328 00c4 7B68     	 ldr r3,[r7,#4]
 5329 00c6 1968     	 ldr r1,[r3]
 5330 00c8 FB68     	 ldr r3,[r7,#12]
 5331 00ca BA68     	 ldr r2,[r7,#8]
 5332 00cc 8032     	 add r2,r2,#128
 5333 00ce 9200     	 lsl r2,r2,#2
 5334 00d0 D150     	 str r1,[r2,r3]
1696:../Libraries/XMCLib/src/xmc_vadc.c **** 
1697:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5335              	 .loc 2 1697 0
 5336 00d2 BD46     	 mov sp,r7
 5337 00d4 08B0     	 add sp,sp,#32
 5338              	 
 5339 00d6 80BD     	 pop {r7,pc}
 5340              	.L234:
 5341              	 .align 2
 5342              	.L233:
 5343 00d8 FFE0FFFF 	 .word -7937
 5344              	 .cfi_endproc
 5345              	.LFE210:
 5347              	 .section .text.XMC_VADC_GROUP_SetChannelAlias,"ax",%progbits
 5348              	 .align 2
 5349              	 .global XMC_VADC_GROUP_SetChannelAlias
 5350              	 .code 16
 5351              	 .thumb_func
 5353              	XMC_VADC_GROUP_SetChannelAlias:
 5354              	.LFB211:
1698:../Libraries/XMCLib/src/xmc_vadc.c **** 
1699:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an alias channel for channels numbered 2 through 7 */
1700:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetChannelAlias(XMC_VADC_GROUP_t *const group_ptr,
1701:../Libraries/XMCLib/src/xmc_vadc.c ****                                     const uint32_t src_ch_num,
1702:../Libraries/XMCLib/src/xmc_vadc.c ****                                     const uint32_t alias_ch_num)
1703:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5355              	 .loc 2 1703 0
 5356              	 .cfi_startproc
 5357 0000 80B5     	 push {r7,lr}
 5358              	.LCFI208:
 5359              	 .cfi_def_cfa_offset 8
 5360              	 .cfi_offset 7,-8
 5361              	 .cfi_offset 14,-4
 5362 0002 88B0     	 sub sp,sp,#32
 5363              	.LCFI209:
 5364              	 .cfi_def_cfa_offset 40
 5365 0004 00AF     	 add r7,sp,#0
 5366              	.LCFI210:
 5367              	 .cfi_def_cfa_register 7
 5368 0006 F860     	 str r0,[r7,#12]
 5369 0008 B960     	 str r1,[r7,#8]
 5370 000a 7A60     	 str r2,[r7,#4]
1704:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t alias;
1705:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
1706:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t pos;
1707:../Libraries/XMCLib/src/xmc_vadc.c **** 
1708:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
1709:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Alias Channel", ((alias_ch_num == 0)|| (alias_ch
1710:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Aliased Channel", ((src_ch_num < 8U)))
1711:../Libraries/XMCLib/src/xmc_vadc.c **** 
1712:../Libraries/XMCLib/src/xmc_vadc.c ****   alias = group_ptr->ALIAS;
 5371              	 .loc 2 1712 0
 5372 000c FB68     	 ldr r3,[r7,#12]
 5373 000e B022     	 mov r2,#176
 5374 0010 9B58     	 ldr r3,[r3,r2]
 5375 0012 7B61     	 str r3,[r7,#20]
1713:../Libraries/XMCLib/src/xmc_vadc.c **** 
1714:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == alias_ch_num)
 5376              	 .loc 2 1714 0
 5377 0014 7B68     	 ldr r3,[r7,#4]
 5378 0016 002B     	 cmp r3,#0
 5379 0018 04D1     	 bne .L236
1715:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1716:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t) VADC_G_ALIAS_ALIAS0_Msk;
 5380              	 .loc 2 1716 0
 5381 001a 1F23     	 mov r3,#31
 5382 001c FB61     	 str r3,[r7,#28]
1717:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t) VADC_G_ALIAS_ALIAS0_Pos;
 5383              	 .loc 2 1717 0
 5384 001e 0023     	 mov r3,#0
 5385 0020 BB61     	 str r3,[r7,#24]
 5386 0022 04E0     	 b .L237
 5387              	.L236:
1718:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1719:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1720:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1721:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t) VADC_G_ALIAS_ALIAS1_Msk;
 5388              	 .loc 2 1721 0
 5389 0024 F823     	 mov r3,#248
 5390 0026 5B01     	 lsl r3,r3,#5
 5391 0028 FB61     	 str r3,[r7,#28]
1722:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t) VADC_G_ALIAS_ALIAS1_Pos;
 5392              	 .loc 2 1722 0
 5393 002a 0823     	 mov r3,#8
 5394 002c BB61     	 str r3,[r7,#24]
 5395              	.L237:
1723:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1724:../Libraries/XMCLib/src/xmc_vadc.c ****   alias &= ~mask;
 5396              	 .loc 2 1724 0
 5397 002e FB69     	 ldr r3,[r7,#28]
 5398 0030 DA43     	 mvn r2,r3
 5399 0032 7B69     	 ldr r3,[r7,#20]
 5400 0034 1340     	 and r3,r2
 5401 0036 7B61     	 str r3,[r7,#20]
1725:../Libraries/XMCLib/src/xmc_vadc.c ****   alias |= (uint32_t)(src_ch_num << pos);
 5402              	 .loc 2 1725 0
 5403 0038 BB69     	 ldr r3,[r7,#24]
 5404 003a BA68     	 ldr r2,[r7,#8]
 5405 003c 9A40     	 lsl r2,r2,r3
 5406 003e 131C     	 mov r3,r2
 5407 0040 7A69     	 ldr r2,[r7,#20]
 5408 0042 1343     	 orr r3,r2
 5409 0044 7B61     	 str r3,[r7,#20]
1726:../Libraries/XMCLib/src/xmc_vadc.c **** 
1727:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ALIAS = alias;
 5410              	 .loc 2 1727 0
 5411 0046 FB68     	 ldr r3,[r7,#12]
 5412 0048 B021     	 mov r1,#176
 5413 004a 7A69     	 ldr r2,[r7,#20]
 5414 004c 5A50     	 str r2,[r3,r1]
1728:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5415              	 .loc 2 1728 0
 5416 004e BD46     	 mov sp,r7
 5417 0050 08B0     	 add sp,sp,#32
 5418              	 
 5419 0052 80BD     	 pop {r7,pc}
 5420              	 .cfi_endproc
 5421              	.LFE211:
 5423              	 .section .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds,"ax",%progbits
 5424              	 .align 2
 5425              	 .global XMC_VADC_GROUP_ChannelIsResultOutOfBounds
 5426              	 .code 16
 5427              	 .thumb_func
 5429              	XMC_VADC_GROUP_ChannelIsResultOutOfBounds:
 5430              	.LFB212:
1729:../Libraries/XMCLib/src/xmc_vadc.c **** 
1730:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine whether input to a channel has violated boundary conditions */
1731:../Libraries/XMCLib/src/xmc_vadc.c **** bool XMC_VADC_GROUP_ChannelIsResultOutOfBounds(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch
1732:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5431              	 .loc 2 1732 0
 5432              	 .cfi_startproc
 5433 0000 80B5     	 push {r7,lr}
 5434              	.LCFI211:
 5435              	 .cfi_def_cfa_offset 8
 5436              	 .cfi_offset 7,-8
 5437              	 .cfi_offset 14,-4
 5438 0002 86B0     	 sub sp,sp,#24
 5439              	.LCFI212:
 5440              	 .cfi_def_cfa_offset 32
 5441 0004 00AF     	 add r7,sp,#0
 5442              	.LCFI213:
 5443              	 .cfi_def_cfa_register 7
 5444 0006 7860     	 str r0,[r7,#4]
 5445 0008 3960     	 str r1,[r7]
1733:../Libraries/XMCLib/src/xmc_vadc.c ****   bool retval;
1734:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    chctr;
1735:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    ceflag;
1736:../Libraries/XMCLib/src/xmc_vadc.c **** 
1737:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelIsResultOutOfBounds:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
1738:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelIsResultOutOfBounds:Wrong Channel Number",
1739:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1740:../Libraries/XMCLib/src/xmc_vadc.c **** 
1741:../Libraries/XMCLib/src/xmc_vadc.c ****   retval = (bool)false;
 5446              	 .loc 2 1741 0
 5447 000a 1723     	 mov r3,#23
 5448 000c FB18     	 add r3,r7,r3
 5449 000e 0022     	 mov r2,#0
 5450 0010 1A70     	 strb r2,[r3]
1742:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
1743:../Libraries/XMCLib/src/xmc_vadc.c ****     Check if the Channel event is configured to be generated in the event of
1744:../Libraries/XMCLib/src/xmc_vadc.c ****     boundary violation and if affirmative, check if the channel event is set.
1745:../Libraries/XMCLib/src/xmc_vadc.c ****   */
1746:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract CHEVMODE for requested channel */
1747:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = group_ptr->CHCTR[ch_num];
 5451              	 .loc 2 1747 0
 5452 0012 7B68     	 ldr r3,[r7,#4]
 5453 0014 3A68     	 ldr r2,[r7]
 5454 0016 8032     	 add r2,r2,#128
 5455 0018 9200     	 lsl r2,r2,#2
 5456 001a D358     	 ldr r3,[r2,r3]
 5457 001c 3B61     	 str r3,[r7,#16]
1748:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = (uint32_t)(chctr >> (uint32_t)VADC_G_CHCTR_CHEVMODE_Pos)& (uint32_t)0x3;
 5458              	 .loc 2 1748 0
 5459 001e 3B69     	 ldr r3,[r7,#16]
 5460 0020 1B0A     	 lsr r3,r3,#8
 5461 0022 0322     	 mov r2,#3
 5462 0024 1340     	 and r3,r2
 5463 0026 3B61     	 str r3,[r7,#16]
1749:../Libraries/XMCLib/src/xmc_vadc.c **** 
1750:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract CEFLAG for the requested channel */
1751:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag = group_ptr->CEFLAG;
 5464              	 .loc 2 1751 0
 5465 0028 7A68     	 ldr r2,[r7,#4]
 5466 002a C023     	 mov r3,#192
 5467 002c 5B00     	 lsl r3,r3,#1
 5468 002e D358     	 ldr r3,[r2,r3]
 5469 0030 FB60     	 str r3,[r7,#12]
1752:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag = ceflag & ((uint32_t)((uint32_t)1 << ch_num) );
 5470              	 .loc 2 1752 0
 5471 0032 3B68     	 ldr r3,[r7]
 5472 0034 0122     	 mov r2,#1
 5473 0036 9A40     	 lsl r2,r2,r3
 5474 0038 FB68     	 ldr r3,[r7,#12]
 5475 003a 1340     	 and r3,r2
 5476 003c FB60     	 str r3,[r7,#12]
1753:../Libraries/XMCLib/src/xmc_vadc.c **** 
1754:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Check what was the channel event generation criteria */
1755:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( (( (uint32_t)XMC_VADC_CHANNEL_EVGEN_INBOUND == chctr) \
 5477              	 .loc 2 1755 0
 5478 003e 3B69     	 ldr r3,[r7,#16]
 5479 0040 012B     	 cmp r3,#1
 5480 0042 02D0     	 beq .L239
1756:../Libraries/XMCLib/src/xmc_vadc.c ****       || ((uint32_t) XMC_VADC_CHANNEL_EVGEN_OUTBOUND == chctr)) && (ceflag) )
 5481              	 .loc 2 1756 0
 5482 0044 3B69     	 ldr r3,[r7,#16]
 5483 0046 022B     	 cmp r3,#2
 5484 0048 06D1     	 bne .L240
 5485              	.L239:
 5486              	 .loc 2 1756 0 is_stmt 0 discriminator 1
 5487 004a FB68     	 ldr r3,[r7,#12]
 5488 004c 002B     	 cmp r3,#0
 5489 004e 03D0     	 beq .L240
1757:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1758:../Libraries/XMCLib/src/xmc_vadc.c ****     retval = (bool)true;
 5490              	 .loc 2 1758 0 is_stmt 1
 5491 0050 1723     	 mov r3,#23
 5492 0052 FB18     	 add r3,r7,r3
 5493 0054 0122     	 mov r2,#1
 5494 0056 1A70     	 strb r2,[r3]
 5495              	.L240:
1759:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1760:../Libraries/XMCLib/src/xmc_vadc.c **** 
1761:../Libraries/XMCLib/src/xmc_vadc.c ****   return retval;
 5496              	 .loc 2 1761 0
 5497 0058 1723     	 mov r3,#23
 5498 005a FB18     	 add r3,r7,r3
 5499 005c 1B78     	 ldrb r3,[r3]
1762:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5500              	 .loc 2 1762 0
 5501 005e 181C     	 mov r0,r3
 5502 0060 BD46     	 mov sp,r7
 5503 0062 06B0     	 add sp,sp,#24
 5504              	 
 5505 0064 80BD     	 pop {r7,pc}
 5506              	 .cfi_endproc
 5507              	.LFE212:
 5509 0066 C046     	 .section .text.XMC_VADC_GROUP_ChannelSetInputReference,"ax",%progbits
 5510              	 .align 2
 5511              	 .global XMC_VADC_GROUP_ChannelSetInputReference
 5512              	 .code 16
 5513              	 .thumb_func
 5515              	XMC_VADC_GROUP_ChannelSetInputReference:
 5516              	.LFB213:
1763:../Libraries/XMCLib/src/xmc_vadc.c **** 
1764:../Libraries/XMCLib/src/xmc_vadc.c **** /* Set a reference voltage for conversion */
1765:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetInputReference(XMC_VADC_GROUP_t *const group_ptr,
1766:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t ch_num,
1767:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const XMC_VADC_CHANNEL_REF_t ref)
1768:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5517              	 .loc 2 1768 0
 5518              	 .cfi_startproc
 5519 0000 80B5     	 push {r7,lr}
 5520              	.LCFI214:
 5521              	 .cfi_def_cfa_offset 8
 5522              	 .cfi_offset 7,-8
 5523              	 .cfi_offset 14,-4
 5524 0002 86B0     	 sub sp,sp,#24
 5525              	.LCFI215:
 5526              	 .cfi_def_cfa_offset 32
 5527 0004 00AF     	 add r7,sp,#0
 5528              	.LCFI216:
 5529              	 .cfi_def_cfa_register 7
 5530 0006 F860     	 str r0,[r7,#12]
 5531 0008 B960     	 str r1,[r7,#8]
 5532 000a FB1D     	 add r3,r7,#7
 5533 000c 1A70     	 strb r2,[r3]
1769:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1770:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1771:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Channel Number", ((ch_num) < XMC_VADC_N
1772:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Voltage Reference", ((ref)<= XMC_VADC_C
1773:../Libraries/XMCLib/src/xmc_vadc.c **** 
1774:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 5534              	 .loc 2 1774 0
 5535 000e FB68     	 ldr r3,[r7,#12]
 5536 0010 BA68     	 ldr r2,[r7,#8]
 5537 0012 8032     	 add r2,r2,#128
 5538 0014 9200     	 lsl r2,r2,#2
 5539 0016 D358     	 ldr r3,[r2,r3]
 5540 0018 7B61     	 str r3,[r7,#20]
1775:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_REFSEL_Msk);
 5541              	 .loc 2 1775 0
 5542 001a 7B69     	 ldr r3,[r7,#20]
 5543 001c 084A     	 ldr r2,.L243
 5544 001e 1340     	 and r3,r2
 5545 0020 7B61     	 str r3,[r7,#20]
1776:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)ref <<  VADC_G_CHCTR_REFSEL_Pos);
 5546              	 .loc 2 1776 0
 5547 0022 FB1D     	 add r3,r7,#7
 5548 0024 1B78     	 ldrb r3,[r3]
 5549 0026 DB02     	 lsl r3,r3,#11
 5550 0028 7A69     	 ldr r2,[r7,#20]
 5551 002a 1343     	 orr r3,r2
 5552 002c 7B61     	 str r3,[r7,#20]
1777:../Libraries/XMCLib/src/xmc_vadc.c **** 
1778:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 5553              	 .loc 2 1778 0
 5554 002e FB68     	 ldr r3,[r7,#12]
 5555 0030 BA68     	 ldr r2,[r7,#8]
 5556 0032 8032     	 add r2,r2,#128
 5557 0034 9200     	 lsl r2,r2,#2
 5558 0036 7969     	 ldr r1,[r7,#20]
 5559 0038 D150     	 str r1,[r2,r3]
1779:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5560              	 .loc 2 1779 0
 5561 003a BD46     	 mov sp,r7
 5562 003c 06B0     	 add sp,sp,#24
 5563              	 
 5564 003e 80BD     	 pop {r7,pc}
 5565              	.L244:
 5566              	 .align 2
 5567              	.L243:
 5568 0040 FFF7FFFF 	 .word -2049
 5569              	 .cfi_endproc
 5570              	.LFE213:
 5572              	 .section .text.XMC_VADC_GROUP_ChannelSetResultRegister,"ax",%progbits
 5573              	 .align 2
 5574              	 .global XMC_VADC_GROUP_ChannelSetResultRegister
 5575              	 .code 16
 5576              	 .thumb_func
 5578              	XMC_VADC_GROUP_ChannelSetResultRegister:
 5579              	.LFB214:
1780:../Libraries/XMCLib/src/xmc_vadc.c **** 
1781:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the available 16 registers for storing the channel result */
1782:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetResultRegister(XMC_VADC_GROUP_t *const group_ptr,
1783:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t ch_num,
1784:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t result_reg_num)
1785:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5580              	 .loc 2 1785 0
 5581              	 .cfi_startproc
 5582 0000 80B5     	 push {r7,lr}
 5583              	.LCFI217:
 5584              	 .cfi_def_cfa_offset 8
 5585              	 .cfi_offset 7,-8
 5586              	 .cfi_offset 14,-4
 5587 0002 86B0     	 sub sp,sp,#24
 5588              	.LCFI218:
 5589              	 .cfi_def_cfa_offset 32
 5590 0004 00AF     	 add r7,sp,#0
 5591              	.LCFI219:
 5592              	 .cfi_def_cfa_register 7
 5593 0006 F860     	 str r0,[r7,#12]
 5594 0008 B960     	 str r1,[r7,#8]
 5595 000a 7A60     	 str r2,[r7,#4]
1786:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1787:../Libraries/XMCLib/src/xmc_vadc.c **** 
1788:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1789:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Channel Number",
1790:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1791:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Result Register",
1792:../Libraries/XMCLib/src/xmc_vadc.c ****              ((result_reg_num) < XMC_VADC_NUM_RESULT_REGISTERS))
1793:../Libraries/XMCLib/src/xmc_vadc.c **** 
1794:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 5596              	 .loc 2 1794 0
 5597 000c FB68     	 ldr r3,[r7,#12]
 5598 000e BA68     	 ldr r2,[r7,#8]
 5599 0010 8032     	 add r2,r2,#128
 5600 0012 9200     	 lsl r2,r2,#2
 5601 0014 D358     	 ldr r3,[r2,r3]
 5602 0016 7B61     	 str r3,[r7,#20]
1795:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_RESREG_Msk);
 5603              	 .loc 2 1795 0
 5604 0018 7B69     	 ldr r3,[r7,#20]
 5605 001a 084A     	 ldr r2,.L246
 5606 001c 1340     	 and r3,r2
 5607 001e 7B61     	 str r3,[r7,#20]
1796:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)(result_reg_num <<  VADC_G_CHCTR_RESREG_Pos);
 5608              	 .loc 2 1796 0
 5609 0020 7B68     	 ldr r3,[r7,#4]
 5610 0022 1B04     	 lsl r3,r3,#16
 5611 0024 7A69     	 ldr r2,[r7,#20]
 5612 0026 1343     	 orr r3,r2
 5613 0028 7B61     	 str r3,[r7,#20]
1797:../Libraries/XMCLib/src/xmc_vadc.c **** 
1798:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 5614              	 .loc 2 1798 0
 5615 002a FB68     	 ldr r3,[r7,#12]
 5616 002c BA68     	 ldr r2,[r7,#8]
 5617 002e 8032     	 add r2,r2,#128
 5618 0030 9200     	 lsl r2,r2,#2
 5619 0032 7969     	 ldr r1,[r7,#20]
 5620 0034 D150     	 str r1,[r2,r3]
1799:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5621              	 .loc 2 1799 0
 5622 0036 BD46     	 mov sp,r7
 5623 0038 06B0     	 add sp,sp,#24
 5624              	 
 5625 003a 80BD     	 pop {r7,pc}
 5626              	.L247:
 5627              	 .align 2
 5628              	.L246:
 5629 003c FFFFF0FF 	 .word -983041
 5630              	 .cfi_endproc
 5631              	.LFE214:
 5633              	 .section .text.XMC_VADC_GROUP_ChannelSetIclass,"ax",%progbits
 5634              	 .align 2
 5635              	 .global XMC_VADC_GROUP_ChannelSetIclass
 5636              	 .code 16
 5637              	 .thumb_func
 5639              	XMC_VADC_GROUP_ChannelSetIclass:
 5640              	.LFB215:
1800:../Libraries/XMCLib/src/xmc_vadc.c **** 
1801:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the available 4 class conversion */
1802:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetIclass(XMC_VADC_GROUP_t *const group_ptr,
1803:../Libraries/XMCLib/src/xmc_vadc.c ****                                      const uint32_t ch_num,
1804:../Libraries/XMCLib/src/xmc_vadc.c ****                                      const XMC_VADC_CHANNEL_CONV_t conversion_class)
1805:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5641              	 .loc 2 1805 0
 5642              	 .cfi_startproc
 5643 0000 80B5     	 push {r7,lr}
 5644              	.LCFI220:
 5645              	 .cfi_def_cfa_offset 8
 5646              	 .cfi_offset 7,-8
 5647              	 .cfi_offset 14,-4
 5648 0002 86B0     	 sub sp,sp,#24
 5649              	.LCFI221:
 5650              	 .cfi_def_cfa_offset 32
 5651 0004 00AF     	 add r7,sp,#0
 5652              	.LCFI222:
 5653              	 .cfi_def_cfa_register 7
 5654 0006 F860     	 str r0,[r7,#12]
 5655 0008 B960     	 str r1,[r7,#8]
 5656 000a FB1D     	 add r3,r7,#7
 5657 000c 1A70     	 strb r2,[r3]
1806:../Libraries/XMCLib/src/xmc_vadc.c **** 
1807:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1808:../Libraries/XMCLib/src/xmc_vadc.c **** 
1809:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
1810:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong Channel Number",
1811:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1812:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong input class ",
1813:../Libraries/XMCLib/src/xmc_vadc.c ****              (XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1 >= conversion_class))
1814:../Libraries/XMCLib/src/xmc_vadc.c **** 
1815:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 5658              	 .loc 2 1815 0
 5659 000e FB68     	 ldr r3,[r7,#12]
 5660 0010 BA68     	 ldr r2,[r7,#8]
 5661 0012 8032     	 add r2,r2,#128
 5662 0014 9200     	 lsl r2,r2,#2
 5663 0016 D358     	 ldr r3,[r2,r3]
 5664 0018 7B61     	 str r3,[r7,#20]
1816:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_ICLSEL_Msk);
 5665              	 .loc 2 1816 0
 5666 001a 7B69     	 ldr r3,[r7,#20]
 5667 001c 0322     	 mov r2,#3
 5668 001e 9343     	 bic r3,r2
 5669 0020 7B61     	 str r3,[r7,#20]
1817:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)conversion_class <<  (uint32_t)VADC_G_CHCTR_ICLSEL_Pos);
 5670              	 .loc 2 1817 0
 5671 0022 FB1D     	 add r3,r7,#7
 5672 0024 1B78     	 ldrb r3,[r3]
 5673 0026 7A69     	 ldr r2,[r7,#20]
 5674 0028 1343     	 orr r3,r2
 5675 002a 7B61     	 str r3,[r7,#20]
1818:../Libraries/XMCLib/src/xmc_vadc.c **** 
1819:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 5676              	 .loc 2 1819 0
 5677 002c FB68     	 ldr r3,[r7,#12]
 5678 002e BA68     	 ldr r2,[r7,#8]
 5679 0030 8032     	 add r2,r2,#128
 5680 0032 9200     	 lsl r2,r2,#2
 5681 0034 7969     	 ldr r1,[r7,#20]
 5682 0036 D150     	 str r1,[r2,r3]
1820:../Libraries/XMCLib/src/xmc_vadc.c **** 
1821:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5683              	 .loc 2 1821 0
 5684 0038 BD46     	 mov sp,r7
 5685 003a 06B0     	 add sp,sp,#24
 5686              	 
 5687 003c 80BD     	 pop {r7,pc}
 5688              	 .cfi_endproc
 5689              	.LFE215:
 5691 003e C046     	 .section .text.XMC_VADC_GROUP_ChannelGetResultRegister,"ax",%progbits
 5692              	 .align 2
 5693              	 .global XMC_VADC_GROUP_ChannelGetResultRegister
 5694              	 .code 16
 5695              	 .thumb_func
 5697              	XMC_VADC_GROUP_ChannelGetResultRegister:
 5698              	.LFB216:
1822:../Libraries/XMCLib/src/xmc_vadc.c **** 
1823:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result register bound with specified channel */
1824:../Libraries/XMCLib/src/xmc_vadc.c **** uint8_t XMC_VADC_GROUP_ChannelGetResultRegister(XMC_VADC_GROUP_t *const group_ptr, const uint32_t c
1825:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5699              	 .loc 2 1825 0
 5700              	 .cfi_startproc
 5701 0000 80B5     	 push {r7,lr}
 5702              	.LCFI223:
 5703              	 .cfi_def_cfa_offset 8
 5704              	 .cfi_offset 7,-8
 5705              	 .cfi_offset 14,-4
 5706 0002 84B0     	 sub sp,sp,#16
 5707              	.LCFI224:
 5708              	 .cfi_def_cfa_offset 24
 5709 0004 00AF     	 add r7,sp,#0
 5710              	.LCFI225:
 5711              	 .cfi_def_cfa_register 7
 5712 0006 7860     	 str r0,[r7,#4]
 5713 0008 3960     	 str r1,[r7]
1826:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t resreg;
1827:../Libraries/XMCLib/src/xmc_vadc.c **** 
1828:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1829:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Channel Number",
1830:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1831:../Libraries/XMCLib/src/xmc_vadc.c **** 
1832:../Libraries/XMCLib/src/xmc_vadc.c ****   resreg = (uint8_t)((group_ptr->CHCTR[ch_num] & (uint32_t)VADC_G_CHCTR_RESREG_Msk) >> VADC_G_CHCTR
 5714              	 .loc 2 1832 0
 5715 000a 7B68     	 ldr r3,[r7,#4]
 5716 000c 3A68     	 ldr r2,[r7]
 5717 000e 8032     	 add r2,r2,#128
 5718 0010 9200     	 lsl r2,r2,#2
 5719 0012 D258     	 ldr r2,[r2,r3]
 5720 0014 F023     	 mov r3,#240
 5721 0016 1B03     	 lsl r3,r3,#12
 5722 0018 1340     	 and r3,r2
 5723 001a 1A0C     	 lsr r2,r3,#16
 5724 001c 0F23     	 mov r3,#15
 5725 001e FB18     	 add r3,r7,r3
 5726 0020 1A70     	 strb r2,[r3]
1833:../Libraries/XMCLib/src/xmc_vadc.c **** 
1834:../Libraries/XMCLib/src/xmc_vadc.c ****   return resreg;
 5727              	 .loc 2 1834 0
 5728 0022 0F23     	 mov r3,#15
 5729 0024 FB18     	 add r3,r7,r3
 5730 0026 1B78     	 ldrb r3,[r3]
1835:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5731              	 .loc 2 1835 0
 5732 0028 181C     	 mov r0,r3
 5733 002a BD46     	 mov sp,r7
 5734 002c 04B0     	 add sp,sp,#16
 5735              	 
 5736 002e 80BD     	 pop {r7,pc}
 5737              	 .cfi_endproc
 5738              	.LFE216:
 5740              	 .section .text.XMC_VADC_GROUP_ChannelTriggerEvent,"ax",%progbits
 5741              	 .align 2
 5742              	 .global XMC_VADC_GROUP_ChannelTriggerEvent
 5743              	 .code 16
 5744              	 .thumb_func
 5746              	XMC_VADC_GROUP_ChannelTriggerEvent:
 5747              	.LFB217:
1836:../Libraries/XMCLib/src/xmc_vadc.c **** 
1837:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to manually assert channel event */
1838:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelTriggerEvent(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)
1839:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5748              	 .loc 2 1839 0
 5749              	 .cfi_startproc
 5750 0000 80B5     	 push {r7,lr}
 5751              	.LCFI226:
 5752              	 .cfi_def_cfa_offset 8
 5753              	 .cfi_offset 7,-8
 5754              	 .cfi_offset 14,-4
 5755 0002 84B0     	 sub sp,sp,#16
 5756              	.LCFI227:
 5757              	 .cfi_def_cfa_offset 24
 5758 0004 00AF     	 add r7,sp,#0
 5759              	.LCFI228:
 5760              	 .cfi_def_cfa_register 7
 5761 0006 7860     	 str r0,[r7,#4]
 5762 0008 3960     	 str r1,[r7]
1840:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ceflag;
1841:../Libraries/XMCLib/src/xmc_vadc.c **** 
1842:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
1843:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEvent:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CH
1844:../Libraries/XMCLib/src/xmc_vadc.c **** 
1845:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag  = group_ptr->CEFLAG;
 5763              	 .loc 2 1845 0
 5764 000a 7A68     	 ldr r2,[r7,#4]
 5765 000c C023     	 mov r3,#192
 5766 000e 5B00     	 lsl r3,r3,#1
 5767 0010 D358     	 ldr r3,[r2,r3]
 5768 0012 FB60     	 str r3,[r7,#12]
1846:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag |= (uint32_t)((uint32_t)1 << ch_num);
 5769              	 .loc 2 1846 0
 5770 0014 3B68     	 ldr r3,[r7]
 5771 0016 0122     	 mov r2,#1
 5772 0018 9A40     	 lsl r2,r2,r3
 5773 001a 131C     	 mov r3,r2
 5774 001c FA68     	 ldr r2,[r7,#12]
 5775 001e 1343     	 orr r3,r2
 5776 0020 FB60     	 str r3,[r7,#12]
1847:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CEFLAG = ceflag;
 5777              	 .loc 2 1847 0
 5778 0022 7A68     	 ldr r2,[r7,#4]
 5779 0024 C023     	 mov r3,#192
 5780 0026 5B00     	 lsl r3,r3,#1
 5781 0028 F968     	 ldr r1,[r7,#12]
 5782 002a D150     	 str r1,[r2,r3]
1848:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5783              	 .loc 2 1848 0
 5784 002c BD46     	 mov sp,r7
 5785 002e 04B0     	 add sp,sp,#16
 5786              	 
 5787 0030 80BD     	 pop {r7,pc}
 5788              	 .cfi_endproc
 5789              	.LFE217:
 5791 0032 C046     	 .section .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode,"ax",%progbits
 5792              	 .align 2
 5793              	 .global XMC_VADC_GROUP_ChannelSetEventInterruptNode
 5794              	 .code 16
 5795              	 .thumb_func
 5797              	XMC_VADC_GROUP_ChannelSetEventInterruptNode:
 5798              	.LFB218:
1849:../Libraries/XMCLib/src/xmc_vadc.c **** 
1850:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind channel event with a service request (NVIC Node) */
1851:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
1852:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const uint32_t ch_num,
1853:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const XMC_VADC_SR_t sr)
1854:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5799              	 .loc 2 1854 0
 5800              	 .cfi_startproc
 5801 0000 80B5     	 push {r7,lr}
 5802              	.LCFI229:
 5803              	 .cfi_def_cfa_offset 8
 5804              	 .cfi_offset 7,-8
 5805              	 .cfi_offset 14,-4
 5806 0002 86B0     	 sub sp,sp,#24
 5807              	.LCFI230:
 5808              	 .cfi_def_cfa_offset 32
 5809 0004 00AF     	 add r7,sp,#0
 5810              	.LCFI231:
 5811              	 .cfi_def_cfa_register 7
 5812 0006 F860     	 str r0,[r7,#12]
 5813 0008 B960     	 str r1,[r7,#8]
 5814 000a FB1D     	 add r3,r7,#7
 5815 000c 1A70     	 strb r2,[r3]
1855:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t route_mask;
1856:../Libraries/XMCLib/src/xmc_vadc.c **** 
1857:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROU
1858:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Channel Number",
1859:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1860:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_VAD
1861:../Libraries/XMCLib/src/xmc_vadc.c **** 
1862:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask  = group_ptr->CEVNP0;
 5816              	 .loc 2 1862 0
 5817 000e FA68     	 ldr r2,[r7,#12]
 5818 0010 D023     	 mov r3,#208
 5819 0012 5B00     	 lsl r3,r3,#1
 5820 0014 D358     	 ldr r3,[r2,r3]
 5821 0016 7B61     	 str r3,[r7,#20]
1863:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask &= ~((uint32_t)15 << (ch_num * (uint32_t)4));
 5822              	 .loc 2 1863 0
 5823 0018 BB68     	 ldr r3,[r7,#8]
 5824 001a 9B00     	 lsl r3,r3,#2
 5825 001c 1A1C     	 mov r2,r3
 5826 001e 0F23     	 mov r3,#15
 5827 0020 9340     	 lsl r3,r3,r2
 5828 0022 DA43     	 mvn r2,r3
 5829 0024 7B69     	 ldr r3,[r7,#20]
 5830 0026 1340     	 and r3,r2
 5831 0028 7B61     	 str r3,[r7,#20]
1864:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask |= (uint32_t)( (uint32_t)sr << (ch_num * (uint32_t)4));
 5832              	 .loc 2 1864 0
 5833 002a FB1D     	 add r3,r7,#7
 5834 002c 1B78     	 ldrb r3,[r3]
 5835 002e BA68     	 ldr r2,[r7,#8]
 5836 0030 9200     	 lsl r2,r2,#2
 5837 0032 9340     	 lsl r3,r3,r2
 5838 0034 7A69     	 ldr r2,[r7,#20]
 5839 0036 1343     	 orr r3,r2
 5840 0038 7B61     	 str r3,[r7,#20]
1865:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CEVNP0 = route_mask;
 5841              	 .loc 2 1865 0
 5842 003a FA68     	 ldr r2,[r7,#12]
 5843 003c D023     	 mov r3,#208
 5844 003e 5B00     	 lsl r3,r3,#1
 5845 0040 7969     	 ldr r1,[r7,#20]
 5846 0042 D150     	 str r1,[r2,r3]
1866:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5847              	 .loc 2 1866 0
 5848 0044 BD46     	 mov sp,r7
 5849 0046 06B0     	 add sp,sp,#24
 5850              	 
 5851 0048 80BD     	 pop {r7,pc}
 5852              	 .cfi_endproc
 5853              	.LFE218:
 5855 004a C046     	 .section .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria,"ax",%progbits
 5856              	 .align 2
 5857              	 .global XMC_VADC_GROUP_ChannelTriggerEventGenCriteria
 5858              	 .code 16
 5859              	 .thumb_func
 5861              	XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:
 5862              	.LFB219:
1867:../Libraries/XMCLib/src/xmc_vadc.c **** 
1868:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure conditions for generation of channel event */
1869:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelTriggerEventGenCriteria( XMC_VADC_GROUP_t *const group_ptr,
1870:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    const uint32_t ch_num,
1871:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    const XMC_VADC_CHANNEL_EVGEN_t criteria)
1872:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5863              	 .loc 2 1872 0
 5864              	 .cfi_startproc
 5865 0000 80B5     	 push {r7,lr}
 5866              	.LCFI232:
 5867              	 .cfi_def_cfa_offset 8
 5868              	 .cfi_offset 7,-8
 5869              	 .cfi_offset 14,-4
 5870 0002 86B0     	 sub sp,sp,#24
 5871              	.LCFI233:
 5872              	 .cfi_def_cfa_offset 32
 5873 0004 00AF     	 add r7,sp,#0
 5874              	.LCFI234:
 5875              	 .cfi_def_cfa_register 7
 5876 0006 F860     	 str r0,[r7,#12]
 5877 0008 B960     	 str r1,[r7,#8]
 5878 000a FB1D     	 add r3,r7,#7
 5879 000c 1A70     	 strb r2,[r3]
1873:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1874:../Libraries/XMCLib/src/xmc_vadc.c **** 
1875:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Group Pointer", XMC_VADC_CHECK_GR
1876:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Channel Number",
1877:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1878:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Event Generation Criteria",
1879:../Libraries/XMCLib/src/xmc_vadc.c ****              ((criteria) <= XMC_VADC_CHANNEL_EVGEN_ALWAYS))
1880:../Libraries/XMCLib/src/xmc_vadc.c **** 
1881:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = group_ptr->CHCTR[ch_num];
 5880              	 .loc 2 1881 0
 5881 000e FB68     	 ldr r3,[r7,#12]
 5882 0010 BA68     	 ldr r2,[r7,#8]
 5883 0012 8032     	 add r2,r2,#128
 5884 0014 9200     	 lsl r2,r2,#2
 5885 0016 D358     	 ldr r3,[r2,r3]
 5886 0018 7B61     	 str r3,[r7,#20]
1882:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_CHEVMODE_Msk);
 5887              	 .loc 2 1882 0
 5888 001a 7B69     	 ldr r3,[r7,#20]
 5889 001c 084A     	 ldr r2,.L254
 5890 001e 1340     	 and r3,r2
 5891 0020 7B61     	 str r3,[r7,#20]
1883:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)criteria << VADC_G_CHCTR_CHEVMODE_Pos);
 5892              	 .loc 2 1883 0
 5893 0022 FB1D     	 add r3,r7,#7
 5894 0024 1B78     	 ldrb r3,[r3]
 5895 0026 1B02     	 lsl r3,r3,#8
 5896 0028 7A69     	 ldr r2,[r7,#20]
 5897 002a 1343     	 orr r3,r2
 5898 002c 7B61     	 str r3,[r7,#20]
1884:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 5899              	 .loc 2 1884 0
 5900 002e FB68     	 ldr r3,[r7,#12]
 5901 0030 BA68     	 ldr r2,[r7,#8]
 5902 0032 8032     	 add r2,r2,#128
 5903 0034 9200     	 lsl r2,r2,#2
 5904 0036 7969     	 ldr r1,[r7,#20]
 5905 0038 D150     	 str r1,[r2,r3]
1885:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5906              	 .loc 2 1885 0
 5907 003a BD46     	 mov sp,r7
 5908 003c 06B0     	 add sp,sp,#24
 5909              	 
 5910 003e 80BD     	 pop {r7,pc}
 5911              	.L255:
 5912              	 .align 2
 5913              	.L254:
 5914 0040 FFFCFFFF 	 .word -769
 5915              	 .cfi_endproc
 5916              	.LFE219:
 5918              	 .section .text.XMC_VADC_GROUP_ChannelSetBoundarySelection,"ax",%progbits
 5919              	 .align 2
 5920              	 .global XMC_VADC_GROUP_ChannelSetBoundarySelection
 5921              	 .code 16
 5922              	 .thumb_func
 5924              	XMC_VADC_GROUP_ChannelSetBoundarySelection:
 5925              	.LFB220:
1886:../Libraries/XMCLib/src/xmc_vadc.c **** 
1887:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure the boundary selection */
1888:../Libraries/XMCLib/src/xmc_vadc.c **** void  XMC_VADC_GROUP_ChannelSetBoundarySelection(XMC_VADC_GROUP_t *const group_ptr,
1889:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const uint32_t ch_num,
1890:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  XMC_VADC_BOUNDARY_SELECT_t boundary_sel,
1891:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  XMC_VADC_CHANNEL_BOUNDARY_t selection)
1892:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5926              	 .loc 2 1892 0
 5927              	 .cfi_startproc
 5928 0000 80B5     	 push {r7,lr}
 5929              	.LCFI235:
 5930              	 .cfi_def_cfa_offset 8
 5931              	 .cfi_offset 7,-8
 5932              	 .cfi_offset 14,-4
 5933 0002 84B0     	 sub sp,sp,#16
 5934              	.LCFI236:
 5935              	 .cfi_def_cfa_offset 24
 5936 0004 00AF     	 add r7,sp,#0
 5937              	.LCFI237:
 5938              	 .cfi_def_cfa_register 7
 5939 0006 F860     	 str r0,[r7,#12]
 5940 0008 B960     	 str r1,[r7,#8]
 5941 000a 191C     	 mov r1,r3
 5942 000c FB1D     	 add r3,r7,#7
 5943 000e 1A70     	 strb r2,[r3]
 5944 0010 BB1D     	 add r3,r7,#6
 5945 0012 0A1C     	 add r2,r1,#0
 5946 0014 1A70     	 strb r2,[r3]
1893:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetBoundarySelection:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
1894:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetBoundarySelection:Wrong Channel Number",
1895:../Libraries/XMCLib/src/xmc_vadc.c ****               ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1896:../Libraries/XMCLib/src/xmc_vadc.c **** 
1897:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] &= ~((uint32_t)VADC_G_CHCTR_BNDSELL_Msk << boundary_sel);
 5947              	 .loc 2 1897 0
 5948 0016 FB68     	 ldr r3,[r7,#12]
 5949 0018 BA68     	 ldr r2,[r7,#8]
 5950 001a 8032     	 add r2,r2,#128
 5951 001c 9200     	 lsl r2,r2,#2
 5952 001e D358     	 ldr r3,[r2,r3]
 5953 0020 FA1D     	 add r2,r7,#7
 5954 0022 1278     	 ldrb r2,[r2]
 5955 0024 3021     	 mov r1,#48
 5956 0026 9140     	 lsl r1,r1,r2
 5957 0028 0A1C     	 mov r2,r1
 5958 002a D243     	 mvn r2,r2
 5959 002c 1A40     	 and r2,r3
 5960 002e 111C     	 mov r1,r2
 5961 0030 FB68     	 ldr r3,[r7,#12]
 5962 0032 BA68     	 ldr r2,[r7,#8]
 5963 0034 8032     	 add r2,r2,#128
 5964 0036 9200     	 lsl r2,r2,#2
 5965 0038 D150     	 str r1,[r2,r3]
1898:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] |= (selection<< ((uint32_t)VADC_G_CHCTR_BNDSELL_Pos + (uint32_t)boundary
 5966              	 .loc 2 1898 0
 5967 003a FB68     	 ldr r3,[r7,#12]
 5968 003c BA68     	 ldr r2,[r7,#8]
 5969 003e 8032     	 add r2,r2,#128
 5970 0040 9200     	 lsl r2,r2,#2
 5971 0042 D358     	 ldr r3,[r2,r3]
 5972 0044 BA1D     	 add r2,r7,#6
 5973 0046 1278     	 ldrb r2,[r2]
 5974 0048 F91D     	 add r1,r7,#7
 5975 004a 0978     	 ldrb r1,[r1]
 5976 004c 0431     	 add r1,r1,#4
 5977 004e 8A40     	 lsl r2,r2,r1
 5978 0050 1343     	 orr r3,r2
 5979 0052 191C     	 mov r1,r3
 5980 0054 FB68     	 ldr r3,[r7,#12]
 5981 0056 BA68     	 ldr r2,[r7,#8]
 5982 0058 8032     	 add r2,r2,#128
 5983 005a 9200     	 lsl r2,r2,#2
 5984 005c D150     	 str r1,[r2,r3]
1899:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5985              	 .loc 2 1899 0
 5986 005e BD46     	 mov sp,r7
 5987 0060 04B0     	 add sp,sp,#16
 5988              	 
 5989 0062 80BD     	 pop {r7,pc}
 5990              	 .cfi_endproc
 5991              	.LFE220:
 5993              	 .section .text.XMC_VADC_GROUP_AddResultToFifo,"ax",%progbits
 5994              	 .align 2
 5995              	 .global XMC_VADC_GROUP_AddResultToFifo
 5996              	 .code 16
 5997              	 .thumb_func
 5999              	XMC_VADC_GROUP_AddResultToFifo:
 6000              	.LFB221:
1900:../Libraries/XMCLib/src/xmc_vadc.c **** 
1901:../Libraries/XMCLib/src/xmc_vadc.c **** /* Make the specified result register part of Result FIFO */ 
1902:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_AddResultToFifo(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)
1903:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6001              	 .loc 2 1903 0
 6002              	 .cfi_startproc
 6003 0000 80B5     	 push {r7,lr}
 6004              	.LCFI238:
 6005              	 .cfi_def_cfa_offset 8
 6006              	 .cfi_offset 7,-8
 6007              	 .cfi_offset 14,-4
 6008 0002 84B0     	 sub sp,sp,#16
 6009              	.LCFI239:
 6010              	 .cfi_def_cfa_offset 24
 6011 0004 00AF     	 add r7,sp,#0
 6012              	.LCFI240:
 6013              	 .cfi_def_cfa_register 7
 6014 0006 7860     	 str r0,[r7,#4]
 6015 0008 3960     	 str r1,[r7]
1904:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t fen;
1905:../Libraries/XMCLib/src/xmc_vadc.c **** 
1906:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_AddResultToFifo:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
1907:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_AddResultToFifo:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESU
1908:../Libraries/XMCLib/src/xmc_vadc.c **** 
1909:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract and clear the FIFO enable field */
1910:../Libraries/XMCLib/src/xmc_vadc.c ****   fen = group_ptr->RCR[res_reg];
 6016              	 .loc 2 1910 0
 6017 000a 7B68     	 ldr r3,[r7,#4]
 6018 000c 3A68     	 ldr r2,[r7]
 6019 000e A032     	 add r2,r2,#160
 6020 0010 9200     	 lsl r2,r2,#2
 6021 0012 D358     	 ldr r3,[r2,r3]
 6022 0014 FB60     	 str r3,[r7,#12]
1911:../Libraries/XMCLib/src/xmc_vadc.c ****   fen &= ~((uint32_t)VADC_G_RCR_FEN_Msk);
 6023              	 .loc 2 1911 0
 6024 0016 FB68     	 ldr r3,[r7,#12]
 6025 0018 084A     	 ldr r2,.L258
 6026 001a 1340     	 and r3,r2
 6027 001c FB60     	 str r3,[r7,#12]
1912:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set this register up as a FIFO member */
1913:../Libraries/XMCLib/src/xmc_vadc.c ****   fen |= (uint32_t)((uint32_t)1 << VADC_G_RCR_FEN_Pos);
 6028              	 .loc 2 1913 0
 6029 001e FB68     	 ldr r3,[r7,#12]
 6030 0020 8022     	 mov r2,#128
 6031 0022 9204     	 lsl r2,r2,#18
 6032 0024 1343     	 orr r3,r2
 6033 0026 FB60     	 str r3,[r7,#12]
1914:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RCR[res_reg] = fen;
 6034              	 .loc 2 1914 0
 6035 0028 7B68     	 ldr r3,[r7,#4]
 6036 002a 3A68     	 ldr r2,[r7]
 6037 002c A032     	 add r2,r2,#160
 6038 002e 9200     	 lsl r2,r2,#2
 6039 0030 F968     	 ldr r1,[r7,#12]
 6040 0032 D150     	 str r1,[r2,r3]
1915:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6041              	 .loc 2 1915 0
 6042 0034 BD46     	 mov sp,r7
 6043 0036 04B0     	 add sp,sp,#16
 6044              	 
 6045 0038 80BD     	 pop {r7,pc}
 6046              	.L259:
 6047 003a C046     	 .align 2
 6048              	.L258:
 6049 003c FFFFFFF9 	 .word -100663297
 6050              	 .cfi_endproc
 6051              	.LFE221:
 6053              	 .section .text.XMC_VADC_GROUP_SetResultFastCompareValue,"ax",%progbits
 6054              	 .align 2
 6055              	 .global XMC_VADC_GROUP_SetResultFastCompareValue
 6056              	 .code 16
 6057              	 .thumb_func
 6059              	XMC_VADC_GROUP_SetResultFastCompareValue:
 6060              	.LFB222:
1916:../Libraries/XMCLib/src/xmc_vadc.c **** 
1917:../Libraries/XMCLib/src/xmc_vadc.c **** 
1918:../Libraries/XMCLib/src/xmc_vadc.c **** /* Applicable to fast compare mode, this API sets up the value which is to be compared against conv
1919:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultFastCompareValue(XMC_VADC_GROUP_t *const group_ptr,
1920:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const uint32_t res_reg,
1921:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const XMC_VADC_RESULT_SIZE_t compare_val)
1922:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6061              	 .loc 2 1922 0
 6062              	 .cfi_startproc
 6063 0000 80B5     	 push {r7,lr}
 6064              	.LCFI241:
 6065              	 .cfi_def_cfa_offset 8
 6066              	 .cfi_offset 7,-8
 6067              	 .cfi_offset 14,-4
 6068 0002 86B0     	 sub sp,sp,#24
 6069              	.LCFI242:
 6070              	 .cfi_def_cfa_offset 32
 6071 0004 00AF     	 add r7,sp,#0
 6072              	.LCFI243:
 6073              	 .cfi_def_cfa_register 7
 6074 0006 F860     	 str r0,[r7,#12]
 6075 0008 B960     	 str r1,[r7,#8]
 6076 000a BB1D     	 add r3,r7,#6
 6077 000c 1A80     	 strh r2,[r3]
1923:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res = group_ptr->RES[res_reg];
 6078              	 .loc 2 1923 0
 6079 000e FB68     	 ldr r3,[r7,#12]
 6080 0010 BA68     	 ldr r2,[r7,#8]
 6081 0012 C032     	 add r2,r2,#192
 6082 0014 9200     	 lsl r2,r2,#2
 6083 0016 D358     	 ldr r3,[r2,r3]
 6084 0018 7B61     	 str r3,[r7,#20]
1924:../Libraries/XMCLib/src/xmc_vadc.c **** 
1925:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultFastCompareValue:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1926:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultFastCompareValue:Wrong Result Register",
1927:../Libraries/XMCLib/src/xmc_vadc.c ****             ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
1928:../Libraries/XMCLib/src/xmc_vadc.c **** 
1929:../Libraries/XMCLib/src/xmc_vadc.c ****   res &= ~((uint32_t)VADC_G_RES_RESULT_Msk);
 6085              	 .loc 2 1929 0
 6086 001a 7B69     	 ldr r3,[r7,#20]
 6087 001c 1B0C     	 lsr r3,r3,#16
 6088 001e 1B04     	 lsl r3,r3,#16
 6089 0020 7B61     	 str r3,[r7,#20]
1930:../Libraries/XMCLib/src/xmc_vadc.c ****   res |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 6090              	 .loc 2 1930 0
 6091 0022 BB1D     	 add r3,r7,#6
 6092 0024 1B88     	 ldrh r3,[r3]
 6093 0026 9B00     	 lsl r3,r3,#2
 6094 0028 7A69     	 ldr r2,[r7,#20]
 6095 002a 1343     	 orr r3,r2
 6096 002c 7B61     	 str r3,[r7,#20]
1931:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RES[res_reg] = res;
 6097              	 .loc 2 1931 0
 6098 002e FB68     	 ldr r3,[r7,#12]
 6099 0030 BA68     	 ldr r2,[r7,#8]
 6100 0032 C032     	 add r2,r2,#192
 6101 0034 9200     	 lsl r2,r2,#2
 6102 0036 7969     	 ldr r1,[r7,#20]
 6103 0038 D150     	 str r1,[r2,r3]
1932:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6104              	 .loc 2 1932 0
 6105 003a BD46     	 mov sp,r7
 6106 003c 06B0     	 add sp,sp,#24
 6107              	 
 6108 003e 80BD     	 pop {r7,pc}
 6109              	 .cfi_endproc
 6110              	.LFE222:
 6112              	 .section .text.XMC_VADC_GROUP_GetFastCompareResult,"ax",%progbits
 6113              	 .align 2
 6114              	 .global XMC_VADC_GROUP_GetFastCompareResult
 6115              	 .code 16
 6116              	 .thumb_func
 6118              	XMC_VADC_GROUP_GetFastCompareResult:
 6119              	.LFB223:
1933:../Libraries/XMCLib/src/xmc_vadc.c **** 
1934:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result of fast mode comparison */
1935:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GROUP_GetFastCompareResult(XMC_VADC_GROUP_t *const group_ptr, cons
1936:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6120              	 .loc 2 1936 0
 6121              	 .cfi_startproc
 6122 0000 80B5     	 push {r7,lr}
 6123              	.LCFI244:
 6124              	 .cfi_def_cfa_offset 8
 6125              	 .cfi_offset 7,-8
 6126              	 .cfi_offset 14,-4
 6127 0002 84B0     	 sub sp,sp,#16
 6128              	.LCFI245:
 6129              	 .cfi_def_cfa_offset 24
 6130 0004 00AF     	 add r7,sp,#0
 6131              	.LCFI246:
 6132              	 .cfi_def_cfa_register 7
 6133 0006 7860     	 str r0,[r7,#4]
 6134 0008 3960     	 str r1,[r7]
1937:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_FAST_COMPARE_t result;
1938:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
1939:../Libraries/XMCLib/src/xmc_vadc.c **** 
1940:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetFastCompareResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
1941:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetFastCompareResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM
1942:../Libraries/XMCLib/src/xmc_vadc.c **** 
1943:../Libraries/XMCLib/src/xmc_vadc.c ****   res = group_ptr->RES[res_reg];
 6135              	 .loc 2 1943 0
 6136 000a 7B68     	 ldr r3,[r7,#4]
 6137 000c 3A68     	 ldr r2,[r7]
 6138 000e C032     	 add r2,r2,#192
 6139 0010 9200     	 lsl r2,r2,#2
 6140 0012 D358     	 ldr r3,[r2,r3]
 6141 0014 BB60     	 str r3,[r7,#8]
1944:../Libraries/XMCLib/src/xmc_vadc.c **** 
1945:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res & (uint32_t)VADC_G_RES_VF_Msk)
 6142              	 .loc 2 1945 0
 6143 0016 BB68     	 ldr r3,[r7,#8]
 6144 0018 002B     	 cmp r3,#0
 6145 001a 08DA     	 bge .L262
1946:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1947:../Libraries/XMCLib/src/xmc_vadc.c ****     result = (XMC_VADC_FAST_COMPARE_t)((uint32_t)(res >> (uint32_t)VADC_G_RES_FCR_Pos) & (uint32_t)
 6146              	 .loc 2 1947 0
 6147 001c BB68     	 ldr r3,[r7,#8]
 6148 001e 9B0F     	 lsr r3,r3,#30
 6149 0020 DAB2     	 uxtb r2,r3
 6150 0022 0F23     	 mov r3,#15
 6151 0024 FB18     	 add r3,r7,r3
 6152 0026 0121     	 mov r1,#1
 6153 0028 0A40     	 and r2,r1
 6154 002a 1A70     	 strb r2,[r3]
 6155 002c 03E0     	 b .L263
 6156              	.L262:
1948:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1949:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1950:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1951:../Libraries/XMCLib/src/xmc_vadc.c ****     result = XMC_VADC_FAST_COMPARE_UNKNOWN;
 6157              	 .loc 2 1951 0
 6158 002e 0F23     	 mov r3,#15
 6159 0030 FB18     	 add r3,r7,r3
 6160 0032 0222     	 mov r2,#2
 6161 0034 1A70     	 strb r2,[r3]
 6162              	.L263:
1952:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1953:../Libraries/XMCLib/src/xmc_vadc.c **** 
1954:../Libraries/XMCLib/src/xmc_vadc.c ****   return result;
 6163              	 .loc 2 1954 0
 6164 0036 0F23     	 mov r3,#15
 6165 0038 FB18     	 add r3,r7,r3
 6166 003a 1B78     	 ldrb r3,[r3]
1955:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6167              	 .loc 2 1955 0
 6168 003c 181C     	 mov r0,r3
 6169 003e BD46     	 mov sp,r7
 6170 0040 04B0     	 add sp,sp,#16
 6171              	 
 6172 0042 80BD     	 pop {r7,pc}
 6173              	 .cfi_endproc
 6174              	.LFE223:
 6176              	 .section .text.XMC_VADC_GROUP_SetResultSubtractionValue,"ax",%progbits
 6177              	 .align 2
 6178              	 .global XMC_VADC_GROUP_SetResultSubtractionValue
 6179              	 .code 16
 6180              	 .thumb_func
 6182              	XMC_VADC_GROUP_SetResultSubtractionValue:
 6183              	.LFB224:
1956:../Libraries/XMCLib/src/xmc_vadc.c **** 
1957:../Libraries/XMCLib/src/xmc_vadc.c **** /* Applicable to fast compare mode, this API sets up the value which is to be compared against conv
1958:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultSubtractionValue(XMC_VADC_GROUP_t *const group_ptr,
1959:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const uint16_t subtraction_val)
1960:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6184              	 .loc 2 1960 0
 6185              	 .cfi_startproc
 6186 0000 80B5     	 push {r7,lr}
 6187              	.LCFI247:
 6188              	 .cfi_def_cfa_offset 8
 6189              	 .cfi_offset 7,-8
 6190              	 .cfi_offset 14,-4
 6191 0002 84B0     	 sub sp,sp,#16
 6192              	.LCFI248:
 6193              	 .cfi_def_cfa_offset 24
 6194 0004 00AF     	 add r7,sp,#0
 6195              	.LCFI249:
 6196              	 .cfi_def_cfa_register 7
 6197 0006 7860     	 str r0,[r7,#4]
 6198 0008 0A1C     	 mov r2,r1
 6199 000a BB1C     	 add r3,r7,#2
 6200 000c 1A80     	 strh r2,[r3]
1961:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
1962:../Libraries/XMCLib/src/xmc_vadc.c **** 
1963:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultSubtractionValue:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1964:../Libraries/XMCLib/src/xmc_vadc.c **** 
1965:../Libraries/XMCLib/src/xmc_vadc.c ****   res = group_ptr->RES[0];
 6201              	 .loc 2 1965 0
 6202 000e 7A68     	 ldr r2,[r7,#4]
 6203 0010 C023     	 mov r3,#192
 6204 0012 9B00     	 lsl r3,r3,#2
 6205 0014 D358     	 ldr r3,[r2,r3]
 6206 0016 FB60     	 str r3,[r7,#12]
1966:../Libraries/XMCLib/src/xmc_vadc.c ****   res &= ~((uint32_t)VADC_G_RES_RESULT_Msk);
 6207              	 .loc 2 1966 0
 6208 0018 FB68     	 ldr r3,[r7,#12]
 6209 001a 1B0C     	 lsr r3,r3,#16
 6210 001c 1B04     	 lsl r3,r3,#16
 6211 001e FB60     	 str r3,[r7,#12]
1967:../Libraries/XMCLib/src/xmc_vadc.c ****   res |= (uint32_t)subtraction_val;
 6212              	 .loc 2 1967 0
 6213 0020 BB1C     	 add r3,r7,#2
 6214 0022 1B88     	 ldrh r3,[r3]
 6215 0024 FA68     	 ldr r2,[r7,#12]
 6216 0026 1343     	 orr r3,r2
 6217 0028 FB60     	 str r3,[r7,#12]
1968:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RES[0] = res;
 6218              	 .loc 2 1968 0
 6219 002a 7A68     	 ldr r2,[r7,#4]
 6220 002c C023     	 mov r3,#192
 6221 002e 9B00     	 lsl r3,r3,#2
 6222 0030 F968     	 ldr r1,[r7,#12]
 6223 0032 D150     	 str r1,[r2,r3]
1969:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6224              	 .loc 2 1969 0
 6225 0034 BD46     	 mov sp,r7
 6226 0036 04B0     	 add sp,sp,#16
 6227              	 
 6228 0038 80BD     	 pop {r7,pc}
 6229              	 .cfi_endproc
 6230              	.LFE224:
 6232 003a C046     	 .section .text.XMC_VADC_GROUP_SetResultInterruptNode,"ax",%progbits
 6233              	 .align 2
 6234              	 .global XMC_VADC_GROUP_SetResultInterruptNode
 6235              	 .code 16
 6236              	 .thumb_func
 6238              	XMC_VADC_GROUP_SetResultInterruptNode:
 6239              	.LFB225:
1970:../Libraries/XMCLib/src/xmc_vadc.c **** 
1971:../Libraries/XMCLib/src/xmc_vadc.c **** 
1972:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select a service request line (NVIC Node) for result event of specified unit of result ha
1973:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
1974:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const uint32_t res_reg,
1975:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const XMC_VADC_SR_t sr)
1976:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6240              	 .loc 2 1976 0
 6241              	 .cfi_startproc
 6242 0000 80B5     	 push {r7,lr}
 6243              	.LCFI250:
 6244              	 .cfi_def_cfa_offset 8
 6245              	 .cfi_offset 7,-8
 6246              	 .cfi_offset 14,-4
 6247 0002 86B0     	 sub sp,sp,#24
 6248              	.LCFI251:
 6249              	 .cfi_def_cfa_offset 32
 6250 0004 00AF     	 add r7,sp,#0
 6251              	.LCFI252:
 6252              	 .cfi_def_cfa_register 7
 6253 0006 F860     	 str r0,[r7,#12]
 6254 0008 B960     	 str r1,[r7,#8]
 6255 000a FB1D     	 add r3,r7,#7
 6256 000c 1A70     	 strb r2,[r3]
1977:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t route_mask;
1978:../Libraries/XMCLib/src/xmc_vadc.c **** 
1979:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
1980:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Result Register", ((res_reg) < XMC_VADC_N
1981:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_S
1982:../Libraries/XMCLib/src/xmc_vadc.c **** 
1983:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res_reg <= 7U)
 6257              	 .loc 2 1983 0
 6258 000e BB68     	 ldr r3,[r7,#8]
 6259 0010 072B     	 cmp r3,#7
 6260 0012 1BD8     	 bhi .L267
1984:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1985:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask  = group_ptr->REVNP0;
 6261              	 .loc 2 1985 0
 6262 0014 FA68     	 ldr r2,[r7,#12]
 6263 0016 D823     	 mov r3,#216
 6264 0018 5B00     	 lsl r3,r3,#1
 6265 001a D358     	 ldr r3,[r2,r3]
 6266 001c 7B61     	 str r3,[r7,#20]
1986:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (res_reg * (uint32_t)4) ));
 6267              	 .loc 2 1986 0
 6268 001e BB68     	 ldr r3,[r7,#8]
 6269 0020 9B00     	 lsl r3,r3,#2
 6270 0022 1A1C     	 mov r2,r3
 6271 0024 0F23     	 mov r3,#15
 6272 0026 9340     	 lsl r3,r3,r2
 6273 0028 DA43     	 mvn r2,r3
 6274 002a 7B69     	 ldr r3,[r7,#20]
 6275 002c 1340     	 and r3,r2
 6276 002e 7B61     	 str r3,[r7,#20]
1987:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << (res_reg * (uint32_t)4));
 6277              	 .loc 2 1987 0
 6278 0030 FB1D     	 add r3,r7,#7
 6279 0032 1B78     	 ldrb r3,[r3]
 6280 0034 BA68     	 ldr r2,[r7,#8]
 6281 0036 9200     	 lsl r2,r2,#2
 6282 0038 9340     	 lsl r3,r3,r2
 6283 003a 7A69     	 ldr r2,[r7,#20]
 6284 003c 1343     	 orr r3,r2
 6285 003e 7B61     	 str r3,[r7,#20]
1988:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->REVNP0 = route_mask;
 6286              	 .loc 2 1988 0
 6287 0040 FA68     	 ldr r2,[r7,#12]
 6288 0042 D823     	 mov r3,#216
 6289 0044 5B00     	 lsl r3,r3,#1
 6290 0046 7969     	 ldr r1,[r7,#20]
 6291 0048 D150     	 str r1,[r2,r3]
 6292 004a 20E0     	 b .L266
 6293              	.L267:
1989:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1990:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1991:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1992:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask = group_ptr->REVNP1;
 6294              	 .loc 2 1992 0
 6295 004c FA68     	 ldr r2,[r7,#12]
 6296 004e DA23     	 mov r3,#218
 6297 0050 5B00     	 lsl r3,r3,#1
 6298 0052 D358     	 ldr r3,[r2,r3]
 6299 0054 7B61     	 str r3,[r7,#20]
1993:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
 6300              	 .loc 2 1993 0
 6301 0056 BB68     	 ldr r3,[r7,#8]
 6302 0058 0E4A     	 ldr r2,.L269
 6303 005a 9446     	 mov ip,r2
 6304 005c 6344     	 add r3,r3,ip
 6305 005e 9B00     	 lsl r3,r3,#2
 6306 0060 1A1C     	 mov r2,r3
 6307 0062 0F23     	 mov r3,#15
 6308 0064 9340     	 lsl r3,r3,r2
 6309 0066 DA43     	 mvn r2,r3
 6310 0068 7B69     	 ldr r3,[r7,#20]
 6311 006a 1340     	 and r3,r2
 6312 006c 7B61     	 str r3,[r7,#20]
1994:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
 6313              	 .loc 2 1994 0
 6314 006e FB1D     	 add r3,r7,#7
 6315 0070 1B78     	 ldrb r3,[r3]
 6316 0072 BA68     	 ldr r2,[r7,#8]
 6317 0074 0749     	 ldr r1,.L269
 6318 0076 8C46     	 mov ip,r1
 6319 0078 6244     	 add r2,r2,ip
 6320 007a 9200     	 lsl r2,r2,#2
 6321 007c 9340     	 lsl r3,r3,r2
 6322 007e 7A69     	 ldr r2,[r7,#20]
 6323 0080 1343     	 orr r3,r2
 6324 0082 7B61     	 str r3,[r7,#20]
1995:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->REVNP1 = route_mask;
 6325              	 .loc 2 1995 0
 6326 0084 FA68     	 ldr r2,[r7,#12]
 6327 0086 DA23     	 mov r3,#218
 6328 0088 5B00     	 lsl r3,r3,#1
 6329 008a 7969     	 ldr r1,[r7,#20]
 6330 008c D150     	 str r1,[r2,r3]
 6331              	.L266:
1996:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1997:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6332              	 .loc 2 1997 0
 6333 008e BD46     	 mov sp,r7
 6334 0090 06B0     	 add sp,sp,#24
 6335              	 
 6336 0092 80BD     	 pop {r7,pc}
 6337              	.L270:
 6338              	 .align 2
 6339              	.L269:
 6340 0094 F8FFFF3F 	 .word 1073741816
 6341              	 .cfi_endproc
 6342              	.LFE225:
 6344              	 .section .text.XMC_VADC_GROUP_GetResultFifoTail,"ax",%progbits
 6345              	 .align 2
 6346              	 .global XMC_VADC_GROUP_GetResultFifoTail
 6347              	 .code 16
 6348              	 .thumb_func
 6350              	XMC_VADC_GROUP_GetResultFifoTail:
 6351              	.LFB226:
1998:../Libraries/XMCLib/src/xmc_vadc.c **** 
1999:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the tail of the fifo which the specified result register is a part of */
2000:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_GetResultFifoTail(XMC_VADC_GROUP_t *const group_ptr, uint32_t res_reg)
2001:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6352              	 .loc 2 2001 0
 6353              	 .cfi_startproc
 6354 0000 80B5     	 push {r7,lr}
 6355              	.LCFI253:
 6356              	 .cfi_def_cfa_offset 8
 6357              	 .cfi_offset 7,-8
 6358              	 .cfi_offset 14,-4
 6359 0002 86B0     	 sub sp,sp,#24
 6360              	.LCFI254:
 6361              	 .cfi_def_cfa_offset 32
 6362 0004 00AF     	 add r7,sp,#0
 6363              	.LCFI255:
 6364              	 .cfi_def_cfa_register 7
 6365 0006 7860     	 str r0,[r7,#4]
 6366 0008 3960     	 str r1,[r7]
2002:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t tail;
2003:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr;
2004:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t i;
2005:../Libraries/XMCLib/src/xmc_vadc.c ****   bool exit_flag;
2006:../Libraries/XMCLib/src/xmc_vadc.c **** 
2007:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoTail:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2008:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoTail:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
2009:../Libraries/XMCLib/src/xmc_vadc.c **** 
2010:../Libraries/XMCLib/src/xmc_vadc.c ****   tail = 0U;
 6367              	 .loc 2 2010 0
 6368 000a 0023     	 mov r3,#0
 6369 000c 7B61     	 str r3,[r7,#20]
2011:../Libraries/XMCLib/src/xmc_vadc.c ****   exit_flag= (bool)false;
 6370              	 .loc 2 2011 0
 6371 000e 0F23     	 mov r3,#15
 6372 0010 FB18     	 add r3,r7,r3
 6373 0012 0022     	 mov r2,#0
 6374 0014 1A70     	 strb r2,[r3]
2012:../Libraries/XMCLib/src/xmc_vadc.c **** 
2013:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((bool)true == XMC_VADC_GROUP_IsResultRegisterFifoHead(group_ptr, res_reg))
 6375              	 .loc 2 2013 0
 6376 0016 7A68     	 ldr r2,[r7,#4]
 6377 0018 3B68     	 ldr r3,[r7]
 6378 001a 101C     	 mov r0,r2
 6379 001c 191C     	 mov r1,r3
 6380 001e FFF7FEFF 	 bl XMC_VADC_GROUP_IsResultRegisterFifoHead
 6381 0022 031E     	 sub r3,r0,#0
 6382 0024 02D0     	 beq .L272
2014:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2015:../Libraries/XMCLib/src/xmc_vadc.c ****     res_reg = res_reg - 1U;
 6383              	 .loc 2 2015 0
 6384 0026 3B68     	 ldr r3,[r7]
 6385 0028 013B     	 sub r3,r3,#1
 6386 002a 3B60     	 str r3,[r7]
 6387              	.L272:
2016:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2017:../Libraries/XMCLib/src/xmc_vadc.c **** 
2018:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Border condition */
2019:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == res_reg)
 6388              	 .loc 2 2019 0
 6389 002c 3B68     	 ldr r3,[r7]
 6390 002e 002B     	 cmp r3,#0
 6391 0030 02D1     	 bne .L273
2020:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2021:../Libraries/XMCLib/src/xmc_vadc.c ****     tail = 0U;
 6392              	 .loc 2 2021 0
 6393 0032 0023     	 mov r3,#0
 6394 0034 7B61     	 str r3,[r7,#20]
 6395 0036 2DE0     	 b .L274
 6396              	.L273:
2022:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2023:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2024:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2025:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Stop either at a node that does not have FEN set or at Node-0 */
2026:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i = (int32_t)res_reg; i >= (int32_t)0; i--)
 6397              	 .loc 2 2026 0
 6398 0038 3B68     	 ldr r3,[r7]
 6399 003a 3B61     	 str r3,[r7,#16]
 6400 003c 27E0     	 b .L275
 6401              	.L280:
2027:../Libraries/XMCLib/src/xmc_vadc.c ****     {
2028:../Libraries/XMCLib/src/xmc_vadc.c ****        rcr = group_ptr->RCR[i];
 6402              	 .loc 2 2028 0
 6403 003e 7B68     	 ldr r3,[r7,#4]
 6404 0040 3A69     	 ldr r2,[r7,#16]
 6405 0042 A032     	 add r2,r2,#160
 6406 0044 9200     	 lsl r2,r2,#2
 6407 0046 D358     	 ldr r3,[r2,r3]
 6408 0048 BB60     	 str r3,[r7,#8]
2029:../Libraries/XMCLib/src/xmc_vadc.c ****        rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 6409              	 .loc 2 2029 0
 6410 004a BA68     	 ldr r2,[r7,#8]
 6411 004c C023     	 mov r3,#192
 6412 004e DB04     	 lsl r3,r3,#19
 6413 0050 1340     	 and r3,r2
 6414 0052 BB60     	 str r3,[r7,#8]
2030:../Libraries/XMCLib/src/xmc_vadc.c **** 
2031:../Libraries/XMCLib/src/xmc_vadc.c ****        if (rcr)
 6415              	 .loc 2 2031 0
 6416 0054 BB68     	 ldr r3,[r7,#8]
 6417 0056 002B     	 cmp r3,#0
 6418 0058 09D0     	 beq .L276
2032:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2033:../Libraries/XMCLib/src/xmc_vadc.c ****          if ((int32_t)0 == i)
 6419              	 .loc 2 2033 0
 6420 005a 3B69     	 ldr r3,[r7,#16]
 6421 005c 002B     	 cmp r3,#0
 6422 005e 0DD1     	 bne .L278
2034:../Libraries/XMCLib/src/xmc_vadc.c ****          {
2035:../Libraries/XMCLib/src/xmc_vadc.c ****           /* No more nodes. Stop here */
2036:../Libraries/XMCLib/src/xmc_vadc.c ****           tail = (uint32_t)0;
 6423              	 .loc 2 2036 0
 6424 0060 0023     	 mov r3,#0
 6425 0062 7B61     	 str r3,[r7,#20]
2037:../Libraries/XMCLib/src/xmc_vadc.c ****           exit_flag = (bool)true;
 6426              	 .loc 2 2037 0
 6427 0064 0F23     	 mov r3,#15
 6428 0066 FB18     	 add r3,r7,r3
 6429 0068 0122     	 mov r2,#1
 6430 006a 1A70     	 strb r2,[r3]
 6431 006c 06E0     	 b .L278
 6432              	.L276:
2038:../Libraries/XMCLib/src/xmc_vadc.c ****          }
2039:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2040:../Libraries/XMCLib/src/xmc_vadc.c ****        else
2041:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2042:../Libraries/XMCLib/src/xmc_vadc.c ****          /* The preceding register forms the tail of the FIFO */
2043:../Libraries/XMCLib/src/xmc_vadc.c ****          tail = (uint32_t)i + (uint32_t)1;
 6433              	 .loc 2 2043 0
 6434 006e 3B69     	 ldr r3,[r7,#16]
 6435 0070 0133     	 add r3,r3,#1
 6436 0072 7B61     	 str r3,[r7,#20]
2044:../Libraries/XMCLib/src/xmc_vadc.c ****          exit_flag = (bool)true;
 6437              	 .loc 2 2044 0
 6438 0074 0F23     	 mov r3,#15
 6439 0076 FB18     	 add r3,r7,r3
 6440 0078 0122     	 mov r2,#1
 6441 007a 1A70     	 strb r2,[r3]
 6442              	.L278:
2045:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2046:../Libraries/XMCLib/src/xmc_vadc.c ****        if (exit_flag)
 6443              	 .loc 2 2046 0
 6444 007c 0F23     	 mov r3,#15
 6445 007e FB18     	 add r3,r7,r3
 6446 0080 1B78     	 ldrb r3,[r3]
 6447 0082 002B     	 cmp r3,#0
 6448 0084 00D0     	 beq .L279
2047:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2048:../Libraries/XMCLib/src/xmc_vadc.c ****          break;
 6449              	 .loc 2 2048 0
 6450 0086 05E0     	 b .L274
 6451              	.L279:
2026:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 6452              	 .loc 2 2026 0 discriminator 2
 6453 0088 3B69     	 ldr r3,[r7,#16]
 6454 008a 013B     	 sub r3,r3,#1
 6455 008c 3B61     	 str r3,[r7,#16]
 6456              	.L275:
2026:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 6457              	 .loc 2 2026 0 is_stmt 0 discriminator 1
 6458 008e 3B69     	 ldr r3,[r7,#16]
 6459 0090 002B     	 cmp r3,#0
 6460 0092 D4DA     	 bge .L280
 6461              	.L274:
2049:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2050:../Libraries/XMCLib/src/xmc_vadc.c ****     }
2051:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2052:../Libraries/XMCLib/src/xmc_vadc.c ****   return tail;
 6462              	 .loc 2 2052 0 is_stmt 1
 6463 0094 7B69     	 ldr r3,[r7,#20]
2053:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6464              	 .loc 2 2053 0
 6465 0096 181C     	 mov r0,r3
 6466 0098 BD46     	 mov sp,r7
 6467 009a 06B0     	 add sp,sp,#24
 6468              	 
 6469 009c 80BD     	 pop {r7,pc}
 6470              	 .cfi_endproc
 6471              	.LFE226:
 6473 009e C046     	 .section .text.XMC_VADC_GROUP_GetResultFifoHead,"ax",%progbits
 6474              	 .align 2
 6475              	 .global XMC_VADC_GROUP_GetResultFifoHead
 6476              	 .code 16
 6477              	 .thumb_func
 6479              	XMC_VADC_GROUP_GetResultFifoHead:
 6480              	.LFB227:
2054:../Libraries/XMCLib/src/xmc_vadc.c **** 
2055:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the head of the fifo which the specified result register is a part of */
2056:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_GetResultFifoHead(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg
2057:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6481              	 .loc 2 2057 0
 6482              	 .cfi_startproc
 6483 0000 80B5     	 push {r7,lr}
 6484              	.LCFI256:
 6485              	 .cfi_def_cfa_offset 8
 6486              	 .cfi_offset 7,-8
 6487              	 .cfi_offset 14,-4
 6488 0002 86B0     	 sub sp,sp,#24
 6489              	.LCFI257:
 6490              	 .cfi_def_cfa_offset 32
 6491 0004 00AF     	 add r7,sp,#0
 6492              	.LCFI258:
 6493              	 .cfi_def_cfa_register 7
 6494 0006 7860     	 str r0,[r7,#4]
 6495 0008 3960     	 str r1,[r7]
2058:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t head;
2059:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr;
2060:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
2061:../Libraries/XMCLib/src/xmc_vadc.c **** 
2062:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoHead:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2063:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoHead:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
2064:../Libraries/XMCLib/src/xmc_vadc.c **** 
2065:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((bool)true == XMC_VADC_GROUP_IsResultRegisterFifoHead(group_ptr, res_reg))
 6496              	 .loc 2 2065 0
 6497 000a 7A68     	 ldr r2,[r7,#4]
 6498 000c 3B68     	 ldr r3,[r7]
 6499 000e 101C     	 mov r0,r2
 6500 0010 191C     	 mov r1,r3
 6501 0012 FFF7FEFF 	 bl XMC_VADC_GROUP_IsResultRegisterFifoHead
 6502 0016 031E     	 sub r3,r0,#0
 6503 0018 02D0     	 beq .L283
2066:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2067:../Libraries/XMCLib/src/xmc_vadc.c ****       head = res_reg;
 6504              	 .loc 2 2067 0
 6505 001a 3B68     	 ldr r3,[r7]
 6506 001c 7B61     	 str r3,[r7,#20]
 6507 001e 1BE0     	 b .L284
 6508              	.L283:
2068:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2069:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2070:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2071:../Libraries/XMCLib/src/xmc_vadc.c ****     head = XMC_VADC_NUM_RESULT_REGISTERS - (uint32_t)1;
 6509              	 .loc 2 2071 0
 6510 0020 0F23     	 mov r3,#15
 6511 0022 7B61     	 str r3,[r7,#20]
2072:../Libraries/XMCLib/src/xmc_vadc.c **** 
2073:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i = res_reg; i < XMC_VADC_NUM_RESULT_REGISTERS ; i++)
 6512              	 .loc 2 2073 0
 6513 0024 3B68     	 ldr r3,[r7]
 6514 0026 3B61     	 str r3,[r7,#16]
 6515 0028 13E0     	 b .L285
 6516              	.L287:
2074:../Libraries/XMCLib/src/xmc_vadc.c ****     {
2075:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr = group_ptr->RCR[i];
 6517              	 .loc 2 2075 0
 6518 002a 7B68     	 ldr r3,[r7,#4]
 6519 002c 3A69     	 ldr r2,[r7,#16]
 6520 002e A032     	 add r2,r2,#160
 6521 0030 9200     	 lsl r2,r2,#2
 6522 0032 D358     	 ldr r3,[r2,r3]
 6523 0034 FB60     	 str r3,[r7,#12]
2076:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 6524              	 .loc 2 2076 0
 6525 0036 FA68     	 ldr r2,[r7,#12]
 6526 0038 C023     	 mov r3,#192
 6527 003a DB04     	 lsl r3,r3,#19
 6528 003c 1340     	 and r3,r2
 6529 003e FB60     	 str r3,[r7,#12]
2077:../Libraries/XMCLib/src/xmc_vadc.c **** 
2078:../Libraries/XMCLib/src/xmc_vadc.c ****       if (!rcr)
 6530              	 .loc 2 2078 0
 6531 0040 FB68     	 ldr r3,[r7,#12]
 6532 0042 002B     	 cmp r3,#0
 6533 0044 02D1     	 bne .L286
2079:../Libraries/XMCLib/src/xmc_vadc.c ****       {
2080:../Libraries/XMCLib/src/xmc_vadc.c ****         /* This node forms the head of the FIFO */
2081:../Libraries/XMCLib/src/xmc_vadc.c ****         head = i ;
 6534              	 .loc 2 2081 0
 6535 0046 3B69     	 ldr r3,[r7,#16]
 6536 0048 7B61     	 str r3,[r7,#20]
2082:../Libraries/XMCLib/src/xmc_vadc.c ****         break;
 6537              	 .loc 2 2082 0
 6538 004a 05E0     	 b .L284
 6539              	.L286:
2073:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 6540              	 .loc 2 2073 0 discriminator 2
 6541 004c 3B69     	 ldr r3,[r7,#16]
 6542 004e 0133     	 add r3,r3,#1
 6543 0050 3B61     	 str r3,[r7,#16]
 6544              	.L285:
2073:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 6545              	 .loc 2 2073 0 is_stmt 0 discriminator 1
 6546 0052 3B69     	 ldr r3,[r7,#16]
 6547 0054 0F2B     	 cmp r3,#15
 6548 0056 E8D9     	 bls .L287
 6549              	.L284:
2083:../Libraries/XMCLib/src/xmc_vadc.c ****       }
2084:../Libraries/XMCLib/src/xmc_vadc.c ****     }
2085:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2086:../Libraries/XMCLib/src/xmc_vadc.c ****   return head;
 6550              	 .loc 2 2086 0 is_stmt 1
 6551 0058 7B69     	 ldr r3,[r7,#20]
2087:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6552              	 .loc 2 2087 0
 6553 005a 181C     	 mov r0,r3
 6554 005c BD46     	 mov sp,r7
 6555 005e 06B0     	 add sp,sp,#24
 6556              	 
 6557 0060 80BD     	 pop {r7,pc}
 6558              	 .cfi_endproc
 6559              	.LFE227:
 6561 0062 C046     	 .section .text.XMC_VADC_GROUP_IsResultRegisterFifoHead,"ax",%progbits
 6562              	 .align 2
 6563              	 .global XMC_VADC_GROUP_IsResultRegisterFifoHead
 6564              	 .code 16
 6565              	 .thumb_func
 6567              	XMC_VADC_GROUP_IsResultRegisterFifoHead:
 6568              	.LFB228:
2088:../Libraries/XMCLib/src/xmc_vadc.c **** 
2089:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine if the specified result register is the head of a result fifo */
2090:../Libraries/XMCLib/src/xmc_vadc.c **** bool XMC_VADC_GROUP_IsResultRegisterFifoHead(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_
2091:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6569              	 .loc 2 2091 0
 6570              	 .cfi_startproc
 6571 0000 80B5     	 push {r7,lr}
 6572              	.LCFI259:
 6573              	 .cfi_def_cfa_offset 8
 6574              	 .cfi_offset 7,-8
 6575              	 .cfi_offset 14,-4
 6576 0002 86B0     	 sub sp,sp,#24
 6577              	.LCFI260:
 6578              	 .cfi_def_cfa_offset 32
 6579 0004 00AF     	 add r7,sp,#0
 6580              	.LCFI261:
 6581              	 .cfi_def_cfa_register 7
 6582 0006 7860     	 str r0,[r7,#4]
 6583 0008 3960     	 str r1,[r7]
2092:../Libraries/XMCLib/src/xmc_vadc.c ****   bool ret_val;
2093:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr_head;
2094:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr_next;
2095:../Libraries/XMCLib/src/xmc_vadc.c **** 
2096:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsResultRegisterFifoHead:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2097:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsResultRegisterFifoHead:Wrong Result Register",
2098:../Libraries/XMCLib/src/xmc_vadc.c ****              ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
2099:../Libraries/XMCLib/src/xmc_vadc.c **** 
2100:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_head = group_ptr->RCR[res_reg];
 6584              	 .loc 2 2100 0
 6585 000a 7B68     	 ldr r3,[r7,#4]
 6586 000c 3A68     	 ldr r2,[r7]
 6587 000e A032     	 add r2,r2,#160
 6588 0010 9200     	 lsl r2,r2,#2
 6589 0012 D358     	 ldr r3,[r2,r3]
 6590 0014 3B61     	 str r3,[r7,#16]
2101:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_head &= (uint32_t)VADC_G_RCR_FEN_Msk;
 6591              	 .loc 2 2101 0
 6592 0016 3A69     	 ldr r2,[r7,#16]
 6593 0018 C023     	 mov r3,#192
 6594 001a DB04     	 lsl r3,r3,#19
 6595 001c 1340     	 and r3,r2
 6596 001e 3B61     	 str r3,[r7,#16]
2102:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next = group_ptr->RCR[res_reg - (uint32_t)1];
 6597              	 .loc 2 2102 0
 6598 0020 3B68     	 ldr r3,[r7]
 6599 0022 5A1E     	 sub r2,r3,#1
 6600 0024 7B68     	 ldr r3,[r7,#4]
 6601 0026 A032     	 add r2,r2,#160
 6602 0028 9200     	 lsl r2,r2,#2
 6603 002a D358     	 ldr r3,[r2,r3]
 6604 002c FB60     	 str r3,[r7,#12]
2103:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next &= (uint32_t)VADC_G_RCR_FEN_Msk;
 6605              	 .loc 2 2103 0
 6606 002e FA68     	 ldr r2,[r7,#12]
 6607 0030 C023     	 mov r3,#192
 6608 0032 DB04     	 lsl r3,r3,#19
 6609 0034 1340     	 and r3,r2
 6610 0036 FB60     	 str r3,[r7,#12]
2104:../Libraries/XMCLib/src/xmc_vadc.c **** 
2105:../Libraries/XMCLib/src/xmc_vadc.c ****   if (rcr_head)
 6611              	 .loc 2 2105 0
 6612 0038 3B69     	 ldr r3,[r7,#16]
 6613 003a 002B     	 cmp r3,#0
 6614 003c 04D0     	 beq .L290
2106:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2107:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)false;
 6615              	 .loc 2 2107 0
 6616 003e 1723     	 mov r3,#23
 6617 0040 FB18     	 add r3,r7,r3
 6618 0042 0022     	 mov r2,#0
 6619 0044 1A70     	 strb r2,[r3]
 6620 0046 0BE0     	 b .L291
 6621              	.L290:
2108:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2109:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (rcr_next)
 6622              	 .loc 2 2109 0
 6623 0048 FB68     	 ldr r3,[r7,#12]
 6624 004a 002B     	 cmp r3,#0
 6625 004c 04D0     	 beq .L292
2110:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2111:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)true;
 6626              	 .loc 2 2111 0
 6627 004e 1723     	 mov r3,#23
 6628 0050 FB18     	 add r3,r7,r3
 6629 0052 0122     	 mov r2,#1
 6630 0054 1A70     	 strb r2,[r3]
 6631 0056 03E0     	 b .L291
 6632              	.L292:
2112:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2113:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2114:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2115:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)false;
 6633              	 .loc 2 2115 0
 6634 0058 1723     	 mov r3,#23
 6635 005a FB18     	 add r3,r7,r3
 6636 005c 0022     	 mov r2,#0
 6637 005e 1A70     	 strb r2,[r3]
 6638              	.L291:
2116:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2117:../Libraries/XMCLib/src/xmc_vadc.c **** 
2118:../Libraries/XMCLib/src/xmc_vadc.c ****   return ret_val;
 6639              	 .loc 2 2118 0
 6640 0060 1723     	 mov r3,#23
 6641 0062 FB18     	 add r3,r7,r3
 6642 0064 1B78     	 ldrb r3,[r3]
2119:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6643              	 .loc 2 2119 0
 6644 0066 181C     	 mov r0,r3
 6645 0068 BD46     	 mov sp,r7
 6646 006a 06B0     	 add sp,sp,#24
 6647              	 
 6648 006c 80BD     	 pop {r7,pc}
 6649              	 .cfi_endproc
 6650              	.LFE228:
 6652 006e C046     	 .text
 6653              	.Letext0:
 6654              	 .file 3 "d:\\software\\dave_4-4-2_64bit_2018-02-23\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 6655              	 .file 4 "d:\\software\\dave_4-4-2_64bit_2018-02-23\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 6656              	 .file 5 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Infineon/XMC1400_series/Include/XMC1400.h"
 6657              	 .file 6 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc/xmc1_scu.h"
 6658              	 .file 7 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Infineon/XMC1400_series/Include/system_XMC1400.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_vadc.c
    {standard input}:18     .text.XMC_VADC_GROUP_ExternalMuxControlInit:00000000 $t
    {standard input}:22     .text.XMC_VADC_GROUP_ExternalMuxControlInit:00000000 XMC_VADC_GROUP_ExternalMuxControlInit
    {standard input}:123    .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot:00000000 $t
    {standard input}:127    .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot:00000000 XMC_VADC_GROUP_ScanEnableArbitrationSlot
    {standard input}:162    .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot:00000000 $t
    {standard input}:166    .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot:00000000 XMC_VADC_GROUP_ScanDisableArbitrationSlot
    {standard input}:199    .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot:00000020 $d
    {standard input}:204    .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:00000000 $t
    {standard input}:208    .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:00000000 XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
    {standard input}:243    .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:00000000 $t
    {standard input}:247    .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:00000000 XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
    {standard input}:280    .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:00000020 $d
    {standard input}:285    .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot:00000000 $t
    {standard input}:289    .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot:00000000 XMC_VADC_GROUP_QueueEnableArbitrationSlot
    {standard input}:324    .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot:00000000 $t
    {standard input}:328    .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot:00000000 XMC_VADC_GROUP_QueueDisableArbitrationSlot
    {standard input}:361    .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot:00000020 $d
    {standard input}:366    .text.XMC_VADC_GROUP_QueueFlushEntries:00000000 $t
    {standard input}:370    .text.XMC_VADC_GROUP_QueueFlushEntries:00000000 XMC_VADC_GROUP_QueueFlushEntries
    {standard input}:419    .rodata.g_xmc_vadc_group_array:00000000 $d
    {standard input}:422    .rodata.g_xmc_vadc_group_array:00000000 g_xmc_vadc_group_array
    {standard input}:426    .text.XMC_VADC_GLOBAL_EnableModule:00000000 $t
    {standard input}:431    .text.XMC_VADC_GLOBAL_EnableModule:00000000 XMC_VADC_GLOBAL_EnableModule
    {standard input}:458    .text.XMC_VADC_GLOBAL_EnableModule:00000014 $d
    {standard input}:463    .text.XMC_VADC_GLOBAL_DisableModule:00000000 $t
    {standard input}:468    .text.XMC_VADC_GLOBAL_DisableModule:00000000 XMC_VADC_GLOBAL_DisableModule
    {standard input}:491    .text.XMC_VADC_GLOBAL_Init:00000000 $t
    {standard input}:496    .text.XMC_VADC_GLOBAL_Init:00000000 XMC_VADC_GLOBAL_Init
    {standard input}:563    .text.XMC_VADC_GLOBAL_InputClassInit:00000000 $t
    {standard input}:568    .text.XMC_VADC_GLOBAL_InputClassInit:00000000 XMC_VADC_GLOBAL_InputClassInit
    {standard input}:624    .text.XMC_VADC_GLOBAL_InputClassInit:00000044 $d
    {standard input}:630    .text.XMC_VADC_GLOBAL_StartupCalibration:00000000 $t
    {standard input}:635    .text.XMC_VADC_GLOBAL_StartupCalibration:00000000 XMC_VADC_GLOBAL_StartupCalibration
    {standard input}:719    .text.XMC_VADC_GLOBAL_StartupCalibration:00000070 $d
    {standard input}:724    .text.XMC_VADC_GLOBAL_SetBoundaries:00000000 $t
    {standard input}:729    .text.XMC_VADC_GLOBAL_SetBoundaries:00000000 XMC_VADC_GLOBAL_SetBoundaries
    {standard input}:775    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000000 $t
    {standard input}:780    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000000 XMC_VADC_GLOBAL_SetIndividualBoundary
    {standard input}:858    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000068 $d
    {standard input}:863    .text.XMC_VADC_GLOBAL_SetCompareValue:00000000 $t
    {standard input}:868    .text.XMC_VADC_GLOBAL_SetCompareValue:00000000 XMC_VADC_GLOBAL_SetCompareValue
    {standard input}:921    .text.XMC_VADC_GLOBAL_GetCompareResult:00000000 $t
    {standard input}:926    .text.XMC_VADC_GLOBAL_GetCompareResult:00000000 XMC_VADC_GLOBAL_GetCompareResult
    {standard input}:983    .text.XMC_VADC_GLOBAL_BindGroupToEMux:00000000 $t
    {standard input}:988    .text.XMC_VADC_GLOBAL_BindGroupToEMux:00000000 XMC_VADC_GLOBAL_BindGroupToEMux
    {standard input}:1062   .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:00000000 $t
    {standard input}:1067   .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:00000000 XMC_VADC_GLOBAL_SetResultEventInterruptNode
    {standard input}:1136   .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:0000005c $d
    {standard input}:1141   .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:1146   .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:00000000 XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
    {standard input}:1215   .text.XMC_VADC_GROUP_Init:00000000 $t
    {standard input}:1220   .text.XMC_VADC_GROUP_Init:00000000 XMC_VADC_GROUP_Init
    {standard input}:1306   .text.XMC_VADC_GROUP_InputClassInit:00000000 XMC_VADC_GROUP_InputClassInit
    {standard input}:1301   .text.XMC_VADC_GROUP_InputClassInit:00000000 $t
    {standard input}:1450   .text.XMC_VADC_GROUP_SetPowerMode:00000000 $t
    {standard input}:1455   .text.XMC_VADC_GROUP_SetPowerMode:00000000 XMC_VADC_GROUP_SetPowerMode
    {standard input}:1504   .text.XMC_VADC_GROUP_SetSyncSlave:00000000 $t
    {standard input}:1509   .text.XMC_VADC_GROUP_SetSyncSlave:00000000 XMC_VADC_GROUP_SetSyncSlave
    {standard input}:1566   .text.XMC_VADC_GROUP_SetSyncMaster:00000000 $t
    {standard input}:1571   .text.XMC_VADC_GROUP_SetSyncMaster:00000000 XMC_VADC_GROUP_SetSyncMaster
    {standard input}:1611   .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000000 $t
    {standard input}:1616   .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000000 XMC_VADC_GROUP_CheckSlaveReadiness
    {standard input}:1693   .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000060 $d
    {standard input}:1698   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000000 $t
    {standard input}:1703   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000000 XMC_VADC_GROUP_IgnoreSlaveReadiness
    {standard input}:1781   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000060 $d
    {standard input}:1786   .text.XMC_VADC_GROUP_SetSyncSlaveReadySignal:00000000 $t
    {standard input}:1791   .text.XMC_VADC_GROUP_SetSyncSlaveReadySignal:00000000 XMC_VADC_GROUP_SetSyncSlaveReadySignal
    {standard input}:1841   .text.XMC_VADC_GROUP_EnableChannelSyncRequest:00000000 $t
    {standard input}:1846   .text.XMC_VADC_GROUP_EnableChannelSyncRequest:00000000 XMC_VADC_GROUP_EnableChannelSyncRequest
    {standard input}:1898   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:00000000 $t
    {standard input}:1903   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:00000000 XMC_VADC_GROUP_DisableChannelSyncRequest
    {standard input}:1953   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:0000003c $d
    {standard input}:1958   .text.XMC_VADC_GROUP_IsConverterBusy:00000000 $t
    {standard input}:1963   .text.XMC_VADC_GROUP_IsConverterBusy:00000000 XMC_VADC_GROUP_IsConverterBusy
    {standard input}:2007   .text.XMC_VADC_GROUP_SetBoundaries:00000000 $t
    {standard input}:2012   .text.XMC_VADC_GROUP_SetBoundaries:00000000 XMC_VADC_GROUP_SetBoundaries
    {standard input}:2069   .text.XMC_VADC_GROUP_SetBoundaries:00000044 $d
    {standard input}:2074   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000000 $t
    {standard input}:2079   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000000 XMC_VADC_GROUP_SetIndividualBoundary
    {standard input}:2157   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000068 $d
    {standard input}:2162   .text.XMC_VADC_GROUP_TriggerServiceRequest:00000000 $t
    {standard input}:2167   .text.XMC_VADC_GROUP_TriggerServiceRequest:00000000 XMC_VADC_GROUP_TriggerServiceRequest
    {standard input}:2232   .text.XMC_VADC_GROUP_SetBoundaryEventInterruptNode:00000000 $t
    {standard input}:2237   .text.XMC_VADC_GROUP_SetBoundaryEventInterruptNode:00000000 XMC_VADC_GROUP_SetBoundaryEventInterruptNode
    {standard input}:2301   .text.XMC_VADC_GLOBAL_SHS_Init:00000000 $t
    {standard input}:2306   .text.XMC_VADC_GLOBAL_SHS_Init:00000000 XMC_VADC_GLOBAL_SHS_Init
    {standard input}:2360   .text.XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:00000000 $t
    {standard input}:2365   .text.XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:00000000 XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode
    {standard input}:2424   .text.XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:00000000 $t
    {standard input}:2429   .text.XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:00000000 XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode
    {standard input}:2490   .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime:00000000 $t
    {standard input}:2495   .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime:00000000 XMC_VADC_GLOBAL_SHS_SetShortSampleTime
    {standard input}:2580   .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime:00000078 $d
    {standard input}:2585   .text.XMC_VADC_GLOBAL_SHS_SetGainFactor:00000000 $t
    {standard input}:2590   .text.XMC_VADC_GLOBAL_SHS_SetGainFactor:00000000 XMC_VADC_GLOBAL_SHS_SetGainFactor
    {standard input}:2710   .text.XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:00000000 $t
    {standard input}:2715   .text.XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:00000000 XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations
    {standard input}:2774   .text.XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:00000000 $t
    {standard input}:2779   .text.XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:00000000 XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations
    {standard input}:2840   .text.XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:00000000 $t
    {standard input}:2845   .text.XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:00000000 XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue
    {standard input}:2920   .text.XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:00000000 $t
    {standard input}:2925   .text.XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:00000000 XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue
    {standard input}:3044   .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:00000000 $t
    {standard input}:3049   .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:00000000 XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop
    {standard input}:3116   .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:0000005c $d
    {standard input}:3121   .text.XMC_VADC_GROUP_ScanInit:00000000 $t
    {standard input}:3126   .text.XMC_VADC_GROUP_ScanInit:00000000 XMC_VADC_GROUP_ScanInit
    {standard input}:3240   .text.XMC_VADC_GROUP_ScanInit:000000ac $d
    {standard input}:3245   .text.XMC_VADC_GROUP_ScanSelectTrigger:00000000 $t
    {standard input}:3250   .text.XMC_VADC_GROUP_ScanSelectTrigger:00000000 XMC_VADC_GROUP_ScanSelectTrigger
    {standard input}:3307   .text.XMC_VADC_GROUP_ScanSelectTrigger:00000048 $d
    {standard input}:3312   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:00000000 $t
    {standard input}:3317   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:00000000 XMC_VADC_GROUP_ScanSelectTriggerEdge
    {standard input}:3374   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:00000048 $d
    {standard input}:3379   .text.XMC_VADC_GROUP_ScanSelectGating:00000000 $t
    {standard input}:3384   .text.XMC_VADC_GROUP_ScanSelectGating:00000000 XMC_VADC_GROUP_ScanSelectGating
    {standard input}:3441   .text.XMC_VADC_GROUP_ScanSelectGating:00000048 $d
    {standard input}:3446   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000000 $t
    {standard input}:3451   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000000 XMC_VADC_GROUP_ScanSequenceAbort
    {standard input}:3550   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000094 $d
    {standard input}:3555   .text.XMC_VADC_GROUP_ScanGetNumChannelsPending:00000000 $t
    {standard input}:3560   .text.XMC_VADC_GROUP_ScanGetNumChannelsPending:00000000 XMC_VADC_GROUP_ScanGetNumChannelsPending
    {standard input}:3633   .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:3638   .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:00000000 XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode
    {standard input}:3690   .text.XMC_VADC_GROUP_ScanRemoveChannel:00000000 $t
    {standard input}:3695   .text.XMC_VADC_GROUP_ScanRemoveChannel:00000000 XMC_VADC_GROUP_ScanRemoveChannel
    {standard input}:3743   .text.XMC_VADC_GLOBAL_BackgroundInit:00000000 $t
    {standard input}:3748   .text.XMC_VADC_GLOBAL_BackgroundInit:00000000 XMC_VADC_GLOBAL_BackgroundInit
    {standard input}:3955   .text.XMC_VADC_GLOBAL_BackgroundInit:00000144 $d
    {standard input}:3962   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:00000000 $t
    {standard input}:3967   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:00000000 XMC_VADC_GLOBAL_BackgroundSelectTrigger
    {standard input}:4021   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:00000040 $d
    {standard input}:4026   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:00000000 $t
    {standard input}:4031   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:00000000 XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge
    {standard input}:4088   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:00000048 $d
    {standard input}:4093   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:00000000 $t
    {standard input}:4098   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:00000000 XMC_VADC_GLOBAL_BackgroundSelectGating
    {standard input}:4152   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:00000040 $d
    {standard input}:4157   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:00000000 $t
    {standard input}:4162   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:00000000 XMC_VADC_GLOBAL_BackgroundAbortSequence
    {standard input}:4286   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:000000b4 $d
    {standard input}:4292   .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:00000000 $t
    {standard input}:4297   .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:00000000 XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending
    {standard input}:4386   .text.XMC_VADC_GROUP_QueueInit:00000000 $t
    {standard input}:4391   .text.XMC_VADC_GROUP_QueueInit:00000000 XMC_VADC_GROUP_QueueInit
    {standard input}:4505   .text.XMC_VADC_GROUP_QueueInit:000000ac $d
    {standard input}:4510   .text.XMC_VADC_GROUP_QueueSelectTrigger:00000000 $t
    {standard input}:4515   .text.XMC_VADC_GROUP_QueueSelectTrigger:00000000 XMC_VADC_GROUP_QueueSelectTrigger
    {standard input}:4572   .text.XMC_VADC_GROUP_QueueSelectTrigger:00000048 $d
    {standard input}:4577   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:00000000 $t
    {standard input}:4582   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:00000000 XMC_VADC_GROUP_QueueSelectTriggerEdge
    {standard input}:4639   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:00000048 $d
    {standard input}:4644   .text.XMC_VADC_GROUP_QueueSelectGating:00000000 $t
    {standard input}:4649   .text.XMC_VADC_GROUP_QueueSelectGating:00000000 XMC_VADC_GROUP_QueueSelectGating
    {standard input}:4706   .text.XMC_VADC_GROUP_QueueSelectGating:00000048 $d
    {standard input}:4711   .text.XMC_VADC_GROUP_QueueGetLength:00000000 $t
    {standard input}:4716   .text.XMC_VADC_GROUP_QueueGetLength:00000000 XMC_VADC_GROUP_QueueGetLength
    {standard input}:4784   .text.XMC_VADC_GROUP_QueueAbortSequence:00000000 $t
    {standard input}:4789   .text.XMC_VADC_GROUP_QueueAbortSequence:00000000 XMC_VADC_GROUP_QueueAbortSequence
    {standard input}:4867   .text.XMC_VADC_GROUP_QueueAbortSequence:00000070 $d
    {standard input}:4872   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000000 $t
    {standard input}:4877   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000000 XMC_VADC_GROUP_QueueRemoveChannel
    {standard input}:4996   .text.XMC_VADC_GROUP_QueueRemoveChannel:000000b4 $d
    {standard input}:5001   .text.XMC_VADC_GROUP_QueueGetNextChannel:00000000 $t
    {standard input}:5006   .text.XMC_VADC_GROUP_QueueGetNextChannel:00000000 XMC_VADC_GROUP_QueueGetNextChannel
    {standard input}:5079   .text.XMC_VADC_GROUP_QueueGetInterruptedChannel:00000000 $t
    {standard input}:5084   .text.XMC_VADC_GROUP_QueueGetInterruptedChannel:00000000 XMC_VADC_GROUP_QueueGetInterruptedChannel
    {standard input}:5137   .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:5142   .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:00000000 XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode
    {standard input}:5193   .text.XMC_VADC_GROUP_ChannelInit:00000000 $t
    {standard input}:5198   .text.XMC_VADC_GROUP_ChannelInit:00000000 XMC_VADC_GROUP_ChannelInit
    {standard input}:5343   .text.XMC_VADC_GROUP_ChannelInit:000000d8 $d
    {standard input}:5348   .text.XMC_VADC_GROUP_SetChannelAlias:00000000 $t
    {standard input}:5353   .text.XMC_VADC_GROUP_SetChannelAlias:00000000 XMC_VADC_GROUP_SetChannelAlias
    {standard input}:5424   .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds:00000000 $t
    {standard input}:5429   .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds:00000000 XMC_VADC_GROUP_ChannelIsResultOutOfBounds
    {standard input}:5510   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000000 $t
    {standard input}:5515   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000000 XMC_VADC_GROUP_ChannelSetInputReference
    {standard input}:5568   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000040 $d
    {standard input}:5573   .text.XMC_VADC_GROUP_ChannelSetResultRegister:00000000 $t
    {standard input}:5578   .text.XMC_VADC_GROUP_ChannelSetResultRegister:00000000 XMC_VADC_GROUP_ChannelSetResultRegister
    {standard input}:5629   .text.XMC_VADC_GROUP_ChannelSetResultRegister:0000003c $d
    {standard input}:5634   .text.XMC_VADC_GROUP_ChannelSetIclass:00000000 $t
    {standard input}:5639   .text.XMC_VADC_GROUP_ChannelSetIclass:00000000 XMC_VADC_GROUP_ChannelSetIclass
    {standard input}:5692   .text.XMC_VADC_GROUP_ChannelGetResultRegister:00000000 $t
    {standard input}:5697   .text.XMC_VADC_GROUP_ChannelGetResultRegister:00000000 XMC_VADC_GROUP_ChannelGetResultRegister
    {standard input}:5741   .text.XMC_VADC_GROUP_ChannelTriggerEvent:00000000 $t
    {standard input}:5746   .text.XMC_VADC_GROUP_ChannelTriggerEvent:00000000 XMC_VADC_GROUP_ChannelTriggerEvent
    {standard input}:5792   .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode:00000000 $t
    {standard input}:5797   .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode:00000000 XMC_VADC_GROUP_ChannelSetEventInterruptNode
    {standard input}:5856   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000000 $t
    {standard input}:5861   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000000 XMC_VADC_GROUP_ChannelTriggerEventGenCriteria
    {standard input}:5914   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000040 $d
    {standard input}:5919   .text.XMC_VADC_GROUP_ChannelSetBoundarySelection:00000000 $t
    {standard input}:5924   .text.XMC_VADC_GROUP_ChannelSetBoundarySelection:00000000 XMC_VADC_GROUP_ChannelSetBoundarySelection
    {standard input}:5994   .text.XMC_VADC_GROUP_AddResultToFifo:00000000 $t
    {standard input}:5999   .text.XMC_VADC_GROUP_AddResultToFifo:00000000 XMC_VADC_GROUP_AddResultToFifo
    {standard input}:6049   .text.XMC_VADC_GROUP_AddResultToFifo:0000003c $d
    {standard input}:6054   .text.XMC_VADC_GROUP_SetResultFastCompareValue:00000000 $t
    {standard input}:6059   .text.XMC_VADC_GROUP_SetResultFastCompareValue:00000000 XMC_VADC_GROUP_SetResultFastCompareValue
    {standard input}:6113   .text.XMC_VADC_GROUP_GetFastCompareResult:00000000 $t
    {standard input}:6118   .text.XMC_VADC_GROUP_GetFastCompareResult:00000000 XMC_VADC_GROUP_GetFastCompareResult
    {standard input}:6177   .text.XMC_VADC_GROUP_SetResultSubtractionValue:00000000 $t
    {standard input}:6182   .text.XMC_VADC_GROUP_SetResultSubtractionValue:00000000 XMC_VADC_GROUP_SetResultSubtractionValue
    {standard input}:6233   .text.XMC_VADC_GROUP_SetResultInterruptNode:00000000 $t
    {standard input}:6238   .text.XMC_VADC_GROUP_SetResultInterruptNode:00000000 XMC_VADC_GROUP_SetResultInterruptNode
    {standard input}:6340   .text.XMC_VADC_GROUP_SetResultInterruptNode:00000094 $d
    {standard input}:6345   .text.XMC_VADC_GROUP_GetResultFifoTail:00000000 $t
    {standard input}:6350   .text.XMC_VADC_GROUP_GetResultFifoTail:00000000 XMC_VADC_GROUP_GetResultFifoTail
    {standard input}:6567   .text.XMC_VADC_GROUP_IsResultRegisterFifoHead:00000000 XMC_VADC_GROUP_IsResultRegisterFifoHead
    {standard input}:6474   .text.XMC_VADC_GROUP_GetResultFifoHead:00000000 $t
    {standard input}:6479   .text.XMC_VADC_GROUP_GetResultFifoHead:00000000 XMC_VADC_GROUP_GetResultFifoHead
    {standard input}:6562   .text.XMC_VADC_GROUP_IsResultRegisterFifoHead:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_CLOCK_UngatePeripheralClock
XMC_SCU_CLOCK_GatePeripheralClock
