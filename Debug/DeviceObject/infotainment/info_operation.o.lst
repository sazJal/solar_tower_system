   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "info_operation.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.__NVIC_EnableIRQ,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	__NVIC_EnableIRQ:
  23              	.LFB23:
  24              	 .file 1 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include/core_cm0.h"
   1:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**************************************************************************//**
   2:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * @file     core_cm0.h
   3:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * @version  V5.0.2
   5:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * @date     19. April 2017
   6:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
   7:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*
   8:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  *
  10:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  *
  12:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * not use this file except in compliance with the License.
  14:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * You may obtain a copy of the License at
  15:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  *
  16:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  *
  18:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * See the License for the specific language governing permissions and
  22:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * limitations under the License.
  23:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
  24:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  25:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #if   defined ( __ICCARM__ )
  26:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #elif defined (__clang__)
  28:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #endif
  30:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  31:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  34:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #include <stdint.h>
  35:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  36:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
  37:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  extern "C" {
  38:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #endif
  39:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  40:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
  41:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  44:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  47:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****      Unions are used for effective representation of core registers.
  49:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  50:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
  53:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  54:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  55:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*******************************************************************************
  56:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  *                 CMSIS definitions
  57:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
  58:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
  59:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup Cortex_M0
  60:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   @{
  61:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
  62:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  63:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #include "cmsis_version.h"
  64:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  
  65:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*  CMSIS CM0 definitions */
  66:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  71:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  73:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     This core does not support an FPU at all
  75:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** */
  76:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define __FPU_USED       0U
  77:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  78:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #if defined ( __CC_ARM )
  79:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  82:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  83:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  87:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  88:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __GNUC__ )
  89:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  92:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  93:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __ICCARM__ )
  94:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __ARMVFP__
  95:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  97:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  98:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 102:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 103:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __TASKING__ )
 104:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __FPU_VFP__
 105:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 107:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 108:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __CSMC__ )
 109:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 112:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 113:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #endif
 114:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 115:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 117:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 118:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
 119:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** }
 120:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #endif
 121:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 122:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 124:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 126:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 129:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
 130:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  extern "C" {
 131:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #endif
 132:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 133:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* check device defines and use defaults */
 134:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef __CM0_REV
 136:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #define __CM0_REV               0x0000U
 137:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 139:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 140:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 144:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 145:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 149:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #endif
 150:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 151:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 153:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 155:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     \li to specify the access to peripheral variables.
 157:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** */
 159:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
 160:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #else
 162:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #endif
 164:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 167:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* following defines should be used for structure members */
 168:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 172:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group Cortex_M0 */
 173:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 174:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 175:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 176:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*******************************************************************************
 177:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  *                 Register Abstraction
 178:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   Core Register contain:
 179:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   - Core Register
 180:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   - Core NVIC Register
 181:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   - Core SCB Register
 182:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   - Core SysTick Register
 183:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
 184:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 185:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** */
 188:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 189:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 190:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 191:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Core Register type definitions.
 193:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   @{
 194:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 195:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 196:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 197:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 199:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 200:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
 201:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   struct
 202:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 203:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** } APSR_Type;
 211:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 212:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* APSR Register Definitions */
 213:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 216:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 219:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 222:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 225:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 226:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 227:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 229:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 230:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
 231:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   struct
 232:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 233:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** } IPSR_Type;
 238:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 239:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* IPSR Register Definitions */
 240:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 243:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 244:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 245:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 247:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 248:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
 249:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   struct
 250:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 251:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** } xPSR_Type;
 262:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 263:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* xPSR Register Definitions */
 264:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 267:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 270:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 273:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 276:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 279:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 282:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 283:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 284:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 286:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 287:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
 288:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   struct
 289:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 290:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** } CONTROL_Type;
 296:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 297:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* CONTROL Register Definitions */
 298:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 301:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 303:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 304:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 305:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 306:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   @{
 309:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 310:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 311:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 312:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 314:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** typedef struct
 315:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
 316:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED0[31U];
 318:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RSERVED1[31U];
 320:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED2[31U];
 322:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED3[31U];
 324:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED4[64U];
 325:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** }  NVIC_Type;
 327:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 328:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 330:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 331:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 332:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_core_register
 333:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   @{
 336:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 337:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 338:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 339:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 341:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** typedef struct
 342:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
 343:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED0;
 346:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED1;
 350:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** } SCB_Type;
 353:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 354:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* SCB CPUID Register Definitions */
 355:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 358:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 361:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 364:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 367:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 370:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 374:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 377:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 380:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 383:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 386:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 389:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 392:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 395:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 398:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 402:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 405:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 408:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 411:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 414:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* SCB System Control Register Definitions */
 415:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 418:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 421:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 424:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 428:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 431:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 435:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 437:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 438:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 439:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_core_register
 440:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   @{
 443:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 444:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 445:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 446:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 448:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** typedef struct
 449:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
 450:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** } SysTick_Type;
 455:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 456:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 460:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 463:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 466:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 469:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Reload Register Definitions */
 470:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 473:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Current Register Definitions */
 474:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 477:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 481:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 484:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 487:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 489:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 490:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 491:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_core_register
 492:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   @{
 496:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 497:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 499:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 500:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 501:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 502:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   @{
 505:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 506:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 507:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 508:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \return           Masked and shifted value.
 512:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** */
 513:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 515:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 516:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \return           Masked and shifted bit field value.
 520:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** */
 521:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 523:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 525:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 526:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 527:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 528:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   @{
 531:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 532:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 533:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* Memory mapping of Core Hardware */
 534:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 539:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 543:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 544:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*@} */
 545:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 546:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 547:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 548:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*******************************************************************************
 549:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  *                Hardware Abstraction Layer
 550:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   Core Function Interface contains:
 551:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   - Core NVIC Functions
 552:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   - Core SysTick Functions
 553:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   - Core Register Access Functions
 554:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
 555:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 556:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** */
 558:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 559:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 560:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 561:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 563:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   @{
 567:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 568:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 569:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 573:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #else
 575:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*#define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping   not available for Cortex-M0 */
 576:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*#define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping   not available for Cortex-M0 */
 577:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 589:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 593:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #else
 595:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 599:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 601:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 602:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 603:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 604:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 605:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 606:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 607:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 608:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 609:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 610:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Enable Interrupt
 611:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 612:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 613:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 614:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 615:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 616:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
  25              	 .loc 1 616 0
  26              	 .cfi_startproc
  27 0000 80B5     	 push {r7,lr}
  28              	.LCFI0:
  29              	 .cfi_def_cfa_offset 8
  30              	 .cfi_offset 7,-8
  31              	 .cfi_offset 14,-4
  32 0002 82B0     	 sub sp,sp,#8
  33              	.LCFI1:
  34              	 .cfi_def_cfa_offset 16
  35 0004 00AF     	 add r7,sp,#0
  36              	.LCFI2:
  37              	 .cfi_def_cfa_register 7
  38 0006 021C     	 mov r2,r0
  39 0008 FB1D     	 add r3,r7,#7
  40 000a 1A70     	 strb r2,[r3]
 617:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
  41              	 .loc 1 617 0
  42 000c FB1D     	 add r3,r7,#7
  43 000e 1B78     	 ldrb r3,[r3]
  44 0010 7F2B     	 cmp r3,#127
  45 0012 09D8     	 bhi .L1
 618:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 619:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  46              	 .loc 1 619 0
  47 0014 064B     	 ldr r3,.L3
  48 0016 FA1D     	 add r2,r7,#7
  49 0018 1278     	 ldrb r2,[r2]
  50 001a 111C     	 mov r1,r2
  51 001c 1F22     	 mov r2,#31
  52 001e 0A40     	 and r2,r1
  53 0020 0121     	 mov r1,#1
  54 0022 9140     	 lsl r1,r1,r2
  55 0024 0A1C     	 mov r2,r1
  56 0026 1A60     	 str r2,[r3]
  57              	.L1:
 620:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   }
 621:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** }
  58              	 .loc 1 621 0
  59 0028 BD46     	 mov sp,r7
  60 002a 02B0     	 add sp,sp,#8
  61              	 
  62 002c 80BD     	 pop {r7,pc}
  63              	.L4:
  64 002e C046     	 .align 2
  65              	.L3:
  66 0030 00E100E0 	 .word -536813312
  67              	 .cfi_endproc
  68              	.LFE23:
  70              	 .section .text.__NVIC_SetPriority,"ax",%progbits
  71              	 .align 2
  72              	 .code 16
  73              	 .thumb_func
  75              	__NVIC_SetPriority:
  76              	.LFB29:
 622:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 623:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 624:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 625:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Get Interrupt Enable status
 626:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 627:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 628:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \return             0  Interrupt is not enabled.
 629:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \return             1  Interrupt is enabled.
 630:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 631:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 632:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 633:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
 634:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 635:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 636:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1
 637:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   }
 638:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   else
 639:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 640:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     return(0U);
 641:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   }
 642:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** }
 643:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 644:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 645:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 646:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Disable Interrupt
 647:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 648:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 649:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 650:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 651:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 652:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
 653:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 654:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 655:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 656:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     __DSB();
 657:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     __ISB();
 658:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   }
 659:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** }
 660:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 661:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 662:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 663:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Get Pending Interrupt
 664:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 665:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 666:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \return             0  Interrupt status is not pending.
 667:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \return             1  Interrupt status is pending.
 668:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 669:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 670:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 671:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
 672:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 673:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 674:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1
 675:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   }
 676:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   else
 677:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 678:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     return(0U);
 679:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   }
 680:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** }
 681:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 682:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 683:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 684:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Set Pending Interrupt
 685:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 686:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 687:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 688:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 689:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 690:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
 691:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 692:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 693:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 694:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   }
 695:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** }
 696:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 697:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 698:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 699:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Clear Pending Interrupt
 700:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 701:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 702:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 703:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 704:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 705:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
 706:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 707:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 708:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 709:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   }
 710:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** }
 711:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 712:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 713:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 714:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Set Interrupt Priority
 715:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 716:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 717:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****            or negative to specify a processor exception.
 718:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 719:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]  priority  Priority to set.
 720:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 721:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 722:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 723:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
  77              	 .loc 1 723 0
  78              	 .cfi_startproc
  79 0000 B0B5     	 push {r4,r5,r7,lr}
  80              	.LCFI3:
  81              	 .cfi_def_cfa_offset 16
  82              	 .cfi_offset 4,-16
  83              	 .cfi_offset 5,-12
  84              	 .cfi_offset 7,-8
  85              	 .cfi_offset 14,-4
  86 0002 82B0     	 sub sp,sp,#8
  87              	.LCFI4:
  88              	 .cfi_def_cfa_offset 24
  89 0004 00AF     	 add r7,sp,#0
  90              	.LCFI5:
  91              	 .cfi_def_cfa_register 7
  92 0006 021C     	 mov r2,r0
  93 0008 3960     	 str r1,[r7]
  94 000a FB1D     	 add r3,r7,#7
  95 000c 1A70     	 strb r2,[r3]
 724:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
  96              	 .loc 1 724 0
  97 000e FB1D     	 add r3,r7,#7
  98 0010 1B78     	 ldrb r3,[r3]
  99 0012 7F2B     	 cmp r3,#127
 100 0014 27D8     	 bhi .L6
 725:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 726:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 101              	 .loc 1 726 0
 102 0016 2D4C     	 ldr r4,.L8
 103 0018 FB1D     	 add r3,r7,#7
 104 001a 1B78     	 ldrb r3,[r3]
 105 001c 5BB2     	 sxtb r3,r3
 106 001e 9B08     	 lsr r3,r3,#2
 107 0020 2A49     	 ldr r1,.L8
 108 0022 FA1D     	 add r2,r7,#7
 109 0024 1278     	 ldrb r2,[r2]
 110 0026 52B2     	 sxtb r2,r2
 111 0028 9208     	 lsr r2,r2,#2
 112 002a C032     	 add r2,r2,#192
 113 002c 9200     	 lsl r2,r2,#2
 114 002e 5258     	 ldr r2,[r2,r1]
 115 0030 F91D     	 add r1,r7,#7
 116 0032 0978     	 ldrb r1,[r1]
 117 0034 081C     	 mov r0,r1
 118 0036 0321     	 mov r1,#3
 119 0038 0140     	 and r1,r0
 120 003a C900     	 lsl r1,r1,#3
 121 003c 081C     	 mov r0,r1
 122 003e FF21     	 mov r1,#255
 123 0040 8140     	 lsl r1,r1,r0
 124 0042 C943     	 mvn r1,r1
 125 0044 1140     	 and r1,r2
 727:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 126              	 .loc 1 727 0
 127 0046 3A68     	 ldr r2,[r7]
 128 0048 9201     	 lsl r2,r2,#6
 129 004a FF20     	 mov r0,#255
 130 004c 0240     	 and r2,r0
 131 004e F81D     	 add r0,r7,#7
 132 0050 0078     	 ldrb r0,[r0]
 133 0052 051C     	 mov r5,r0
 134 0054 0320     	 mov r0,#3
 135 0056 2840     	 and r0,r5
 136 0058 C000     	 lsl r0,r0,#3
 137 005a 8240     	 lsl r2,r2,r0
 726:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 138              	 .loc 1 726 0
 139 005c 0A43     	 orr r2,r1
 140 005e C033     	 add r3,r3,#192
 141 0060 9B00     	 lsl r3,r3,#2
 142 0062 1A51     	 str r2,[r3,r4]
 143 0064 2EE0     	 b .L5
 144              	.L6:
 728:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   }
 729:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   else
 730:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 731:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 145              	 .loc 1 731 0
 146 0066 1A4C     	 ldr r4,.L8+4
 147 0068 FB1D     	 add r3,r7,#7
 148 006a 1B78     	 ldrb r3,[r3]
 149 006c 1A1C     	 mov r2,r3
 150 006e 0F23     	 mov r3,#15
 151 0070 1340     	 and r3,r2
 152 0072 083B     	 sub r3,r3,#8
 153 0074 9908     	 lsr r1,r3,#2
 154 0076 164A     	 ldr r2,.L8+4
 155 0078 FB1D     	 add r3,r7,#7
 156 007a 1B78     	 ldrb r3,[r3]
 157 007c 181C     	 mov r0,r3
 158 007e 0F23     	 mov r3,#15
 159 0080 0340     	 and r3,r0
 160 0082 083B     	 sub r3,r3,#8
 161 0084 9B08     	 lsr r3,r3,#2
 162 0086 0633     	 add r3,r3,#6
 163 0088 9B00     	 lsl r3,r3,#2
 164 008a D318     	 add r3,r2,r3
 165 008c 5B68     	 ldr r3,[r3,#4]
 166 008e FA1D     	 add r2,r7,#7
 167 0090 1278     	 ldrb r2,[r2]
 168 0092 101C     	 mov r0,r2
 169 0094 0322     	 mov r2,#3
 170 0096 0240     	 and r2,r0
 171 0098 D200     	 lsl r2,r2,#3
 172 009a 101C     	 mov r0,r2
 173 009c FF22     	 mov r2,#255
 174 009e 8240     	 lsl r2,r2,r0
 175 00a0 D243     	 mvn r2,r2
 176 00a2 1A40     	 and r2,r3
 732:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 177              	 .loc 1 732 0
 178 00a4 3B68     	 ldr r3,[r7]
 179 00a6 9B01     	 lsl r3,r3,#6
 180 00a8 FF20     	 mov r0,#255
 181 00aa 0340     	 and r3,r0
 182 00ac F81D     	 add r0,r7,#7
 183 00ae 0078     	 ldrb r0,[r0]
 184 00b0 051C     	 mov r5,r0
 185 00b2 0320     	 mov r0,#3
 186 00b4 2840     	 and r0,r5
 187 00b6 C000     	 lsl r0,r0,#3
 188 00b8 8340     	 lsl r3,r3,r0
 731:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 189              	 .loc 1 731 0
 190 00ba 1A43     	 orr r2,r3
 191 00bc 8B1D     	 add r3,r1,#6
 192 00be 9B00     	 lsl r3,r3,#2
 193 00c0 E318     	 add r3,r4,r3
 194 00c2 5A60     	 str r2,[r3,#4]
 195              	.L5:
 733:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   }
 734:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** }
 196              	 .loc 1 734 0
 197 00c4 BD46     	 mov sp,r7
 198 00c6 02B0     	 add sp,sp,#8
 199              	 
 200 00c8 B0BD     	 pop {r4,r5,r7,pc}
 201              	.L9:
 202 00ca C046     	 .align 2
 203              	.L8:
 204 00cc 00E100E0 	 .word -536813312
 205 00d0 00ED00E0 	 .word -536810240
 206              	 .cfi_endproc
 207              	.LFE29:
 209              	 .section .text.XMC_USIC_CH_SetInputSource,"ax",%progbits
 210              	 .align 2
 211              	 .code 16
 212              	 .thumb_func
 214              	XMC_USIC_CH_SetInputSource:
 215              	.LFB91:
 216              	 .file 2 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc/xmc_usic.h"
   1:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
   2:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @file xmc_usic.h
   3:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @date 2017-09-08
   4:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
   5:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @cond
   6:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  **************************************************************************************************
   7:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
   9:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * All rights reserved.                        
  11:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *                                             
  12:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * following conditions are met:   
  14:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *                                                                              
  15:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * disclaimer.                        
  17:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
  18:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
  21:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *                                                                              
  24:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *                                                                              
  32:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  **************************************************************************************************
  35:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  36:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Change History
  37:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * --------------
  38:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  39:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-02-20:
  40:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Initial draft<br>
  41:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Documentation improved <br>
  42:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  43:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-05-08:
  44:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetInputTriggerCombinationMode() and XMC_USIC_CH_SetTransmitBufferStatus
  45:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *      
  46:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-06-20:
  47:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  48:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
  49:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-17:
  50:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Bug fixed in XMC_USIC_CH_SetTransmitBufferStatus API. OR operator removed.
  51:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  52:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-24:
  53:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_USIC_CH_DisableDelayCompensation(
  54:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *       XMC_USIC_CH_DisableDelayCompensation()
  55:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  56:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-25:
  57:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for defining if the data shift unit input is derived
  58:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *       from the input data path DXn or from the selected protocol pre-processors: XMC_USIC_CH_Con
  59:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *       and XMC_USIC_CH_ConnectInputDataShiftToDataInput()
  60:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  61:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-27:
  62:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Fixed bug in XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T value.
  63:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for direct TBUF access: XMC_USIC_CH_WriteToTBUF() and XMC_USIC_CH_WriteToTBUFTC
  64:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for external input for BRG configuration:XMC_USIC_CH_ConfigExternalInputSignalT
  65:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  66:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-28:
  67:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added API for enabling the transfer trigger unit to set bit TCSR.TE if the trigger signal 
  68:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *       Clear to Send (CTS) signal: XMC_USIC_CH_EnableTBUFDataValidTrigger() and XMC_USIC_CH_Disab
  69:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  70:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-03-09:
  71:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Optimization of write only registers
  72:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  73:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-04-10:
  74:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added an API to put the data into FIFO when hardware port control is enabled: XMC_USIC_CH_
  75:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  76:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2017-02-10:
  77:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetShiftDirection() to allow selection of shift direction of the data wo
  78:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_GetCaptureTimerValue() and XMC_USIC_CH_SetFractionalDivider()
  79:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  80:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2017-09-08:
  81:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Fixed value of macro XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST used in XMC_USIC_CH_SetShiftDir
  82:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  83:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @endcond
  84:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
  85:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
  86:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
  87:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #ifndef XMC_USIC_H
  88:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC_H
  89:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
  90:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * HEADER FILES
  91:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
  92:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
  93:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #include "xmc_common.h"
  94:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
  95:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
  96:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup XMClib XMC Peripheral Library
  97:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
  98:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
  99:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 100:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 101:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup USIC
 102:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @brief Universal Serial Interface Channel(USIC) driver for serial communication.
 103:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 104:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * The Universal Serial Interface Channel(USIC) module is a flexible interface module
 105:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * covering several serial communication protocols. A USIC module contains two
 106:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * independent communication channels named USICx_CH0 and USICx_CH1, with x
 107:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * being the number of the USIC module. The user can program, during run-time, which protocol will 
 108:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * by each communication channel and which pins are used.
 109:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * The driver provides APIs, configuration structures and enumerations to configure common features
 110:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * communication protocols.
 111:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
 112:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC driver features:
 113:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of FIFO for transmit and receive functions.
 114:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides a structure type XMC_USIC_CH_t to represent the USIC channel registers in a programm
 115:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  friendly format.
 116:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of automatic update for frame length, word length, slave select or slave
 117:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows transmission of data to FIFO using XMC_USIC_CH_TXFIFO_PutData() and XMC_USIC_CH_TXFIFO
 118:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows reading of received data in FIFO using XMC_USIC_CH_RXFIFO_GetData()
 119:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of baudrate using XMC_USIC_CH_SetBaudrate()
 120:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides API to trigger interrupts using XMC_USIC_CH_TriggerServiceRequest()
 121:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
 122:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 123:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 124:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 125:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * MACROS
 126:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 127:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 128:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0 ((XMC_USIC_t *)USIC0_BASE)			/**< USIC0 module base address */
 129:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH0 ((XMC_USIC_CH_t *)USIC0_CH0_BASE)	/**< USIC0 channel 0 base address */
 130:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH1 ((XMC_USIC_CH_t *)USIC0_CH1_BASE)	/**< USIC0 channel 1 base address */
 131:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 132:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC1)
 133:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1 ((XMC_USIC_t *)USIC1_BASE)			/**< USIC1 module base address */
 134:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH0 ((XMC_USIC_CH_t *)USIC1_CH0_BASE)	/**< USIC1 channel 0 base address */
 135:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH1 ((XMC_USIC_CH_t *)USIC1_CH1_BASE)	/**< USIC1 channel 1 base address */
 136:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 137:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 138:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC2)
 139:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2 ((XMC_USIC_t *)USIC2_BASE)			/**< USIC2 module base address */
 140:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH0 ((XMC_USIC_CH_t *)USIC2_CH0_BASE)	/**< USIC2 channel 0 base address */
 141:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH1 ((XMC_USIC_CH_t *)USIC2_CH1_BASE)	/**< USIC2 channel 1 base address */
 142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 143:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 144:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Msk  USIC_CH_DX0CR_DSEL_Msk   /**< Common mask for DSEL bitfield mask in 
 145:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Pos  USIC_CH_DX0CR_DSEL_Pos   /**< Common mask for DSEL bitfield position
 146:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Pos USIC_CH_DX0CR_SFSEL_Pos  /**< Common mask for SFSEL bitfield positio
 147:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Msk USIC_CH_DX0CR_SFSEL_Msk  /**< Common mask for SFSEL bitfield mask in
 148:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DPOL_Msk  USIC_CH_DX0CR_DPOL_Msk   /**< Common mask for DPOL bitfield mask in 
 149:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DFEN_Msk  USIC_CH_DX0CR_DFEN_Msk   /**< Common mask for DFEN bitfield mask in 
 150:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEN_Msk  USIC_CH_DX0CR_DSEN_Msk   /**< Common mask for DSEN bitfield mask in 
 151:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Pos    USIC_CH_DX0CR_CM_Pos     /**< Common mask for CM bitfield position i
 152:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Msk    USIC_CH_DX0CR_CM_Msk     /**< Common mask for CM bitfield mask in DX
 153:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_Msk  USIC_CH_DX0CR_INSW_Msk   /**< Common mask for INSW bitfield mask in 
 154:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_pos  USIC_CH_DX0CR_INSW_Pos   /**< Common mask for INSW bitfield position
 155:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 156:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC1
 157:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  #include "xmc1_usic_map.h"
 158:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 159:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 160:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC4
 161:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  #include "xmc4_usic_map.h"
 162:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 163:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 164:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 165:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * ENUMS
 166:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 167:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 168:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 169:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel driver status
 170:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 171:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_STATUS
 172:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 173:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_OK,    /**< USIC driver status : OK */
 174:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_ERROR, /**< USIC driver status : ERROR */
 175:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_BUSY   /**< USIC driver status : BUSY */
 176:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_STATUS_t;
 177:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 178:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 179:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel kernel mode
 180:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** */
 181:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_KERNEL_MODE
 182:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 183:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_0  = 0x0UL,  /**< Run mode 0 (transmission and reception possible)*/
 184:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_1  = 0x1UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Run mode 1 (transmissio
 185:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_0 = 0x2UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Stop mode 0 (no transmi
 186:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_1 = 0x3UL << USIC_CH_KSCFG_NOMCFG_Pos   /**< Stop mode 1 (both trans
 187:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_KERNEL_MODE_t;
 188:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 189:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 190:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel operating mode
 191:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 192:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_OPERATING_MODE
 193:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 194:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_IDLE = 0x0UL, /**< USIC channel idle */
 195:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_SPI  = 0x1UL << USIC_CH_CCR_MODE_Pos, /**< SPI mode */
 196:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_UART = 0x2UL << USIC_CH_CCR_MODE_Pos, /**< UART mode */
 197:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2S  = 0x3UL << USIC_CH_CCR_MODE_Pos, /**< I2S mode */
 198:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2C  = 0x4UL << USIC_CH_CCR_MODE_Pos  /**< I2C mode */
 199:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_OPERATING_MODE_t;
 200:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 201:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 202:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel inputs
 203:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 204:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT
 205:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 206:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX0, /**< DX0 input */
 207:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX1, /**< DX1 input */
 208:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX2, /**< DX2 input */
 209:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX3, /**< DX3 input */
 210:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX4, /**< DX4 input */
 211:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX5  /**< DX5 input */
 212:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_t;
 213:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 214:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 215:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input source sampling frequency
 216:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 217:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_SAMPLING_FREQ
 218:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 219:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH            = 0x0UL, /**< Use fperiph frequency for input 
 220:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = 0x1UL << USIC_CH_DXCR_SFSEL_Pos  /**< Use fF
 221:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_SAMPLING_FREQ_t;
 222:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 223:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 224:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input combination mode
 225:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 226:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_COMBINATION_MODE
 227:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 228:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_TRIGGER_DISABLED = 0x0UL, /**< The trigger activation is disab
 229:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_RISING_EDGE      = 0x1UL, /**< A rising edge activates DXnT*/
 230:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_FALLING_EDGE     = 0x2UL, /**< A falling edge activates DXnT*/
 231:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_BOTH_EDGES       = 0x3UL, /**< Both edges activate DXnT*/
 232:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_COMBINATION_MODE_t;
 233:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 234:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 235:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel data transmission start modes.
 236:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Data shifted out of the transmit pin depends on the value configured for the
 237:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * TDEN bitfield of the TCSR register. Following enum values are used for configuring
 238:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * the TCSR->TDEN bitfield.
 239:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 240:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_START_TRANSMISION_MODE
 241:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 242:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_DISABLED      = 0x0U, /**< Passive data level is sent out on transm
 243:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV        = 0x1UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 244:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_0 = 0x2UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 245:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1 = 0x3UL << USIC_CH_TCSR_TDEN_Pos  /**< Transmission o
 246:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_START_TRANSMISION_MODE_t;
 247:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 248:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 249:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel interrupt node pointers
 250:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 251:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INTERRUPT_NODE_POINTER
 252:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 253:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = USIC_CH_INPR_TSINP_Pos, /**< Node pointe
 254:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = USIC_CH_INPR_TBINP_Pos, /**< Node pointe
 255:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE             = USIC_CH_INPR_RINP_Pos,  /**< Node pointe
 256:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = USIC_CH_INPR_AINP_Pos,  /**< Node pointe
 257:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = USIC_CH_INPR_PINP_Pos   /**< Node pointe
 258:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INTERRUPT_NODE_POINTER_t;
 259:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 260:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 261:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel events
 262:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 263:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_EVENT
 264:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 265:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 266:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 267:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 268:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 269:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 270:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 271:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk /**< Baudrate generator event */
 272:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_EVENT_t;
 273:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 274:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 275:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel parity mode
 276:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** */
 277:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_PARITY_MODE
 278:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 279:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_NONE     = 0x0UL,  /**< Disable parity mode */
 280:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_EVEN     = 0x2UL << USIC_CH_CCR_PM_Pos,  /**< Enable even parity mode */
 281:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_ODD      = 0x3UL << USIC_CH_CCR_PM_Pos   /**< Enable odd parity mode */
 282:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PARITY_MODE_t;
 283:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 284:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 285:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data output mode
 286:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** */
 287:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_DATA_OUTPUT_MODE
 288:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 289:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL   = 0x0UL,  /**< Data output normal mode */
 290:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTED = 0x1UL << USIC_CH_SCTR_DOCFG_Pos   /**< Data output invert
 291:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_DATA_OUTPUT_MODE_t;
 292:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 293:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 294:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status
 295:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** */
 296:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS
 297:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 298:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_IDLE = 0x0UL,                 /**< Transfer buffer is currently idle*/
 299:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_BUSY = USIC_CH_TCSR_TDV_Msk   /**< Transfer buffer is currently busy*/
 300:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_t;
 301:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 302:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 303:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 304:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 305:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status modification
 306:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** */
 307:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS_SET
 308:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 309:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_BUSY   = 0x1UL, /**< Set Transfer buffer status to busy*/
 310:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_IDLE   = 0x2UL  /**< Set Transfer buffer status to idle*/
 311:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_SET_t;
 312:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 313:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 314:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive buffer status
 315:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** */
 316:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RBUF_STATUS
 317:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 318:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 = USIC_CH_RBUFSR_RDV0_Msk, /**< RBUF0 data has not yet been r
 319:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID1 = USIC_CH_RBUFSR_RDV1_Msk  /**< RBUF1 data has not yet been r
 320:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RBUF_STATUS_t;
 321:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 322:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 323:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel output signal passive data level
 324:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** */
 325:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USCI_CH_PASSIVE_DATA_LEVEL
 326:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 327:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL0 = 0x0UL, /**< Passive level(idle mode signal level) 0 */
 328:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL1 = 0x1UL << USIC_CH_SCTR_PDL_Pos  /**< Passive level(idle mode sig
 329:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PASSIVE_DATA_LEVEL_t;
 330:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 331:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 332:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO size
 333:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** */
 334:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_FIFO_SIZE
 335:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 336:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_DISABLED     = 0x0U,  /**< FIFO Disabled */
 337:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_2WORDS  = 0x1U,  /**< FIFO size: 2 words */
 338:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_4WORDS  = 0x2U,  /**< FIFO size: 4 words */
 339:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_8WORDS  = 0x3U,  /**< FIFO size: 8 words */
 340:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_16WORDS = 0x4U,  /**< FIFO size: 16 words */
 341:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_32WORDS = 0x5U,  /**< FIFO size: 32 words */
 342:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_64WORDS = 0x6U   /**< FIFO size: 64 words */
 343:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_FIFO_SIZE_t;
 344:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 345:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 346:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO interrupt node pointers
 347:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** */
 348:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER
 349:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 350:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_TBCTR_STBINP_Pos,  /**< Node pointe
 351:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_TBCTR_ATBINP_Pos   /**< Node pointe
 352:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t;
 353:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 354:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 355:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO event configuration
 356:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** */
 357:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT_CONF
 358:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 359:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD  = USIC_CH_TBCTR_STBIEN_Msk,   /**< Enable FIFO standard t
 360:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_TBCTR_TBERIEN_Msk  /**< Enable transmi
 361:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_CONF_t;
 362:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 363:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 364:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO status
 365:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** */
 366:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT
 367:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 368:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_STANDARD = USIC_CH_TRBSR_STBI_Msk,    /**< Transmit FIFO status: Standar
 369:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_ERROR    = USIC_CH_TRBSR_TBERI_Msk    /**< Transmit FIFO status: Error e
 370:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_t;
 371:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 372:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 373:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO interrupt node pointers
 374:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** */
 375:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER
 376:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 377:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_RBCTR_SRBINP_Pos, /**< Node pointer
 378:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_RBCTR_ARBINP_Pos  /**< Node pointer
 379:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t;
 380:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 381:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 382:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO event configuration
 383:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** */
 384:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT_CONF
 385:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 386:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD  = USIC_CH_RBCTR_SRBIEN_Msk,   /**< Enable FIFO standard r
 387:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_RBCTR_RBERIEN_Msk,  /**< Enable receiv
 388:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE = USIC_CH_RBCTR_ARBIEN_Msk   /**< Enable FIFO alternative
 389:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_CONF_t;
 390:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 391:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 392:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO status
 393:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** */
 394:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT
 395:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 396:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_STANDARD  = USIC_CH_TRBSR_SRBI_Msk,   /**< Receive FIFO status: Standard
 397:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ERROR     = USIC_CH_TRBSR_RBERI_Msk,  /**< Receive FIFO status: Error ev
 398:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE = USIC_CH_TRBSR_ARBI_Msk    /**< Receive FIFO status: Alternat
 399:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_t;
 400:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 401:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 402:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator clock source
 403:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** */
 404:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_SOURCE
 405:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 406:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DIVIDER = 0x0UL, /**< Baudrate generator clock source : Source divid
 407:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T    = 0x2UL << USIC_CH_BRG_CLKSEL_Pos  /**< Baudrate generator c
 408:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_SOURCE_t;
 409:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 410:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 411:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator divider mode
 412:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** */
 413:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE
 414:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 415:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_DISABLED   = 0x0UL, /**< Baudrate generator clock divider: Dis
 416:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL     = 0x1UL << USIC_CH_FDR_DM_Pos, /**< Baudrate genera
 417:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL = 0x2UL << USIC_CH_FDR_DM_Pos  /**< Baudrate genera
 418:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t;
 419:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 420:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 421:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator master clock passive level
 422:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** */
 423:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL
 424:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 425:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0 = 0x0UL, /**< Baudrate generator master clock passiv
 426:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_1 = 0x1UL << USIC_CH_BRG_MCLKCFG_Pos  /**< Baudrate ge
 427:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_t;
 428:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 429:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 430:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock passive level
 431:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** */
 432:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 433:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 434:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = 0x0UL, /**< Shift clock passive leve
 435:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = 0x1UL << USIC_CH_BRG_SCLKCFG_Pos, /*
 436:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = (int32_t)(0x2UL << USIC_CH_BRG_SCLKC
 437:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = (int32_t)(0x3UL << USIC_CH_BRG_SCLKC
 438:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 439:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 440:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 441:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock output
 442:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** */
 443:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
 444:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 445:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = 0x0UL, /**< Baudrate generator shift clock output: SCL.
 446:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1 = 0x1UL << USIC_CH_BRG_SCLKOSEL_Pos   /**< Baudrate genera
 447:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 448:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 449:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 450:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel shift direction.
 451:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** * Defines the shift direction of the data words for transmission and reception
 452:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** */
 453:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_SHIFT_DIRECTION
 454:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 455:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_LSB_FIRST = 0x0UL, /**< Shift LSB first. The first data bit of a data
 456:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST = 0x1UL << USIC_CH_SCTR_SDIR_Pos /**< Shift MSB first. The 
 457:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_SHIFT_DIRECTION_t;
 458:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 459:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 460:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 461:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * DATA STRUCTURES
 462:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 463:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 464:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard start*/
 465:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 466:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma push
 467:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma anon_unions
 468:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 469:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma warning 586
 470:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 471:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 472:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 473:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC module structure
 474:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 475:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef USIC_GLOBAL_TypeDef XMC_USIC_t;
 476:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 477:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 478:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel structure.<br> The members of the structure are same as in the device header file, 
 479:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * except for some registers.
 480:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * DX0CR, DX1CR, DX2CR, DX3CR, DX4CR and DX5CR are replaced with the array DXCR[6].
 481:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * TBUF0 to TBUF31 are replaced with TBUF[32].
 482:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * IN0 to IN31 are replaced with IN[32].
 483:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 484:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** typedef struct XMC_USIC_CH
 485:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 486:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED0;
 487:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  CCFG;			/**< Channel configuration register*/
 488:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED1;
 489:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  KSCFG;			/**< Kernel state configuration register*/
 490:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  FDR;			/**< Fractional divider configuration register*/
 491:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BRG;			/**< Baud rate generator register*/
 492:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  INPR;			/**< Interrupt node pointer register*/
 493:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  DXCR[6];		/**< Input control registers DX0 to DX5.*/
 494:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  SCTR;			/**< Shift control register*/
 495:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TCSR;
 496:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 497:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   union {
 498:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IICMode;	/**< I2C protocol configuration register*/
 499:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IISMode; /**< I2S protocol configuration register*/
 500:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_SSCMode;	/**< SPI protocol configuration register*/
 501:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR;			/**< Protocol configuration register*/
 502:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_ASCMode;	/**< UART protocol configuration register*/
 503:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   };
 504:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CCR;			/**< Channel control register*/
 505:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CMTR;			/**< Capture mode timer register*/
 506:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 507:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   union {
 508:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IICMode;	/**< I2C protocol status register*/
 509:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IISMode;	/**< I2S protocol status register*/
 510:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_SSCMode;	/**< SPI protocol status register*/
 511:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR;			/**< Protocol status register*/
 512:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_ASCMode;	/**< UART protocol status register*/
 513:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   };
 514:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  PSCR;			/**< Protocol status clear register*/
 515:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFSR;		/**< Receive buffer status register*/
 516:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF;			/**< Receive buffer register*/
 517:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFD;			/**< Debug mode receive buffer register*/
 518:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF0;			/**< Receive buffer 0*/
 519:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF1;			/**< Receive buffer 1*/
 520:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF01SR;		/**< Receive buffer status register*/
 521:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  FMR;			/**< Flag modification register*/
 522:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED2[5];
 523:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBUF[32];		/**< Tranmsit buffer registers*/
 524:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYP;			/**< FIFO bypass register*/
 525:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYPCR;			/**< FIFO bypass control register*/
 526:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBCTR;			/**< Transmit FIFO control register*/
 527:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  RBCTR;			/**< Receive FIFO control register*/
 528:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  TRBPTR;		/**< Transmit/recive buffer pointer register*/
 529:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TRBSR;			/**< Transmit/receive buffer status register*/
 530:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  TRBSCR;		/**< Transmit/receive buffer status clear register*/
 531:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTR;			/**< Receive FIFO output register*/
 532:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTDR;			/**< Receive FIFO debug output register*/
 533:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED3[23];
 534:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  IN[32];		/**< Transmit FIFO input register*/
 535:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_t;
 536:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 537:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 538:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard end*/
 539:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 540:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma pop
 541:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 542:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma warning restore
 543:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 544:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 545:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 546:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * API PROTOTYPES
 547:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  ******************************************************************************/
 548:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 549:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #ifdef __cplusplus
 550:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** extern "C" {
 551:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 552:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 553:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsModuleValid(const XMC_USIC_t *const module)
 554:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 555:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 556:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 557:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = (module == XMC_USIC0);
 558:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 559:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC1);
 560:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 561:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 562:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC2);
 563:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 564:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 565:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 566:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
 567:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 568:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsChannelValid(const XMC_USIC_CH_t *const channel)
 569:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 570:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 571:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 572:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1));
 573:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 574:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1));
 575:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 576:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 577:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1));
 578:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 579:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 580:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 581:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
 582:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 583:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /* Common APIs */
 584:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 585:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 586:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 587:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 588:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 589:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
 590:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 591:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC module.\n\n
 592:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the clock for the USIC module by following the
 593:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * clock enabling sequence for the selected device.
 594:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 595:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 596:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 597:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 598:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Enable(XMC_USIC_t *const usic);
 599:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 600:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 601:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 602:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 603:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 604:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 605:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC module.\n\n
 606:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the clock for the USIC module by following the clock
 607:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * disabling sequence for the selected device.
 608:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 609:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 610:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 611:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 612:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Disable(XMC_USIC_t *const usic);
 613:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 614:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 615:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 616:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 617:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 618:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 619:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC channel. \n\n
 620:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is enabled by setting the module enable bit in KSCFG register bitfield MODEN.
 621:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * On enabling, the channel is set to idle mode.
 622:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 623:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 624:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 625:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 626:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel);
 627:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 628:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 629:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 630:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 631:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 632:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 633:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC channel.\n\n
 634:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is disabled by setting the module enable bit(MDEN) to 0 in the register KSCFG.
 635:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 636:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 637:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 638:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 639:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Disable(XMC_USIC_CH_t *const channel);
 640:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 641:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 642:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 643:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 644:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  rate Desired baudrate. \b Range: minimum value = 100, maximum value depends on the perip
 645:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/(10
 646:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 647:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 648:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 649:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 650:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 651:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 652:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 653:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 654:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel. \n\n
 655:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 656:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 657:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * baudrate.
 658:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 659:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 660:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 661:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 662:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 663:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 664:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 665:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 666:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 667:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pdiv Desired divider for the external frequency input. \b Range: minimum value = 1, maxi
 668:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 669:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 670:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 671:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Selects which edge of the synchronized(and optionally filtered) signal 
 672:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *                          output DXnT of the input stage.
 673:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 674:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 675:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 676:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 677:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the external frequency input for the Baudrate Generator and configures the divider, over
 678:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * the combination mode of the USIC channel. \n\n
 679:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 680:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 681:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBRGInputClockSource(), XMC_USIC_CH_SetInputTriggerCombinationMode() \n\n\n
 682:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 683:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_ConfigExternalInputSignalToBRG(XMC_USIC_CH_t *const channel,
 684:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 		                                         const uint16_t pdiv,
 685:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 												 const uint32_t oversampling,
 686:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 												 const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode);
 687:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 688:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 689:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 690:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 691:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 692:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 693:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  source Input source select for the input stage. The table below maps the enum value with
 694:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * <table><tr><td>0</td><td>DXnA</td></tr><tr><td>1</td><td>DXnB</td></tr><tr><td>2</td><td>DXnC</t
 695:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * <tr><td>4</td><td>DXnE</td></tr><tr><td>5</td><td>DXnF</td></tr><tr><td>6</td><td>DXnG</td></tr>
 696:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * </tr></table>
 697:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 698:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 699:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 700:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the data source for USIC input stage.\n\n
 701:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be
 702:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * like DX0CR, DX1CR etc. 
 703:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *  
 704:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 705:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableIn
 706:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 707:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 708:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INP
 709:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 217              	 .loc 2 709 0
 218              	 .cfi_startproc
 219 0000 80B5     	 push {r7,lr}
 220              	.LCFI6:
 221              	 .cfi_def_cfa_offset 8
 222              	 .cfi_offset 7,-8
 223              	 .cfi_offset 14,-4
 224 0002 82B0     	 sub sp,sp,#8
 225              	.LCFI7:
 226              	 .cfi_def_cfa_offset 16
 227 0004 00AF     	 add r7,sp,#0
 228              	.LCFI8:
 229              	 .cfi_def_cfa_register 7
 230 0006 7860     	 str r0,[r7,#4]
 231 0008 081C     	 mov r0,r1
 232 000a 111C     	 mov r1,r2
 233 000c FB1C     	 add r3,r7,#3
 234 000e 021C     	 add r2,r0,#0
 235 0010 1A70     	 strb r2,[r3]
 236 0012 BB1C     	 add r3,r7,#2
 237 0014 0A1C     	 add r2,r1,#0
 238 0016 1A70     	 strb r2,[r3]
 710:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 239              	 .loc 2 710 0
 240 0018 FB1C     	 add r3,r7,#3
 241 001a 1878     	 ldrb r0,[r3]
 242 001c FB1C     	 add r3,r7,#3
 243 001e 1B78     	 ldrb r3,[r3]
 244 0020 7A68     	 ldr r2,[r7,#4]
 245 0022 0633     	 add r3,r3,#6
 246 0024 9B00     	 lsl r3,r3,#2
 247 0026 D318     	 add r3,r2,r3
 248 0028 5B68     	 ldr r3,[r3,#4]
 249 002a 0722     	 mov r2,#7
 250 002c 9343     	 bic r3,r2
 251 002e 1A1C     	 mov r2,r3
 711:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 252              	 .loc 2 711 0
 253 0030 BB1C     	 add r3,r7,#2
 254 0032 1B78     	 ldrb r3,[r3]
 710:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 255              	 .loc 2 710 0
 256 0034 1A43     	 orr r2,r3
 257 0036 7968     	 ldr r1,[r7,#4]
 258 0038 831D     	 add r3,r0,#6
 259 003a 9B00     	 lsl r3,r3,#2
 260 003c CB18     	 add r3,r1,r3
 261 003e 5A60     	 str r2,[r3,#4]
 712:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
 262              	 .loc 2 712 0
 263 0040 BD46     	 mov sp,r7
 264 0042 02B0     	 add sp,sp,#8
 265              	 
 266 0044 80BD     	 pop {r7,pc}
 267              	 .cfi_endproc
 268              	.LFE91:
 270 0046 C046     	 .section .text.XMC_USIC_CH_SetMode,"ax",%progbits
 271              	 .align 2
 272              	 .code 16
 273              	 .thumb_func
 275              	XMC_USIC_CH_SetMode:
 276              	.LFB149:
 713:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 714:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 715:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 716:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 717:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 718:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 719:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 720:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 721:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is controlled by the
 722:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * protocol pre-processor. \n\n
 723:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 724:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 725:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToDataInput()\n\n\n
 726:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 727:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToPPP(XMC_USIC_CH_t *const channel, const XMC
 728:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 729:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_INSW_Msk;
 730:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
 731:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 732:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 733:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 734:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 735:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 736:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 737:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 738:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 739:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 740:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is connected to
 741:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * the selected data input line. \n\n
 742:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 743:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * This setting is used
 744:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * if the signals are directly derived from an input
 745:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * pin without treatment by the protocol preprocessor.
 746:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 747:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToPPP()\n\n\n
 748:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 749:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToDataInput(XMC_USIC_CH_t *const channel, con
 750:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 751:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_INSW_Msk;
 752:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
 753:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 754:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 755:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 756:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 757:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 758:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 759:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 760:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 761:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 762:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input inversion for USIC channel input data signal. \n\n
 763:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 764:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Polarity of the input source can be changed to provide inverted data input.
 765:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 766:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputInversion()\n\n\n
 767:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 768:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC_
 769:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 770:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_DPOL_Msk;
 771:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
 772:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 773:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 774:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 775:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 776:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 777:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 778:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 779:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 780:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 781:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input inversion for USIC channel. \n\n
 782:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 783:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Resets the input data polarity for the USIC channel input data signal.
 784:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 785:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion()\n\n\n
 786:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 787:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC
 788:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 789:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DPOL_Msk;
 790:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
 791:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 792:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 793:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 794:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 795:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 796:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 797:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 798:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables delay compensation. \n\n
 799:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 800:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Delay compensation can be applied to the receive path.
 801:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 802:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableDelayCompensation()\n\n\n
 803:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 804:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableDelayCompensation(XMC_USIC_CH_t *const channel)
 805:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 806:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] |= USIC_CH_DX1CR_DCEN_Msk;
 807:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
 808:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 809:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 810:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 811:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 812:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 813:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 814:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 815:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables delay compensation.. \n\n
 816:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 817:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 818:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableDelayCompensation()\n\n\n
 819:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 820:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableDelayCompensation(XMC_USIC_CH_t *const channel)
 821:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 822:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] &=(uint32_t)~USIC_CH_DX1CR_DCEN_Msk;
 823:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
 824:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 825:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 826:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 827:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 828:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 829:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 830:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 831:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 832:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 833:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the input digital filter for USIC channel input data signal. \n\n
 834:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be digitally filtered.
 835:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 836:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 837:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 838:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 839:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_U
 840:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 841:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 842:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
 843:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 844:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 845:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 846:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 847:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 848:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 849:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 850:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 851:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the input digital filter for USIC channel input data signal. \n\n
 852:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be digitally filtered.
 853:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 854:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 855:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 856:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 857:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_
 858:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 859:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DFEN_Msk;
 860:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
 861:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 862:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 863:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 864:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 865:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 866:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 867:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 868:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 869:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input synchronization for the USIC channel input data signal. \n\n
 870:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be synchronized with fPERIPH.
 871:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * A noisy signal can be synchronized and filtered by enabling the digital filter.
 872:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 873:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 874:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 875:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 876:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_IN
 877:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 878:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |=(uint32_t)USIC_CH_DXCR_DSEN_Msk;
 879:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
 880:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 881:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 882:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 883:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 884:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 885:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 886:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 887:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 888:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input synchronization for the USIC channel input data signal. \n\n
 889:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be synchronized.
 890:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 891:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 892:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_DisableInputDigitalFilter() \n\n\n
 893:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 894:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_I
 895:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 896:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DSEN_Msk;
 897:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
 898:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 899:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 900:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 901:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 902:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 903:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  sampling_freq Sampling frequency value of type \a XMC_USIC_CH_INPUT_SAMPLING_FREQ_t.
 904:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 905:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 906:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 907:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets sampling frequency for USIC channel input data signal. \n\n
 908:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 909:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 910:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 911:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 912:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSamplingFreq(XMC_USIC_CH_t *const channel,
 913:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_t input,
 914:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_SAMPLING_FREQ_t sampling_fr
 915:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 916:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_SFSEL_Msk)) |
 917:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)sampling_freq);
 918:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
 919:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 920:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 921:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 922:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 923:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 924:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 925:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Combination mode value of type \a XMC_USIC_CH_INPUT_COMBINATION_MODE_t.
 926:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 927:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 928:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 929:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects which edge of the synchronized signal DXnS activates the trigger output DXnT of the inpu
 930:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 931:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 932:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 933:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 934:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputTriggerCombinationMode(XMC_USIC_CH_t *const channel,
 935:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_t input,
 936:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_COMBINATION_MODE_
 937:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 938:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_CM_Msk)) |
 939:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)combination_mode << USIC_CH_DXCR_CM_Pos);
 940:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
 941:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 942:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 943:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 944:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 945:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  clock_source clock source for the BRG.
 946:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 947:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 948:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 949:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the clock source for the BRG. \n\n
 950:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 951:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 952:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputTriggerCombinationMode(), XMC_USIC_CH_SetExternalClockBRGDivider()\n\n\n
 953:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 954:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetBRGInputClockSource(XMC_USIC_CH_t *const channel, const XMC_USI
 955:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 956:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_CLKSEL_Msk)) | (uint32_t)(clock_source);
 957:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
 958:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 959:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 960:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 961:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 962:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
 963:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
 964:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 965:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 966:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 967:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit buffer. \n\n
 968:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in TBUF[0U].
 969:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 970:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 971:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 972:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUFTCI() \n\n\n
 973:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 974:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUF(XMC_USIC_CH_t *const channel, const uint16_t data)
 975:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 976:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBUF[0U] = data;
 977:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
 978:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
 979:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
 980:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 981:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 982:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
 983:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param transmit_control_information transmit control information to be configured while transmit
 984:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31.
 985:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 986:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 987:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 988:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit buffer in a control mode. \n\n
 989:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * When the respective control mode is enabled , this API can be used.
 990:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 991:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
 992:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 993:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUF() \n\n\n
 994:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
 995:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
 996:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                              const uint16_t data,
 997:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                              const uint32_t transmit_control_information)
 998:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 999:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBUF[transmit_control_information] = data;
1000:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1001:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1002:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1003:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1004:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1005:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1006:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 					   \b Range: minimum= 1, maximum= 16. \n
1007:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 					   e.g: For word length of 8, \a word_length should be provided as 8.
1008:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1009:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1010:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1011:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1012:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1013:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1014:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1015:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1016:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1017:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
1018:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1019:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
1020:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                   (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
1021:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1022:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1023:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1024:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1025:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1026:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1027:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b Range: minimum= 1, maximum= 16. \n
1028:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *             e.g: For word length of 8, \a word_length should be provided as 8.
1029:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1030:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1031:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1032:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1033:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1034:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1035:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1036:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1037:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1038:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetShiftDirection(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_
1039:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1040:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_SDIR_Msk)) | (uint32_t)shift_direction;
1041:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1042:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1043:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1044:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1045:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1046:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1047:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Captured counter value 
1048:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1049:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1050:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1051:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * The value of the counter is captured if one of the trigger signals DX0T or DX1T are activated by
1052:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1053:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetCaptureTimerValue(const XMC_USIC_CH_t *const channel)
1054:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1055:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   return channel->CMTR;
1056:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1057:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1058:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1059:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1060:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1061:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  mode divider mode ::XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t \n
1062:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  step divider \n
1063:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL resulting divider = 1023 - step \n
1064:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL resulting divider = 1023 / step \n
1065:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1066:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1067:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1068:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1069:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * The fractional divider generates its output frequency fFD by either dividing the input frequency
1070:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1071:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1072:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFractionalDivider(XMC_USIC_CH_t *const channel, const XMC_USIC_
1073:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1074:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FDR = mode | step;
1075:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1076:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1077:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1078:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1079:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1080:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  frame_length Number of bits in a frame. \n
1081:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: minimum= 1, maximum= 0x3f. The maximum value for fixed frame size is 0x3f. \n
1082:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 						e.g: For a frame length of 16, \a frame_length should be provided as 16.
1083:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1084:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1085:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1086:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Define the data frame length.\n\n
1087:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Set the number of bits to be serially transmitted in a frame.
1088:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * The frame length should be multiples of word length. If the value is set to 0x40, the frame leng
1089:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * has to be controlled explicitly. 
1090:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1091:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1092:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1093:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1094:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
1095:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1096:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
1097:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                   (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
1098:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1099:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1100:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1101:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1102:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1103:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be enabled. Use @ref XMC_USIC_CH_EVENT_t for the 
1104:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1105:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1106:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1107:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1108:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1109:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enable the channel interrupt events.\n\n
1110:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Common channel events related to serial communication can be configured using this API.
1111:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1112:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1113:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1114:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1115:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1116:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1117:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1118:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1119:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR |= event;
1120:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1121:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1122:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1123:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1124:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1125:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be disabled. Use @ref XMC_USIC_CH_EVENT_t for the
1126:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1127:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1128:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1129:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1130:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1131:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Disable the channel interrupt events. \n\n
1132:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1133:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1134:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1135:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1136:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1137:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** */
1138:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1139:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1140:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR &= (uint32_t)~event;
1141:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1143:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1144:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1145:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1146:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
1147:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
1148:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
1149:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request Service request number.\n
1150:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1151:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1152:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1153:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1154:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the interrupt node for USIC channel events. \n\n
1155:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
1156:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
1157:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
1158:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1159:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1160:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent() \n\n\n
1161:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1162:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1163:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                          const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
1164:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                          const uint32_t service_request);
1165:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1166:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1167:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1168:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1169:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Stataus @ref XMC_USIC_CH_TBUF_STATUS_IDLE if transmit buffer is free,
1170:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *                 @ref XMC_USIC_CH_TBUF_STATUS_BUSY if transmit buffer is busy.
1171:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1172:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1173:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets transmit buffer status. \n\n
1174:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Status indicates whether the transmit buffer is free, or busy transmitting data.
1175:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * The status depends on the value of TDV flag in TCSR register.
1176:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * This status can be used while transmitting data. Transmit data when the transmit buffer
1177:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * status is @ref XMC_USIC_CH_TBUF_STATUS_IDLE.
1178:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1179:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1180:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetDataOutputMode() \n\n\n
1181:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1182:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const 
1183:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1184:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
1185:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1186:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1187:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1188:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @brief API to get receive buffer status
1189:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1190:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1191:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of data validity check for RBUF0 and RBUF1. \n
1192:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 		   Returned value should be masked with RDV0 and RDV1 bits to know the status. \n
1193:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 		   \b Range: @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID0, @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID
1194:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1195:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1196:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if RBUF0 and RBUF1 have valid unread data. \n\n
1197:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * It checks the bits RDV0 and RDV1 of the RBUFSR register.
1198:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Returns the value of RBUFSR masked with bitmasks of RDV0 and RDV1.
1199:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * It can be used to decide whether 2bytes has to be read from RBUF or 1 byte. 
1200:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * If both bitmasks XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 and XMC_USIC_CH_RBUF_STATUS_DATA_VALID1
1201:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * are set, then 2 bytes can be read from RBUF. If only either of them is set, then only one byte
1202:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * can be read from RBUF.
1203:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1204:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1205:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1206:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
1207:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1208:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
1209:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1210:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1211:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1212:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1213:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1214:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1215:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  start_transmision_mode Transmission mode to be enabled. \n
1216:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 								\b Range: @ref XMC_USIC_CH_START_TRANSMISION_DISABLED,
1217:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV, @ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2
1218:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1
1219:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *                              
1220:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1221:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1222:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1223:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures data transmission. \n\n
1224:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * The configuration affects the data shifted on the DOUT0 pin.
1225:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1226:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1227:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetDataOutputMode() \n\n\n
1228:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1229:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetStartTransmisionMode(XMC_USIC_CH_t *const channel,
1230:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                                          const XMC_USIC_CH_START_TRANSMISION_MODE_t
1231:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1232:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~USIC_CH_TCSR_TDEN_Msk)) | (uint32_t)start_transmisio
1233:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1234:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1235:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1236:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1237:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1238:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1239:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  data_output_mode  Data output mode. \n
1240:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL, @ref XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTE
1241:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1242:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1243:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1244:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the mode for data output. \n\n
1245:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel can be configured to shift inverted data or direct data based on the input to the A
1246:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1247:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1248:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1249:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1250:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetDataOutputMode(XMC_USIC_CH_t *const channel,
1251:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                                    const XMC_USIC_CH_DATA_OUTPUT_MODE_t data_output
1252:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1253:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_DOCFG_Msk)) | (uint32_t)data_output_mod
1254:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1255:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1256:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1257:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1258:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1259:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1260:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1261:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1262:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables automatic update of frame length. \n\n
1263:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * When the automatic update of frame length is enabled, frame length is configured based on the 
1264:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * index of the TBUF[]/IN[] register array. When the data is written to TBUF[x], frame length is co
1265:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * with the mask value of \a x at the last 5 bit positions. Same logic is applicable if data is wri
1266:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * IN[x] register.
1267:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1268:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1269:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_TXFIFO_PutDataFLEMode() \n\n\n
1270:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1271:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableFrameLengthControl(XMC_USIC_CH_t *const channel)
1272:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1273:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
1274:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_SELMD_Msk |
1275:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_WAMD_Msk |
1276:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_HPCMD_Msk))) |
1277:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                          (uint32_t)USIC_CH_TCSR_FLEMD_Msk;
1278:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1279:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1280:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1281:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1282:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1283:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1284:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1285:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1286:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables automatic update of frame length. \n\n
1287:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * When automatic update of frame length is disabled, frame length has to configured explicitly.
1288:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Frame length remains fixed until it is changed again.
1289:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1290:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1291:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_SetFrameLength() \n\n\n
1292:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1293:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableFrameLengthControl(XMC_USIC_CH_t *const channel)
1294:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1295:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_FLEMD_Msk;
1296:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1297:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1298:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1299:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1300:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1301:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1302:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1303:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1304:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is set if DX2T becomes active while TDV = 1. \n\n
1305:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the transfer trigger unit to set bit TCSR.TE if the trigger signal DX2T becomes active
1306:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * for event driven transfer starts.
1307:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1308:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1309:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTBUFDataValidTrigger()\n\n\n
1310:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1311:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1312:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1313:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_TDVTR_Msk;
1314:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1315:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1316:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1317:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1318:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1319:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1320:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1321:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1322:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the trigger of TDV depending on DX2T signal. \n\n
1323:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is permanently set.
1324:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1325:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1326:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTBUFDataValidTrigger() \n\n\n
1327:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1328:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1329:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1330:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_TDVTR_Msk;
1331:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1332:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1333:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1334:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1335:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1336:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  service_request_line service request number of the event to be triggered. \n
1337:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 0 to 5.
1338:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1339:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1340:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1341:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Trigger a USIC interrupt service request.\n\n
1342:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * When the USIC service request is triggered, the NVIC interrupt associated with it will be 
1343:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * generated if enabled. 
1344:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1345:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1346:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1347:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1348:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t
1349:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1350:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
1351:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1352:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1353:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1354:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1355:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1356:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  transmit_buffer_status clearing or setting the TDV flag. \n
1357:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1358:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1359:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1360:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1361:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Modify TCSR.TDV and TCSR.TE to control the start of a data word transmission by software.
1362:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1363:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1364:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1365:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1366:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetTransmitBufferStatus(XMC_USIC_CH_t *const channel,
1367:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 		                                                 const XMC_USIC_CH_TBUF_STATUS_SET_t transmit_buf
1368:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1369:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)transmit_buffer_status;
1370:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1371:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1372:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1373:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1374:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1375:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  passive_level Value of passive level for the channel. \n
1376:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL0, @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL1
1377:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1378:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1379:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1380:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Set the passive data level of the output signal. \n\n
1381:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * When the USIC channel transmit stage is idle, the output signal level stays at the 
1382:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * configured passive level.
1383:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1384:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1385:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1386:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1387:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetPassiveDataLevel(XMC_USIC_CH_t *const channel,
1388:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                                      const XMC_USIC_CH_PASSIVE_DATA_LEVEL_t passive
1389:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1390:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR &= (~USIC_CH_SCTR_PDL_Msk);
1391:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR |= (uint32_t)passive_level;
1392:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1393:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1394:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /* TX FIFO APIs */
1395:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1396:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1397:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1398:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1399:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1400:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1401:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1402:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of transmit FIFO filling level to be considered for generating events. \n
1403:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1404:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1405:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1406:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1407:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Initializes the transmit FIFO. \n\n
1408:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO is a subset of a common FIFO sized 64 words. This FIFO is shared between 2 channel
1409:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1410:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * from where transmit data can be put, for the selected USIC channel. \a size represents the size 
1411:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 2. Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A F
1412:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * event is generated when the FIFO filling level falls below the \a limit value.
1413:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1414:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1415:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent(), XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1416:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1417:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
1418:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1419:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1420:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1421:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1422:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1423:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1424:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1425:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1426:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1427:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
1428:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1429:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1430:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1431:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1432:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the transmit FIFO. \n\n
1433:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the transmit FIFO. The API shall be used for the 
1434:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * runtime change of transmit FIFO trigger limit. FIFO start position will not be affected on execu
1435:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1436:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1437:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit() \n\n\n
1438:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1439:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1440:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1441:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                             const uint32_t limit);
1442:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1443:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1444:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1445:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1446:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1447:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1448:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1449:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1450:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1451:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1452:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t.
1453:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1454:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation. Events are configured in the TBC
1455:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1456:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1457:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * must be enabled.
1458:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1459:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1460:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1461:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1462:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1463:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1464:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR |= event;
1465:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1466:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1467:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1468:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1469:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1470:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1471:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t \n
1472:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1473:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1474:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1475:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the interrupt events related to transmit FIFO. \n\n
1476:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1477:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_TXFIFO_GetEvent(). 
1478:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t. Fo
1479:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1480:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1481:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1482:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1483:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1484:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1485:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1486:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR &= (uint32_t)~event;
1487:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1488:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1489:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1490:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1491:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				      \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1492:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the transmit FIFO events. \n
1493:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1494:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1495:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation. \n
1496:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1497:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1498:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1499:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1500:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the transmit FIFO events.\n\n
1501:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1502:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1503:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1504:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * A transmit FIFO event can generate an interrupt only if the interrupt node is configured for the
1505:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1506:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1507:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1508:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1509:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1510:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1511:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1512:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1513:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1514:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t i
1515:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const uint32_t service_request);
1516:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1517:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1518:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1519:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1520:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1521:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1522:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1523:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1524:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1525:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit FIFO. \n\n
1526:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in the transmit FIFO.
1527:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * The transmit FIFO should be configured before calling this API.
1528:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1529:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1530:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1531:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1532:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutData(XMC_USIC_CH_t *const channel, const uint16_t data)
1533:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1534:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[0] = data;
1535:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1536:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1537:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1538:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1539:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1540:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1541:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1542:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1543:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1544:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1545:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1546:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in frame length control mode. \n\n
1547:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * When frame length control is enabled for dynamic update of frame length, this API can be used.
1548:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1549:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1550:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1551:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1552:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1553:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1554:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataFLEMode(XMC_USIC_CH_t *const channel,
1555:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint16_t data,
1556:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint32_t frame_length)
1557:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1558:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1559:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1560:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1561:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1562:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1563:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1564:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1565:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1566:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1567:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1568:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1569:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1570:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in hardware port control mode. \n\n
1571:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * When hardware port control is enabled for dynamic update of frame length, this API can be used.
1572:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1573:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1574:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1575:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1576:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1577:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1578:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
1579:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint16_t data,
1580:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint32_t frame_length)
1581:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1582:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1583:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1584:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1585:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1586:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1587:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1588:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1589:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1590:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1591:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the contents of transmit FIFO. \n\n
1592:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO contents will be cleared and the filling level will be reset to 0.
1593:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1594:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1595:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
1596:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1597:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
1598:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1599:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
1600:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1601:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1602:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1603:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1604:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1605:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is full
1606:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO is not full.
1607:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1608:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1609:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is full. \n\n
1610:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO filling level reaches the configured size, FIFO full flag is set.
1611:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * User should not write to the FIFO when the transmit FIFO is full.
1612:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1613:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1614:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
1615:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1616:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1617:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1618:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1619:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1620:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1621:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1622:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1623:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1624:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is empty
1625:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO has some data.
1626:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1627:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1628:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is empty. \n\n
1629:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO is empty, data can be written to FIFO.
1630:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * When the last written word to the transmit FIFO is transmitted out of the FIFO, 
1631:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * FIFO empty flag is set.
1632:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1633:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1634:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1635:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1636:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1637:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1638:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
1639:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1640:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1641:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1642:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1643:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1644:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Transmit FIFO filling level. \n 
1645:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= transmit FIFO size.
1646:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1647:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1648:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO filling level. \n\n
1649:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * For every word written to the FIFO, filling level is updated. The API gives the value
1650:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * of this filling level.
1651:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1652:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1653:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1654:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1655:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1656:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1657:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_TBFLVL_Msk) >> USIC_CH_TRBSR_TBFLVL_Pos);
1658:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1659:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1660:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1661:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1662:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1663:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of standard transmit and transmit buffer error events. @ref XMC_USIC_CH_TXFIFO_EV
1664:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1665:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1666:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO event status. \n\n
1667:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Gives the status of transmit FIFO standard transmit buffer event and transmit buffer error event
1668:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * The status bits are located at their bit positions in the TRBSR register in the returned value.
1669:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * User can make use of the @ref XMC_USIC_CH_TXFIFO_EVENT_t enumeration for checking the status of 
1670:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1671:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1672:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1673:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1674:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1675:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_ClearEvent() \n\n\n
1676:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1677:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1678:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1679:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_STBI_Msk |
1680:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                               USIC_CH_TRBSR_TBERI_Msk));
1681:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1682:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1683:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1684:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1685:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1686:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  event Transmit FIFO events to be cleared. \n
1687:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 			     \b Range: @ref XMC_USIC_CH_TXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_TXFIFO_EVENT_ERROR.
1688:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1689:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1690:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1691:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the transmit FIFO event flags in the status register. \n\n
1692:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1693:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
1694:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EVENT enumeration can be used as input. Multiple events
1695:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
1696:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple event enumerations.
1697:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1698:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1699:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent() \n\n\n
1700:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1701:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1702:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                                    const uint32_t event)
1703:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1704:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = event;
1705:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1706:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1707:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1708:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1709:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1710:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1711:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1712:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1713:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1714:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of receive FIFO filling level to be considered for generating events. \n
1715:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1716:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1717:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1718:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1719:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the receive FIFO. \n\n
1720:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO is the subset of a common FIFO sized 64 words. This FIFO is shared between 2 channe
1721:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1722:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * from where received data can be put. \a size represents the size of receive FIFO as a multiple o
1723:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A FIFO
1724:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * event or alternative receive buffer event is generated when the FIFO filling level exceeds the \
1725:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1726:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1727:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent(), XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1728:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** */
1729:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
1730:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1731:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1732:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1733:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1734:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1735:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1736:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1737:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1738:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1739:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for receive FIFO filling level to be considered for generating events. \n
1740:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1741:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1742:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1743:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1744:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the receive FIFO. \n\n
1745:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the receive FIFO. The API shall be used for the 
1746:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * runtime change of receive FIFO trigger limit. FIFO start position will not be affected on execut
1747:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1748:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1749:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit()\ n\n\n
1750:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1751:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1752:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1753:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                             const uint32_t limit);
1754:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1755:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1756:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1757:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1758:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1759:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1760:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1761:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1762:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1763:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_t.
1764:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1765:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.<br>
1766:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1767:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1768:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * must be enabled.
1769:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1770:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1771:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1772:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1773:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1774:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1775:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR |= event;
1776:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1777:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1778:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1779:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1780:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1781:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1782:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. \n
1783:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ERR
1784:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 			@ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE.
1785:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1786:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1787:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1788:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the selected interrupt events related to receive FIFO. \n\n
1789:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1790:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_RXFIFO_GetEvent(). 
1791:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration \a XMC_USIC_CH_RXFIFO_EVENT_CONF. For pr
1792:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1793:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1794:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1795:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1796:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1797:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1798:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1799:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR &= (uint32_t)~event;
1800:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1801:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1802:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1803:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1804:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1805:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the receive FIFO events. \n
1806:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1807:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 					@ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1808:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation.\n
1809:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: 0 to 5.
1810:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1811:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1812:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1813:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the receive FIFO events. \n\n
1814:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1815:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1816:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1817:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * A receive FIFO event can generate an interrupt only if the interrupt node is configured for the 
1818:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1819:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1820:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1821:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1822:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1823:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1824:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1825:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1826:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1827:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t i
1828:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const uint32_t service_request);
1829:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1830:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1831:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1832:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1833:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Value read from the receive FIFO. \n
1834:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 16bit data. Length of data depends on the word length configuration.
1835:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1836:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1837:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets data from the receive FIFO. \n\n
1838:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO should be read only if data is availble in the FIFO. This can be checked using
1839:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * the API XMC_USIC_CH_RXFIFO_IsEmpty(). Receive FIFO error flag will be set if an attempt is made
1840:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO. To read all the received data, user should keep reading data
1841:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * until receive FIFO is empty.
1842:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1843:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1844:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent() \n\n\n
1845:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1846:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint16_t XMC_USIC_CH_RXFIFO_GetData(XMC_USIC_CH_t *const channel)
1847:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1848:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint16_t)(channel->OUTR);
1849:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1850:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1851:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1852:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1853:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1854:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1855:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1856:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1857:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the contents of receive FIFO. \n\n
1858:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO contents will be cleared and the filling level will be reset to 0.
1859:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1860:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1861:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
1862:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1863:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
1864:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1865:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
1866:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1867:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1868:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1869:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1870:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1871:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is full
1872:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO is not full.
1873:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1874:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1875:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is full. \n\n
1876:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO filling level reaches the configured size, FIFO full flag is set.
1877:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Any data received when the receive FIFO is full, is lost.
1878:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1879:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1880:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_IsEmpty(), XMC_USIC_CH_RXFIFO_Flush() \n\n\n
1881:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1882:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1883:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1884:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_RFULL_Msk);
1885:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1886:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1887:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1888:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1889:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1890:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is empty,
1891:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO has some data.
1892:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1893:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1894:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is empty. \n\n
1895:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO is empty, received data will be put in receive FIFO.
1896:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * When the last received word in the FIFO is read, FIFO empty flag is set. Any attempt
1897:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO will set the receive FIFO error flag.
1898:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1899:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1900:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1901:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1902:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1903:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1904:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
1905:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1906:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1907:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1908:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1909:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1910:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return uint32_t Receive FIFO filling level. \n
1911:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= receive FIFO size.
1912:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1913:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1914:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the receive FIFO filling level. \n\n
1915:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * For every word received, the filling level is incremented. The API gives the value
1916:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * of this filling level. The filling level is decremented when the data is read out of the 
1917:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * receive FIFO.
1918:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1919:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1920:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1921:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1922:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1923:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1924:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_RBFLVL_Msk) >> USIC_CH_TRBSR_RBFLVL_Pos);
1925:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1926:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1927:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1928:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1929:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1930:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of standard receive buffer, alternative receive buffer and receive buffer error e
1931:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
1932:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
1933:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1934:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1935:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the receive FIFO events' status. \n\n
1936:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Gives the status of receive FIFO standard receive buffer event, alternative receive buffer event
1937:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * The status bits are located at their bitpositions in the TRBSR register in the returned value.
1938:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * User can make use of the XMC_USIC_CH_RXFIFO_EVENT enumeration for checking the status of return 
1939:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1940:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1941:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1942:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1943:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1944:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent()\n\n\n
1945:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1946:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1947:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1948:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_SRBI_Msk |
1949:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                               USIC_CH_TRBSR_RBERI_Msk |
1950:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                               USIC_CH_TRBSR_ARBI_Msk));
1951:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1952:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1953:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1954:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1955:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1956:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  event Receive FIFO events to be cleared. \n
1957:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
1958:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
1959:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1960:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1961:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1962:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the receive FIFO event flags in the status register. \n\n
1963:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1964:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
1965:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EVENT enumeration can be used as input. Multiple events
1966:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
1967:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple event enumerations.
1968:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1969:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1970:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent() \n\n\n
1971:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1972:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1973:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                                    const uint32_t event)
1974:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1975:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = event;
1976:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1977:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1978:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1979:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1980:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1981:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1982:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1983:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1984:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables time measurement using the capture mode timer. \n\n
1985:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Time measurement is enabled by setting the timer enable flag in BRG register.
1986:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
1987:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1988:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTimeMeasurement() \n\n\n
1989:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
1990:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTimeMeasurement(XMC_USIC_CH_t *const channel)
1991:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
1992:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG |= (uint32_t)USIC_CH_BRG_TMEN_Msk;
1993:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
1994:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
1995:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
1996:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1997:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1998:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1999:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
2000:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2001:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables time measurement using the capture mode timer. \n\n
2002:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Time measurement is disabled by clearing the timer enable flag in BRG register.
2003:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
2004:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2005:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTimeMeasurement() \n\n\n
2006:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
2007:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTimeMeasurement(XMC_USIC_CH_t *const channel)
2008:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
2009:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG &= (uint32_t)~USIC_CH_BRG_TMEN_Msk;
2010:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
2011:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
2012:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
2013:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2014:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2015:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param passive_level Passive level for the master clock output. \n
2016:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0, @ref XMC_USIC_CH_BRG_MASTER_CL
2017:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2018:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
2019:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2020:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the idle mode pin level for the master clock output. \n
2021:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
2022:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMclkOutputPassiveLevel(XMC_USIC_CH_t *const channel,
2023:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_MASTER_CLOCK_PASSI
2024:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
2025:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_MCLKCFG_Msk)) | (uint32_t)passive_level;
2026:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
2027:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
2028:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2029:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2030:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param passive_level Passive level for the clock output. \n
2031:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
2032:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED,
2033:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED,
2034:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED,
2035:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param clock_output Shift clock source selection. \n
2036:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: Use @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK,
2037:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 								  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1
2038:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2039:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
2040:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2041:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the idle mode shift clock output level and selects the shift clock source. \n\n
2042:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Shift clock idle mode output level can be set to logic high or low. Shift clock output can be co
2043:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * delay of half shift clock period. Both the configurations are available as enumeration values de
2044:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t.
2045:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * This value should be configured based on the slave device requirement.
2046:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Shift clock source can be selected between internal clock(master) and external input(slave).
2047:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 
2048:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
2049:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
2050:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIV
2051:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
2052:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
2053:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
2054:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                                              USIC_CH_BRG_SCLKOSEL_Msk))) |
2055:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                  (uint32_t)passive_level |
2056:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****                  (uint32_t)clock_output;
2057:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
2058:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** 
2059:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** /**
2060:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2061:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2062:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @param mode USIC channel operation mode. \n
2063:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_OPERATING_MODE_IDLE, @ref XMC_USIC_CH_OPERATING_MODE_SPI,
2064:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_UART, @ref XMC_USIC_CH_OPERATING_MODE_I2S,
2065:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_I2C.
2066:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2067:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
2068:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2069:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the USIC channel operation mode.\n\n
2070:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * A USIC channel can support multiple serial communication protocols like UART, SPI, I2C and I2S.
2071:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * The API sets the input operation mode to the USIC channel.
2072:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  *
2073:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2074:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
2075:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****  */
2076:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_
2077:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** {
 277              	 .loc 2 2077 0
 278              	 .cfi_startproc
 279 0000 80B5     	 push {r7,lr}
 280              	.LCFI9:
 281              	 .cfi_def_cfa_offset 8
 282              	 .cfi_offset 7,-8
 283              	 .cfi_offset 14,-4
 284 0002 82B0     	 sub sp,sp,#8
 285              	.LCFI10:
 286              	 .cfi_def_cfa_offset 16
 287 0004 00AF     	 add r7,sp,#0
 288              	.LCFI11:
 289              	 .cfi_def_cfa_register 7
 290 0006 7860     	 str r0,[r7,#4]
 291 0008 0A1C     	 mov r2,r1
 292 000a FB1C     	 add r3,r7,#3
 293 000c 1A70     	 strb r2,[r3]
2078:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 294              	 .loc 2 2078 0
 295 000e 7B68     	 ldr r3,[r7,#4]
 296 0010 1B6C     	 ldr r3,[r3,#64]
 297 0012 0F22     	 mov r2,#15
 298 0014 9343     	 bic r3,r2
 299 0016 1A1C     	 mov r2,r3
 300 0018 FB1C     	 add r3,r7,#3
 301 001a 1B78     	 ldrb r3,[r3]
 302 001c 1A43     	 orr r2,r3
 303 001e 7B68     	 ldr r3,[r7,#4]
 304 0020 1A64     	 str r2,[r3,#64]
2079:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_usic.h **** }
 305              	 .loc 2 2079 0
 306 0022 BD46     	 mov sp,r7
 307 0024 02B0     	 add sp,sp,#8
 308              	 
 309 0026 80BD     	 pop {r7,pc}
 310              	 .cfi_endproc
 311              	.LFE149:
 313              	 .section .text.XMC_GPIO_SetOutputLevel,"ax",%progbits
 314              	 .align 2
 315              	 .code 16
 316              	 .thumb_func
 318              	XMC_GPIO_SetOutputLevel:
 319              	.LFB173:
 320              	 .file 3 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc/xmc_gpio.h"
   1:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** /**
   2:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @file xmc_gpio.h
   3:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @date 2015-06-20
   4:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   5:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @cond
   6:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
   7:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   9:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * All rights reserved.                        
  11:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                             
  12:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * following conditions are met:   
  14:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  15:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer.                        
  17:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  18:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  21:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  24:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  32:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  35:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  36:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Change History
  37:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * --------------
  38:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  39:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-02-20:
  40:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Initial draft<br>
  41:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Documentation improved <br>
  42:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *      
  43:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-06-20:
  44:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  45:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  46:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @endcond
  47:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  48:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  49:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
  50:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** #ifndef XMC_GPIO_H
  51:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_H
  52:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
  53:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  54:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * HEADER FILES
  55:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  56:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
  57:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc_common.h"
  58:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
  59:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  60:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup XMClib XMC Peripheral Library
  61:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @{
  62:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  63:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
  64:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  65:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup GPIO
  66:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @brief General Purpose Input Output (GPIO) driver for the XMC microcontroller family.
  67:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  68:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * GPIO driver provide a generic and very flexible software interface for all standard digital I/O 
  69:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Each port slice has individual interfaces for the operation as General Purpose I/O and it furthe
  70:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * connectivity to the on-chip periphery and the control for the pad characteristics. 
  71:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  72:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * The driver is divided into Input and Output mode.
  73:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  74:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Input mode features:
  75:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Configuration structure XMC_GPIO_CONFIG_t and initialization function XMC_GPIO_Init()
  76:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of weak pull-up or pull-down device. Configuration structure XMC_GPIO_MO
  77:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
  78:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of input hysteresis. XMC_GPIO_SetInputHysteresis()
  79:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  80:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  81:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  82:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Output mode features:
  83:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of push pull/open drain and Alternate output. Configuration structure XM
  84:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
  85:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of pad driver strength. Configuration structure XMC_GPIO_OUTPUT_STRENGTH
  86:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  87:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  88:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of initial output level. Configuration structure XMC_GPIO_OUTPUT_LEVEL_t
  89:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  90:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *@{
  91:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  92:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  
  93:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  94:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * MACROS
  95:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  96:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
  97:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Pos PORT0_IOCR0_PC0_Pos
  98:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Msk PORT0_IOCR0_PC0_Msk
  99:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 100:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Size 				(8U)
 101:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 											
 102:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 103:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_OUTPUT_LEVEL(level) ((level == XMC_GPIO_OUTPUT_LEVEL_LOW) || \
 104:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****                                             (level == XMC_GPIO_OUTPUT_LEVEL_HIGH))
 105:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 106:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_HWCTRL(hwctrl) ((hwctrl == XMC_GPIO_HWCTRL_DISABLED) || \
 107:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL1) || \
 108:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL2))                    
 109:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 110:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 111:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * ENUMS
 112:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 113:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 114:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 115:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 116:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines output level of a pin. Use type \a XMC_GPIO_OUTPUT_LEVEL_t for this enum.
 117:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 118:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_OUTPUT_LEVEL
 119:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** {
 120:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_LOW  = 0x10000U, /**<  Reset bit */
 121:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_HIGH = 0x1U, 	/**< Set bit  */
 122:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_OUTPUT_LEVEL_t;
 123:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 124:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 125:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines direct hardware control characteristics of the pin . Use type \a XMC_GPIO_HWCTRL_t for t
 126:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 127:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_HWCTRL
 128:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** {
 129:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_DISABLED     = 0x0U, /**<  Software control only */
 130:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL1  = 0x1U, /**<  HWI0/HWO0 control path can override the software confi
 131:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL2  = 0x2U  /**<  HWI1/HWO1 control path can override the software confi
 132:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_HWCTRL_t;
 133:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 134:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 135:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * DEVICE FAMILY EXTENSIONS
 136:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 137:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 138:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  #if UC_FAMILY == XMC1
 139:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc1_gpio.h"
 140:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** #elif UC_FAMILY == XMC4
 141:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc4_gpio.h"
 142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** #else
 143:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** #error "xmc_gpio.h: family device not supported"
 144:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 145:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 146:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 147:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * API PROTOTYPES
 148:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 149:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 150:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** #ifdef __cplusplus
 151:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** extern "C" {
 152:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 153:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 154:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 155:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 156:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	  Constant pointer pointing to GPIO port, to access port registers like Pn_OUT,Pn_O
 157:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	  Port pin number.
 158:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  config GPIO configuration data structure. Refer data structure @ref XMC_GPIO_CONFIG_t fo
 159:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 160:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 161:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 162:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 163:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
 164:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,hysteresis, push pull
 165:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for a selected \a po
 166:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * \a config provides selected I/O settings. It configures hardware registers Pn_IOCR,Pn_OUT, Pn_OM
 167:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 168:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
 169:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,push pull /open drain
 170:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for selected \a port
 171:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * It configures hardware registers Pn_IOCR,Pn_OUT,Pn_OMR,Pn_PDISC and Pn_PDR.\n
 172:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 173:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 174:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 175:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 176:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 177:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 178:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * This API is called in definition of DAVE_init by code generation and therefore should not be exp
 179:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * for the normal operation. Use other APIs only after DAVE_init is called successfully (returns DA
 180:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 181:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 182:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 183:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 184:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  
 185:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const c
 186:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  
 187:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 188:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 189:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	Constant pointer pointing to GPIO port, to access hardware register Pn_IOCR.
 190:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 191:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  mode input / output functionality selection. Refer @ref XMC_GPIO_MODE_t for valid values
 192:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 193:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 194:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 195:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 196:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets digital input and output driver functionality and characteristics of a GPIO port pin. It co
 197:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * registers Pn_IOCR. \a mode is initially configured during initialization in XMC_GPIO_Init(). Cal
 198:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * the port direction functionality as needed later in the program.
 199:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 200:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 201:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 202:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 203:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 204:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 205:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode);
 206:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 207:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 208:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 209:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 210:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	 Constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 211:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	 Port pin number.
 212:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  level output level selection. Refer @ref XMC_GPIO_OUTPUT_LEVEL_t for valid values.
 213:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 214:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 215:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 216:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 217:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Set port pin output level to high or low.It configures hardware registers Pn_OMR.\a level is ini
 218:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * configured during initialization in XMC_GPIO_Init(). Call this API to alter output level as need
 219:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 220:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 221:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 222:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 223:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 224:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 225:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 226:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 227:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 228:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 229:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const 
 230:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** {
 321              	 .loc 3 230 0
 322              	 .cfi_startproc
 323 0000 80B5     	 push {r7,lr}
 324              	.LCFI12:
 325              	 .cfi_def_cfa_offset 8
 326              	 .cfi_offset 7,-8
 327              	 .cfi_offset 14,-4
 328 0002 84B0     	 sub sp,sp,#16
 329              	.LCFI13:
 330              	 .cfi_def_cfa_offset 24
 331 0004 00AF     	 add r7,sp,#0
 332              	.LCFI14:
 333              	 .cfi_def_cfa_register 7
 334 0006 F860     	 str r0,[r7,#12]
 335 0008 7A60     	 str r2,[r7,#4]
 336 000a 0B23     	 mov r3,#11
 337 000c FB18     	 add r3,r7,r3
 338 000e 0A1C     	 add r2,r1,#0
 339 0010 1A70     	 strb r2,[r3]
 231:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 232:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
 233:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****   
 234:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)level << pin;
 340              	 .loc 3 234 0
 341 0012 0B23     	 mov r3,#11
 342 0014 FB18     	 add r3,r7,r3
 343 0016 1B78     	 ldrb r3,[r3]
 344 0018 7A68     	 ldr r2,[r7,#4]
 345 001a 9A40     	 lsl r2,r2,r3
 346 001c FB68     	 ldr r3,[r7,#12]
 347 001e 5A60     	 str r2,[r3,#4]
 235:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** }
 348              	 .loc 3 235 0
 349 0020 BD46     	 mov sp,r7
 350 0022 04B0     	 add sp,sp,#16
 351              	 
 352 0024 80BD     	 pop {r7,pc}
 353              	 .cfi_endproc
 354              	.LFE173:
 356 0026 C046     	 .section .text.XMC_GPIO_SetOutputHigh,"ax",%progbits
 357              	 .align 2
 358              	 .code 16
 359              	 .thumb_func
 361              	XMC_GPIO_SetOutputHigh:
 362              	.LFB174:
 236:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 237:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 238:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 239:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 240:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 241:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 242:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 243:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 244:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 245:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *  Sets port pin output to high. It configures hardware registers Pn_OMR.
 246:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 247:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *  \par<b>Related APIs:</b><BR>
 248:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputLow()
 249:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 250:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 251:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().\n
 252:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 253:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 254:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 255:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 256:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 257:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** {
 363              	 .loc 3 257 0
 364              	 .cfi_startproc
 365 0000 80B5     	 push {r7,lr}
 366              	.LCFI15:
 367              	 .cfi_def_cfa_offset 8
 368              	 .cfi_offset 7,-8
 369              	 .cfi_offset 14,-4
 370 0002 82B0     	 sub sp,sp,#8
 371              	.LCFI16:
 372              	 .cfi_def_cfa_offset 16
 373 0004 00AF     	 add r7,sp,#0
 374              	.LCFI17:
 375              	 .cfi_def_cfa_register 7
 376 0006 7860     	 str r0,[r7,#4]
 377 0008 0A1C     	 mov r2,r1
 378 000a FB1C     	 add r3,r7,#3
 379 000c 1A70     	 strb r2,[r3]
 258:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 259:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 260:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)0x1U << pin;
 380              	 .loc 3 260 0
 381 000e FB1C     	 add r3,r7,#3
 382 0010 1B78     	 ldrb r3,[r3]
 383 0012 0122     	 mov r2,#1
 384 0014 9A40     	 lsl r2,r2,r3
 385 0016 7B68     	 ldr r3,[r7,#4]
 386 0018 5A60     	 str r2,[r3,#4]
 261:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** }
 387              	 .loc 3 261 0
 388 001a BD46     	 mov sp,r7
 389 001c 02B0     	 add sp,sp,#8
 390              	 
 391 001e 80BD     	 pop {r7,pc}
 392              	 .cfi_endproc
 393              	.LFE174:
 395              	 .section .text.XMC_GPIO_GetInput,"ax",%progbits
 396              	 .align 2
 397              	 .code 16
 398              	 .thumb_func
 400              	XMC_GPIO_GetInput:
 401              	.LFB177:
 262:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 263:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 264:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 265:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 266:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	port pin number.
 267:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 268:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return  None
 269:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 270:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 271:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets port pin output to low. It configures hardware registers Pn_OMR.\n
 272:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 273:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>>
 274:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh()
 275:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 276:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Note:</b><br>
 277:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 278:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 279:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 280:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 281:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 282:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 283:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** {
 284:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 285:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 286:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10000U << pin;
 287:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** }
 288:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 289:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 290:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 291:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 292:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param pin  port pin number.
 293:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 294:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 295:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 296:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 297:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Configures port pin output to Toggle. It configures hardware registers Pn_OMR.
 298:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 299:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 300:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 301:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 302:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 303:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode(). Regis
 304:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * and does not contain any flip-flop. A read action delivers the value of 0.
 305:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 306:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 307:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 308:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 309:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** {
 310:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 311:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 312:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10001U << pin;
 313:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** }
 314:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 315:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 316:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 317:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param port constant pointer pointing to GPIO port, to access hardware register Pn_IN.
 318:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param pin  Port pin number.
 319:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 320:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return uint32_t pin logic level status.
 321:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 322:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 323:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Reads the Pn_IN register and returns the current logical value at the GPIO pin.
 324:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 325:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 326:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * None
 327:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 328:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 329:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 330:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 331:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 332:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 333:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 334:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** {
 402              	 .loc 3 334 0
 403              	 .cfi_startproc
 404 0000 80B5     	 push {r7,lr}
 405              	.LCFI18:
 406              	 .cfi_def_cfa_offset 8
 407              	 .cfi_offset 7,-8
 408              	 .cfi_offset 14,-4
 409 0002 82B0     	 sub sp,sp,#8
 410              	.LCFI19:
 411              	 .cfi_def_cfa_offset 16
 412 0004 00AF     	 add r7,sp,#0
 413              	.LCFI20:
 414              	 .cfi_def_cfa_register 7
 415 0006 7860     	 str r0,[r7,#4]
 416 0008 0A1C     	 mov r2,r1
 417 000a FB1C     	 add r3,r7,#3
 418 000c 1A70     	 strb r2,[r3]
 335:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));
 336:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** 
 337:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h ****   return (((port->IN) >> pin) & 0x1U);
 419              	 .loc 3 337 0
 420 000e 7B68     	 ldr r3,[r7,#4]
 421 0010 5A6A     	 ldr r2,[r3,#36]
 422 0012 FB1C     	 add r3,r7,#3
 423 0014 1B78     	 ldrb r3,[r3]
 424 0016 DA40     	 lsr r2,r2,r3
 425 0018 131C     	 mov r3,r2
 426 001a 0122     	 mov r2,#1
 427 001c 1340     	 and r3,r2
 338:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_gpio.h **** }
 428              	 .loc 3 338 0
 429 001e 181C     	 mov r0,r3
 430 0020 BD46     	 mov sp,r7
 431 0022 02B0     	 add sp,sp,#8
 432              	 
 433 0024 80BD     	 pop {r7,pc}
 434              	 .cfi_endproc
 435              	.LFE177:
 437 0026 C046     	 .section .text.XMC_I2C_CH_Start,"ax",%progbits
 438              	 .align 2
 439              	 .code 16
 440              	 .thumb_func
 442              	XMC_I2C_CH_Start:
 443              	.LFB182:
 444              	 .file 4 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc/xmc_i2c.h"
   1:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
   2:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @file xmc_i2c.h
   3:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @date 2017-10-27
   4:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
   5:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @cond
   6:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  **************************************************************************************************
   7:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
   9:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * All rights reserved.                        
  11:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *                                             
  12:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * following conditions are met:   
  14:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *                                                                              
  15:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * disclaimer.                        
  17:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 
  18:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 
  21:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *                                                                              
  24:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *                                                                              
  32:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  **************************************************************************************************
  35:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  36:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Change History
  37:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * --------------
  38:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  39:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-02-20:
  40:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Initial <br>
  41:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *      
  42:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-05-20:
  43:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Description updated <br>
  44:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_TriggerServiceRequest() and XMC_I2C_CH_SelectInterruptNodePointer() <br>
  45:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  46:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-06-20:
  47:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  48:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  49:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-08-27:
  50:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added APIs for external input for BRG configuration:XMC_I2C_CH_ConfigExternalInputSignalTo
  51:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  52:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-09-01:
  53:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added APIs for enabling or disabling the ACK response to a 0x00 slave address: XMC_I2C_CH_
  54:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *       XMC_I2C_CH_DisableSlaveAcknowledgeTo00(). <br>
  55:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Modified XMC_I2C_CH_SetInputSource() API for avoiding complete DXCR register overwriting. 
  56:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Modified XMC_I2C_CH_EVENT_t enum for supporting XMC_I2C_CH_EnableEvent() and XMC_I2C_CH_Di
  57:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *       for supporting multiple events configuration <br>
  58:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  59:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-10-02:
  60:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Fix 10bit addressing
  61:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  62:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-10-07:
  63:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Fix register access in XMC_I2C_CH_EnableSlaveAcknowledgeTo00() and XMC_I2C_CH_DisableSlave
  64:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Naming of APIs modified: from XMC_I2C_CH_EnableSlaveAcknowledgeTo00() to  XMC_I2C_CH_Enabl
  65:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *       and from XMC_I2C_CH_DisableSlaveAcknowledgeTo00() to XMC_I2C_CH_DisableAcknowledgeAddress0
  66:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  67:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2016-05-20:
  68:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_EnableDataTransmission() and XMC_I2C_CH_DisableDataTransmission()
  69:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  70:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2016-08-17:
  71:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Improved documentation of slave address passing
  72:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  73:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2017-10-25:
  74:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_EnableMasterClock() and XMC_I2C_CH_DisableMasterClock()
  75:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  76:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 
  77:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @endcond 
  78:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  79:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
  80:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
  81:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** #ifndef XMC_I2C_H
  82:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C_H
  83:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
  84:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
  85:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * HEADER FILES
  86:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
  87:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
  88:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** #include "xmc_usic.h"
  89:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
  90:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
  91:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @addtogroup XMClib XMC Peripheral Library
  92:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @{
  93:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
  94:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
  95:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
  96:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @addtogroup I2C
  97:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief Inter Integrated Circuit(IIC) driver for the XMC microcontroller family. 
  98:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  99:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * USIC IIC Features: <br>
 100:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *  * Two-wire interface, with one line for shift clock transfer and synchronization (shift clock S
 101:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Communication in standard mode (100 kBit/s) or in fast mode (up to 400 kBit/s) <br>
 102:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Support of 7-bit addressing, as well as 10-bit addressing <br>
 103:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Master mode operation, where the IIC controls the bus transactions and provides the clock sign
 104:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Slave mode operation, where an external master controls the bus transactions and provides the 
 105:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Multi-master mode operation, where several masters can be connected to the bus and bus arbitra
 106:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 	  The master/slave operation of an IIC bus participant can change from frame to frame. <br>
 107:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Efficient frame handling (low software effort), also allowing DMA transfers <br>
 108:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Powerful interrupt handling due to multitude of indication flags <br>
 109:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @{
 110:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 111:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 112:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 113:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * MACROS
 114:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 115:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 116:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** #if defined(USIC0)
 117:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C0_CH0 XMC_USIC0_CH0                   /**< USIC0 channel 0 base address */
 118:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C0_CH1 XMC_USIC0_CH1                   /**< USIC0 channel 1 base address */
 119:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 120:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 121:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** #if defined(USIC1)
 122:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C1_CH0 XMC_USIC1_CH0                   /**< USIC1 channel 0 base address */
 123:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C1_CH1 XMC_USIC1_CH1                   /**< USIC1 channel 1 base address */
 124:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 125:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 126:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** #if defined(USIC2)
 127:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C2_CH0 XMC_USIC2_CH0                   /**< USIC2 channel 0 base address */
 128:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C2_CH1 XMC_USIC2_CH1                   /**< USIC2 channel 1 base address */
 129:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 130:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 131:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C_10BIT_ADDR_GROUP       (0x7800U)	 /**< Value to verify the address is 10-bit or not
 132:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 133:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 134:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * ENUMS
 135:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 136:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 137:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 138:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C Status
 139:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 140:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_STATUS
 141:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_OK,      /**< Status OK */
 143:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_ERROR,   /**< Status ERROR */
 144:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_BUSY     /**< Status BUSY */
 145:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_STATUS_t;
 146:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 147:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 148:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C status
 149:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 150:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_STATUS_FLAG
 151:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 152:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_SLAVE_SELECT = USIC_CH_PSR_IICMode_SLSEL_Msk,                     /**< Sla
 153:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND = USIC_CH_PSR_IICMode_WTDF_Msk,              /**< Wro
 154:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED = USIC_CH_PSR_IICMode_SCR_Msk,           /**< Sta
 155:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED = USIC_CH_PSR_IICMode_RSCR_Msk, /**< Rep
 156:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED = USIC_CH_PSR_IICMode_PCR_Msk,            /**< Sto
 157:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED = USIC_CH_PSR_IICMode_NACK_Msk,                     /**< NAC
 158:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST = USIC_CH_PSR_IICMode_ARL_Msk,                   /**< Arb
 159:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_SLAVE_READ_REQUESTED = USIC_CH_PSR_IICMode_SRR_Msk,               /**< Sla
 160:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ERROR = USIC_CH_PSR_IICMode_ERR_Msk,                              /**< Err
 161:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED = USIC_CH_PSR_IICMode_ACK_Msk,                       /**< ACK
 162:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_RECEIVER_START_INDICATION = USIC_CH_PSR_IICMode_RSIF_Msk,         /**< Rec
 163:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_DATA_LOST_INDICATION = USIC_CH_PSR_IICMode_DLIF_Msk,              /**< Dat
 164:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION = USIC_CH_PSR_IICMode_TSIF_Msk,         /**< Tra
 165:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION = USIC_CH_PSR_IICMode_TBIF_Msk,        /**< Tra
 166:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION = USIC_CH_PSR_IICMode_RIF_Msk,                 /**< Rec
 167:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION = USIC_CH_PSR_IICMode_AIF_Msk,     /**< Alt
 168:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_BAUD_RATE_GENERATOR_INDICATION = USIC_CH_PSR_IICMode_BRGIF_Msk    /**< Bau
 169:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_STATUS_FLAG_t;
 170:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 171:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 172:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C receiver status. The received data byte is available at the bit
 173:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * positions RBUF[7:0], whereas the additional information is monitored at the bit positions
 174:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** *  RBUF[12:8].
 175:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 176:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_RECEIVER_STATUS_FLAG
 177:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 178:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_ACK = 0x1U,      /**< Bit 8:  Value of Received Acknowledgement b
 179:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_FIN = 0x2U,      /**< Bit 9:  A 1 at this bit position indicates 
 180:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 followed by the address reception t
 181:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 been received. A 0 at this bit posi
 182:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_MODE = 0x4U,     /**< Bit 10: A 0 at this bit position indicates 
 183:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 when the device has been in slave m
 184:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_ERR = 0x8U,      /**< Bit 11: A 1 at this bit position indicates 
 185:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 data byte in the receive buffer */
 186:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_ADR = 0x10       /**< Bit 12: A 0 at this bit position indicates 
 187:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 has been received. A 1 indicates a 
 188:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_RECEIVER_STATUS_FLAG_t;
 189:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 190:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 191:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C commands
 192:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 193:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_CMD
 194:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 195:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_CMD_WRITE,                            /**< I2C Command Write */
 196:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_CMD_READ                              /**< I2C Command Read */
 197:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_CMD_t;
 198:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 199:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 200:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C events
 201:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 202:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_EVENT
 203:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 204:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk,  /**< Receive start event */
 205:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk,  /**< Data lost event */
 206:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk,  /**< Transmit shift event */
 207:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk,  /**< Transmit buffer event */
 208:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,   /**< Receive event */
 209:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,   /**< Alternate receive event */
 210:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk, /**< Baudrate generator event */
 211:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 212:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_START_CONDITION_RECEIVED = USIC_CH_PCR_IICMode_SCRIEN_Msk,             /**< Star
 213:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_REPEATED_START_CONDITION_RECEIVED = USIC_CH_PCR_IICMode_RSCRIEN_Msk,   /**< Repe
 214:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_STOP_CONDITION_RECEIVED = USIC_CH_PCR_IICMode_PCRIEN_Msk,              /**< Stop
 215:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_NACK = USIC_CH_PCR_IICMode_NACKIEN_Msk,                                /**< NACK
 216:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ARBITRATION_LOST = USIC_CH_PCR_IICMode_ARLIEN_Msk,                     /**< Arbi
 217:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_SLAVE_READ_REQUEST = USIC_CH_PCR_IICMode_SRRIEN_Msk,                   /**< Slav
 218:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ERROR = USIC_CH_PCR_IICMode_ERRIEN_Msk,	                              /**< Error
 219:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ACK = USIC_CH_PCR_IICMode_ACKIEN_Msk                                   /**< ACK 
 220:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_EVENT_t;
 221:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 222:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 223:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C input stage selection
 224:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 225:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_INPUT
 226:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 227:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SDA = 0U,   /**< selection of sda input stage */
 228:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** #if UC_FAMILY == XMC1
 229:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SDA1 = 3U,
 230:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SDA2 = 5U,
 231:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** #endif  
 232:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SCL = 1U,  /**< selection of scl input stage */
 233:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** #if UC_FAMILY == XMC1
 234:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SCL1 = 4U
 235:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** #endif  
 236:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_INPUT_t;
 237:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 238:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 239:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * I2C channel interrupt node pointers
 240:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 241:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_INTERRUPT_NODE_POINTER
 242:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 243:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 244:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 245:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_RECEIVE             = XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIV
 246:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERN
 247:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOC
 248:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_INTERRUPT_NODE_POINTER_t;
 249:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 250:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 251:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * DATA STRUCTURES
 252:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 253:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 254:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C_CH configuration structure
 255:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 256:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** typedef struct XMC_I2C_CH_CONFIG
 257:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 258:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   uint32_t baudrate;   /**< baud rate configuration upto max of 400KHz */
 259:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   uint16_t address;    /**< slave address 
 260:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****                             A 7-bit address needs to be left shifted it by 1.
 261:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****                             A 10-bit address needs to be ORed with XMC_I2C_10BIT_ADDR_GROUP. */
 262:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_CONFIG_t;
 263:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 264:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 265:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * API PROTOTYPES
 266:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 267:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 268:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** #ifdef __cplusplus
 269:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** extern "C" {
 270:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 271:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 272:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 273:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 274:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param config  Constant pointer to I2C channel config structure of type @ref XMC_I2C_CH_CONFIG_t
 275:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 276:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 277:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 278:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 279:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Initializes the I2C \a channel.<br>
 280:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 281:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 282:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Configures the data format in SCTR register. Sets the slave address, baud rate. Enables transmit
 283:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * and disables parity generation.<br>
 284:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 285:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 286:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_Enable()\n\n
 287:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 288:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 289:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config);
 290:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 291:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 292:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 293:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param rate  baud rate of I2C channel
 294:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 295:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 296:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 297:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 298:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the rate of I2C \a channel.
 299:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 300:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Note:</b><br>
 301:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Standard over sampling is considered if rate <= 100KHz and fast over sampling is considered if r
 302:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 303:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 304:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetBaudrate()\n\n
 305:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 306:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, const uint32_t rate);
 307:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 308:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 309:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 310:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 311:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 312:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 313:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 314:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Starts the I2C \a channel.
 315:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 316:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 317:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the USIC input operation mode to I2C mode using CCR register.
 318:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 319:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 320:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetMode()\n\n
 321:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 322:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
 323:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 445              	 .loc 4 323 0
 446              	 .cfi_startproc
 447 0000 80B5     	 push {r7,lr}
 448              	.LCFI21:
 449              	 .cfi_def_cfa_offset 8
 450              	 .cfi_offset 7,-8
 451              	 .cfi_offset 14,-4
 452 0002 82B0     	 sub sp,sp,#8
 453              	.LCFI22:
 454              	 .cfi_def_cfa_offset 16
 455 0004 00AF     	 add r7,sp,#0
 456              	.LCFI23:
 457              	 .cfi_def_cfa_register 7
 458 0006 7860     	 str r0,[r7,#4]
 324:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 459              	 .loc 4 324 0
 460 0008 7B68     	 ldr r3,[r7,#4]
 461 000a 181C     	 mov r0,r3
 462 000c 0421     	 mov r1,#4
 463 000e FFF7FEFF 	 bl XMC_USIC_CH_SetMode
 325:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** }
 464              	 .loc 4 325 0
 465 0012 BD46     	 mov sp,r7
 466 0014 02B0     	 add sp,sp,#8
 467              	 
 468 0016 80BD     	 pop {r7,pc}
 469              	 .cfi_endproc
 470              	.LFE182:
 472              	 .section .text.XMC_I2C_CH_SetInputSource,"ax",%progbits
 473              	 .align 2
 474              	 .code 16
 475              	 .thumb_func
 477              	XMC_I2C_CH_SetInputSource:
 478              	.LFB186:
 326:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 327:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 328:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 329:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 330:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return @ref XMC_I2C_CH_STATUS_t<br>
 331:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 332:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 333:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Stops the I2C \a channel.<br>
 334:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 335:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 336:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the USIC input operation to IDLE mode using CCR register.
 337:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 338:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 339:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetMode()\n\n
 340:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 341:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_Stop(XMC_USIC_CH_t *const channel);
 342:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 343:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 344:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 345:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param service_request Service request number in the range of 0-5
 346:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 347:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 348:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 349:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the interrupt node for protocol interrupt.<br>
 350:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 351:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 352:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * To generate interrupt for an event, node pointer should be configured with service request numbe
 353:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
 354:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 355:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Note:</b><br>
 356:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * NVIC node should be separately enabled to generate the interrupt. After setting the node pointer
 357:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 358:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 359:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 360:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 361:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
 362:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****                                                         const uint8_t service_request)
 363:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 364:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service
 365:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** }
 366:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 367:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 368:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 369:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 370:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 				  \b Range: @ref XMC_I2C0_CH0, @ref XMC_I2C0_CH1,@ref XMC_I2C1_CH0,@ref XMC_I2C1_CH1,@ref XM
 371:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
 372:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 						  \b Range: @ref XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
 373:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 						  			@ref XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
 374:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param service_request Service request number.\n
 375:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 						  \b Range: 0 to 5.
 376:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None
 377:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 378:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description</b><br>
 379:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the interrupt node for USIC channel events. \n\n
 380:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
 381:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
 382:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
 383:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 384:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><BR>
 385:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_EnableEvent() \n\n\n
 386:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 387:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_SelectInterruptNodePointer(XMC_USIC_CH_t *const channel,
 388:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****                                                            const XMC_I2C_CH_INTERRUPT_NODE_POINTER_
 389:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****                                                            const uint32_t service_request)
 390:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 391:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, (XMC_USIC_CH_INTERRUPT_NODE_POINTER_t)interrupt_node
 392:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 		                                       (uint32_t)service_request);
 393:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** }
 394:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 395:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 396:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 397:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 				   \b Range: @ref XMC_I2C0_CH0, @ref XMC_I2C0_CH1,@ref XMC_I2C1_CH0,@ref XMC_I2C1_CH1,@ref X
 398:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param  service_request_line service request number of the event to be triggered. \n
 399:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 			\b Range: 0 to 5.
 400:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None
 401:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 402:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description</b><br>
 403:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Trigger a I2C interrupt service request.\n\n
 404:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * When the I2C service request is triggered, the NVIC interrupt associated with it will be
 405:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * generated if enabled.
 406:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 407:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><BR>
 408:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_SelectInterruptNodePointer() \n\n\n
 409:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 410:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t 
 411:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 412:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_TriggerServiceRequest(channel, (uint32_t)service_request_line);
 413:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** }
 414:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 415:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 416:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 417:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param input I2C channel input stage of type @ref XMC_I2C_CH_INPUT_t
 418:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param source Input source select for the input stage(0->DX0A, 1->DX1A, .. 7->DX7G)
 419:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 420:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 421:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 422:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the input source for I2C \a channel.<br>
 423:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Defines the input stage for the corresponding input line.
 424:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 425:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note After configuring the input source for corresponding channel, interrupt node pointer is se
 426:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 427:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 428:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetInptSource(), XMC_USIC_CH_SetInterruptNodePointer()
 429:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 430:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 431:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_INPUT
 432:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 479              	 .loc 4 432 0
 480              	 .cfi_startproc
 481 0000 80B5     	 push {r7,lr}
 482              	.LCFI24:
 483              	 .cfi_def_cfa_offset 8
 484              	 .cfi_offset 7,-8
 485              	 .cfi_offset 14,-4
 486 0002 82B0     	 sub sp,sp,#8
 487              	.LCFI25:
 488              	 .cfi_def_cfa_offset 16
 489 0004 00AF     	 add r7,sp,#0
 490              	.LCFI26:
 491              	 .cfi_def_cfa_register 7
 492 0006 7860     	 str r0,[r7,#4]
 493 0008 081C     	 mov r0,r1
 494 000a 111C     	 mov r1,r2
 495 000c FB1C     	 add r3,r7,#3
 496 000e 021C     	 add r2,r0,#0
 497 0010 1A70     	 strb r2,[r3]
 498 0012 BB1C     	 add r3,r7,#2
 499 0014 0A1C     	 add r2,r1,#0
 500 0016 1A70     	 strb r2,[r3]
 433:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   channel->DXCR[input] =  (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_INSW_Msk)) | USIC_CH_DX
 501              	 .loc 4 433 0
 502 0018 FB1C     	 add r3,r7,#3
 503 001a 1878     	 ldrb r0,[r3]
 504 001c FB1C     	 add r3,r7,#3
 505 001e 1B78     	 ldrb r3,[r3]
 506 0020 7A68     	 ldr r2,[r7,#4]
 507 0022 0633     	 add r3,r3,#6
 508 0024 9B00     	 lsl r3,r3,#2
 509 0026 D318     	 add r3,r2,r3
 510 0028 5B68     	 ldr r3,[r3,#4]
 511 002a 5022     	 mov r2,#80
 512 002c 9343     	 bic r3,r2
 513 002e 4022     	 mov r2,#64
 514 0030 1A43     	 orr r2,r3
 515 0032 7968     	 ldr r1,[r7,#4]
 516 0034 831D     	 add r3,r0,#6
 517 0036 9B00     	 lsl r3,r3,#2
 518 0038 CB18     	 add r3,r1,r3
 519 003a 5A60     	 str r2,[r3,#4]
 434:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 520              	 .loc 4 434 0
 521 003c 7968     	 ldr r1,[r7,#4]
 522 003e FB1C     	 add r3,r7,#3
 523 0040 1A78     	 ldrb r2,[r3]
 524 0042 BB1C     	 add r3,r7,#2
 525 0044 1B78     	 ldrb r3,[r3]
 526 0046 081C     	 mov r0,r1
 527 0048 111C     	 mov r1,r2
 528 004a 1A1C     	 mov r2,r3
 529 004c FFF7FEFF 	 bl XMC_USIC_CH_SetInputSource
 435:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** }
 530              	 .loc 4 435 0
 531 0050 BD46     	 mov sp,r7
 532 0052 02B0     	 add sp,sp,#8
 533              	 
 534 0054 80BD     	 pop {r7,pc}
 535              	 .cfi_endproc
 536              	.LFE186:
 538 0056 C046     	 .section .text.XMC_I2C_CH_GetStatusFlag,"ax",%progbits
 539              	 .align 2
 540              	 .code 16
 541              	 .thumb_func
 543              	XMC_I2C_CH_GetStatusFlag:
 544              	.LFB188:
 436:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 437:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 438:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 439:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param address I2C slave address
 440:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 441:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 442:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 443:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the I2C \a channel slave address.<br>
 444:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 445:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 446:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Address is set in PCR_IICMode register by checking if it is in 10-bit address group or 7-bit add
 447:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * (If first five bits of address are assigned with 0xF0, then address mode is 10-bit mode otherwis
 448:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note A 7-bit address should include an additional bit at the LSB for read/write indication. For
 449:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * be provided as 0x0a. A 10-bit address should be provided with the identifier 0b11110xx at the mo
 450:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * address 0x305 should be provided as 0x7b05(bitwise OR with 0x7800).
 451:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 452:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 453:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_GetSlaveAddress()\n\n
 454:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 455:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address);
 456:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 457:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 458:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel handler of type @ref XMC_USIC_CH_t
 459:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return uint16_t Slave address<br>
 460:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 461:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 462:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Gets the I2C \a channel slave address.<br>
 463:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 464:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 465:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Returns the address using PCR_IICMode register by checking if it is in 10-bit address group or 7
 466:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * (If first five bits of address are assigned with 0xF0, then address mode is considered as 10-bit
 467:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note A 7-bit address will include an additional bit at the LSB. For example, address 0x05 will 
 468:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * 10-bit address will not include the 10-bit address identifier 0b11110xx at the most signifcant b
 469:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 470:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 471:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_SetSlaveAddress()\n\n
 472:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 473:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** uint16_t XMC_I2C_CH_GetSlaveAddress(const XMC_USIC_CH_t *const channel);
 474:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 475:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 476:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 477:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param addr I2C master address
 478:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param command read/write command
 479:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 480:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 481:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 482:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Starts the I2C master \a channel.<br>
 483:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 484:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 485:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the Start condition with read/write command by updating IN/TBUF register based on FIFO/non
 486:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note Address(addr) should reserve an additional bit at the LSB for read/write indication. For e
 487:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 488:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 489:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * followed by 1-bit field for read/write).
 490:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 491:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 492:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit(), XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 493:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 494:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD
 495:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 496:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 497:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 498:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param addr I2C master address
 499:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param command read/write command
 500:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 501:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 502:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 503:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the repeated start condition from I2C master \a channel.<br>
 504:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 505:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 506:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the repeated start condition with read/write command by updating IN/TBUF register based on
 507:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note Address(addr) should reserve an additional bit at the LSB for read/write indication. For e
 508:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 509:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 510:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * followed by 1-bit field for read/write).
 511:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 512:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 513:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit(), XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 514:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 515:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2
 516:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 517:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 518:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 519:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 520:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 521:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 522:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Stops the I2C master \a channel.<br>
 523:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 524:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 525:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on F
 526:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 527:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 528:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit(), XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 529:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 530:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel);
 531:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 532:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 533:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 534:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param data data to transmit from I2C \a channel
 535:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 536:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 537:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 538:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Transmit the data from the I2C master \a channel.<br>
 539:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 540:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 541:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FI
 542:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 543:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 544:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 545:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 546:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data);
 547:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 548:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 549:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 550:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param data data to transmit from I2C \a channel
 551:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 552:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 553:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 554:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Transmit the data from the I2C slave \a channel.<br>
 555:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 556:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 557:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FI
 558:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 559:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 560:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(),XMC_I2C_CH_ClearStatusFlag()\n\n
 561:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 562:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_SlaveTransmit(XMC_USIC_CH_t *const channel, const uint8_t data);
 563:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 564:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 565:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 566:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 567:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 568:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 569:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the Ack request from I2C master \a channel.<br>
 570:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 571:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 572:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FIF
 573:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 574:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 575:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 576:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 577:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel);
 578:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 579:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 580:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 581:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 582:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 583:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 584:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the Nack request from I2C master \a channel.<br>
 585:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 586:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 587:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FI
 588:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 589:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 590:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 591:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 592:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel);
 593:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 594:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 595:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 596:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return uint8_t OUTR/RBUF register data<br>
 597:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 598:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 599:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Reads the data from I2C \a channel.<br>
 600:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 601:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 602:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Data is read by using OUTR/RBUF register based on FIFO/non-FIFO modes.
 603:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 604:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 605:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 606:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 607:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel);
 608:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 609:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 610:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 611:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return uint8_t Receiver status flag<br>
 612:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 613:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 614:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Gets the receiver status of I2C \a channel using RBUF register of bits 8-12 which gives informat
 615:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 616:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 617:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 618:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 619:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE uint8_t XMC_I2C_CH_GetReceiverStatusFlag(XMC_USIC_CH_t *const channel)
 620:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 621:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   return((uint8_t)((channel->RBUF) >> 8U));
 622:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** }
 623:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 624:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 625:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 626:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param event ORed values of @ref XMC_I2C_CH_EVENT_t enum
 627:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 628:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 629:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 630:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Enables the input parameter @ref XMC_I2C_CH_EVENT_t event using PCR_IICMode register.
 631:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 632:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 633:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_DisableEvent()\n\n
 634:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 635:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, uint32_t event);
 636:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 637:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 638:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 639:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param event ORed values of @ref XMC_I2C_CH_EVENT_t enum
 640:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 641:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 642:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 643:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Disables the input parameter @ref XMC_I2C_CH_EVENT_t event using PCR_IICMode register.
 644:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 645:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 646:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_EnableEvent()\n\n
 647:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 648:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, uint32_t event);
 649:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 650:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 651:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 652:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return uint32_t Status byte<br>
 653:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 654:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 655:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Retrieves the status byte of I2C \a channel using PSR_IICMode register.\n
 656:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 657:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 658:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_ClearStatusFlag()\n\n
 659:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 660:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
 661:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 545              	 .loc 4 661 0
 546              	 .cfi_startproc
 547 0000 80B5     	 push {r7,lr}
 548              	.LCFI27:
 549              	 .cfi_def_cfa_offset 8
 550              	 .cfi_offset 7,-8
 551              	 .cfi_offset 14,-4
 552 0002 82B0     	 sub sp,sp,#8
 553              	.LCFI28:
 554              	 .cfi_def_cfa_offset 16
 555 0004 00AF     	 add r7,sp,#0
 556              	.LCFI29:
 557              	 .cfi_def_cfa_register 7
 558 0006 7860     	 str r0,[r7,#4]
 662:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   return (channel->PSR_IICMode);
 559              	 .loc 4 662 0
 560 0008 7B68     	 ldr r3,[r7,#4]
 561 000a 9B6C     	 ldr r3,[r3,#72]
 663:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** }
 562              	 .loc 4 663 0
 563 000c 181C     	 mov r0,r3
 564 000e BD46     	 mov sp,r7
 565 0010 02B0     	 add sp,sp,#8
 566              	 
 567 0012 80BD     	 pop {r7,pc}
 568              	 .cfi_endproc
 569              	.LFE188:
 571              	 .section .text.XMC_I2C_CH_ClearStatusFlag,"ax",%progbits
 572              	 .align 2
 573              	 .code 16
 574              	 .thumb_func
 576              	XMC_I2C_CH_ClearStatusFlag:
 577              	.LFB189:
 664:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** 
 665:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 666:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 667:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param flag Status flag
 668:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 669:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 670:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 671:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * Clears the status flag of I2C \a channel by setting the input parameter \a flag in PSCR register
 672:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 673:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 674:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_GetStatusFlag()\n\n
 675:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 676:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
 677:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** {
 578              	 .loc 4 677 0
 579              	 .cfi_startproc
 580 0000 80B5     	 push {r7,lr}
 581              	.LCFI30:
 582              	 .cfi_def_cfa_offset 8
 583              	 .cfi_offset 7,-8
 584              	 .cfi_offset 14,-4
 585 0002 82B0     	 sub sp,sp,#8
 586              	.LCFI31:
 587              	 .cfi_def_cfa_offset 16
 588 0004 00AF     	 add r7,sp,#0
 589              	.LCFI32:
 590              	 .cfi_def_cfa_register 7
 591 0006 7860     	 str r0,[r7,#4]
 592 0008 3960     	 str r1,[r7]
 678:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h ****   channel->PSCR |= flag;
 593              	 .loc 4 678 0
 594 000a 7B68     	 ldr r3,[r7,#4]
 595 000c DA6C     	 ldr r2,[r3,#76]
 596 000e 3B68     	 ldr r3,[r7]
 597 0010 1A43     	 orr r2,r3
 598 0012 7B68     	 ldr r3,[r7,#4]
 599 0014 DA64     	 str r2,[r3,#76]
 679:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_i2c.h **** }
 600              	 .loc 4 679 0
 601 0016 BD46     	 mov sp,r7
 602 0018 02B0     	 add sp,sp,#8
 603              	 
 604 001a 80BD     	 pop {r7,pc}
 605              	 .cfi_endproc
 606              	.LFE189:
 608              	 .comm button_config,8,4
 609              	 .comm led_config,8,4
 610              	 .comm dipswitch_config,8,4
 611              	 .comm gpio_config,8,4
 612              	 .comm iic_config,8,4
 613              	 .comm eru1_etl2_config,8,4
 614              	 .comm eru1_ogu3_config,4,4
 615              	 .comm eru0_etl2_config,8,4
 616              	 .comm eru0_ogu2_config,4,4
 617              	 .comm rtc_sda_config,8,4
 618              	 .comm rtc_scl_config,8,4
 619              	 .comm eru_io_config,8,4
 620              	 .comm eru_mfp_config,8,4
 621              	 .section .text.INFO_StartButtonInit,"ax",%progbits
 622              	 .align 2
 623              	 .global INFO_StartButtonInit
 624              	 .code 16
 625              	 .thumb_func
 627              	INFO_StartButtonInit:
 628              	.LFB221:
 629              	 .file 5 "../DeviceObject/infotainment/info_operation.c"
   1:../DeviceObject/infotainment/info_operation.c **** /*
   2:../DeviceObject/infotainment/info_operation.c ****  * info_operation.c
   3:../DeviceObject/infotainment/info_operation.c ****  *
   4:../DeviceObject/infotainment/info_operation.c ****  *  Created on: Jun 26, 2020
   5:../DeviceObject/infotainment/info_operation.c ****  *      Author: lenovo
   6:../DeviceObject/infotainment/info_operation.c ****  */
   7:../DeviceObject/infotainment/info_operation.c **** 
   8:../DeviceObject/infotainment/info_operation.c **** #include "info_operation.h"
   9:../DeviceObject/infotainment/info_operation.c **** 
  10:../DeviceObject/infotainment/info_operation.c **** /* Initialization */
  11:../DeviceObject/infotainment/info_operation.c **** void INFO_StartButtonInit(void)
  12:../DeviceObject/infotainment/info_operation.c **** {
 630              	 .loc 5 12 0
 631              	 .cfi_startproc
 632 0000 80B5     	 push {r7,lr}
 633              	.LCFI33:
 634              	 .cfi_def_cfa_offset 8
 635              	 .cfi_offset 7,-8
 636              	 .cfi_offset 14,-4
 637 0002 00AF     	 add r7,sp,#0
 638              	.LCFI34:
 639              	 .cfi_def_cfa_register 7
  13:../DeviceObject/infotainment/info_operation.c **** 	XMC_GPIO_Init(P2_2,&button_config);
 640              	 .loc 5 13 0
 641 0004 044A     	 ldr r2,.L22
 642 0006 054B     	 ldr r3,.L22+4
 643 0008 101C     	 mov r0,r2
 644 000a 0221     	 mov r1,#2
 645 000c 1A1C     	 mov r2,r3
 646 000e FFF7FEFF 	 bl XMC_GPIO_Init
  14:../DeviceObject/infotainment/info_operation.c **** }
 647              	 .loc 5 14 0
 648 0012 BD46     	 mov sp,r7
 649              	 
 650 0014 80BD     	 pop {r7,pc}
 651              	.L23:
 652 0016 C046     	 .align 2
 653              	.L22:
 654 0018 00020440 	 .word 1074004480
 655 001c 00000000 	 .word button_config
 656              	 .cfi_endproc
 657              	.LFE221:
 659              	 .section .text.INFO_ResetButtonInit,"ax",%progbits
 660              	 .align 2
 661              	 .global INFO_ResetButtonInit
 662              	 .code 16
 663              	 .thumb_func
 665              	INFO_ResetButtonInit:
 666              	.LFB222:
  15:../DeviceObject/infotainment/info_operation.c **** void INFO_ResetButtonInit(void)
  16:../DeviceObject/infotainment/info_operation.c **** {
 667              	 .loc 5 16 0
 668              	 .cfi_startproc
 669 0000 80B5     	 push {r7,lr}
 670              	.LCFI35:
 671              	 .cfi_def_cfa_offset 8
 672              	 .cfi_offset 7,-8
 673              	 .cfi_offset 14,-4
 674 0002 00AF     	 add r7,sp,#0
 675              	.LCFI36:
 676              	 .cfi_def_cfa_register 7
  17:../DeviceObject/infotainment/info_operation.c **** 	XMC_GPIO_Init(P2_10, &eru_io_config);
 677              	 .loc 5 17 0
 678 0004 114A     	 ldr r2,.L25
 679 0006 124B     	 ldr r3,.L25+4
 680 0008 101C     	 mov r0,r2
 681 000a 0A21     	 mov r1,#10
 682 000c 1A1C     	 mov r2,r3
 683 000e FFF7FEFF 	 bl XMC_GPIO_Init
  18:../DeviceObject/infotainment/info_operation.c **** 
  19:../DeviceObject/infotainment/info_operation.c **** 	/* ETL and OGU Configuration */
  20:../DeviceObject/infotainment/info_operation.c **** 	XMC_ERU_ETL_Init(ERU0_ETL2, &eru0_etl2_config);
 684              	 .loc 5 20 0
 685 0012 104A     	 ldr r2,.L25+8
 686 0014 104B     	 ldr r3,.L25+12
 687 0016 101C     	 mov r0,r2
 688 0018 0221     	 mov r1,#2
 689 001a 1A1C     	 mov r2,r3
 690 001c FFF7FEFF 	 bl XMC_ERU_ETL_Init
  21:../DeviceObject/infotainment/info_operation.c **** 	XMC_ERU_OGU_Init(ERU0_OGU2, &eru0_ogu2_config);
 691              	 .loc 5 21 0
 692 0020 0C4A     	 ldr r2,.L25+8
 693 0022 0E4B     	 ldr r3,.L25+16
 694 0024 101C     	 mov r0,r2
 695 0026 0221     	 mov r1,#2
 696 0028 1A1C     	 mov r2,r3
 697 002a FFF7FEFF 	 bl XMC_ERU_OGU_Init
  22:../DeviceObject/infotainment/info_operation.c **** 
  23:../DeviceObject/infotainment/info_operation.c **** 	XMC_SCU_SetInterruptControl(IRQ11_IRQn, XMC_SCU_IRQCTRL_ERU0_SR2_IRQ11);
 698              	 .loc 5 23 0
 699 002e 0C4B     	 ldr r3,.L25+20
 700 0030 0B20     	 mov r0,#11
 701 0032 191C     	 mov r1,r3
 702 0034 FFF7FEFF 	 bl XMC_SCU_SetInterruptControl
  24:../DeviceObject/infotainment/info_operation.c **** 	NVIC_SetPriority(IRQ11_IRQn, 4U);
 703              	 .loc 5 24 0
 704 0038 0B20     	 mov r0,#11
 705 003a 0421     	 mov r1,#4
 706 003c FFF7FEFF 	 bl __NVIC_SetPriority
  25:../DeviceObject/infotainment/info_operation.c **** 	NVIC_EnableIRQ(IRQ11_IRQn);
 707              	 .loc 5 25 0
 708 0040 0B20     	 mov r0,#11
 709 0042 FFF7FEFF 	 bl __NVIC_EnableIRQ
  26:../DeviceObject/infotainment/info_operation.c **** }
 710              	 .loc 5 26 0
 711 0046 BD46     	 mov sp,r7
 712              	 
 713 0048 80BD     	 pop {r7,pc}
 714              	.L26:
 715 004a C046     	 .align 2
 716              	.L25:
 717 004c 00020440 	 .word 1074004480
 718 0050 00000000 	 .word eru_io_config
 719 0054 00060140 	 .word 1073808896
 720 0058 00000000 	 .word eru0_etl2_config
 721 005c 00000000 	 .word eru0_ogu2_config
 722 0060 020B0000 	 .word 2818
 723              	 .cfi_endproc
 724              	.LFE222:
 726              	 .section .text.INFO_LEDInit,"ax",%progbits
 727              	 .align 2
 728              	 .global INFO_LEDInit
 729              	 .code 16
 730              	 .thumb_func
 732              	INFO_LEDInit:
 733              	.LFB223:
  27:../DeviceObject/infotainment/info_operation.c **** void INFO_LEDInit(void)
  28:../DeviceObject/infotainment/info_operation.c **** {
 734              	 .loc 5 28 0
 735              	 .cfi_startproc
 736 0000 80B5     	 push {r7,lr}
 737              	.LCFI37:
 738              	 .cfi_def_cfa_offset 8
 739              	 .cfi_offset 7,-8
 740              	 .cfi_offset 14,-4
 741 0002 00AF     	 add r7,sp,#0
 742              	.LCFI38:
 743              	 .cfi_def_cfa_register 7
  29:../DeviceObject/infotainment/info_operation.c **** 	XMC_GPIO_Init(P2_11,&led_config);
 744              	 .loc 5 29 0
 745 0004 144A     	 ldr r2,.L28
 746 0006 154B     	 ldr r3,.L28+4
 747 0008 101C     	 mov r0,r2
 748 000a 0B21     	 mov r1,#11
 749 000c 1A1C     	 mov r2,r3
 750 000e FFF7FEFF 	 bl XMC_GPIO_Init
  30:../DeviceObject/infotainment/info_operation.c **** 	XMC_GPIO_Init(P2_12,&led_config);
 751              	 .loc 5 30 0
 752 0012 114A     	 ldr r2,.L28
 753 0014 114B     	 ldr r3,.L28+4
 754 0016 101C     	 mov r0,r2
 755 0018 0C21     	 mov r1,#12
 756 001a 1A1C     	 mov r2,r3
 757 001c FFF7FEFF 	 bl XMC_GPIO_Init
  31:../DeviceObject/infotainment/info_operation.c **** 	XMC_GPIO_Init(P2_13,&led_config);
 758              	 .loc 5 31 0
 759 0020 0D4A     	 ldr r2,.L28
 760 0022 0E4B     	 ldr r3,.L28+4
 761 0024 101C     	 mov r0,r2
 762 0026 0D21     	 mov r1,#13
 763 0028 1A1C     	 mov r2,r3
 764 002a FFF7FEFF 	 bl XMC_GPIO_Init
  32:../DeviceObject/infotainment/info_operation.c **** 
  33:../DeviceObject/infotainment/info_operation.c **** 	XMC_GPIO_SetOutputLevel(P2_11, XMC_GPIO_OUTPUT_LEVEL_HIGH);
 765              	 .loc 5 33 0
 766 002e 0A4B     	 ldr r3,.L28
 767 0030 181C     	 mov r0,r3
 768 0032 0B21     	 mov r1,#11
 769 0034 0122     	 mov r2,#1
 770 0036 FFF7FEFF 	 bl XMC_GPIO_SetOutputLevel
  34:../DeviceObject/infotainment/info_operation.c **** 	XMC_GPIO_SetOutputLevel(P2_12, XMC_GPIO_OUTPUT_LEVEL_HIGH);
 771              	 .loc 5 34 0
 772 003a 074B     	 ldr r3,.L28
 773 003c 181C     	 mov r0,r3
 774 003e 0C21     	 mov r1,#12
 775 0040 0122     	 mov r2,#1
 776 0042 FFF7FEFF 	 bl XMC_GPIO_SetOutputLevel
  35:../DeviceObject/infotainment/info_operation.c **** 	XMC_GPIO_SetOutputLevel(P2_13, XMC_GPIO_OUTPUT_LEVEL_HIGH);
 777              	 .loc 5 35 0
 778 0046 044B     	 ldr r3,.L28
 779 0048 181C     	 mov r0,r3
 780 004a 0D21     	 mov r1,#13
 781 004c 0122     	 mov r2,#1
 782 004e FFF7FEFF 	 bl XMC_GPIO_SetOutputLevel
  36:../DeviceObject/infotainment/info_operation.c **** }
 783              	 .loc 5 36 0
 784 0052 BD46     	 mov sp,r7
 785              	 
 786 0054 80BD     	 pop {r7,pc}
 787              	.L29:
 788 0056 C046     	 .align 2
 789              	.L28:
 790 0058 00020440 	 .word 1074004480
 791 005c 00000000 	 .word led_config
 792              	 .cfi_endproc
 793              	.LFE223:
 795              	 .section .text.INFO_GPIOInit,"ax",%progbits
 796              	 .align 2
 797              	 .global INFO_GPIOInit
 798              	 .code 16
 799              	 .thumb_func
 801              	INFO_GPIOInit:
 802              	.LFB224:
  37:../DeviceObject/infotainment/info_operation.c **** void INFO_GPIOInit(void)
  38:../DeviceObject/infotainment/info_operation.c **** {
 803              	 .loc 5 38 0
 804              	 .cfi_startproc
 805 0000 80B5     	 push {r7,lr}
 806              	.LCFI39:
 807              	 .cfi_def_cfa_offset 8
 808              	 .cfi_offset 7,-8
 809              	 .cfi_offset 14,-4
 810 0002 00AF     	 add r7,sp,#0
 811              	.LCFI40:
 812              	 .cfi_def_cfa_register 7
  39:../DeviceObject/infotainment/info_operation.c **** 	XMC_GPIO_Init(P4_8,&gpio_config);
 813              	 .loc 5 39 0
 814 0004 124A     	 ldr r2,.L31
 815 0006 134B     	 ldr r3,.L31+4
 816 0008 101C     	 mov r0,r2
 817 000a 0821     	 mov r1,#8
 818 000c 1A1C     	 mov r2,r3
 819 000e FFF7FEFF 	 bl XMC_GPIO_Init
  40:../DeviceObject/infotainment/info_operation.c **** 	XMC_GPIO_Init(P4_9,&gpio_config);
 820              	 .loc 5 40 0
 821 0012 0F4A     	 ldr r2,.L31
 822 0014 0F4B     	 ldr r3,.L31+4
 823 0016 101C     	 mov r0,r2
 824 0018 0921     	 mov r1,#9
 825 001a 1A1C     	 mov r2,r3
 826 001c FFF7FEFF 	 bl XMC_GPIO_Init
  41:../DeviceObject/infotainment/info_operation.c **** 	XMC_GPIO_Init(P4_10,&gpio_config);
 827              	 .loc 5 41 0
 828 0020 0B4A     	 ldr r2,.L31
 829 0022 0C4B     	 ldr r3,.L31+4
 830 0024 101C     	 mov r0,r2
 831 0026 0A21     	 mov r1,#10
 832 0028 1A1C     	 mov r2,r3
 833 002a FFF7FEFF 	 bl XMC_GPIO_Init
  42:../DeviceObject/infotainment/info_operation.c **** 	XMC_GPIO_Init(P4_11,&gpio_config);
 834              	 .loc 5 42 0
 835 002e 084A     	 ldr r2,.L31
 836 0030 084B     	 ldr r3,.L31+4
 837 0032 101C     	 mov r0,r2
 838 0034 0B21     	 mov r1,#11
 839 0036 1A1C     	 mov r2,r3
 840 0038 FFF7FEFF 	 bl XMC_GPIO_Init
  43:../DeviceObject/infotainment/info_operation.c **** 
  44:../DeviceObject/infotainment/info_operation.c **** 	XMC_GPIO_SetOutputLevel(P4_11, XMC_GPIO_OUTPUT_LEVEL_LOW);
 841              	 .loc 5 44 0
 842 003c 044A     	 ldr r2,.L31
 843 003e 8023     	 mov r3,#128
 844 0040 5B02     	 lsl r3,r3,#9
 845 0042 101C     	 mov r0,r2
 846 0044 0B21     	 mov r1,#11
 847 0046 1A1C     	 mov r2,r3
 848 0048 FFF7FEFF 	 bl XMC_GPIO_SetOutputLevel
  45:../DeviceObject/infotainment/info_operation.c **** }
 849              	 .loc 5 45 0
 850 004c BD46     	 mov sp,r7
 851              	 
 852 004e 80BD     	 pop {r7,pc}
 853              	.L32:
 854              	 .align 2
 855              	.L31:
 856 0050 00040440 	 .word 1074004992
 857 0054 00000000 	 .word gpio_config
 858              	 .cfi_endproc
 859              	.LFE224:
 861              	 .section .text.INFO_ModeSelectorInit,"ax",%progbits
 862              	 .align 2
 863              	 .global INFO_ModeSelectorInit
 864              	 .code 16
 865              	 .thumb_func
 867              	INFO_ModeSelectorInit:
 868              	.LFB225:
  46:../DeviceObject/infotainment/info_operation.c **** void INFO_ModeSelectorInit(void)
  47:../DeviceObject/infotainment/info_operation.c **** {
 869              	 .loc 5 47 0
 870              	 .cfi_startproc
 871 0000 80B5     	 push {r7,lr}
 872              	.LCFI41:
 873              	 .cfi_def_cfa_offset 8
 874              	 .cfi_offset 7,-8
 875              	 .cfi_offset 14,-4
 876 0002 00AF     	 add r7,sp,#0
 877              	.LCFI42:
 878              	 .cfi_def_cfa_register 7
  48:../DeviceObject/infotainment/info_operation.c **** 	XMC_GPIO_Init(P4_2,&dipswitch_config);
 879              	 .loc 5 48 0
 880 0004 0E4A     	 ldr r2,.L34
 881 0006 0F4B     	 ldr r3,.L34+4
 882 0008 101C     	 mov r0,r2
 883 000a 0221     	 mov r1,#2
 884 000c 1A1C     	 mov r2,r3
 885 000e FFF7FEFF 	 bl XMC_GPIO_Init
  49:../DeviceObject/infotainment/info_operation.c **** 	XMC_GPIO_Init(P4_3,&dipswitch_config);
 886              	 .loc 5 49 0
 887 0012 0B4A     	 ldr r2,.L34
 888 0014 0B4B     	 ldr r3,.L34+4
 889 0016 101C     	 mov r0,r2
 890 0018 0321     	 mov r1,#3
 891 001a 1A1C     	 mov r2,r3
 892 001c FFF7FEFF 	 bl XMC_GPIO_Init
  50:../DeviceObject/infotainment/info_operation.c **** 	XMC_GPIO_Init(P4_4,&dipswitch_config);
 893              	 .loc 5 50 0
 894 0020 074A     	 ldr r2,.L34
 895 0022 084B     	 ldr r3,.L34+4
 896 0024 101C     	 mov r0,r2
 897 0026 0421     	 mov r1,#4
 898 0028 1A1C     	 mov r2,r3
 899 002a FFF7FEFF 	 bl XMC_GPIO_Init
  51:../DeviceObject/infotainment/info_operation.c **** 	XMC_GPIO_Init(P4_5,&dipswitch_config);
 900              	 .loc 5 51 0
 901 002e 044A     	 ldr r2,.L34
 902 0030 044B     	 ldr r3,.L34+4
 903 0032 101C     	 mov r0,r2
 904 0034 0521     	 mov r1,#5
 905 0036 1A1C     	 mov r2,r3
 906 0038 FFF7FEFF 	 bl XMC_GPIO_Init
  52:../DeviceObject/infotainment/info_operation.c **** }
 907              	 .loc 5 52 0
 908 003c BD46     	 mov sp,r7
 909              	 
 910 003e 80BD     	 pop {r7,pc}
 911              	.L35:
 912              	 .align 2
 913              	.L34:
 914 0040 00040440 	 .word 1074004992
 915 0044 00000000 	 .word dipswitch_config
 916              	 .cfi_endproc
 917              	.LFE225:
 919              	 .section .text.INFO_RTCEEPROMInit,"ax",%progbits
 920              	 .align 2
 921              	 .global INFO_RTCEEPROMInit
 922              	 .code 16
 923              	 .thumb_func
 925              	INFO_RTCEEPROMInit:
 926              	.LFB226:
  53:../DeviceObject/infotainment/info_operation.c **** void INFO_RTCEEPROMInit(void)
  54:../DeviceObject/infotainment/info_operation.c **** {
 927              	 .loc 5 54 0
 928              	 .cfi_startproc
 929 0000 80B5     	 push {r7,lr}
 930              	.LCFI43:
 931              	 .cfi_def_cfa_offset 8
 932              	 .cfi_offset 7,-8
 933              	 .cfi_offset 14,-4
 934 0002 00AF     	 add r7,sp,#0
 935              	.LCFI44:
 936              	 .cfi_def_cfa_register 7
  55:../DeviceObject/infotainment/info_operation.c **** 	XMC_GPIO_Init(P3_2, &eru_io_config);
 937              	 .loc 5 55 0
 938 0004 234A     	 ldr r2,.L37
 939 0006 244B     	 ldr r3,.L37+4
 940 0008 101C     	 mov r0,r2
 941 000a 0221     	 mov r1,#2
 942 000c 1A1C     	 mov r2,r3
 943 000e FFF7FEFF 	 bl XMC_GPIO_Init
  56:../DeviceObject/infotainment/info_operation.c **** 
  57:../DeviceObject/infotainment/info_operation.c **** 	/* ETL and OGU Configuration for RTC MFP Configuration */
  58:../DeviceObject/infotainment/info_operation.c **** 	XMC_ERU_ETL_Init(ERU1_ETL2, &eru1_etl2_config);
 944              	 .loc 5 58 0
 945 0012 224A     	 ldr r2,.L37+8
 946 0014 224B     	 ldr r3,.L37+12
 947 0016 101C     	 mov r0,r2
 948 0018 0221     	 mov r1,#2
 949 001a 1A1C     	 mov r2,r3
 950 001c FFF7FEFF 	 bl XMC_ERU_ETL_Init
  59:../DeviceObject/infotainment/info_operation.c **** 	XMC_ERU_OGU_Init(ERU1_OGU3, &eru1_ogu3_config);
 951              	 .loc 5 59 0
 952 0020 1E4A     	 ldr r2,.L37+8
 953 0022 204B     	 ldr r3,.L37+16
 954 0024 101C     	 mov r0,r2
 955 0026 0321     	 mov r1,#3
 956 0028 1A1C     	 mov r2,r3
 957 002a FFF7FEFF 	 bl XMC_ERU_OGU_Init
  60:../DeviceObject/infotainment/info_operation.c **** 
  61:../DeviceObject/infotainment/info_operation.c **** 	XMC_SCU_SetInterruptControl(IRQ6_IRQn, XMC_SCU_IRQCTRL_ERU1_SR3_IRQ6);
 958              	 .loc 5 61 0
 959 002e 1E4B     	 ldr r3,.L37+20
 960 0030 0620     	 mov r0,#6
 961 0032 191C     	 mov r1,r3
 962 0034 FFF7FEFF 	 bl XMC_SCU_SetInterruptControl
  62:../DeviceObject/infotainment/info_operation.c **** 	NVIC_SetPriority(IRQ6_IRQn, 8U);
 963              	 .loc 5 62 0
 964 0038 0620     	 mov r0,#6
 965 003a 0821     	 mov r1,#8
 966 003c FFF7FEFF 	 bl __NVIC_SetPriority
  63:../DeviceObject/infotainment/info_operation.c **** 	NVIC_EnableIRQ(IRQ6_IRQn);
 967              	 .loc 5 63 0
 968 0040 0620     	 mov r0,#6
 969 0042 FFF7FEFF 	 bl __NVIC_EnableIRQ
  64:../DeviceObject/infotainment/info_operation.c **** 
  65:../DeviceObject/infotainment/info_operation.c **** 	/* Configure IIC channel */
  66:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_Init(XMC_USIC1_CH1, &iic_config);
 970              	 .loc 5 66 0
 971 0046 194A     	 ldr r2,.L37+24
 972 0048 194B     	 ldr r3,.L37+28
 973 004a 101C     	 mov r0,r2
 974 004c 191C     	 mov r1,r3
 975 004e FFF7FEFF 	 bl XMC_I2C_CH_Init
  67:../DeviceObject/infotainment/info_operation.c **** 	/* Configure input multiplexors */
  68:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_SetInputSource(XMC_USIC1_CH1, XMC_I2C_CH_INPUT_SDA, USIC1_C1_DX0_P0_0);
 976              	 .loc 5 68 0
 977 0052 164B     	 ldr r3,.L37+24
 978 0054 181C     	 mov r0,r3
 979 0056 0021     	 mov r1,#0
 980 0058 0022     	 mov r2,#0
 981 005a FFF7FEFF 	 bl XMC_I2C_CH_SetInputSource
  69:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_SetInputSource(XMC_USIC1_CH1, XMC_I2C_CH_INPUT_SCL, USIC1_C1_DX1_P0_1);
 982              	 .loc 5 69 0
 983 005e 134B     	 ldr r3,.L37+24
 984 0060 181C     	 mov r0,r3
 985 0062 0121     	 mov r1,#1
 986 0064 0022     	 mov r2,#0
 987 0066 FFF7FEFF 	 bl XMC_I2C_CH_SetInputSource
  70:../DeviceObject/infotainment/info_operation.c **** 
  71:../DeviceObject/infotainment/info_operation.c **** 	/* Initialize GPIO */
  72:../DeviceObject/infotainment/info_operation.c **** 	XMC_GPIO_Init(P0_0, &rtc_sda_config);
 988              	 .loc 5 72 0
 989 006a 124A     	 ldr r2,.L37+32
 990 006c 124B     	 ldr r3,.L37+36
 991 006e 101C     	 mov r0,r2
 992 0070 0021     	 mov r1,#0
 993 0072 1A1C     	 mov r2,r3
 994 0074 FFF7FEFF 	 bl XMC_GPIO_Init
  73:../DeviceObject/infotainment/info_operation.c **** 	XMC_GPIO_Init(P0_1, &rtc_scl_config);
 995              	 .loc 5 73 0
 996 0078 0E4A     	 ldr r2,.L37+32
 997 007a 104B     	 ldr r3,.L37+40
 998 007c 101C     	 mov r0,r2
 999 007e 0121     	 mov r1,#1
 1000 0080 1A1C     	 mov r2,r3
 1001 0082 FFF7FEFF 	 bl XMC_GPIO_Init
  74:../DeviceObject/infotainment/info_operation.c **** 
  75:../DeviceObject/infotainment/info_operation.c **** 	/* Start IIC channel */
  76:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_Start(XMC_USIC1_CH1);
 1002              	 .loc 5 76 0
 1003 0086 094B     	 ldr r3,.L37+24
 1004 0088 181C     	 mov r0,r3
 1005 008a FFF7FEFF 	 bl XMC_I2C_CH_Start
  77:../DeviceObject/infotainment/info_operation.c **** }
 1006              	 .loc 5 77 0
 1007 008e BD46     	 mov sp,r7
 1008              	 
 1009 0090 80BD     	 pop {r7,pc}
 1010              	.L38:
 1011 0092 C046     	 .align 2
 1012              	.L37:
 1013 0094 00030440 	 .word 1074004736
 1014 0098 00000000 	 .word eru_io_config
 1015 009c 30060140 	 .word 1073808944
 1016 00a0 00000000 	 .word eru1_etl2_config
 1017 00a4 00000000 	 .word eru1_ogu3_config
 1018 00a8 01060000 	 .word 1537
 1019 00ac 00420048 	 .word 1207976448
 1020 00b0 00000000 	 .word iic_config
 1021 00b4 00000440 	 .word 1074003968
 1022 00b8 00000000 	 .word rtc_sda_config
 1023 00bc 00000000 	 .word rtc_scl_config
 1024              	 .cfi_endproc
 1025              	.LFE226:
 1027              	 .section .text.INFO_LEDSwitch,"ax",%progbits
 1028              	 .align 2
 1029              	 .global INFO_LEDSwitch
 1030              	 .code 16
 1031              	 .thumb_func
 1033              	INFO_LEDSwitch:
 1034              	.LFB227:
  78:../DeviceObject/infotainment/info_operation.c **** 
  79:../DeviceObject/infotainment/info_operation.c **** /* LED Method */
  80:../DeviceObject/infotainment/info_operation.c **** void INFO_LEDSwitch(LED_NAME_t led_name, LED_STATUS_t status)
  81:../DeviceObject/infotainment/info_operation.c **** {
 1035              	 .loc 5 81 0
 1036              	 .cfi_startproc
 1037 0000 80B5     	 push {r7,lr}
 1038              	.LCFI45:
 1039              	 .cfi_def_cfa_offset 8
 1040              	 .cfi_offset 7,-8
 1041              	 .cfi_offset 14,-4
 1042 0002 82B0     	 sub sp,sp,#8
 1043              	.LCFI46:
 1044              	 .cfi_def_cfa_offset 16
 1045 0004 00AF     	 add r7,sp,#0
 1046              	.LCFI47:
 1047              	 .cfi_def_cfa_register 7
 1048 0006 021C     	 mov r2,r0
 1049 0008 FB1D     	 add r3,r7,#7
 1050 000a 1A70     	 strb r2,[r3]
 1051 000c BB1D     	 add r3,r7,#6
 1052 000e 0A1C     	 add r2,r1,#0
 1053 0010 1A70     	 strb r2,[r3]
  82:../DeviceObject/infotainment/info_operation.c **** 	// active low IO
  83:../DeviceObject/infotainment/info_operation.c **** 	switch(led_name)
 1054              	 .loc 5 83 0
 1055 0012 FB1D     	 add r3,r7,#7
 1056 0014 1B78     	 ldrb r3,[r3]
 1057 0016 012B     	 cmp r3,#1
 1058 0018 18D0     	 beq .L41
 1059 001a 022B     	 cmp r3,#2
 1060 001c 2AD0     	 beq .L42
 1061 001e 002B     	 cmp r3,#0
 1062 0020 00D0     	 beq .L43
  84:../DeviceObject/infotainment/info_operation.c **** 	{
  85:../DeviceObject/infotainment/info_operation.c **** 		case LED0   : status?(XMC_GPIO_SetOutputLevel(P2_11, XMC_GPIO_OUTPUT_LEVEL_LOW)):\
  86:../DeviceObject/infotainment/info_operation.c **** 							 (XMC_GPIO_SetOutputLevel(P2_11, XMC_GPIO_OUTPUT_LEVEL_HIGH));
  87:../DeviceObject/infotainment/info_operation.c **** 						  	  break;
  88:../DeviceObject/infotainment/info_operation.c **** 		case LED1 	: status?(XMC_GPIO_SetOutputLevel(P2_12, XMC_GPIO_OUTPUT_LEVEL_LOW)):\
  89:../DeviceObject/infotainment/info_operation.c **** 							 (XMC_GPIO_SetOutputLevel(P2_12, XMC_GPIO_OUTPUT_LEVEL_HIGH));
  90:../DeviceObject/infotainment/info_operation.c **** 							  break;
  91:../DeviceObject/infotainment/info_operation.c **** 		case LED2 	: status?(XMC_GPIO_SetOutputLevel(P2_13, XMC_GPIO_OUTPUT_LEVEL_LOW)):\
  92:../DeviceObject/infotainment/info_operation.c **** 							 (XMC_GPIO_SetOutputLevel(P2_13, XMC_GPIO_OUTPUT_LEVEL_HIGH));
  93:../DeviceObject/infotainment/info_operation.c **** 							  break;
  94:../DeviceObject/infotainment/info_operation.c **** 		default				: break;
 1063              	 .loc 5 94 0
 1064 0022 3BE0     	 b .L39
 1065              	.L43:
  85:../DeviceObject/infotainment/info_operation.c **** 							 (XMC_GPIO_SetOutputLevel(P2_11, XMC_GPIO_OUTPUT_LEVEL_HIGH));
 1066              	 .loc 5 85 0
 1067 0024 BB1D     	 add r3,r7,#6
 1068 0026 1B78     	 ldrb r3,[r3]
 1069 0028 002B     	 cmp r3,#0
 1070 002a 08D0     	 beq .L44
  85:../DeviceObject/infotainment/info_operation.c **** 							 (XMC_GPIO_SetOutputLevel(P2_11, XMC_GPIO_OUTPUT_LEVEL_HIGH));
 1071              	 .loc 5 85 0 is_stmt 0 discriminator 1
 1072 002c 1D4A     	 ldr r2,.L52
 1073 002e 8023     	 mov r3,#128
 1074 0030 5B02     	 lsl r3,r3,#9
 1075 0032 101C     	 mov r0,r2
 1076 0034 0B21     	 mov r1,#11
 1077 0036 1A1C     	 mov r2,r3
 1078 0038 FFF7FEFF 	 bl XMC_GPIO_SetOutputLevel
  87:../DeviceObject/infotainment/info_operation.c **** 		case LED1 	: status?(XMC_GPIO_SetOutputLevel(P2_12, XMC_GPIO_OUTPUT_LEVEL_LOW)):\
 1079              	 .loc 5 87 0 is_stmt 1 discriminator 1
 1080 003c 2EE0     	 b .L39
 1081              	.L44:
  86:../DeviceObject/infotainment/info_operation.c **** 						  	  break;
 1082              	 .loc 5 86 0
 1083 003e 194B     	 ldr r3,.L52
 1084 0040 181C     	 mov r0,r3
 1085 0042 0B21     	 mov r1,#11
 1086 0044 0122     	 mov r2,#1
 1087 0046 FFF7FEFF 	 bl XMC_GPIO_SetOutputLevel
  87:../DeviceObject/infotainment/info_operation.c **** 		case LED1 	: status?(XMC_GPIO_SetOutputLevel(P2_12, XMC_GPIO_OUTPUT_LEVEL_LOW)):\
 1088              	 .loc 5 87 0
 1089 004a 27E0     	 b .L39
 1090              	.L41:
  88:../DeviceObject/infotainment/info_operation.c **** 							 (XMC_GPIO_SetOutputLevel(P2_12, XMC_GPIO_OUTPUT_LEVEL_HIGH));
 1091              	 .loc 5 88 0
 1092 004c BB1D     	 add r3,r7,#6
 1093 004e 1B78     	 ldrb r3,[r3]
 1094 0050 002B     	 cmp r3,#0
 1095 0052 08D0     	 beq .L47
  88:../DeviceObject/infotainment/info_operation.c **** 							 (XMC_GPIO_SetOutputLevel(P2_12, XMC_GPIO_OUTPUT_LEVEL_HIGH));
 1096              	 .loc 5 88 0 is_stmt 0 discriminator 1
 1097 0054 134A     	 ldr r2,.L52
 1098 0056 8023     	 mov r3,#128
 1099 0058 5B02     	 lsl r3,r3,#9
 1100 005a 101C     	 mov r0,r2
 1101 005c 0C21     	 mov r1,#12
 1102 005e 1A1C     	 mov r2,r3
 1103 0060 FFF7FEFF 	 bl XMC_GPIO_SetOutputLevel
  90:../DeviceObject/infotainment/info_operation.c **** 		case LED2 	: status?(XMC_GPIO_SetOutputLevel(P2_13, XMC_GPIO_OUTPUT_LEVEL_LOW)):\
 1104              	 .loc 5 90 0 is_stmt 1 discriminator 1
 1105 0064 1AE0     	 b .L39
 1106              	.L47:
  89:../DeviceObject/infotainment/info_operation.c **** 							  break;
 1107              	 .loc 5 89 0
 1108 0066 0F4B     	 ldr r3,.L52
 1109 0068 181C     	 mov r0,r3
 1110 006a 0C21     	 mov r1,#12
 1111 006c 0122     	 mov r2,#1
 1112 006e FFF7FEFF 	 bl XMC_GPIO_SetOutputLevel
  90:../DeviceObject/infotainment/info_operation.c **** 		case LED2 	: status?(XMC_GPIO_SetOutputLevel(P2_13, XMC_GPIO_OUTPUT_LEVEL_LOW)):\
 1113              	 .loc 5 90 0
 1114 0072 13E0     	 b .L39
 1115              	.L42:
  91:../DeviceObject/infotainment/info_operation.c **** 							 (XMC_GPIO_SetOutputLevel(P2_13, XMC_GPIO_OUTPUT_LEVEL_HIGH));
 1116              	 .loc 5 91 0
 1117 0074 BB1D     	 add r3,r7,#6
 1118 0076 1B78     	 ldrb r3,[r3]
 1119 0078 002B     	 cmp r3,#0
 1120 007a 08D0     	 beq .L49
  91:../DeviceObject/infotainment/info_operation.c **** 							 (XMC_GPIO_SetOutputLevel(P2_13, XMC_GPIO_OUTPUT_LEVEL_HIGH));
 1121              	 .loc 5 91 0 is_stmt 0 discriminator 1
 1122 007c 094A     	 ldr r2,.L52
 1123 007e 8023     	 mov r3,#128
 1124 0080 5B02     	 lsl r3,r3,#9
 1125 0082 101C     	 mov r0,r2
 1126 0084 0D21     	 mov r1,#13
 1127 0086 1A1C     	 mov r2,r3
 1128 0088 FFF7FEFF 	 bl XMC_GPIO_SetOutputLevel
  93:../DeviceObject/infotainment/info_operation.c **** 		default				: break;
 1129              	 .loc 5 93 0 is_stmt 1 discriminator 1
 1130 008c 05E0     	 b .L51
 1131              	.L49:
  92:../DeviceObject/infotainment/info_operation.c **** 							  break;
 1132              	 .loc 5 92 0
 1133 008e 054B     	 ldr r3,.L52
 1134 0090 181C     	 mov r0,r3
 1135 0092 0D21     	 mov r1,#13
 1136 0094 0122     	 mov r2,#1
 1137 0096 FFF7FEFF 	 bl XMC_GPIO_SetOutputLevel
 1138              	.L51:
  93:../DeviceObject/infotainment/info_operation.c **** 		default				: break;
 1139              	 .loc 5 93 0
 1140 009a C046     	 mov r8,r8
 1141              	.L39:
  95:../DeviceObject/infotainment/info_operation.c **** 	}
  96:../DeviceObject/infotainment/info_operation.c **** }
 1142              	 .loc 5 96 0
 1143 009c BD46     	 mov sp,r7
 1144 009e 02B0     	 add sp,sp,#8
 1145              	 
 1146 00a0 80BD     	 pop {r7,pc}
 1147              	.L53:
 1148 00a2 C046     	 .align 2
 1149              	.L52:
 1150 00a4 00020440 	 .word 1074004480
 1151              	 .cfi_endproc
 1152              	.LFE227:
 1154              	 .section .text.INFO_ModeSelectorGetStatus,"ax",%progbits
 1155              	 .align 2
 1156              	 .global INFO_ModeSelectorGetStatus
 1157              	 .code 16
 1158              	 .thumb_func
 1160              	INFO_ModeSelectorGetStatus:
 1161              	.LFB228:
  97:../DeviceObject/infotainment/info_operation.c **** 
  98:../DeviceObject/infotainment/info_operation.c **** /* Mode Selector Methods */
  99:../DeviceObject/infotainment/info_operation.c **** uint8_t INFO_ModeSelectorGetStatus(void)
 100:../DeviceObject/infotainment/info_operation.c **** {
 1162              	 .loc 5 100 0
 1163              	 .cfi_startproc
 1164 0000 90B5     	 push {r4,r7,lr}
 1165              	.LCFI48:
 1166              	 .cfi_def_cfa_offset 12
 1167              	 .cfi_offset 4,-12
 1168              	 .cfi_offset 7,-8
 1169              	 .cfi_offset 14,-4
 1170 0002 83B0     	 sub sp,sp,#12
 1171              	.LCFI49:
 1172              	 .cfi_def_cfa_offset 24
 1173 0004 00AF     	 add r7,sp,#0
 1174              	.LCFI50:
 1175              	 .cfi_def_cfa_register 7
 101:../DeviceObject/infotainment/info_operation.c **** 	uint8_t status;
 102:../DeviceObject/infotainment/info_operation.c **** 	status = XMC_GPIO_GetInput(P4_5);
 1176              	 .loc 5 102 0
 1177 0006 1C4B     	 ldr r3,.L56
 1178 0008 181C     	 mov r0,r3
 1179 000a 0521     	 mov r1,#5
 1180 000c FFF7FEFF 	 bl XMC_GPIO_GetInput
 1181 0010 021C     	 mov r2,r0
 1182 0012 FB1D     	 add r3,r7,#7
 1183 0014 1A70     	 strb r2,[r3]
 103:../DeviceObject/infotainment/info_operation.c **** 	status = (status << 1) | XMC_GPIO_GetInput(P4_4);
 1184              	 .loc 5 103 0
 1185 0016 FB1D     	 add r3,r7,#7
 1186 0018 1B78     	 ldrb r3,[r3]
 1187 001a DB18     	 add r3,r3,r3
 1188 001c DCB2     	 uxtb r4,r3
 1189 001e 164B     	 ldr r3,.L56
 1190 0020 181C     	 mov r0,r3
 1191 0022 0421     	 mov r1,#4
 1192 0024 FFF7FEFF 	 bl XMC_GPIO_GetInput
 1193 0028 031C     	 mov r3,r0
 1194 002a DAB2     	 uxtb r2,r3
 1195 002c FB1D     	 add r3,r7,#7
 1196 002e 2243     	 orr r2,r4
 1197 0030 1A70     	 strb r2,[r3]
 104:../DeviceObject/infotainment/info_operation.c **** 	status = (status << 1) | XMC_GPIO_GetInput(P4_3);
 1198              	 .loc 5 104 0
 1199 0032 FB1D     	 add r3,r7,#7
 1200 0034 1B78     	 ldrb r3,[r3]
 1201 0036 DB18     	 add r3,r3,r3
 1202 0038 DCB2     	 uxtb r4,r3
 1203 003a 0F4B     	 ldr r3,.L56
 1204 003c 181C     	 mov r0,r3
 1205 003e 0321     	 mov r1,#3
 1206 0040 FFF7FEFF 	 bl XMC_GPIO_GetInput
 1207 0044 031C     	 mov r3,r0
 1208 0046 DAB2     	 uxtb r2,r3
 1209 0048 FB1D     	 add r3,r7,#7
 1210 004a 2243     	 orr r2,r4
 1211 004c 1A70     	 strb r2,[r3]
 105:../DeviceObject/infotainment/info_operation.c **** 	status = (status << 1) | XMC_GPIO_GetInput(P4_2);
 1212              	 .loc 5 105 0
 1213 004e FB1D     	 add r3,r7,#7
 1214 0050 1B78     	 ldrb r3,[r3]
 1215 0052 DB18     	 add r3,r3,r3
 1216 0054 DCB2     	 uxtb r4,r3
 1217 0056 084B     	 ldr r3,.L56
 1218 0058 181C     	 mov r0,r3
 1219 005a 0221     	 mov r1,#2
 1220 005c FFF7FEFF 	 bl XMC_GPIO_GetInput
 1221 0060 031C     	 mov r3,r0
 1222 0062 DAB2     	 uxtb r2,r3
 1223 0064 FB1D     	 add r3,r7,#7
 1224 0066 2243     	 orr r2,r4
 1225 0068 1A70     	 strb r2,[r3]
 106:../DeviceObject/infotainment/info_operation.c **** 
 107:../DeviceObject/infotainment/info_operation.c **** 	return status;
 1226              	 .loc 5 107 0
 1227 006a FB1D     	 add r3,r7,#7
 1228 006c 1B78     	 ldrb r3,[r3]
 108:../DeviceObject/infotainment/info_operation.c **** }
 1229              	 .loc 5 108 0
 1230 006e 181C     	 mov r0,r3
 1231 0070 BD46     	 mov sp,r7
 1232 0072 03B0     	 add sp,sp,#12
 1233              	 
 1234 0074 90BD     	 pop {r4,r7,pc}
 1235              	.L57:
 1236 0076 C046     	 .align 2
 1237              	.L56:
 1238 0078 00040440 	 .word 1074004992
 1239              	 .cfi_endproc
 1240              	.LFE228:
 1242              	 .section .text.INFO_GPIOSet,"ax",%progbits
 1243              	 .align 2
 1244              	 .global INFO_GPIOSet
 1245              	 .code 16
 1246              	 .thumb_func
 1248              	INFO_GPIOSet:
 1249              	.LFB229:
 109:../DeviceObject/infotainment/info_operation.c **** 
 110:../DeviceObject/infotainment/info_operation.c **** /* GPIO Methods */
 111:../DeviceObject/infotainment/info_operation.c **** void INFO_GPIOSet(GPIO_NAME_t gpio_name, GPIO_STATUS_t status)
 112:../DeviceObject/infotainment/info_operation.c **** {
 1250              	 .loc 5 112 0
 1251              	 .cfi_startproc
 1252 0000 80B5     	 push {r7,lr}
 1253              	.LCFI51:
 1254              	 .cfi_def_cfa_offset 8
 1255              	 .cfi_offset 7,-8
 1256              	 .cfi_offset 14,-4
 1257 0002 82B0     	 sub sp,sp,#8
 1258              	.LCFI52:
 1259              	 .cfi_def_cfa_offset 16
 1260 0004 00AF     	 add r7,sp,#0
 1261              	.LCFI53:
 1262              	 .cfi_def_cfa_register 7
 1263 0006 021C     	 mov r2,r0
 1264 0008 FB1D     	 add r3,r7,#7
 1265 000a 1A70     	 strb r2,[r3]
 1266 000c BB1D     	 add r3,r7,#6
 1267 000e 0A1C     	 add r2,r1,#0
 1268 0010 1A70     	 strb r2,[r3]
 113:../DeviceObject/infotainment/info_operation.c **** 	// active high IO
 114:../DeviceObject/infotainment/info_operation.c **** 	switch(gpio_name)
 1269              	 .loc 5 114 0
 1270 0012 FB1D     	 add r3,r7,#7
 1271 0014 1B78     	 ldrb r3,[r3]
 1272 0016 012B     	 cmp r3,#1
 1273 0018 1CD0     	 beq .L60
 1274 001a 02DC     	 bgt .L61
 1275 001c 002B     	 cmp r3,#0
 1276 001e 05D0     	 beq .L62
 115:../DeviceObject/infotainment/info_operation.c **** 	{
 116:../DeviceObject/infotainment/info_operation.c **** 		case GPIO0   : status?(XMC_GPIO_SetOutputLevel(P4_8, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
 117:../DeviceObject/infotainment/info_operation.c **** 							  (XMC_GPIO_SetOutputLevel(P4_8, XMC_GPIO_OUTPUT_LEVEL_LOW));
 118:../DeviceObject/infotainment/info_operation.c **** 						  	  break;
 119:../DeviceObject/infotainment/info_operation.c **** 		case GPIO1   : status?(XMC_GPIO_SetOutputLevel(P4_9, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
 120:../DeviceObject/infotainment/info_operation.c **** 							  (XMC_GPIO_SetOutputLevel(P4_9, XMC_GPIO_OUTPUT_LEVEL_LOW));
 121:../DeviceObject/infotainment/info_operation.c **** 						  	  break;
 122:../DeviceObject/infotainment/info_operation.c **** 		case GPIO2   : status?(XMC_GPIO_SetOutputLevel(P4_10, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
 123:../DeviceObject/infotainment/info_operation.c **** 							  (XMC_GPIO_SetOutputLevel(P4_10, XMC_GPIO_OUTPUT_LEVEL_LOW));
 124:../DeviceObject/infotainment/info_operation.c **** 						  	  break;
 125:../DeviceObject/infotainment/info_operation.c **** 		case GPIO3   : status?(XMC_GPIO_SetOutputLevel(P4_11, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
 126:../DeviceObject/infotainment/info_operation.c **** 							  (XMC_GPIO_SetOutputLevel(P4_11, XMC_GPIO_OUTPUT_LEVEL_LOW));
 127:../DeviceObject/infotainment/info_operation.c **** 						  	  break;
 128:../DeviceObject/infotainment/info_operation.c **** 		default				: break;
 1277              	 .loc 5 128 0
 1278 0020 54E0     	 b .L58
 1279              	.L61:
 114:../DeviceObject/infotainment/info_operation.c **** 	{
 1280              	 .loc 5 114 0
 1281 0022 022B     	 cmp r3,#2
 1282 0024 2AD0     	 beq .L63
 1283 0026 032B     	 cmp r3,#3
 1284 0028 3CD0     	 beq .L64
 1285              	 .loc 5 128 0
 1286 002a 4FE0     	 b .L58
 1287              	.L62:
 116:../DeviceObject/infotainment/info_operation.c **** 							  (XMC_GPIO_SetOutputLevel(P4_8, XMC_GPIO_OUTPUT_LEVEL_LOW));
 1288              	 .loc 5 116 0
 1289 002c BB1D     	 add r3,r7,#6
 1290 002e 1B78     	 ldrb r3,[r3]
 1291 0030 002B     	 cmp r3,#0
 1292 0032 06D0     	 beq .L65
 116:../DeviceObject/infotainment/info_operation.c **** 							  (XMC_GPIO_SetOutputLevel(P4_8, XMC_GPIO_OUTPUT_LEVEL_LOW));
 1293              	 .loc 5 116 0 is_stmt 0 discriminator 1
 1294 0034 274B     	 ldr r3,.L75
 1295 0036 181C     	 mov r0,r3
 1296 0038 0821     	 mov r1,#8
 1297 003a 0122     	 mov r2,#1
 1298 003c FFF7FEFF 	 bl XMC_GPIO_SetOutputLevel
 118:../DeviceObject/infotainment/info_operation.c **** 		case GPIO1   : status?(XMC_GPIO_SetOutputLevel(P4_9, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
 1299              	 .loc 5 118 0 is_stmt 1 discriminator 1
 1300 0040 44E0     	 b .L58
 1301              	.L65:
 117:../DeviceObject/infotainment/info_operation.c **** 						  	  break;
 1302              	 .loc 5 117 0
 1303 0042 244A     	 ldr r2,.L75
 1304 0044 8023     	 mov r3,#128
 1305 0046 5B02     	 lsl r3,r3,#9
 1306 0048 101C     	 mov r0,r2
 1307 004a 0821     	 mov r1,#8
 1308 004c 1A1C     	 mov r2,r3
 1309 004e FFF7FEFF 	 bl XMC_GPIO_SetOutputLevel
 118:../DeviceObject/infotainment/info_operation.c **** 		case GPIO1   : status?(XMC_GPIO_SetOutputLevel(P4_9, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
 1310              	 .loc 5 118 0
 1311 0052 3BE0     	 b .L58
 1312              	.L60:
 119:../DeviceObject/infotainment/info_operation.c **** 							  (XMC_GPIO_SetOutputLevel(P4_9, XMC_GPIO_OUTPUT_LEVEL_LOW));
 1313              	 .loc 5 119 0
 1314 0054 BB1D     	 add r3,r7,#6
 1315 0056 1B78     	 ldrb r3,[r3]
 1316 0058 002B     	 cmp r3,#0
 1317 005a 06D0     	 beq .L68
 119:../DeviceObject/infotainment/info_operation.c **** 							  (XMC_GPIO_SetOutputLevel(P4_9, XMC_GPIO_OUTPUT_LEVEL_LOW));
 1318              	 .loc 5 119 0 is_stmt 0 discriminator 1
 1319 005c 1D4B     	 ldr r3,.L75
 1320 005e 181C     	 mov r0,r3
 1321 0060 0921     	 mov r1,#9
 1322 0062 0122     	 mov r2,#1
 1323 0064 FFF7FEFF 	 bl XMC_GPIO_SetOutputLevel
 121:../DeviceObject/infotainment/info_operation.c **** 		case GPIO2   : status?(XMC_GPIO_SetOutputLevel(P4_10, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
 1324              	 .loc 5 121 0 is_stmt 1 discriminator 1
 1325 0068 30E0     	 b .L58
 1326              	.L68:
 120:../DeviceObject/infotainment/info_operation.c **** 						  	  break;
 1327              	 .loc 5 120 0
 1328 006a 1A4A     	 ldr r2,.L75
 1329 006c 8023     	 mov r3,#128
 1330 006e 5B02     	 lsl r3,r3,#9
 1331 0070 101C     	 mov r0,r2
 1332 0072 0921     	 mov r1,#9
 1333 0074 1A1C     	 mov r2,r3
 1334 0076 FFF7FEFF 	 bl XMC_GPIO_SetOutputLevel
 121:../DeviceObject/infotainment/info_operation.c **** 		case GPIO2   : status?(XMC_GPIO_SetOutputLevel(P4_10, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
 1335              	 .loc 5 121 0
 1336 007a 27E0     	 b .L58
 1337              	.L63:
 122:../DeviceObject/infotainment/info_operation.c **** 							  (XMC_GPIO_SetOutputLevel(P4_10, XMC_GPIO_OUTPUT_LEVEL_LOW));
 1338              	 .loc 5 122 0
 1339 007c BB1D     	 add r3,r7,#6
 1340 007e 1B78     	 ldrb r3,[r3]
 1341 0080 002B     	 cmp r3,#0
 1342 0082 06D0     	 beq .L70
 122:../DeviceObject/infotainment/info_operation.c **** 							  (XMC_GPIO_SetOutputLevel(P4_10, XMC_GPIO_OUTPUT_LEVEL_LOW));
 1343              	 .loc 5 122 0 is_stmt 0 discriminator 1
 1344 0084 134B     	 ldr r3,.L75
 1345 0086 181C     	 mov r0,r3
 1346 0088 0A21     	 mov r1,#10
 1347 008a 0122     	 mov r2,#1
 1348 008c FFF7FEFF 	 bl XMC_GPIO_SetOutputLevel
 124:../DeviceObject/infotainment/info_operation.c **** 		case GPIO3   : status?(XMC_GPIO_SetOutputLevel(P4_11, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
 1349              	 .loc 5 124 0 is_stmt 1 discriminator 1
 1350 0090 1CE0     	 b .L58
 1351              	.L70:
 123:../DeviceObject/infotainment/info_operation.c **** 						  	  break;
 1352              	 .loc 5 123 0
 1353 0092 104A     	 ldr r2,.L75
 1354 0094 8023     	 mov r3,#128
 1355 0096 5B02     	 lsl r3,r3,#9
 1356 0098 101C     	 mov r0,r2
 1357 009a 0A21     	 mov r1,#10
 1358 009c 1A1C     	 mov r2,r3
 1359 009e FFF7FEFF 	 bl XMC_GPIO_SetOutputLevel
 124:../DeviceObject/infotainment/info_operation.c **** 		case GPIO3   : status?(XMC_GPIO_SetOutputLevel(P4_11, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
 1360              	 .loc 5 124 0
 1361 00a2 13E0     	 b .L58
 1362              	.L64:
 125:../DeviceObject/infotainment/info_operation.c **** 							  (XMC_GPIO_SetOutputLevel(P4_11, XMC_GPIO_OUTPUT_LEVEL_LOW));
 1363              	 .loc 5 125 0
 1364 00a4 BB1D     	 add r3,r7,#6
 1365 00a6 1B78     	 ldrb r3,[r3]
 1366 00a8 002B     	 cmp r3,#0
 1367 00aa 06D0     	 beq .L72
 125:../DeviceObject/infotainment/info_operation.c **** 							  (XMC_GPIO_SetOutputLevel(P4_11, XMC_GPIO_OUTPUT_LEVEL_LOW));
 1368              	 .loc 5 125 0 is_stmt 0 discriminator 1
 1369 00ac 094B     	 ldr r3,.L75
 1370 00ae 181C     	 mov r0,r3
 1371 00b0 0B21     	 mov r1,#11
 1372 00b2 0122     	 mov r2,#1
 1373 00b4 FFF7FEFF 	 bl XMC_GPIO_SetOutputLevel
 127:../DeviceObject/infotainment/info_operation.c **** 		default				: break;
 1374              	 .loc 5 127 0 is_stmt 1 discriminator 1
 1375 00b8 07E0     	 b .L74
 1376              	.L72:
 126:../DeviceObject/infotainment/info_operation.c **** 						  	  break;
 1377              	 .loc 5 126 0
 1378 00ba 064A     	 ldr r2,.L75
 1379 00bc 8023     	 mov r3,#128
 1380 00be 5B02     	 lsl r3,r3,#9
 1381 00c0 101C     	 mov r0,r2
 1382 00c2 0B21     	 mov r1,#11
 1383 00c4 1A1C     	 mov r2,r3
 1384 00c6 FFF7FEFF 	 bl XMC_GPIO_SetOutputLevel
 1385              	.L74:
 127:../DeviceObject/infotainment/info_operation.c **** 		default				: break;
 1386              	 .loc 5 127 0
 1387 00ca C046     	 mov r8,r8
 1388              	.L58:
 129:../DeviceObject/infotainment/info_operation.c **** 	}
 130:../DeviceObject/infotainment/info_operation.c **** }
 1389              	 .loc 5 130 0
 1390 00cc BD46     	 mov sp,r7
 1391 00ce 02B0     	 add sp,sp,#8
 1392              	 
 1393 00d0 80BD     	 pop {r7,pc}
 1394              	.L76:
 1395 00d2 C046     	 .align 2
 1396              	.L75:
 1397 00d4 00040440 	 .word 1074004992
 1398              	 .cfi_endproc
 1399              	.LFE229:
 1401              	 .section .text.INFO_RTCOscillatorEnable,"ax",%progbits
 1402              	 .align 2
 1403              	 .global INFO_RTCOscillatorEnable
 1404              	 .code 16
 1405              	 .thumb_func
 1407              	INFO_RTCOscillatorEnable:
 1408              	.LFB230:
 131:../DeviceObject/infotainment/info_operation.c **** 
 132:../DeviceObject/infotainment/info_operation.c **** /* RTC Methods */
 133:../DeviceObject/infotainment/info_operation.c **** uint8_t INFO_RTCOscillatorEnable(void)
 134:../DeviceObject/infotainment/info_operation.c **** {
 1409              	 .loc 5 134 0
 1410              	 .cfi_startproc
 1411 0000 90B5     	 push {r4,r7,lr}
 1412              	.LCFI54:
 1413              	 .cfi_def_cfa_offset 12
 1414              	 .cfi_offset 4,-12
 1415              	 .cfi_offset 7,-8
 1416              	 .cfi_offset 14,-4
 1417 0002 85B0     	 sub sp,sp,#20
 1418              	.LCFI55:
 1419              	 .cfi_def_cfa_offset 32
 1420 0004 00AF     	 add r7,sp,#0
 1421              	.LCFI56:
 1422              	 .cfi_def_cfa_register 7
 135:../DeviceObject/infotainment/info_operation.c **** 	uint8_t data;
 136:../DeviceObject/infotainment/info_operation.c **** 
 137:../DeviceObject/infotainment/info_operation.c **** 	/*    						Accessing RTCC Control Byte w/ WR					*/
 138:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_WRITE);
 1423              	 .loc 5 138 0
 1424 0006 764B     	 ldr r3,.L93
 1425 0008 181C     	 mov r0,r3
 1426 000a DE21     	 mov r1,#222
 1427 000c 0022     	 mov r2,#0
 1428 000e FFF7FEFF 	 bl XMC_I2C_CH_MasterStart
 1429              	.LBB2:
 139:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 140:../DeviceObject/infotainment/info_operation.c **** 	for(uint16_t count=0; count < 500; count++){}
 1430              	 .loc 5 140 0
 1431 0012 0E23     	 mov r3,#14
 1432 0014 FB18     	 add r3,r7,r3
 1433 0016 0022     	 mov r2,#0
 1434 0018 1A80     	 strh r2,[r3]
 1435 001a 06E0     	 b .L78
 1436              	.L79:
 1437              	 .loc 5 140 0 is_stmt 0 discriminator 3
 1438 001c 0E23     	 mov r3,#14
 1439 001e FB18     	 add r3,r7,r3
 1440 0020 1A88     	 ldrh r2,[r3]
 1441 0022 0E23     	 mov r3,#14
 1442 0024 FB18     	 add r3,r7,r3
 1443 0026 0132     	 add r2,r2,#1
 1444 0028 1A80     	 strh r2,[r3]
 1445              	.L78:
 1446              	 .loc 5 140 0 discriminator 1
 1447 002a 0E23     	 mov r3,#14
 1448 002c FB18     	 add r3,r7,r3
 1449 002e 1A88     	 ldrh r2,[r3]
 1450 0030 F423     	 mov r3,#244
 1451 0032 FF33     	 add r3,r3,#255
 1452 0034 9A42     	 cmp r2,r3
 1453 0036 F1D9     	 bls .L79
 1454              	.LBE2:
 141:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 1455              	 .loc 5 141 0 is_stmt 1
 1456 0038 694A     	 ldr r2,.L93
 1457 003a 8023     	 mov r3,#128
 1458 003c 9B00     	 lsl r3,r3,#2
 1459 003e 101C     	 mov r0,r2
 1460 0040 191C     	 mov r1,r3
 1461 0042 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 142:../DeviceObject/infotainment/info_operation.c **** 
 143:../DeviceObject/infotainment/info_operation.c ****     /*    						Write RTC Second Address Byte   							*/
 144:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, RTCSECOND);
 1462              	 .loc 5 144 0
 1463 0046 664B     	 ldr r3,.L93
 1464 0048 181C     	 mov r0,r3
 1465 004a 0021     	 mov r1,#0
 1466 004c FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 1467              	.LBB3:
 145:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 146:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 1468              	 .loc 5 146 0
 1469 0050 0C23     	 mov r3,#12
 1470 0052 FB18     	 add r3,r7,r3
 1471 0054 0022     	 mov r2,#0
 1472 0056 1A80     	 strh r2,[r3]
 1473 0058 06E0     	 b .L80
 1474              	.L81:
 1475              	 .loc 5 146 0 is_stmt 0 discriminator 3
 1476 005a 0C23     	 mov r3,#12
 1477 005c FB18     	 add r3,r7,r3
 1478 005e 1A88     	 ldrh r2,[r3]
 1479 0060 0C23     	 mov r3,#12
 1480 0062 FB18     	 add r3,r7,r3
 1481 0064 0132     	 add r2,r2,#1
 1482 0066 1A80     	 strh r2,[r3]
 1483              	.L80:
 1484              	 .loc 5 146 0 discriminator 1
 1485 0068 0C23     	 mov r3,#12
 1486 006a FB18     	 add r3,r7,r3
 1487 006c 1A88     	 ldrh r2,[r3]
 1488 006e F423     	 mov r3,#244
 1489 0070 FF33     	 add r3,r3,#255
 1490 0072 9A42     	 cmp r2,r3
 1491 0074 F1D9     	 bls .L81
 1492              	.LBE3:
 147:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 1493              	 .loc 5 147 0 is_stmt 1
 1494 0076 5A4A     	 ldr r2,.L93
 1495 0078 8023     	 mov r3,#128
 1496 007a 9B00     	 lsl r3,r3,#2
 1497 007c 101C     	 mov r0,r2
 1498 007e 191C     	 mov r1,r3
 1499 0080 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 148:../DeviceObject/infotainment/info_operation.c **** 
 149:../DeviceObject/infotainment/info_operation.c ****     /*    						Accessing RTCC Control Byte again w/ RD				*/
 150:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterRepeatedStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_READ);
 1500              	 .loc 5 150 0
 1501 0084 564B     	 ldr r3,.L93
 1502 0086 181C     	 mov r0,r3
 1503 0088 DE21     	 mov r1,#222
 1504 008a 0122     	 mov r2,#1
 1505 008c FFF7FEFF 	 bl XMC_I2C_CH_MasterRepeatedStart
 1506              	.LBB4:
 151:../DeviceObject/infotainment/info_operation.c **** //    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){
 152:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 1507              	 .loc 5 152 0
 1508 0090 0A23     	 mov r3,#10
 1509 0092 FB18     	 add r3,r7,r3
 1510 0094 0022     	 mov r2,#0
 1511 0096 1A80     	 strh r2,[r3]
 1512 0098 06E0     	 b .L82
 1513              	.L83:
 1514              	 .loc 5 152 0 is_stmt 0 discriminator 3
 1515 009a 0A23     	 mov r3,#10
 1516 009c FB18     	 add r3,r7,r3
 1517 009e 1A88     	 ldrh r2,[r3]
 1518 00a0 0A23     	 mov r3,#10
 1519 00a2 FB18     	 add r3,r7,r3
 1520 00a4 0132     	 add r2,r2,#1
 1521 00a6 1A80     	 strh r2,[r3]
 1522              	.L82:
 1523              	 .loc 5 152 0 discriminator 1
 1524 00a8 0A23     	 mov r3,#10
 1525 00aa FB18     	 add r3,r7,r3
 1526 00ac 1A88     	 ldrh r2,[r3]
 1527 00ae F423     	 mov r3,#244
 1528 00b0 FF33     	 add r3,r3,#255
 1529 00b2 9A42     	 cmp r2,r3
 1530 00b4 F1D9     	 bls .L83
 1531              	.LBE4:
 153:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 1532              	 .loc 5 153 0 is_stmt 1
 1533 00b6 4A4A     	 ldr r2,.L93
 1534 00b8 8023     	 mov r3,#128
 1535 00ba 9B00     	 lsl r3,r3,#2
 1536 00bc 101C     	 mov r0,r2
 1537 00be 191C     	 mov r1,r3
 1538 00c0 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 154:../DeviceObject/infotainment/info_operation.c **** 
 155:../DeviceObject/infotainment/info_operation.c **** 	/*							Send NACK											*/
 156:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterReceiveNack(XMC_USIC1_CH1);
 1539              	 .loc 5 156 0
 1540 00c4 464B     	 ldr r3,.L93
 1541 00c6 181C     	 mov r0,r3
 1542 00c8 FFF7FEFF 	 bl XMC_I2C_CH_MasterReceiveNack
 1543              	.LBB5:
 157:../DeviceObject/infotainment/info_operation.c **** //    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & (XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 158:../DeviceObject/infotainment/info_operation.c **** //	                              XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)) == 0U){/* 
 159:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 1544              	 .loc 5 159 0
 1545 00cc 0823     	 mov r3,#8
 1546 00ce FB18     	 add r3,r7,r3
 1547 00d0 0022     	 mov r2,#0
 1548 00d2 1A80     	 strh r2,[r3]
 1549 00d4 06E0     	 b .L84
 1550              	.L85:
 1551              	 .loc 5 159 0 is_stmt 0 discriminator 3
 1552 00d6 0823     	 mov r3,#8
 1553 00d8 FB18     	 add r3,r7,r3
 1554 00da 1A88     	 ldrh r2,[r3]
 1555 00dc 0823     	 mov r3,#8
 1556 00de FB18     	 add r3,r7,r3
 1557 00e0 0132     	 add r2,r2,#1
 1558 00e2 1A80     	 strh r2,[r3]
 1559              	.L84:
 1560              	 .loc 5 159 0 discriminator 1
 1561 00e4 0823     	 mov r3,#8
 1562 00e6 FB18     	 add r3,r7,r3
 1563 00e8 1A88     	 ldrh r2,[r3]
 1564 00ea F423     	 mov r3,#244
 1565 00ec FF33     	 add r3,r3,#255
 1566 00ee 9A42     	 cmp r2,r3
 1567 00f0 F1D9     	 bls .L85
 1568              	.LBE5:
 160:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 1569              	 .loc 5 160 0 is_stmt 1
 1570 00f2 3B4A     	 ldr r2,.L93
 1571 00f4 C023     	 mov r3,#192
 1572 00f6 1B02     	 lsl r3,r3,#8
 1573 00f8 101C     	 mov r0,r2
 1574 00fa 191C     	 mov r1,r3
 1575 00fc FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 161:../DeviceObject/infotainment/info_operation.c ****                                   XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
 162:../DeviceObject/infotainment/info_operation.c **** 
 163:../DeviceObject/infotainment/info_operation.c ****     /*    						Load Register Information  								*/
 164:../DeviceObject/infotainment/info_operation.c ****     data     = XMC_I2C_CH_GetReceivedData(XMC_USIC1_CH1);
 1576              	 .loc 5 164 0
 1577 0100 7C1C     	 add r4,r7,#1
 1578 0102 374B     	 ldr r3,.L93
 1579 0104 181C     	 mov r0,r3
 1580 0106 FFF7FEFF 	 bl XMC_I2C_CH_GetReceivedData
 1581 010a 031C     	 mov r3,r0
 1582 010c 2370     	 strb r3,[r4]
 165:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterStop(XMC_USIC1_CH1);
 1583              	 .loc 5 165 0
 1584 010e 344B     	 ldr r3,.L93
 1585 0110 181C     	 mov r0,r3
 1586 0112 FFF7FEFF 	 bl XMC_I2C_CH_MasterStop
 166:../DeviceObject/infotainment/info_operation.c **** 
 167:../DeviceObject/infotainment/info_operation.c ****     /* 							Enable ST Bit 										*/
 168:../DeviceObject/infotainment/info_operation.c ****     data	= data | 0x80;
 1587              	 .loc 5 168 0
 1588 0116 7B1C     	 add r3,r7,#1
 1589 0118 7A1C     	 add r2,r7,#1
 1590 011a 1278     	 ldrb r2,[r2]
 1591 011c 8021     	 mov r1,#128
 1592 011e 4942     	 neg r1,r1
 1593 0120 0A43     	 orr r2,r1
 1594 0122 1A70     	 strb r2,[r3]
 169:../DeviceObject/infotainment/info_operation.c **** 
 170:../DeviceObject/infotainment/info_operation.c **** 	/*    						Accessing RTCC Control Byte 						*/
 171:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_WRITE);
 1595              	 .loc 5 171 0
 1596 0124 2E4B     	 ldr r3,.L93
 1597 0126 181C     	 mov r0,r3
 1598 0128 DE21     	 mov r1,#222
 1599 012a 0022     	 mov r2,#0
 1600 012c FFF7FEFF 	 bl XMC_I2C_CH_MasterStart
 1601              	.LBB6:
 172:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 173:../DeviceObject/infotainment/info_operation.c **** 	for(uint16_t count=0; count < 500; count++){}
 1602              	 .loc 5 173 0
 1603 0130 BB1D     	 add r3,r7,#6
 1604 0132 0022     	 mov r2,#0
 1605 0134 1A80     	 strh r2,[r3]
 1606 0136 04E0     	 b .L86
 1607              	.L87:
 1608              	 .loc 5 173 0 is_stmt 0 discriminator 3
 1609 0138 BB1D     	 add r3,r7,#6
 1610 013a 1A88     	 ldrh r2,[r3]
 1611 013c BB1D     	 add r3,r7,#6
 1612 013e 0132     	 add r2,r2,#1
 1613 0140 1A80     	 strh r2,[r3]
 1614              	.L86:
 1615              	 .loc 5 173 0 discriminator 1
 1616 0142 BB1D     	 add r3,r7,#6
 1617 0144 1A88     	 ldrh r2,[r3]
 1618 0146 F423     	 mov r3,#244
 1619 0148 FF33     	 add r3,r3,#255
 1620 014a 9A42     	 cmp r2,r3
 1621 014c F4D9     	 bls .L87
 1622              	.LBE6:
 174:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 1623              	 .loc 5 174 0 is_stmt 1
 1624 014e 244A     	 ldr r2,.L93
 1625 0150 8023     	 mov r3,#128
 1626 0152 9B00     	 lsl r3,r3,#2
 1627 0154 101C     	 mov r0,r2
 1628 0156 191C     	 mov r1,r3
 1629 0158 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 175:../DeviceObject/infotainment/info_operation.c **** 
 176:../DeviceObject/infotainment/info_operation.c ****     /*    						Write RTC Second Address Byte  					*/
 177:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, RTCSECOND);
 1630              	 .loc 5 177 0
 1631 015c 204B     	 ldr r3,.L93
 1632 015e 181C     	 mov r0,r3
 1633 0160 0021     	 mov r1,#0
 1634 0162 FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 1635              	.LBB7:
 178:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 179:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 1636              	 .loc 5 179 0
 1637 0166 3B1D     	 add r3,r7,#4
 1638 0168 0022     	 mov r2,#0
 1639 016a 1A80     	 strh r2,[r3]
 1640 016c 04E0     	 b .L88
 1641              	.L89:
 1642              	 .loc 5 179 0 is_stmt 0 discriminator 3
 1643 016e 3B1D     	 add r3,r7,#4
 1644 0170 1A88     	 ldrh r2,[r3]
 1645 0172 3B1D     	 add r3,r7,#4
 1646 0174 0132     	 add r2,r2,#1
 1647 0176 1A80     	 strh r2,[r3]
 1648              	.L88:
 1649              	 .loc 5 179 0 discriminator 1
 1650 0178 3B1D     	 add r3,r7,#4
 1651 017a 1A88     	 ldrh r2,[r3]
 1652 017c F423     	 mov r3,#244
 1653 017e FF33     	 add r3,r3,#255
 1654 0180 9A42     	 cmp r2,r3
 1655 0182 F4D9     	 bls .L89
 1656              	.LBE7:
 180:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 1657              	 .loc 5 180 0 is_stmt 1
 1658 0184 164A     	 ldr r2,.L93
 1659 0186 8023     	 mov r3,#128
 1660 0188 9B00     	 lsl r3,r3,#2
 1661 018a 101C     	 mov r0,r2
 1662 018c 191C     	 mov r1,r3
 1663 018e FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 181:../DeviceObject/infotainment/info_operation.c **** 
 182:../DeviceObject/infotainment/info_operation.c **** 	/*	 					   Write value at Second Address Byte 					*/
 183:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, data);
 1664              	 .loc 5 183 0
 1665 0192 134A     	 ldr r2,.L93
 1666 0194 7B1C     	 add r3,r7,#1
 1667 0196 1B78     	 ldrb r3,[r3]
 1668 0198 101C     	 mov r0,r2
 1669 019a 191C     	 mov r1,r3
 1670 019c FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 1671              	.LBB8:
 184:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 185:../DeviceObject/infotainment/info_operation.c **** 	for(uint16_t count=0; count < 500; count++){}
 1672              	 .loc 5 185 0
 1673 01a0 BB1C     	 add r3,r7,#2
 1674 01a2 0022     	 mov r2,#0
 1675 01a4 1A80     	 strh r2,[r3]
 1676 01a6 04E0     	 b .L90
 1677              	.L91:
 1678              	 .loc 5 185 0 is_stmt 0 discriminator 3
 1679 01a8 BB1C     	 add r3,r7,#2
 1680 01aa 1A88     	 ldrh r2,[r3]
 1681 01ac BB1C     	 add r3,r7,#2
 1682 01ae 0132     	 add r2,r2,#1
 1683 01b0 1A80     	 strh r2,[r3]
 1684              	.L90:
 1685              	 .loc 5 185 0 discriminator 1
 1686 01b2 BB1C     	 add r3,r7,#2
 1687 01b4 1A88     	 ldrh r2,[r3]
 1688 01b6 F423     	 mov r3,#244
 1689 01b8 FF33     	 add r3,r3,#255
 1690 01ba 9A42     	 cmp r2,r3
 1691 01bc F4D9     	 bls .L91
 1692              	.LBE8:
 186:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 1693              	 .loc 5 186 0 is_stmt 1
 1694 01be 084A     	 ldr r2,.L93
 1695 01c0 8023     	 mov r3,#128
 1696 01c2 9B00     	 lsl r3,r3,#2
 1697 01c4 101C     	 mov r0,r2
 1698 01c6 191C     	 mov r1,r3
 1699 01c8 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 187:../DeviceObject/infotainment/info_operation.c **** 
 188:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterStop(XMC_USIC1_CH1);
 1700              	 .loc 5 188 0
 1701 01cc 044B     	 ldr r3,.L93
 1702 01ce 181C     	 mov r0,r3
 1703 01d0 FFF7FEFF 	 bl XMC_I2C_CH_MasterStop
 189:../DeviceObject/infotainment/info_operation.c **** 
 190:../DeviceObject/infotainment/info_operation.c **** 	return data;
 1704              	 .loc 5 190 0
 1705 01d4 7B1C     	 add r3,r7,#1
 1706 01d6 1B78     	 ldrb r3,[r3]
 191:../DeviceObject/infotainment/info_operation.c **** 
 192:../DeviceObject/infotainment/info_operation.c **** }
 1707              	 .loc 5 192 0
 1708 01d8 181C     	 mov r0,r3
 1709 01da BD46     	 mov sp,r7
 1710 01dc 05B0     	 add sp,sp,#20
 1711              	 
 1712 01de 90BD     	 pop {r4,r7,pc}
 1713              	.L94:
 1714              	 .align 2
 1715              	.L93:
 1716 01e0 00420048 	 .word 1207976448
 1717              	 .cfi_endproc
 1718              	.LFE230:
 1720              	 .section .text.INFO_RTCOscillatorDisable,"ax",%progbits
 1721              	 .align 2
 1722              	 .global INFO_RTCOscillatorDisable
 1723              	 .code 16
 1724              	 .thumb_func
 1726              	INFO_RTCOscillatorDisable:
 1727              	.LFB231:
 193:../DeviceObject/infotainment/info_operation.c **** void INFO_RTCOscillatorDisable(void)
 194:../DeviceObject/infotainment/info_operation.c **** {
 1728              	 .loc 5 194 0
 1729              	 .cfi_startproc
 1730 0000 90B5     	 push {r4,r7,lr}
 1731              	.LCFI57:
 1732              	 .cfi_def_cfa_offset 12
 1733              	 .cfi_offset 4,-12
 1734              	 .cfi_offset 7,-8
 1735              	 .cfi_offset 14,-4
 1736 0002 85B0     	 sub sp,sp,#20
 1737              	.LCFI58:
 1738              	 .cfi_def_cfa_offset 32
 1739 0004 00AF     	 add r7,sp,#0
 1740              	.LCFI59:
 1741              	 .cfi_def_cfa_register 7
 195:../DeviceObject/infotainment/info_operation.c **** 	uint8_t data;
 196:../DeviceObject/infotainment/info_operation.c **** 
 197:../DeviceObject/infotainment/info_operation.c **** 	/*    						Accessing RTCC Control Byte w/ WR					*/
 198:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_WRITE);
 1742              	 .loc 5 198 0
 1743 0006 744B     	 ldr r3,.L110
 1744 0008 181C     	 mov r0,r3
 1745 000a DE21     	 mov r1,#222
 1746 000c 0022     	 mov r2,#0
 1747 000e FFF7FEFF 	 bl XMC_I2C_CH_MasterStart
 1748              	.LBB9:
 199:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 200:../DeviceObject/infotainment/info_operation.c **** 	for(uint16_t count=0; count < 500; count++){}
 1749              	 .loc 5 200 0
 1750 0012 0E23     	 mov r3,#14
 1751 0014 FB18     	 add r3,r7,r3
 1752 0016 0022     	 mov r2,#0
 1753 0018 1A80     	 strh r2,[r3]
 1754 001a 06E0     	 b .L96
 1755              	.L97:
 1756              	 .loc 5 200 0 is_stmt 0 discriminator 3
 1757 001c 0E23     	 mov r3,#14
 1758 001e FB18     	 add r3,r7,r3
 1759 0020 1A88     	 ldrh r2,[r3]
 1760 0022 0E23     	 mov r3,#14
 1761 0024 FB18     	 add r3,r7,r3
 1762 0026 0132     	 add r2,r2,#1
 1763 0028 1A80     	 strh r2,[r3]
 1764              	.L96:
 1765              	 .loc 5 200 0 discriminator 1
 1766 002a 0E23     	 mov r3,#14
 1767 002c FB18     	 add r3,r7,r3
 1768 002e 1A88     	 ldrh r2,[r3]
 1769 0030 F423     	 mov r3,#244
 1770 0032 FF33     	 add r3,r3,#255
 1771 0034 9A42     	 cmp r2,r3
 1772 0036 F1D9     	 bls .L97
 1773              	.LBE9:
 201:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 1774              	 .loc 5 201 0 is_stmt 1
 1775 0038 674A     	 ldr r2,.L110
 1776 003a 8023     	 mov r3,#128
 1777 003c 9B00     	 lsl r3,r3,#2
 1778 003e 101C     	 mov r0,r2
 1779 0040 191C     	 mov r1,r3
 1780 0042 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 202:../DeviceObject/infotainment/info_operation.c **** 
 203:../DeviceObject/infotainment/info_operation.c ****     /*    						Write RTC Second Address Byte   							*/
 204:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, RTCSECOND);
 1781              	 .loc 5 204 0
 1782 0046 644B     	 ldr r3,.L110
 1783 0048 181C     	 mov r0,r3
 1784 004a 0021     	 mov r1,#0
 1785 004c FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 1786              	.LBB10:
 205:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 206:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 1787              	 .loc 5 206 0
 1788 0050 0C23     	 mov r3,#12
 1789 0052 FB18     	 add r3,r7,r3
 1790 0054 0022     	 mov r2,#0
 1791 0056 1A80     	 strh r2,[r3]
 1792 0058 06E0     	 b .L98
 1793              	.L99:
 1794              	 .loc 5 206 0 is_stmt 0 discriminator 3
 1795 005a 0C23     	 mov r3,#12
 1796 005c FB18     	 add r3,r7,r3
 1797 005e 1A88     	 ldrh r2,[r3]
 1798 0060 0C23     	 mov r3,#12
 1799 0062 FB18     	 add r3,r7,r3
 1800 0064 0132     	 add r2,r2,#1
 1801 0066 1A80     	 strh r2,[r3]
 1802              	.L98:
 1803              	 .loc 5 206 0 discriminator 1
 1804 0068 0C23     	 mov r3,#12
 1805 006a FB18     	 add r3,r7,r3
 1806 006c 1A88     	 ldrh r2,[r3]
 1807 006e F423     	 mov r3,#244
 1808 0070 FF33     	 add r3,r3,#255
 1809 0072 9A42     	 cmp r2,r3
 1810 0074 F1D9     	 bls .L99
 1811              	.LBE10:
 207:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 1812              	 .loc 5 207 0 is_stmt 1
 1813 0076 584A     	 ldr r2,.L110
 1814 0078 8023     	 mov r3,#128
 1815 007a 9B00     	 lsl r3,r3,#2
 1816 007c 101C     	 mov r0,r2
 1817 007e 191C     	 mov r1,r3
 1818 0080 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 208:../DeviceObject/infotainment/info_operation.c **** 
 209:../DeviceObject/infotainment/info_operation.c ****     /*    						Accessing RTCC Control Byte again w/ RD				*/
 210:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterRepeatedStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_READ);
 1819              	 .loc 5 210 0
 1820 0084 544B     	 ldr r3,.L110
 1821 0086 181C     	 mov r0,r3
 1822 0088 DE21     	 mov r1,#222
 1823 008a 0122     	 mov r2,#1
 1824 008c FFF7FEFF 	 bl XMC_I2C_CH_MasterRepeatedStart
 1825              	.LBB11:
 211:../DeviceObject/infotainment/info_operation.c **** //    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){
 212:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 1826              	 .loc 5 212 0
 1827 0090 0A23     	 mov r3,#10
 1828 0092 FB18     	 add r3,r7,r3
 1829 0094 0022     	 mov r2,#0
 1830 0096 1A80     	 strh r2,[r3]
 1831 0098 06E0     	 b .L100
 1832              	.L101:
 1833              	 .loc 5 212 0 is_stmt 0 discriminator 3
 1834 009a 0A23     	 mov r3,#10
 1835 009c FB18     	 add r3,r7,r3
 1836 009e 1A88     	 ldrh r2,[r3]
 1837 00a0 0A23     	 mov r3,#10
 1838 00a2 FB18     	 add r3,r7,r3
 1839 00a4 0132     	 add r2,r2,#1
 1840 00a6 1A80     	 strh r2,[r3]
 1841              	.L100:
 1842              	 .loc 5 212 0 discriminator 1
 1843 00a8 0A23     	 mov r3,#10
 1844 00aa FB18     	 add r3,r7,r3
 1845 00ac 1A88     	 ldrh r2,[r3]
 1846 00ae F423     	 mov r3,#244
 1847 00b0 FF33     	 add r3,r3,#255
 1848 00b2 9A42     	 cmp r2,r3
 1849 00b4 F1D9     	 bls .L101
 1850              	.LBE11:
 213:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 1851              	 .loc 5 213 0 is_stmt 1
 1852 00b6 484A     	 ldr r2,.L110
 1853 00b8 8023     	 mov r3,#128
 1854 00ba 9B00     	 lsl r3,r3,#2
 1855 00bc 101C     	 mov r0,r2
 1856 00be 191C     	 mov r1,r3
 1857 00c0 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 214:../DeviceObject/infotainment/info_operation.c **** 
 215:../DeviceObject/infotainment/info_operation.c **** 	/*							Send NACK											*/
 216:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterReceiveNack(XMC_USIC1_CH1);
 1858              	 .loc 5 216 0
 1859 00c4 444B     	 ldr r3,.L110
 1860 00c6 181C     	 mov r0,r3
 1861 00c8 FFF7FEFF 	 bl XMC_I2C_CH_MasterReceiveNack
 1862              	.LBB12:
 217:../DeviceObject/infotainment/info_operation.c **** //    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & (XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 218:../DeviceObject/infotainment/info_operation.c **** //	                              XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)) == 0U){/* 
 219:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 1863              	 .loc 5 219 0
 1864 00cc 0823     	 mov r3,#8
 1865 00ce FB18     	 add r3,r7,r3
 1866 00d0 0022     	 mov r2,#0
 1867 00d2 1A80     	 strh r2,[r3]
 1868 00d4 06E0     	 b .L102
 1869              	.L103:
 1870              	 .loc 5 219 0 is_stmt 0 discriminator 3
 1871 00d6 0823     	 mov r3,#8
 1872 00d8 FB18     	 add r3,r7,r3
 1873 00da 1A88     	 ldrh r2,[r3]
 1874 00dc 0823     	 mov r3,#8
 1875 00de FB18     	 add r3,r7,r3
 1876 00e0 0132     	 add r2,r2,#1
 1877 00e2 1A80     	 strh r2,[r3]
 1878              	.L102:
 1879              	 .loc 5 219 0 discriminator 1
 1880 00e4 0823     	 mov r3,#8
 1881 00e6 FB18     	 add r3,r7,r3
 1882 00e8 1A88     	 ldrh r2,[r3]
 1883 00ea F423     	 mov r3,#244
 1884 00ec FF33     	 add r3,r3,#255
 1885 00ee 9A42     	 cmp r2,r3
 1886 00f0 F1D9     	 bls .L103
 1887              	.LBE12:
 220:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 1888              	 .loc 5 220 0 is_stmt 1
 1889 00f2 394A     	 ldr r2,.L110
 1890 00f4 C023     	 mov r3,#192
 1891 00f6 1B02     	 lsl r3,r3,#8
 1892 00f8 101C     	 mov r0,r2
 1893 00fa 191C     	 mov r1,r3
 1894 00fc FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 221:../DeviceObject/infotainment/info_operation.c ****                                   XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
 222:../DeviceObject/infotainment/info_operation.c **** 
 223:../DeviceObject/infotainment/info_operation.c ****     /*    						Load Register Information  								*/
 224:../DeviceObject/infotainment/info_operation.c ****     data     = XMC_I2C_CH_GetReceivedData(XMC_USIC1_CH1);
 1895              	 .loc 5 224 0
 1896 0100 7C1C     	 add r4,r7,#1
 1897 0102 354B     	 ldr r3,.L110
 1898 0104 181C     	 mov r0,r3
 1899 0106 FFF7FEFF 	 bl XMC_I2C_CH_GetReceivedData
 1900 010a 031C     	 mov r3,r0
 1901 010c 2370     	 strb r3,[r4]
 225:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterStop(XMC_USIC1_CH1);
 1902              	 .loc 5 225 0
 1903 010e 324B     	 ldr r3,.L110
 1904 0110 181C     	 mov r0,r3
 1905 0112 FFF7FEFF 	 bl XMC_I2C_CH_MasterStop
 226:../DeviceObject/infotainment/info_operation.c **** 
 227:../DeviceObject/infotainment/info_operation.c ****     /* 							Disable ST Bit 										*/
 228:../DeviceObject/infotainment/info_operation.c ****     data	= data & 0x7F;
 1906              	 .loc 5 228 0
 1907 0116 7B1C     	 add r3,r7,#1
 1908 0118 7A1C     	 add r2,r7,#1
 1909 011a 1278     	 ldrb r2,[r2]
 1910 011c 7F21     	 mov r1,#127
 1911 011e 0A40     	 and r2,r1
 1912 0120 1A70     	 strb r2,[r3]
 229:../DeviceObject/infotainment/info_operation.c **** 
 230:../DeviceObject/infotainment/info_operation.c **** 	/*    						Accessing RTCC Control Byte 						*/
 231:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_WRITE);
 1913              	 .loc 5 231 0
 1914 0122 2D4B     	 ldr r3,.L110
 1915 0124 181C     	 mov r0,r3
 1916 0126 DE21     	 mov r1,#222
 1917 0128 0022     	 mov r2,#0
 1918 012a FFF7FEFF 	 bl XMC_I2C_CH_MasterStart
 1919              	.LBB13:
 232:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 233:../DeviceObject/infotainment/info_operation.c **** 	for(uint16_t count=0; count < 500; count++){}
 1920              	 .loc 5 233 0
 1921 012e BB1D     	 add r3,r7,#6
 1922 0130 0022     	 mov r2,#0
 1923 0132 1A80     	 strh r2,[r3]
 1924 0134 04E0     	 b .L104
 1925              	.L105:
 1926              	 .loc 5 233 0 is_stmt 0 discriminator 3
 1927 0136 BB1D     	 add r3,r7,#6
 1928 0138 1A88     	 ldrh r2,[r3]
 1929 013a BB1D     	 add r3,r7,#6
 1930 013c 0132     	 add r2,r2,#1
 1931 013e 1A80     	 strh r2,[r3]
 1932              	.L104:
 1933              	 .loc 5 233 0 discriminator 1
 1934 0140 BB1D     	 add r3,r7,#6
 1935 0142 1A88     	 ldrh r2,[r3]
 1936 0144 F423     	 mov r3,#244
 1937 0146 FF33     	 add r3,r3,#255
 1938 0148 9A42     	 cmp r2,r3
 1939 014a F4D9     	 bls .L105
 1940              	.LBE13:
 234:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 1941              	 .loc 5 234 0 is_stmt 1
 1942 014c 224A     	 ldr r2,.L110
 1943 014e 8023     	 mov r3,#128
 1944 0150 9B00     	 lsl r3,r3,#2
 1945 0152 101C     	 mov r0,r2
 1946 0154 191C     	 mov r1,r3
 1947 0156 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 235:../DeviceObject/infotainment/info_operation.c **** 
 236:../DeviceObject/infotainment/info_operation.c ****     /*    						Write RTC Second Address Byte  					*/
 237:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, RTCSECOND);
 1948              	 .loc 5 237 0
 1949 015a 1F4B     	 ldr r3,.L110
 1950 015c 181C     	 mov r0,r3
 1951 015e 0021     	 mov r1,#0
 1952 0160 FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 1953              	.LBB14:
 238:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 239:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 1954              	 .loc 5 239 0
 1955 0164 3B1D     	 add r3,r7,#4
 1956 0166 0022     	 mov r2,#0
 1957 0168 1A80     	 strh r2,[r3]
 1958 016a 04E0     	 b .L106
 1959              	.L107:
 1960              	 .loc 5 239 0 is_stmt 0 discriminator 3
 1961 016c 3B1D     	 add r3,r7,#4
 1962 016e 1A88     	 ldrh r2,[r3]
 1963 0170 3B1D     	 add r3,r7,#4
 1964 0172 0132     	 add r2,r2,#1
 1965 0174 1A80     	 strh r2,[r3]
 1966              	.L106:
 1967              	 .loc 5 239 0 discriminator 1
 1968 0176 3B1D     	 add r3,r7,#4
 1969 0178 1A88     	 ldrh r2,[r3]
 1970 017a F423     	 mov r3,#244
 1971 017c FF33     	 add r3,r3,#255
 1972 017e 9A42     	 cmp r2,r3
 1973 0180 F4D9     	 bls .L107
 1974              	.LBE14:
 240:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 1975              	 .loc 5 240 0 is_stmt 1
 1976 0182 154A     	 ldr r2,.L110
 1977 0184 8023     	 mov r3,#128
 1978 0186 9B00     	 lsl r3,r3,#2
 1979 0188 101C     	 mov r0,r2
 1980 018a 191C     	 mov r1,r3
 1981 018c FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 241:../DeviceObject/infotainment/info_operation.c **** 
 242:../DeviceObject/infotainment/info_operation.c **** 	/*	 					   Write value at Second Address Byte 					*/
 243:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, data);
 1982              	 .loc 5 243 0
 1983 0190 114A     	 ldr r2,.L110
 1984 0192 7B1C     	 add r3,r7,#1
 1985 0194 1B78     	 ldrb r3,[r3]
 1986 0196 101C     	 mov r0,r2
 1987 0198 191C     	 mov r1,r3
 1988 019a FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 1989              	.LBB15:
 244:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 245:../DeviceObject/infotainment/info_operation.c **** 	for(uint16_t count=0; count < 500; count++){}
 1990              	 .loc 5 245 0
 1991 019e BB1C     	 add r3,r7,#2
 1992 01a0 0022     	 mov r2,#0
 1993 01a2 1A80     	 strh r2,[r3]
 1994 01a4 04E0     	 b .L108
 1995              	.L109:
 1996              	 .loc 5 245 0 is_stmt 0 discriminator 3
 1997 01a6 BB1C     	 add r3,r7,#2
 1998 01a8 1A88     	 ldrh r2,[r3]
 1999 01aa BB1C     	 add r3,r7,#2
 2000 01ac 0132     	 add r2,r2,#1
 2001 01ae 1A80     	 strh r2,[r3]
 2002              	.L108:
 2003              	 .loc 5 245 0 discriminator 1
 2004 01b0 BB1C     	 add r3,r7,#2
 2005 01b2 1A88     	 ldrh r2,[r3]
 2006 01b4 F423     	 mov r3,#244
 2007 01b6 FF33     	 add r3,r3,#255
 2008 01b8 9A42     	 cmp r2,r3
 2009 01ba F4D9     	 bls .L109
 2010              	.LBE15:
 246:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 2011              	 .loc 5 246 0 is_stmt 1
 2012 01bc 064A     	 ldr r2,.L110
 2013 01be 8023     	 mov r3,#128
 2014 01c0 9B00     	 lsl r3,r3,#2
 2015 01c2 101C     	 mov r0,r2
 2016 01c4 191C     	 mov r1,r3
 2017 01c6 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 247:../DeviceObject/infotainment/info_operation.c **** 
 248:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterStop(XMC_USIC1_CH1);
 2018              	 .loc 5 248 0
 2019 01ca 034B     	 ldr r3,.L110
 2020 01cc 181C     	 mov r0,r3
 2021 01ce FFF7FEFF 	 bl XMC_I2C_CH_MasterStop
 249:../DeviceObject/infotainment/info_operation.c **** }
 2022              	 .loc 5 249 0
 2023 01d2 BD46     	 mov sp,r7
 2024 01d4 05B0     	 add sp,sp,#20
 2025              	 
 2026 01d6 90BD     	 pop {r4,r7,pc}
 2027              	.L111:
 2028              	 .align 2
 2029              	.L110:
 2030 01d8 00420048 	 .word 1207976448
 2031              	 .cfi_endproc
 2032              	.LFE231:
 2034              	 .global __aeabi_uidivmod
 2035              	 .global __aeabi_uidiv
 2036              	 .section .text.INFO_RTCTimeInit,"ax",%progbits
 2037              	 .align 2
 2038              	 .global INFO_RTCTimeInit
 2039              	 .code 16
 2040              	 .thumb_func
 2042              	INFO_RTCTimeInit:
 2043              	.LFB232:
 250:../DeviceObject/infotainment/info_operation.c **** 
 251:../DeviceObject/infotainment/info_operation.c **** void INFO_RTCTimeInit(RTC_TIME_PARAM_t rtc_time)
 252:../DeviceObject/infotainment/info_operation.c **** {
 2044              	 .loc 5 252 0
 2045              	 .cfi_startproc
 2046 0000 80B5     	 push {r7,lr}
 2047              	.LCFI60:
 2048              	 .cfi_def_cfa_offset 8
 2049              	 .cfi_offset 7,-8
 2050              	 .cfi_offset 14,-4
 2051 0002 86B0     	 sub sp,sp,#24
 2052              	.LCFI61:
 2053              	 .cfi_def_cfa_offset 32
 2054 0004 00AF     	 add r7,sp,#0
 2055              	.LCFI62:
 2056              	 .cfi_def_cfa_register 7
 2057 0006 3B1D     	 add r3,r7,#4
 2058 0008 1860     	 str r0,[r3]
 253:../DeviceObject/infotainment/info_operation.c **** 	static uint8_t tens;
 254:../DeviceObject/infotainment/info_operation.c **** 	static uint8_t ones;
 255:../DeviceObject/infotainment/info_operation.c **** 
 256:../DeviceObject/infotainment/info_operation.c **** 	/*    						Accessing RTCC Control Byte 						*/
 257:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_WRITE);
 2059              	 .loc 5 257 0
 2060 000a 934B     	 ldr r3,.L124
 2061 000c 181C     	 mov r0,r3
 2062 000e DE21     	 mov r1,#222
 2063 0010 0022     	 mov r2,#0
 2064 0012 FFF7FEFF 	 bl XMC_I2C_CH_MasterStart
 2065              	.LBB16:
 258:../DeviceObject/infotainment/info_operation.c **** 
 259:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 260:../DeviceObject/infotainment/info_operation.c **** 	for(uint16_t count=0; count < 500; count++){}
 2066              	 .loc 5 260 0
 2067 0016 1623     	 mov r3,#22
 2068 0018 FB18     	 add r3,r7,r3
 2069 001a 0022     	 mov r2,#0
 2070 001c 1A80     	 strh r2,[r3]
 2071 001e 06E0     	 b .L113
 2072              	.L114:
 2073              	 .loc 5 260 0 is_stmt 0 discriminator 3
 2074 0020 1623     	 mov r3,#22
 2075 0022 FB18     	 add r3,r7,r3
 2076 0024 1A88     	 ldrh r2,[r3]
 2077 0026 1623     	 mov r3,#22
 2078 0028 FB18     	 add r3,r7,r3
 2079 002a 0132     	 add r2,r2,#1
 2080 002c 1A80     	 strh r2,[r3]
 2081              	.L113:
 2082              	 .loc 5 260 0 discriminator 1
 2083 002e 1623     	 mov r3,#22
 2084 0030 FB18     	 add r3,r7,r3
 2085 0032 1A88     	 ldrh r2,[r3]
 2086 0034 F423     	 mov r3,#244
 2087 0036 FF33     	 add r3,r3,#255
 2088 0038 9A42     	 cmp r2,r3
 2089 003a F1D9     	 bls .L114
 2090              	.LBE16:
 261:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 2091              	 .loc 5 261 0 is_stmt 1
 2092 003c 864A     	 ldr r2,.L124
 2093 003e 8023     	 mov r3,#128
 2094 0040 9B00     	 lsl r3,r3,#2
 2095 0042 101C     	 mov r0,r2
 2096 0044 191C     	 mov r1,r3
 2097 0046 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 262:../DeviceObject/infotainment/info_operation.c **** 
 263:../DeviceObject/infotainment/info_operation.c ****   	/*    						Write Seconds Address Byte   					*/
 264:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, RTCSECOND);
 2098              	 .loc 5 264 0
 2099 004a 834B     	 ldr r3,.L124
 2100 004c 181C     	 mov r0,r3
 2101 004e 0021     	 mov r1,#0
 2102 0050 FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 265:../DeviceObject/infotainment/info_operation.c ****  	ones	= rtc_time.second % 10;				// preparing 'seconds' value while bus is transmitting RTCSEC add
 2103              	 .loc 5 265 0
 2104 0054 3B1D     	 add r3,r7,#4
 2105 0056 9B78     	 ldrb r3,[r3,#2]
 2106 0058 181C     	 mov r0,r3
 2107 005a 0A21     	 mov r1,#10
 2108 005c FFF7FEFF 	 bl __aeabi_uidivmod
 2109 0060 0B1C     	 mov r3,r1
 2110 0062 DAB2     	 uxtb r2,r3
 2111 0064 7D4B     	 ldr r3,.L124+4
 2112 0066 1A70     	 strb r2,[r3]
 266:../DeviceObject/infotainment/info_operation.c **** 	tens	= rtc_time.second / 10;
 2113              	 .loc 5 266 0
 2114 0068 3B1D     	 add r3,r7,#4
 2115 006a 9B78     	 ldrb r3,[r3,#2]
 2116 006c 181C     	 mov r0,r3
 2117 006e 0A21     	 mov r1,#10
 2118 0070 FFF7FEFF 	 bl __aeabi_uidiv
 2119 0074 031C     	 mov r3,r0
 2120 0076 DAB2     	 uxtb r2,r3
 2121 0078 794B     	 ldr r3,.L124+8
 2122 007a 1A70     	 strb r2,[r3]
 267:../DeviceObject/infotainment/info_operation.c **** 	rtc_time.second = (tens << 4) | (0x0F & ones);
 2123              	 .loc 5 267 0
 2124 007c 784B     	 ldr r3,.L124+8
 2125 007e 1B78     	 ldrb r3,[r3]
 2126 0080 1B01     	 lsl r3,r3,#4
 2127 0082 DAB2     	 uxtb r2,r3
 2128 0084 754B     	 ldr r3,.L124+4
 2129 0086 1B78     	 ldrb r3,[r3]
 2130 0088 DBB2     	 uxtb r3,r3
 2131 008a 191C     	 add r1,r3,#0
 2132 008c 0F23     	 mov r3,#15
 2133 008e 0B40     	 and r3,r1
 2134 0090 DBB2     	 uxtb r3,r3
 2135 0092 1343     	 orr r3,r2
 2136 0094 DBB2     	 uxtb r3,r3
 2137 0096 DAB2     	 uxtb r2,r3
 2138 0098 3B1D     	 add r3,r7,#4
 2139 009a 9A70     	 strb r2,[r3,#2]
 268:../DeviceObject/infotainment/info_operation.c **** 
 269:../DeviceObject/infotainment/info_operation.c **** 	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wa
 2140              	 .loc 5 269 0
 2141 009c C046     	 mov r8,r8
 2142              	.L115:
 2143              	 .loc 5 269 0 is_stmt 0 discriminator 1
 2144 009e 6E4B     	 ldr r3,.L124
 2145 00a0 181C     	 mov r0,r3
 2146 00a2 FFF7FEFF 	 bl XMC_I2C_CH_GetStatusFlag
 2147 00a6 021C     	 mov r2,r0
 2148 00a8 8023     	 mov r3,#128
 2149 00aa 9B00     	 lsl r3,r3,#2
 2150 00ac 1340     	 and r3,r2
 2151 00ae F6D0     	 beq .L115
 2152              	.LBB17:
 270:../DeviceObject/infotainment/info_operation.c **** 	for(uint16_t count=0; count < 500; count++){}
 2153              	 .loc 5 270 0 is_stmt 1
 2154 00b0 1423     	 mov r3,#20
 2155 00b2 FB18     	 add r3,r7,r3
 2156 00b4 0022     	 mov r2,#0
 2157 00b6 1A80     	 strh r2,[r3]
 2158 00b8 06E0     	 b .L116
 2159              	.L117:
 2160              	 .loc 5 270 0 is_stmt 0 discriminator 3
 2161 00ba 1423     	 mov r3,#20
 2162 00bc FB18     	 add r3,r7,r3
 2163 00be 1A88     	 ldrh r2,[r3]
 2164 00c0 1423     	 mov r3,#20
 2165 00c2 FB18     	 add r3,r7,r3
 2166 00c4 0132     	 add r2,r2,#1
 2167 00c6 1A80     	 strh r2,[r3]
 2168              	.L116:
 2169              	 .loc 5 270 0 discriminator 1
 2170 00c8 1423     	 mov r3,#20
 2171 00ca FB18     	 add r3,r7,r3
 2172 00cc 1A88     	 ldrh r2,[r3]
 2173 00ce F423     	 mov r3,#244
 2174 00d0 FF33     	 add r3,r3,#255
 2175 00d2 9A42     	 cmp r2,r3
 2176 00d4 F1D9     	 bls .L117
 2177              	.LBE17:
 271:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 2178              	 .loc 5 271 0 is_stmt 1
 2179 00d6 604A     	 ldr r2,.L124
 2180 00d8 8023     	 mov r3,#128
 2181 00da 9B00     	 lsl r3,r3,#2
 2182 00dc 101C     	 mov r0,r2
 2183 00de 191C     	 mov r1,r3
 2184 00e0 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 272:../DeviceObject/infotainment/info_operation.c **** 
 273:../DeviceObject/infotainment/info_operation.c **** 	/*	 					   Write Data into Seconds Byte						*/
 274:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, rtc_time.second | 0x80);	// '1' in MSB is used to keep ST
 2185              	 .loc 5 274 0
 2186 00e4 3B1D     	 add r3,r7,#4
 2187 00e6 9B78     	 ldrb r3,[r3,#2]
 2188 00e8 8022     	 mov r2,#128
 2189 00ea 5242     	 neg r2,r2
 2190 00ec 1343     	 orr r3,r2
 2191 00ee DBB2     	 uxtb r3,r3
 2192 00f0 594A     	 ldr r2,.L124
 2193 00f2 101C     	 mov r0,r2
 2194 00f4 191C     	 mov r1,r3
 2195 00f6 FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 275:../DeviceObject/infotainment/info_operation.c **** 	ones 		= rtc_time.minute % 10;		// preparing 'minutes' value while bus is transmitting 'seconds' v
 2196              	 .loc 5 275 0
 2197 00fa 3B1D     	 add r3,r7,#4
 2198 00fc 5B78     	 ldrb r3,[r3,#1]
 2199 00fe 181C     	 mov r0,r3
 2200 0100 0A21     	 mov r1,#10
 2201 0102 FFF7FEFF 	 bl __aeabi_uidivmod
 2202 0106 0B1C     	 mov r3,r1
 2203 0108 DAB2     	 uxtb r2,r3
 2204 010a 544B     	 ldr r3,.L124+4
 2205 010c 1A70     	 strb r2,[r3]
 276:../DeviceObject/infotainment/info_operation.c **** 	tens 		= rtc_time.minute / 10;
 2206              	 .loc 5 276 0
 2207 010e 3B1D     	 add r3,r7,#4
 2208 0110 5B78     	 ldrb r3,[r3,#1]
 2209 0112 181C     	 mov r0,r3
 2210 0114 0A21     	 mov r1,#10
 2211 0116 FFF7FEFF 	 bl __aeabi_uidiv
 2212 011a 031C     	 mov r3,r0
 2213 011c DAB2     	 uxtb r2,r3
 2214 011e 504B     	 ldr r3,.L124+8
 2215 0120 1A70     	 strb r2,[r3]
 277:../DeviceObject/infotainment/info_operation.c **** 	rtc_time.minute = (tens << 4) | (0x0F & ones);
 2216              	 .loc 5 277 0
 2217 0122 4F4B     	 ldr r3,.L124+8
 2218 0124 1B78     	 ldrb r3,[r3]
 2219 0126 1B01     	 lsl r3,r3,#4
 2220 0128 DAB2     	 uxtb r2,r3
 2221 012a 4C4B     	 ldr r3,.L124+4
 2222 012c 1B78     	 ldrb r3,[r3]
 2223 012e DBB2     	 uxtb r3,r3
 2224 0130 191C     	 add r1,r3,#0
 2225 0132 0F23     	 mov r3,#15
 2226 0134 0B40     	 and r3,r1
 2227 0136 DBB2     	 uxtb r3,r3
 2228 0138 1343     	 orr r3,r2
 2229 013a DBB2     	 uxtb r3,r3
 2230 013c DAB2     	 uxtb r2,r3
 2231 013e 3B1D     	 add r3,r7,#4
 2232 0140 5A70     	 strb r2,[r3,#1]
 2233              	.LBB18:
 278:../DeviceObject/infotainment/info_operation.c **** 
 279:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 280:../DeviceObject/infotainment/info_operation.c **** 	for(uint16_t count=0; count < 500; count++){}
 2234              	 .loc 5 280 0
 2235 0142 1223     	 mov r3,#18
 2236 0144 FB18     	 add r3,r7,r3
 2237 0146 0022     	 mov r2,#0
 2238 0148 1A80     	 strh r2,[r3]
 2239 014a 06E0     	 b .L118
 2240              	.L119:
 2241              	 .loc 5 280 0 is_stmt 0 discriminator 3
 2242 014c 1223     	 mov r3,#18
 2243 014e FB18     	 add r3,r7,r3
 2244 0150 1A88     	 ldrh r2,[r3]
 2245 0152 1223     	 mov r3,#18
 2246 0154 FB18     	 add r3,r7,r3
 2247 0156 0132     	 add r2,r2,#1
 2248 0158 1A80     	 strh r2,[r3]
 2249              	.L118:
 2250              	 .loc 5 280 0 discriminator 1
 2251 015a 1223     	 mov r3,#18
 2252 015c FB18     	 add r3,r7,r3
 2253 015e 1A88     	 ldrh r2,[r3]
 2254 0160 F423     	 mov r3,#244
 2255 0162 FF33     	 add r3,r3,#255
 2256 0164 9A42     	 cmp r2,r3
 2257 0166 F1D9     	 bls .L119
 2258              	.LBE18:
 281:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 2259              	 .loc 5 281 0 is_stmt 1
 2260 0168 3B4A     	 ldr r2,.L124
 2261 016a 8023     	 mov r3,#128
 2262 016c 9B00     	 lsl r3,r3,#2
 2263 016e 101C     	 mov r0,r2
 2264 0170 191C     	 mov r1,r3
 2265 0172 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 282:../DeviceObject/infotainment/info_operation.c **** 
 283:../DeviceObject/infotainment/info_operation.c **** 	/*	 					   Write Data into Minutes Byte						*/
 284:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, rtc_time.minute);
 2266              	 .loc 5 284 0
 2267 0176 3B1D     	 add r3,r7,#4
 2268 0178 5B78     	 ldrb r3,[r3,#1]
 2269 017a 374A     	 ldr r2,.L124
 2270 017c 101C     	 mov r0,r2
 2271 017e 191C     	 mov r1,r3
 2272 0180 FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 285:../DeviceObject/infotainment/info_operation.c **** 	ones 		= rtc_time.hour % 10;				// preparing 'hour' value while bus is transmitting 'minutes' valu
 2273              	 .loc 5 285 0
 2274 0184 3B1D     	 add r3,r7,#4
 2275 0186 1B78     	 ldrb r3,[r3]
 2276 0188 181C     	 mov r0,r3
 2277 018a 0A21     	 mov r1,#10
 2278 018c FFF7FEFF 	 bl __aeabi_uidivmod
 2279 0190 0B1C     	 mov r3,r1
 2280 0192 DAB2     	 uxtb r2,r3
 2281 0194 314B     	 ldr r3,.L124+4
 2282 0196 1A70     	 strb r2,[r3]
 286:../DeviceObject/infotainment/info_operation.c **** 	tens 		= rtc_time.hour / 10;
 2283              	 .loc 5 286 0
 2284 0198 3B1D     	 add r3,r7,#4
 2285 019a 1B78     	 ldrb r3,[r3]
 2286 019c 181C     	 mov r0,r3
 2287 019e 0A21     	 mov r1,#10
 2288 01a0 FFF7FEFF 	 bl __aeabi_uidiv
 2289 01a4 031C     	 mov r3,r0
 2290 01a6 DAB2     	 uxtb r2,r3
 2291 01a8 2D4B     	 ldr r3,.L124+8
 2292 01aa 1A70     	 strb r2,[r3]
 287:../DeviceObject/infotainment/info_operation.c **** 	rtc_time.hour = (tens << 4) | (0x0F & ones);
 2293              	 .loc 5 287 0
 2294 01ac 2C4B     	 ldr r3,.L124+8
 2295 01ae 1B78     	 ldrb r3,[r3]
 2296 01b0 1B01     	 lsl r3,r3,#4
 2297 01b2 DAB2     	 uxtb r2,r3
 2298 01b4 294B     	 ldr r3,.L124+4
 2299 01b6 1B78     	 ldrb r3,[r3]
 2300 01b8 DBB2     	 uxtb r3,r3
 2301 01ba 191C     	 add r1,r3,#0
 2302 01bc 0F23     	 mov r3,#15
 2303 01be 0B40     	 and r3,r1
 2304 01c0 DBB2     	 uxtb r3,r3
 2305 01c2 1343     	 orr r3,r2
 2306 01c4 DBB2     	 uxtb r3,r3
 2307 01c6 DAB2     	 uxtb r2,r3
 2308 01c8 3B1D     	 add r3,r7,#4
 2309 01ca 1A70     	 strb r2,[r3]
 2310              	.LBB19:
 288:../DeviceObject/infotainment/info_operation.c **** 
 289:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 290:../DeviceObject/infotainment/info_operation.c **** 	for(uint16_t count=0; count < 500; count++){}
 2311              	 .loc 5 290 0
 2312 01cc 1023     	 mov r3,#16
 2313 01ce FB18     	 add r3,r7,r3
 2314 01d0 0022     	 mov r2,#0
 2315 01d2 1A80     	 strh r2,[r3]
 2316 01d4 06E0     	 b .L120
 2317              	.L121:
 2318              	 .loc 5 290 0 is_stmt 0 discriminator 3
 2319 01d6 1023     	 mov r3,#16
 2320 01d8 FB18     	 add r3,r7,r3
 2321 01da 1A88     	 ldrh r2,[r3]
 2322 01dc 1023     	 mov r3,#16
 2323 01de FB18     	 add r3,r7,r3
 2324 01e0 0132     	 add r2,r2,#1
 2325 01e2 1A80     	 strh r2,[r3]
 2326              	.L120:
 2327              	 .loc 5 290 0 discriminator 1
 2328 01e4 1023     	 mov r3,#16
 2329 01e6 FB18     	 add r3,r7,r3
 2330 01e8 1A88     	 ldrh r2,[r3]
 2331 01ea F423     	 mov r3,#244
 2332 01ec FF33     	 add r3,r3,#255
 2333 01ee 9A42     	 cmp r2,r3
 2334 01f0 F1D9     	 bls .L121
 2335              	.LBE19:
 291:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 2336              	 .loc 5 291 0 is_stmt 1
 2337 01f2 194A     	 ldr r2,.L124
 2338 01f4 8023     	 mov r3,#128
 2339 01f6 9B00     	 lsl r3,r3,#2
 2340 01f8 101C     	 mov r0,r2
 2341 01fa 191C     	 mov r1,r3
 2342 01fc FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 292:../DeviceObject/infotainment/info_operation.c **** 
 293:../DeviceObject/infotainment/info_operation.c **** 	/*	 						Write Data into Hour Byte						*/
 294:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, rtc_time.hour & ~0x40);		// is used for 24H mode
 2343              	 .loc 5 294 0
 2344 0200 3B1D     	 add r3,r7,#4
 2345 0202 1B78     	 ldrb r3,[r3]
 2346 0204 4022     	 mov r2,#64
 2347 0206 9343     	 bic r3,r2
 2348 0208 DBB2     	 uxtb r3,r3
 2349 020a 134A     	 ldr r2,.L124
 2350 020c 101C     	 mov r0,r2
 2351 020e 191C     	 mov r1,r3
 2352 0210 FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 2353              	.LBB20:
 295:../DeviceObject/infotainment/info_operation.c **** 
 296:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 297:../DeviceObject/infotainment/info_operation.c **** 	for(uint16_t count=0; count < 500; count++){}
 2354              	 .loc 5 297 0
 2355 0214 0E23     	 mov r3,#14
 2356 0216 FB18     	 add r3,r7,r3
 2357 0218 0022     	 mov r2,#0
 2358 021a 1A80     	 strh r2,[r3]
 2359 021c 06E0     	 b .L122
 2360              	.L123:
 2361              	 .loc 5 297 0 is_stmt 0 discriminator 3
 2362 021e 0E23     	 mov r3,#14
 2363 0220 FB18     	 add r3,r7,r3
 2364 0222 1A88     	 ldrh r2,[r3]
 2365 0224 0E23     	 mov r3,#14
 2366 0226 FB18     	 add r3,r7,r3
 2367 0228 0132     	 add r2,r2,#1
 2368 022a 1A80     	 strh r2,[r3]
 2369              	.L122:
 2370              	 .loc 5 297 0 discriminator 1
 2371 022c 0E23     	 mov r3,#14
 2372 022e FB18     	 add r3,r7,r3
 2373 0230 1A88     	 ldrh r2,[r3]
 2374 0232 F423     	 mov r3,#244
 2375 0234 FF33     	 add r3,r3,#255
 2376 0236 9A42     	 cmp r2,r3
 2377 0238 F1D9     	 bls .L123
 2378              	.LBE20:
 298:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 2379              	 .loc 5 298 0 is_stmt 1
 2380 023a 074A     	 ldr r2,.L124
 2381 023c 8023     	 mov r3,#128
 2382 023e 9B00     	 lsl r3,r3,#2
 2383 0240 101C     	 mov r0,r2
 2384 0242 191C     	 mov r1,r3
 2385 0244 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 299:../DeviceObject/infotainment/info_operation.c **** 
 300:../DeviceObject/infotainment/info_operation.c ****   	XMC_I2C_CH_MasterStop(XMC_USIC1_CH1);
 2386              	 .loc 5 300 0
 2387 0248 034B     	 ldr r3,.L124
 2388 024a 181C     	 mov r0,r3
 2389 024c FFF7FEFF 	 bl XMC_I2C_CH_MasterStop
 301:../DeviceObject/infotainment/info_operation.c **** }
 2390              	 .loc 5 301 0
 2391 0250 BD46     	 mov sp,r7
 2392 0252 06B0     	 add sp,sp,#24
 2393              	 
 2394 0254 80BD     	 pop {r7,pc}
 2395              	.L125:
 2396 0256 C046     	 .align 2
 2397              	.L124:
 2398 0258 00420048 	 .word 1207976448
 2399 025c 00000000 	 .word ones.8805
 2400 0260 00000000 	 .word tens.8804
 2401              	 .cfi_endproc
 2402              	.LFE232:
 2404              	 .section .text.INFO_RTCDateInit,"ax",%progbits
 2405              	 .align 2
 2406              	 .global INFO_RTCDateInit
 2407              	 .code 16
 2408              	 .thumb_func
 2410              	INFO_RTCDateInit:
 2411              	.LFB233:
 302:../DeviceObject/infotainment/info_operation.c **** void INFO_RTCDateInit(RTC_DATE_PARAM_t rtc_date)
 303:../DeviceObject/infotainment/info_operation.c **** {
 2412              	 .loc 5 303 0
 2413              	 .cfi_startproc
 2414 0000 80B5     	 push {r7,lr}
 2415              	.LCFI63:
 2416              	 .cfi_def_cfa_offset 8
 2417              	 .cfi_offset 7,-8
 2418              	 .cfi_offset 14,-4
 2419 0002 86B0     	 sub sp,sp,#24
 2420              	.LCFI64:
 2421              	 .cfi_def_cfa_offset 32
 2422 0004 00AF     	 add r7,sp,#0
 2423              	.LCFI65:
 2424              	 .cfi_def_cfa_register 7
 2425 0006 3B1D     	 add r3,r7,#4
 2426 0008 1860     	 str r0,[r3]
 304:../DeviceObject/infotainment/info_operation.c **** 	static uint8_t tens;
 305:../DeviceObject/infotainment/info_operation.c **** 	static uint8_t ones;
 306:../DeviceObject/infotainment/info_operation.c **** 
 307:../DeviceObject/infotainment/info_operation.c **** 	/*    						Accessing RTCC Control Byte 						*/
 308:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_WRITE);
 2427              	 .loc 5 308 0
 2428 000a 914B     	 ldr r3,.L138
 2429 000c 181C     	 mov r0,r3
 2430 000e DE21     	 mov r1,#222
 2431 0010 0022     	 mov r2,#0
 2432 0012 FFF7FEFF 	 bl XMC_I2C_CH_MasterStart
 2433              	.LBB21:
 309:../DeviceObject/infotainment/info_operation.c **** 
 310:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 311:../DeviceObject/infotainment/info_operation.c **** 	for(uint16_t count=0; count < 500; count++){}
 2434              	 .loc 5 311 0
 2435 0016 1623     	 mov r3,#22
 2436 0018 FB18     	 add r3,r7,r3
 2437 001a 0022     	 mov r2,#0
 2438 001c 1A80     	 strh r2,[r3]
 2439 001e 06E0     	 b .L127
 2440              	.L128:
 2441              	 .loc 5 311 0 is_stmt 0 discriminator 3
 2442 0020 1623     	 mov r3,#22
 2443 0022 FB18     	 add r3,r7,r3
 2444 0024 1A88     	 ldrh r2,[r3]
 2445 0026 1623     	 mov r3,#22
 2446 0028 FB18     	 add r3,r7,r3
 2447 002a 0132     	 add r2,r2,#1
 2448 002c 1A80     	 strh r2,[r3]
 2449              	.L127:
 2450              	 .loc 5 311 0 discriminator 1
 2451 002e 1623     	 mov r3,#22
 2452 0030 FB18     	 add r3,r7,r3
 2453 0032 1A88     	 ldrh r2,[r3]
 2454 0034 F423     	 mov r3,#244
 2455 0036 FF33     	 add r3,r3,#255
 2456 0038 9A42     	 cmp r2,r3
 2457 003a F1D9     	 bls .L128
 2458              	.LBE21:
 312:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 2459              	 .loc 5 312 0 is_stmt 1
 2460 003c 844A     	 ldr r2,.L138
 2461 003e 8023     	 mov r3,#128
 2462 0040 9B00     	 lsl r3,r3,#2
 2463 0042 101C     	 mov r0,r2
 2464 0044 191C     	 mov r1,r3
 2465 0046 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 313:../DeviceObject/infotainment/info_operation.c **** 
 314:../DeviceObject/infotainment/info_operation.c ****   	/*    						Write Date Address Byte   					*/
 315:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, RTCDATE);
 2466              	 .loc 5 315 0
 2467 004a 814B     	 ldr r3,.L138
 2468 004c 181C     	 mov r0,r3
 2469 004e 0421     	 mov r1,#4
 2470 0050 FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 316:../DeviceObject/infotainment/info_operation.c ****  	ones	= rtc_date.date % 10;
 2471              	 .loc 5 316 0
 2472 0054 3B1D     	 add r3,r7,#4
 2473 0056 DB78     	 ldrb r3,[r3,#3]
 2474 0058 181C     	 mov r0,r3
 2475 005a 0A21     	 mov r1,#10
 2476 005c FFF7FEFF 	 bl __aeabi_uidivmod
 2477 0060 0B1C     	 mov r3,r1
 2478 0062 DAB2     	 uxtb r2,r3
 2479 0064 7B4B     	 ldr r3,.L138+4
 2480 0066 1A70     	 strb r2,[r3]
 317:../DeviceObject/infotainment/info_operation.c **** 	tens	= rtc_date.date / 10;
 2481              	 .loc 5 317 0
 2482 0068 3B1D     	 add r3,r7,#4
 2483 006a DB78     	 ldrb r3,[r3,#3]
 2484 006c 181C     	 mov r0,r3
 2485 006e 0A21     	 mov r1,#10
 2486 0070 FFF7FEFF 	 bl __aeabi_uidiv
 2487 0074 031C     	 mov r3,r0
 2488 0076 DAB2     	 uxtb r2,r3
 2489 0078 774B     	 ldr r3,.L138+8
 2490 007a 1A70     	 strb r2,[r3]
 318:../DeviceObject/infotainment/info_operation.c **** 	rtc_date.date = (tens << 4) | (0x0F & ones);
 2491              	 .loc 5 318 0
 2492 007c 764B     	 ldr r3,.L138+8
 2493 007e 1B78     	 ldrb r3,[r3]
 2494 0080 1B01     	 lsl r3,r3,#4
 2495 0082 DAB2     	 uxtb r2,r3
 2496 0084 734B     	 ldr r3,.L138+4
 2497 0086 1B78     	 ldrb r3,[r3]
 2498 0088 DBB2     	 uxtb r3,r3
 2499 008a 191C     	 add r1,r3,#0
 2500 008c 0F23     	 mov r3,#15
 2501 008e 0B40     	 and r3,r1
 2502 0090 DBB2     	 uxtb r3,r3
 2503 0092 1343     	 orr r3,r2
 2504 0094 DBB2     	 uxtb r3,r3
 2505 0096 DAB2     	 uxtb r2,r3
 2506 0098 3B1D     	 add r3,r7,#4
 2507 009a DA70     	 strb r2,[r3,#3]
 2508              	.LBB22:
 319:../DeviceObject/infotainment/info_operation.c **** 
 320:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 321:../DeviceObject/infotainment/info_operation.c **** 	for(uint16_t count=0; count < 500; count++){}
 2509              	 .loc 5 321 0
 2510 009c 1423     	 mov r3,#20
 2511 009e FB18     	 add r3,r7,r3
 2512 00a0 0022     	 mov r2,#0
 2513 00a2 1A80     	 strh r2,[r3]
 2514 00a4 06E0     	 b .L129
 2515              	.L130:
 2516              	 .loc 5 321 0 is_stmt 0 discriminator 3
 2517 00a6 1423     	 mov r3,#20
 2518 00a8 FB18     	 add r3,r7,r3
 2519 00aa 1A88     	 ldrh r2,[r3]
 2520 00ac 1423     	 mov r3,#20
 2521 00ae FB18     	 add r3,r7,r3
 2522 00b0 0132     	 add r2,r2,#1
 2523 00b2 1A80     	 strh r2,[r3]
 2524              	.L129:
 2525              	 .loc 5 321 0 discriminator 1
 2526 00b4 1423     	 mov r3,#20
 2527 00b6 FB18     	 add r3,r7,r3
 2528 00b8 1A88     	 ldrh r2,[r3]
 2529 00ba F423     	 mov r3,#244
 2530 00bc FF33     	 add r3,r3,#255
 2531 00be 9A42     	 cmp r2,r3
 2532 00c0 F1D9     	 bls .L130
 2533              	.LBE22:
 322:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 2534              	 .loc 5 322 0 is_stmt 1
 2535 00c2 634A     	 ldr r2,.L138
 2536 00c4 8023     	 mov r3,#128
 2537 00c6 9B00     	 lsl r3,r3,#2
 2538 00c8 101C     	 mov r0,r2
 2539 00ca 191C     	 mov r1,r3
 2540 00cc FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 323:../DeviceObject/infotainment/info_operation.c **** 
 324:../DeviceObject/infotainment/info_operation.c **** 	/*	 					   Write Data into Date Byte						*/
 325:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, rtc_date.date);
 2541              	 .loc 5 325 0
 2542 00d0 3B1D     	 add r3,r7,#4
 2543 00d2 DB78     	 ldrb r3,[r3,#3]
 2544 00d4 5E4A     	 ldr r2,.L138
 2545 00d6 101C     	 mov r0,r2
 2546 00d8 191C     	 mov r1,r3
 2547 00da FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 326:../DeviceObject/infotainment/info_operation.c **** 	ones 		= rtc_date.month % 10;
 2548              	 .loc 5 326 0
 2549 00de 3B1D     	 add r3,r7,#4
 2550 00e0 9B78     	 ldrb r3,[r3,#2]
 2551 00e2 181C     	 mov r0,r3
 2552 00e4 0A21     	 mov r1,#10
 2553 00e6 FFF7FEFF 	 bl __aeabi_uidivmod
 2554 00ea 0B1C     	 mov r3,r1
 2555 00ec DAB2     	 uxtb r2,r3
 2556 00ee 594B     	 ldr r3,.L138+4
 2557 00f0 1A70     	 strb r2,[r3]
 327:../DeviceObject/infotainment/info_operation.c **** 	tens 		= rtc_date.month / 10;
 2558              	 .loc 5 327 0
 2559 00f2 3B1D     	 add r3,r7,#4
 2560 00f4 9B78     	 ldrb r3,[r3,#2]
 2561 00f6 181C     	 mov r0,r3
 2562 00f8 0A21     	 mov r1,#10
 2563 00fa FFF7FEFF 	 bl __aeabi_uidiv
 2564 00fe 031C     	 mov r3,r0
 2565 0100 DAB2     	 uxtb r2,r3
 2566 0102 554B     	 ldr r3,.L138+8
 2567 0104 1A70     	 strb r2,[r3]
 328:../DeviceObject/infotainment/info_operation.c **** 	rtc_date.month = (tens << 4) | (0x0F & ones);
 2568              	 .loc 5 328 0
 2569 0106 544B     	 ldr r3,.L138+8
 2570 0108 1B78     	 ldrb r3,[r3]
 2571 010a 1B01     	 lsl r3,r3,#4
 2572 010c DAB2     	 uxtb r2,r3
 2573 010e 514B     	 ldr r3,.L138+4
 2574 0110 1B78     	 ldrb r3,[r3]
 2575 0112 DBB2     	 uxtb r3,r3
 2576 0114 191C     	 add r1,r3,#0
 2577 0116 0F23     	 mov r3,#15
 2578 0118 0B40     	 and r3,r1
 2579 011a DBB2     	 uxtb r3,r3
 2580 011c 1343     	 orr r3,r2
 2581 011e DBB2     	 uxtb r3,r3
 2582 0120 DAB2     	 uxtb r2,r3
 2583 0122 3B1D     	 add r3,r7,#4
 2584 0124 9A70     	 strb r2,[r3,#2]
 2585              	.LBB23:
 329:../DeviceObject/infotainment/info_operation.c **** 
 330:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 331:../DeviceObject/infotainment/info_operation.c **** 	for(uint16_t count=0; count < 500; count++){}
 2586              	 .loc 5 331 0
 2587 0126 1223     	 mov r3,#18
 2588 0128 FB18     	 add r3,r7,r3
 2589 012a 0022     	 mov r2,#0
 2590 012c 1A80     	 strh r2,[r3]
 2591 012e 06E0     	 b .L131
 2592              	.L132:
 2593              	 .loc 5 331 0 is_stmt 0 discriminator 3
 2594 0130 1223     	 mov r3,#18
 2595 0132 FB18     	 add r3,r7,r3
 2596 0134 1A88     	 ldrh r2,[r3]
 2597 0136 1223     	 mov r3,#18
 2598 0138 FB18     	 add r3,r7,r3
 2599 013a 0132     	 add r2,r2,#1
 2600 013c 1A80     	 strh r2,[r3]
 2601              	.L131:
 2602              	 .loc 5 331 0 discriminator 1
 2603 013e 1223     	 mov r3,#18
 2604 0140 FB18     	 add r3,r7,r3
 2605 0142 1A88     	 ldrh r2,[r3]
 2606 0144 F423     	 mov r3,#244
 2607 0146 FF33     	 add r3,r3,#255
 2608 0148 9A42     	 cmp r2,r3
 2609 014a F1D9     	 bls .L132
 2610              	.LBE23:
 332:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 2611              	 .loc 5 332 0 is_stmt 1
 2612 014c 404A     	 ldr r2,.L138
 2613 014e 8023     	 mov r3,#128
 2614 0150 9B00     	 lsl r3,r3,#2
 2615 0152 101C     	 mov r0,r2
 2616 0154 191C     	 mov r1,r3
 2617 0156 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 333:../DeviceObject/infotainment/info_operation.c **** 
 334:../DeviceObject/infotainment/info_operation.c **** 	/*	 					   Write Data into Month Byte						*/
 335:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, rtc_date.month);
 2618              	 .loc 5 335 0
 2619 015a 3B1D     	 add r3,r7,#4
 2620 015c 9B78     	 ldrb r3,[r3,#2]
 2621 015e 3C4A     	 ldr r2,.L138
 2622 0160 101C     	 mov r0,r2
 2623 0162 191C     	 mov r1,r3
 2624 0164 FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 336:../DeviceObject/infotainment/info_operation.c **** 	ones 		= rtc_date.year % 10;
 2625              	 .loc 5 336 0
 2626 0168 3B1D     	 add r3,r7,#4
 2627 016a 1B88     	 ldrh r3,[r3]
 2628 016c 181C     	 mov r0,r3
 2629 016e 0A21     	 mov r1,#10
 2630 0170 FFF7FEFF 	 bl __aeabi_uidivmod
 2631 0174 0B1C     	 mov r3,r1
 2632 0176 9BB2     	 uxth r3,r3
 2633 0178 DAB2     	 uxtb r2,r3
 2634 017a 364B     	 ldr r3,.L138+4
 2635 017c 1A70     	 strb r2,[r3]
 337:../DeviceObject/infotainment/info_operation.c **** 	tens 		= rtc_date.year / 10;
 2636              	 .loc 5 337 0
 2637 017e 3B1D     	 add r3,r7,#4
 2638 0180 1B88     	 ldrh r3,[r3]
 2639 0182 181C     	 mov r0,r3
 2640 0184 0A21     	 mov r1,#10
 2641 0186 FFF7FEFF 	 bl __aeabi_uidiv
 2642 018a 031C     	 mov r3,r0
 2643 018c 9BB2     	 uxth r3,r3
 2644 018e DAB2     	 uxtb r2,r3
 2645 0190 314B     	 ldr r3,.L138+8
 2646 0192 1A70     	 strb r2,[r3]
 338:../DeviceObject/infotainment/info_operation.c **** 	rtc_date.year = (tens << 4) | (0x0F & ones);
 2647              	 .loc 5 338 0
 2648 0194 304B     	 ldr r3,.L138+8
 2649 0196 1B78     	 ldrb r3,[r3]
 2650 0198 1B01     	 lsl r3,r3,#4
 2651 019a 9AB2     	 uxth r2,r3
 2652 019c 2D4B     	 ldr r3,.L138+4
 2653 019e 1B78     	 ldrb r3,[r3]
 2654 01a0 9BB2     	 uxth r3,r3
 2655 01a2 191C     	 add r1,r3,#0
 2656 01a4 0F23     	 mov r3,#15
 2657 01a6 0B40     	 and r3,r1
 2658 01a8 9BB2     	 uxth r3,r3
 2659 01aa 1343     	 orr r3,r2
 2660 01ac 9BB2     	 uxth r3,r3
 2661 01ae 9AB2     	 uxth r2,r3
 2662 01b0 3B1D     	 add r3,r7,#4
 2663 01b2 1A80     	 strh r2,[r3]
 339:../DeviceObject/infotainment/info_operation.c **** 
 340:../DeviceObject/infotainment/info_operation.c **** 	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wa
 2664              	 .loc 5 340 0
 2665 01b4 C046     	 mov r8,r8
 2666              	.L133:
 2667              	 .loc 5 340 0 is_stmt 0 discriminator 1
 2668 01b6 264B     	 ldr r3,.L138
 2669 01b8 181C     	 mov r0,r3
 2670 01ba FFF7FEFF 	 bl XMC_I2C_CH_GetStatusFlag
 2671 01be 021C     	 mov r2,r0
 2672 01c0 8023     	 mov r3,#128
 2673 01c2 9B00     	 lsl r3,r3,#2
 2674 01c4 1340     	 and r3,r2
 2675 01c6 F6D0     	 beq .L133
 2676              	.LBB24:
 341:../DeviceObject/infotainment/info_operation.c **** 	for(uint16_t count=0; count < 500; count++){}
 2677              	 .loc 5 341 0 is_stmt 1
 2678 01c8 1023     	 mov r3,#16
 2679 01ca FB18     	 add r3,r7,r3
 2680 01cc 0022     	 mov r2,#0
 2681 01ce 1A80     	 strh r2,[r3]
 2682 01d0 06E0     	 b .L134
 2683              	.L135:
 2684              	 .loc 5 341 0 is_stmt 0 discriminator 3
 2685 01d2 1023     	 mov r3,#16
 2686 01d4 FB18     	 add r3,r7,r3
 2687 01d6 1A88     	 ldrh r2,[r3]
 2688 01d8 1023     	 mov r3,#16
 2689 01da FB18     	 add r3,r7,r3
 2690 01dc 0132     	 add r2,r2,#1
 2691 01de 1A80     	 strh r2,[r3]
 2692              	.L134:
 2693              	 .loc 5 341 0 discriminator 1
 2694 01e0 1023     	 mov r3,#16
 2695 01e2 FB18     	 add r3,r7,r3
 2696 01e4 1A88     	 ldrh r2,[r3]
 2697 01e6 F423     	 mov r3,#244
 2698 01e8 FF33     	 add r3,r3,#255
 2699 01ea 9A42     	 cmp r2,r3
 2700 01ec F1D9     	 bls .L135
 2701              	.LBE24:
 342:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 2702              	 .loc 5 342 0 is_stmt 1
 2703 01ee 184A     	 ldr r2,.L138
 2704 01f0 8023     	 mov r3,#128
 2705 01f2 9B00     	 lsl r3,r3,#2
 2706 01f4 101C     	 mov r0,r2
 2707 01f6 191C     	 mov r1,r3
 2708 01f8 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 343:../DeviceObject/infotainment/info_operation.c **** 
 344:../DeviceObject/infotainment/info_operation.c **** 	/*	 						Write Data into Year Byte						*/
 345:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, rtc_date.year);
 2709              	 .loc 5 345 0
 2710 01fc 3B1D     	 add r3,r7,#4
 2711 01fe 1B88     	 ldrh r3,[r3]
 2712 0200 DBB2     	 uxtb r3,r3
 2713 0202 134A     	 ldr r2,.L138
 2714 0204 101C     	 mov r0,r2
 2715 0206 191C     	 mov r1,r3
 2716 0208 FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 2717              	.LBB25:
 346:../DeviceObject/infotainment/info_operation.c **** 
 347:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 348:../DeviceObject/infotainment/info_operation.c **** 	for(uint16_t count=0; count < 500; count++){}
 2718              	 .loc 5 348 0
 2719 020c 0E23     	 mov r3,#14
 2720 020e FB18     	 add r3,r7,r3
 2721 0210 0022     	 mov r2,#0
 2722 0212 1A80     	 strh r2,[r3]
 2723 0214 06E0     	 b .L136
 2724              	.L137:
 2725              	 .loc 5 348 0 is_stmt 0 discriminator 3
 2726 0216 0E23     	 mov r3,#14
 2727 0218 FB18     	 add r3,r7,r3
 2728 021a 1A88     	 ldrh r2,[r3]
 2729 021c 0E23     	 mov r3,#14
 2730 021e FB18     	 add r3,r7,r3
 2731 0220 0132     	 add r2,r2,#1
 2732 0222 1A80     	 strh r2,[r3]
 2733              	.L136:
 2734              	 .loc 5 348 0 discriminator 1
 2735 0224 0E23     	 mov r3,#14
 2736 0226 FB18     	 add r3,r7,r3
 2737 0228 1A88     	 ldrh r2,[r3]
 2738 022a F423     	 mov r3,#244
 2739 022c FF33     	 add r3,r3,#255
 2740 022e 9A42     	 cmp r2,r3
 2741 0230 F1D9     	 bls .L137
 2742              	.LBE25:
 349:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 2743              	 .loc 5 349 0 is_stmt 1
 2744 0232 074A     	 ldr r2,.L138
 2745 0234 8023     	 mov r3,#128
 2746 0236 9B00     	 lsl r3,r3,#2
 2747 0238 101C     	 mov r0,r2
 2748 023a 191C     	 mov r1,r3
 2749 023c FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 350:../DeviceObject/infotainment/info_operation.c **** 
 351:../DeviceObject/infotainment/info_operation.c ****   	XMC_I2C_CH_MasterStop(XMC_USIC1_CH1);
 2750              	 .loc 5 351 0
 2751 0240 034B     	 ldr r3,.L138
 2752 0242 181C     	 mov r0,r3
 2753 0244 FFF7FEFF 	 bl XMC_I2C_CH_MasterStop
 352:../DeviceObject/infotainment/info_operation.c **** }
 2754              	 .loc 5 352 0
 2755 0248 BD46     	 mov sp,r7
 2756 024a 06B0     	 add sp,sp,#24
 2757              	 
 2758 024c 80BD     	 pop {r7,pc}
 2759              	.L139:
 2760 024e C046     	 .align 2
 2761              	.L138:
 2762 0250 00420048 	 .word 1207976448
 2763 0254 00000000 	 .word ones.8833
 2764 0258 00000000 	 .word tens.8832
 2765              	 .cfi_endproc
 2766              	.LFE233:
 2768              	 .section .text.INFO_RTCGetDate,"ax",%progbits
 2769              	 .align 2
 2770              	 .global INFO_RTCGetDate
 2771              	 .code 16
 2772              	 .thumb_func
 2774              	INFO_RTCGetDate:
 2775              	.LFB234:
 353:../DeviceObject/infotainment/info_operation.c **** 
 354:../DeviceObject/infotainment/info_operation.c **** RTC_DATE_PARAM_t INFO_RTCGetDate(void)
 355:../DeviceObject/infotainment/info_operation.c **** {
 2776              	 .loc 5 355 0
 2777              	 .cfi_startproc
 2778 0000 80B5     	 push {r7,lr}
 2779              	.LCFI66:
 2780              	 .cfi_def_cfa_offset 8
 2781              	 .cfi_offset 7,-8
 2782              	 .cfi_offset 14,-4
 2783 0002 86B0     	 sub sp,sp,#24
 2784              	.LCFI67:
 2785              	 .cfi_def_cfa_offset 32
 2786 0004 00AF     	 add r7,sp,#0
 2787              	.LCFI68:
 2788              	 .cfi_def_cfa_register 7
 356:../DeviceObject/infotainment/info_operation.c **** 	RTC_DATE_PARAM_t DataReceived;
 357:../DeviceObject/infotainment/info_operation.c **** 	uint8_t tens;
 358:../DeviceObject/infotainment/info_operation.c **** 	uint8_t ones;
 359:../DeviceObject/infotainment/info_operation.c **** 
 360:../DeviceObject/infotainment/info_operation.c **** 	/*    						Accessing RTCC Control Byte 						*/
 361:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_WRITE);
 2789              	 .loc 5 361 0
 2790 0006 A84B     	 ldr r3,.L154
 2791 0008 181C     	 mov r0,r3
 2792 000a DE21     	 mov r1,#222
 2793 000c 0022     	 mov r2,#0
 2794 000e FFF7FEFF 	 bl XMC_I2C_CH_MasterStart
 2795              	.LBB26:
 362:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 363:../DeviceObject/infotainment/info_operation.c **** 	for(uint16_t count=0; count < 500; count++){}
 2796              	 .loc 5 363 0
 2797 0012 1623     	 mov r3,#22
 2798 0014 FB18     	 add r3,r7,r3
 2799 0016 0022     	 mov r2,#0
 2800 0018 1A80     	 strh r2,[r3]
 2801 001a 06E0     	 b .L141
 2802              	.L142:
 2803              	 .loc 5 363 0 is_stmt 0 discriminator 3
 2804 001c 1623     	 mov r3,#22
 2805 001e FB18     	 add r3,r7,r3
 2806 0020 1A88     	 ldrh r2,[r3]
 2807 0022 1623     	 mov r3,#22
 2808 0024 FB18     	 add r3,r7,r3
 2809 0026 0132     	 add r2,r2,#1
 2810 0028 1A80     	 strh r2,[r3]
 2811              	.L141:
 2812              	 .loc 5 363 0 discriminator 1
 2813 002a 1623     	 mov r3,#22
 2814 002c FB18     	 add r3,r7,r3
 2815 002e 1A88     	 ldrh r2,[r3]
 2816 0030 F423     	 mov r3,#244
 2817 0032 FF33     	 add r3,r3,#255
 2818 0034 9A42     	 cmp r2,r3
 2819 0036 F1D9     	 bls .L142
 2820              	.LBE26:
 364:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 2821              	 .loc 5 364 0 is_stmt 1
 2822 0038 9B4A     	 ldr r2,.L154
 2823 003a 8023     	 mov r3,#128
 2824 003c 9B00     	 lsl r3,r3,#2
 2825 003e 101C     	 mov r0,r2
 2826 0040 191C     	 mov r1,r3
 2827 0042 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 365:../DeviceObject/infotainment/info_operation.c **** 
 366:../DeviceObject/infotainment/info_operation.c ****     /*    						Write Date Address Byte   					*/
 367:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, RTCDATE);
 2828              	 .loc 5 367 0
 2829 0046 984B     	 ldr r3,.L154
 2830 0048 181C     	 mov r0,r3
 2831 004a 0421     	 mov r1,#4
 2832 004c FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 2833              	.LBB27:
 368:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 369:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 2834              	 .loc 5 369 0
 2835 0050 1423     	 mov r3,#20
 2836 0052 FB18     	 add r3,r7,r3
 2837 0054 0022     	 mov r2,#0
 2838 0056 1A80     	 strh r2,[r3]
 2839 0058 06E0     	 b .L143
 2840              	.L144:
 2841              	 .loc 5 369 0 is_stmt 0 discriminator 3
 2842 005a 1423     	 mov r3,#20
 2843 005c FB18     	 add r3,r7,r3
 2844 005e 1A88     	 ldrh r2,[r3]
 2845 0060 1423     	 mov r3,#20
 2846 0062 FB18     	 add r3,r7,r3
 2847 0064 0132     	 add r2,r2,#1
 2848 0066 1A80     	 strh r2,[r3]
 2849              	.L143:
 2850              	 .loc 5 369 0 discriminator 1
 2851 0068 1423     	 mov r3,#20
 2852 006a FB18     	 add r3,r7,r3
 2853 006c 1A88     	 ldrh r2,[r3]
 2854 006e F423     	 mov r3,#244
 2855 0070 FF33     	 add r3,r3,#255
 2856 0072 9A42     	 cmp r2,r3
 2857 0074 F1D9     	 bls .L144
 2858              	.LBE27:
 370:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 2859              	 .loc 5 370 0 is_stmt 1
 2860 0076 8C4A     	 ldr r2,.L154
 2861 0078 8023     	 mov r3,#128
 2862 007a 9B00     	 lsl r3,r3,#2
 2863 007c 101C     	 mov r0,r2
 2864 007e 191C     	 mov r1,r3
 2865 0080 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 371:../DeviceObject/infotainment/info_operation.c **** 
 372:../DeviceObject/infotainment/info_operation.c ****     /*    						Accessing RTCC Control Byte again  					*/
 373:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterRepeatedStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_READ);
 2866              	 .loc 5 373 0
 2867 0084 884B     	 ldr r3,.L154
 2868 0086 181C     	 mov r0,r3
 2869 0088 DE21     	 mov r1,#222
 2870 008a 0122     	 mov r2,#1
 2871 008c FFF7FEFF 	 bl XMC_I2C_CH_MasterRepeatedStart
 2872              	.LBB28:
 374:../DeviceObject/infotainment/info_operation.c **** //    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){
 375:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 2873              	 .loc 5 375 0
 2874 0090 1223     	 mov r3,#18
 2875 0092 FB18     	 add r3,r7,r3
 2876 0094 0022     	 mov r2,#0
 2877 0096 1A80     	 strh r2,[r3]
 2878 0098 06E0     	 b .L145
 2879              	.L146:
 2880              	 .loc 5 375 0 is_stmt 0 discriminator 3
 2881 009a 1223     	 mov r3,#18
 2882 009c FB18     	 add r3,r7,r3
 2883 009e 1A88     	 ldrh r2,[r3]
 2884 00a0 1223     	 mov r3,#18
 2885 00a2 FB18     	 add r3,r7,r3
 2886 00a4 0132     	 add r2,r2,#1
 2887 00a6 1A80     	 strh r2,[r3]
 2888              	.L145:
 2889              	 .loc 5 375 0 discriminator 1
 2890 00a8 1223     	 mov r3,#18
 2891 00aa FB18     	 add r3,r7,r3
 2892 00ac 1A88     	 ldrh r2,[r3]
 2893 00ae F423     	 mov r3,#244
 2894 00b0 FF33     	 add r3,r3,#255
 2895 00b2 9A42     	 cmp r2,r3
 2896 00b4 F1D9     	 bls .L146
 2897              	.LBE28:
 376:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 2898              	 .loc 5 376 0 is_stmt 1
 2899 00b6 7C4A     	 ldr r2,.L154
 2900 00b8 8023     	 mov r3,#128
 2901 00ba 9B00     	 lsl r3,r3,#2
 2902 00bc 101C     	 mov r0,r2
 2903 00be 191C     	 mov r1,r3
 2904 00c0 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 377:../DeviceObject/infotainment/info_operation.c **** 
 378:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterReceiveAck(XMC_USIC1_CH1);
 2905              	 .loc 5 378 0
 2906 00c4 784B     	 ldr r3,.L154
 2907 00c6 181C     	 mov r0,r3
 2908 00c8 FFF7FEFF 	 bl XMC_I2C_CH_MasterReceiveAck
 2909              	.LBB29:
 379:../DeviceObject/infotainment/info_operation.c **** 
 380:../DeviceObject/infotainment/info_operation.c **** //    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & (XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 381:../DeviceObject/infotainment/info_operation.c **** //	                              XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)) == 0U){/* 
 382:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 2910              	 .loc 5 382 0
 2911 00cc 1023     	 mov r3,#16
 2912 00ce FB18     	 add r3,r7,r3
 2913 00d0 0022     	 mov r2,#0
 2914 00d2 1A80     	 strh r2,[r3]
 2915 00d4 06E0     	 b .L147
 2916              	.L148:
 2917              	 .loc 5 382 0 is_stmt 0 discriminator 3
 2918 00d6 1023     	 mov r3,#16
 2919 00d8 FB18     	 add r3,r7,r3
 2920 00da 1A88     	 ldrh r2,[r3]
 2921 00dc 1023     	 mov r3,#16
 2922 00de FB18     	 add r3,r7,r3
 2923 00e0 0132     	 add r2,r2,#1
 2924 00e2 1A80     	 strh r2,[r3]
 2925              	.L147:
 2926              	 .loc 5 382 0 discriminator 1
 2927 00e4 1023     	 mov r3,#16
 2928 00e6 FB18     	 add r3,r7,r3
 2929 00e8 1A88     	 ldrh r2,[r3]
 2930 00ea F423     	 mov r3,#244
 2931 00ec FF33     	 add r3,r3,#255
 2932 00ee 9A42     	 cmp r2,r3
 2933 00f0 F1D9     	 bls .L148
 2934              	.LBE29:
 383:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 2935              	 .loc 5 383 0 is_stmt 1
 2936 00f2 6D4A     	 ldr r2,.L154
 2937 00f4 C023     	 mov r3,#192
 2938 00f6 1B02     	 lsl r3,r3,#8
 2939 00f8 101C     	 mov r0,r2
 2940 00fa 191C     	 mov r1,r3
 2941 00fc FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 384:../DeviceObject/infotainment/info_operation.c ****                                              XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)
 385:../DeviceObject/infotainment/info_operation.c **** 
 386:../DeviceObject/infotainment/info_operation.c ****     /*    						Read Date Information  					*/
 387:../DeviceObject/infotainment/info_operation.c ****     DataReceived.date     = XMC_I2C_CH_GetReceivedData(XMC_USIC1_CH1);
 2942              	 .loc 5 387 0
 2943 0100 694B     	 ldr r3,.L154
 2944 0102 181C     	 mov r0,r3
 2945 0104 FFF7FEFF 	 bl XMC_I2C_CH_GetReceivedData
 2946 0108 031C     	 mov r3,r0
 2947 010a 1A1C     	 mov r2,r3
 2948 010c 3B1C     	 mov r3,r7
 2949 010e DA70     	 strb r2,[r3,#3]
 388:../DeviceObject/infotainment/info_operation.c ****     DataReceived.date     = DataReceived.date & 0x7F;
 2950              	 .loc 5 388 0
 2951 0110 3B1C     	 mov r3,r7
 2952 0112 DB78     	 ldrb r3,[r3,#3]
 2953 0114 7F22     	 mov r2,#127
 2954 0116 1340     	 and r3,r2
 2955 0118 DAB2     	 uxtb r2,r3
 2956 011a 3B1C     	 mov r3,r7
 2957 011c DA70     	 strb r2,[r3,#3]
 389:../DeviceObject/infotainment/info_operation.c **** 
 390:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterReceiveAck(XMC_USIC1_CH1);
 2958              	 .loc 5 390 0
 2959 011e 624B     	 ldr r3,.L154
 2960 0120 181C     	 mov r0,r3
 2961 0122 FFF7FEFF 	 bl XMC_I2C_CH_MasterReceiveAck
 2962              	.LBB30:
 391:../DeviceObject/infotainment/info_operation.c **** //    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & (XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 392:../DeviceObject/infotainment/info_operation.c **** //	                             XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)) == 0U){/* w
 393:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 2963              	 .loc 5 393 0
 2964 0126 0E23     	 mov r3,#14
 2965 0128 FB18     	 add r3,r7,r3
 2966 012a 0022     	 mov r2,#0
 2967 012c 1A80     	 strh r2,[r3]
 2968 012e 06E0     	 b .L149
 2969              	.L150:
 2970              	 .loc 5 393 0 is_stmt 0 discriminator 3
 2971 0130 0E23     	 mov r3,#14
 2972 0132 FB18     	 add r3,r7,r3
 2973 0134 1A88     	 ldrh r2,[r3]
 2974 0136 0E23     	 mov r3,#14
 2975 0138 FB18     	 add r3,r7,r3
 2976 013a 0132     	 add r2,r2,#1
 2977 013c 1A80     	 strh r2,[r3]
 2978              	.L149:
 2979              	 .loc 5 393 0 discriminator 1
 2980 013e 0E23     	 mov r3,#14
 2981 0140 FB18     	 add r3,r7,r3
 2982 0142 1A88     	 ldrh r2,[r3]
 2983 0144 F423     	 mov r3,#244
 2984 0146 FF33     	 add r3,r3,#255
 2985 0148 9A42     	 cmp r2,r3
 2986 014a F1D9     	 bls .L150
 2987              	.LBE30:
 394:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 2988              	 .loc 5 394 0 is_stmt 1
 2989 014c 564A     	 ldr r2,.L154
 2990 014e C023     	 mov r3,#192
 2991 0150 1B02     	 lsl r3,r3,#8
 2992 0152 101C     	 mov r0,r2
 2993 0154 191C     	 mov r1,r3
 2994 0156 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 395:../DeviceObject/infotainment/info_operation.c ****                                            XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
 396:../DeviceObject/infotainment/info_operation.c **** 
 397:../DeviceObject/infotainment/info_operation.c ****     /*    						Read Month Information  					*/
 398:../DeviceObject/infotainment/info_operation.c ****     DataReceived.month    = XMC_I2C_CH_GetReceivedData(XMC_USIC1_CH1);
 2995              	 .loc 5 398 0
 2996 015a 534B     	 ldr r3,.L154
 2997 015c 181C     	 mov r0,r3
 2998 015e FFF7FEFF 	 bl XMC_I2C_CH_GetReceivedData
 2999 0162 031C     	 mov r3,r0
 3000 0164 1A1C     	 mov r2,r3
 3001 0166 3B1C     	 mov r3,r7
 3002 0168 9A70     	 strb r2,[r3,#2]
 399:../DeviceObject/infotainment/info_operation.c ****     DataReceived.month	  = DataReceived.month & 0x1F;
 3003              	 .loc 5 399 0
 3004 016a 3B1C     	 mov r3,r7
 3005 016c 9B78     	 ldrb r3,[r3,#2]
 3006 016e 1F22     	 mov r2,#31
 3007 0170 1340     	 and r3,r2
 3008 0172 DAB2     	 uxtb r2,r3
 3009 0174 3B1C     	 mov r3,r7
 3010 0176 9A70     	 strb r2,[r3,#2]
 400:../DeviceObject/infotainment/info_operation.c **** 
 401:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterReceiveNack(XMC_USIC1_CH1);
 3011              	 .loc 5 401 0
 3012 0178 4B4B     	 ldr r3,.L154
 3013 017a 181C     	 mov r0,r3
 3014 017c FFF7FEFF 	 bl XMC_I2C_CH_MasterReceiveNack
 3015              	.LBB31:
 402:../DeviceObject/infotainment/info_operation.c **** //    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & (XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 403:../DeviceObject/infotainment/info_operation.c **** //                                XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)) == 0U){/*
 404:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 3016              	 .loc 5 404 0
 3017 0180 0C23     	 mov r3,#12
 3018 0182 FB18     	 add r3,r7,r3
 3019 0184 0022     	 mov r2,#0
 3020 0186 1A80     	 strh r2,[r3]
 3021 0188 06E0     	 b .L151
 3022              	.L152:
 3023              	 .loc 5 404 0 is_stmt 0 discriminator 3
 3024 018a 0C23     	 mov r3,#12
 3025 018c FB18     	 add r3,r7,r3
 3026 018e 1A88     	 ldrh r2,[r3]
 3027 0190 0C23     	 mov r3,#12
 3028 0192 FB18     	 add r3,r7,r3
 3029 0194 0132     	 add r2,r2,#1
 3030 0196 1A80     	 strh r2,[r3]
 3031              	.L151:
 3032              	 .loc 5 404 0 discriminator 1
 3033 0198 0C23     	 mov r3,#12
 3034 019a FB18     	 add r3,r7,r3
 3035 019c 1A88     	 ldrh r2,[r3]
 3036 019e F423     	 mov r3,#244
 3037 01a0 FF33     	 add r3,r3,#255
 3038 01a2 9A42     	 cmp r2,r3
 3039 01a4 F1D9     	 bls .L152
 3040              	.LBE31:
 405:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 3041              	 .loc 5 405 0 is_stmt 1
 3042 01a6 404A     	 ldr r2,.L154
 3043 01a8 C023     	 mov r3,#192
 3044 01aa 1B02     	 lsl r3,r3,#8
 3045 01ac 101C     	 mov r0,r2
 3046 01ae 191C     	 mov r1,r3
 3047 01b0 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 406:../DeviceObject/infotainment/info_operation.c ****                                            XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
 407:../DeviceObject/infotainment/info_operation.c **** 
 408:../DeviceObject/infotainment/info_operation.c ****     /*    						Read Year Information  					*/
 409:../DeviceObject/infotainment/info_operation.c ****     DataReceived.year      = XMC_I2C_CH_GetReceivedData(XMC_USIC1_CH1);
 3048              	 .loc 5 409 0
 3049 01b4 3C4B     	 ldr r3,.L154
 3050 01b6 181C     	 mov r0,r3
 3051 01b8 FFF7FEFF 	 bl XMC_I2C_CH_GetReceivedData
 3052 01bc 031C     	 mov r3,r0
 3053 01be 9AB2     	 uxth r2,r3
 3054 01c0 3B1C     	 mov r3,r7
 3055 01c2 1A80     	 strh r2,[r3]
 410:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterStop(XMC_USIC1_CH1);
 3056              	 .loc 5 410 0
 3057 01c4 384B     	 ldr r3,.L154
 3058 01c6 181C     	 mov r0,r3
 3059 01c8 FFF7FEFF 	 bl XMC_I2C_CH_MasterStop
 411:../DeviceObject/infotainment/info_operation.c **** 
 412:../DeviceObject/infotainment/info_operation.c ****     tens = 10*(DataReceived.date >> 4);
 3060              	 .loc 5 412 0
 3061 01cc 3B1C     	 mov r3,r7
 3062 01ce DB78     	 ldrb r3,[r3,#3]
 3063 01d0 1B09     	 lsr r3,r3,#4
 3064 01d2 DBB2     	 uxtb r3,r3
 3065 01d4 0B22     	 mov r2,#11
 3066 01d6 BA18     	 add r2,r7,r2
 3067 01d8 191C     	 add r1,r3,#0
 3068 01da 8900     	 lsl r1,r1,#2
 3069 01dc CB18     	 add r3,r1,r3
 3070 01de DB18     	 add r3,r3,r3
 3071 01e0 1370     	 strb r3,[r2]
 413:../DeviceObject/infotainment/info_operation.c ****     ones = DataReceived.date & 0x0F;
 3072              	 .loc 5 413 0
 3073 01e2 3B1C     	 mov r3,r7
 3074 01e4 DA78     	 ldrb r2,[r3,#3]
 3075 01e6 0A23     	 mov r3,#10
 3076 01e8 FB18     	 add r3,r7,r3
 3077 01ea 0F21     	 mov r1,#15
 3078 01ec 0A40     	 and r2,r1
 3079 01ee 1A70     	 strb r2,[r3]
 414:../DeviceObject/infotainment/info_operation.c ****     DataReceived.date = tens + ones;
 3080              	 .loc 5 414 0
 3081 01f0 0B23     	 mov r3,#11
 3082 01f2 FA18     	 add r2,r7,r3
 3083 01f4 0A23     	 mov r3,#10
 3084 01f6 FB18     	 add r3,r7,r3
 3085 01f8 1278     	 ldrb r2,[r2]
 3086 01fa 1B78     	 ldrb r3,[r3]
 3087 01fc D318     	 add r3,r2,r3
 3088 01fe DAB2     	 uxtb r2,r3
 3089 0200 3B1C     	 mov r3,r7
 3090 0202 DA70     	 strb r2,[r3,#3]
 415:../DeviceObject/infotainment/info_operation.c **** 
 416:../DeviceObject/infotainment/info_operation.c ****     tens = 10*(DataReceived.month >> 4);
 3091              	 .loc 5 416 0
 3092 0204 3B1C     	 mov r3,r7
 3093 0206 9B78     	 ldrb r3,[r3,#2]
 3094 0208 1B09     	 lsr r3,r3,#4
 3095 020a DBB2     	 uxtb r3,r3
 3096 020c 0B22     	 mov r2,#11
 3097 020e BA18     	 add r2,r7,r2
 3098 0210 191C     	 add r1,r3,#0
 3099 0212 8900     	 lsl r1,r1,#2
 3100 0214 CB18     	 add r3,r1,r3
 3101 0216 DB18     	 add r3,r3,r3
 3102 0218 1370     	 strb r3,[r2]
 417:../DeviceObject/infotainment/info_operation.c ****     ones = DataReceived.month & 0x0F;
 3103              	 .loc 5 417 0
 3104 021a 3B1C     	 mov r3,r7
 3105 021c 9A78     	 ldrb r2,[r3,#2]
 3106 021e 0A23     	 mov r3,#10
 3107 0220 FB18     	 add r3,r7,r3
 3108 0222 0F21     	 mov r1,#15
 3109 0224 0A40     	 and r2,r1
 3110 0226 1A70     	 strb r2,[r3]
 418:../DeviceObject/infotainment/info_operation.c ****     DataReceived.month = tens + ones;
 3111              	 .loc 5 418 0
 3112 0228 0B23     	 mov r3,#11
 3113 022a FA18     	 add r2,r7,r3
 3114 022c 0A23     	 mov r3,#10
 3115 022e FB18     	 add r3,r7,r3
 3116 0230 1278     	 ldrb r2,[r2]
 3117 0232 1B78     	 ldrb r3,[r3]
 3118 0234 D318     	 add r3,r2,r3
 3119 0236 DAB2     	 uxtb r2,r3
 3120 0238 3B1C     	 mov r3,r7
 3121 023a 9A70     	 strb r2,[r3,#2]
 419:../DeviceObject/infotainment/info_operation.c **** 
 420:../DeviceObject/infotainment/info_operation.c ****     tens = 10*(DataReceived.year >> 4);
 3122              	 .loc 5 420 0
 3123 023c 3B1C     	 mov r3,r7
 3124 023e 1B88     	 ldrh r3,[r3]
 3125 0240 1B09     	 lsr r3,r3,#4
 3126 0242 9BB2     	 uxth r3,r3
 3127 0244 DBB2     	 uxtb r3,r3
 3128 0246 0B22     	 mov r2,#11
 3129 0248 BA18     	 add r2,r7,r2
 3130 024a 191C     	 add r1,r3,#0
 3131 024c 8900     	 lsl r1,r1,#2
 3132 024e CB18     	 add r3,r1,r3
 3133 0250 DB18     	 add r3,r3,r3
 3134 0252 1370     	 strb r3,[r2]
 421:../DeviceObject/infotainment/info_operation.c ****     ones = DataReceived.year & 0x0F;
 3135              	 .loc 5 421 0
 3136 0254 3B1C     	 mov r3,r7
 3137 0256 1B88     	 ldrh r3,[r3]
 3138 0258 DAB2     	 uxtb r2,r3
 3139 025a 0A23     	 mov r3,#10
 3140 025c FB18     	 add r3,r7,r3
 3141 025e 0F21     	 mov r1,#15
 3142 0260 0A40     	 and r2,r1
 3143 0262 1A70     	 strb r2,[r3]
 422:../DeviceObject/infotainment/info_operation.c ****     DataReceived.year = tens + ones;
 3144              	 .loc 5 422 0
 3145 0264 0B23     	 mov r3,#11
 3146 0266 FB18     	 add r3,r7,r3
 3147 0268 1B78     	 ldrb r3,[r3]
 3148 026a 9AB2     	 uxth r2,r3
 3149 026c 0A23     	 mov r3,#10
 3150 026e FB18     	 add r3,r7,r3
 3151 0270 1B78     	 ldrb r3,[r3]
 3152 0272 9BB2     	 uxth r3,r3
 3153 0274 D318     	 add r3,r2,r3
 3154 0276 9AB2     	 uxth r2,r3
 3155 0278 3B1C     	 mov r3,r7
 3156 027a 1A80     	 strh r2,[r3]
 423:../DeviceObject/infotainment/info_operation.c **** 
 424:../DeviceObject/infotainment/info_operation.c ****     return DataReceived;
 3157              	 .loc 5 424 0
 3158 027c 3B1D     	 add r3,r7,#4
 3159 027e 3A1C     	 mov r2,r7
 3160 0280 1268     	 ldr r2,[r2]
 3161 0282 1A60     	 str r2,[r3]
 3162 0284 3A1D     	 add r2,r7,#4
 3163 0286 0023     	 mov r3,#0
 3164 0288 1188     	 ldrh r1,[r2]
 3165 028a 0904     	 lsl r1,r1,#16
 3166 028c 090C     	 lsr r1,r1,#16
 3167 028e 1B0C     	 lsr r3,r3,#16
 3168 0290 1B04     	 lsl r3,r3,#16
 3169 0292 0B43     	 orr r3,r1
 3170 0294 5288     	 ldrh r2,[r2,#2]
 3171 0296 1204     	 lsl r2,r2,#16
 3172 0298 1B04     	 lsl r3,r3,#16
 3173 029a 1B0C     	 lsr r3,r3,#16
 3174 029c 1343     	 orr r3,r2
 425:../DeviceObject/infotainment/info_operation.c **** }
 3175              	 .loc 5 425 0
 3176 029e 181C     	 mov r0,r3
 3177 02a0 BD46     	 mov sp,r7
 3178 02a2 06B0     	 add sp,sp,#24
 3179              	 
 3180 02a4 80BD     	 pop {r7,pc}
 3181              	.L155:
 3182 02a6 C046     	 .align 2
 3183              	.L154:
 3184 02a8 00420048 	 .word 1207976448
 3185              	 .cfi_endproc
 3186              	.LFE234:
 3188              	 .section .text.INFO_RTCGetTime,"ax",%progbits
 3189              	 .align 2
 3190              	 .global INFO_RTCGetTime
 3191              	 .code 16
 3192              	 .thumb_func
 3194              	INFO_RTCGetTime:
 3195              	.LFB235:
 426:../DeviceObject/infotainment/info_operation.c **** 
 427:../DeviceObject/infotainment/info_operation.c **** RTC_TIME_PARAM_t INFO_RTCGetTime(void)
 428:../DeviceObject/infotainment/info_operation.c **** {
 3196              	 .loc 5 428 0
 3197              	 .cfi_startproc
 3198 0000 80B5     	 push {r7,lr}
 3199              	.LCFI69:
 3200              	 .cfi_def_cfa_offset 8
 3201              	 .cfi_offset 7,-8
 3202              	 .cfi_offset 14,-4
 3203 0002 86B0     	 sub sp,sp,#24
 3204              	.LCFI70:
 3205              	 .cfi_def_cfa_offset 32
 3206 0004 00AF     	 add r7,sp,#0
 3207              	.LCFI71:
 3208              	 .cfi_def_cfa_register 7
 429:../DeviceObject/infotainment/info_operation.c **** 	RTC_TIME_PARAM_t DataReceived;
 430:../DeviceObject/infotainment/info_operation.c **** 	uint8_t tens;
 431:../DeviceObject/infotainment/info_operation.c **** 	uint8_t ones;
 432:../DeviceObject/infotainment/info_operation.c **** 	XMC_GPIO_SetOutputHigh(P2_11);
 3209              	 .loc 5 432 0
 3210 0006 B14B     	 ldr r3,.L170
 3211 0008 181C     	 mov r0,r3
 3212 000a 0B21     	 mov r1,#11
 3213 000c FFF7FEFF 	 bl XMC_GPIO_SetOutputHigh
 433:../DeviceObject/infotainment/info_operation.c **** 
 434:../DeviceObject/infotainment/info_operation.c **** 	/*    						Accessing RTCC Control Byte 					*/
 435:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_WRITE);
 3214              	 .loc 5 435 0
 3215 0010 AF4B     	 ldr r3,.L170+4
 3216 0012 181C     	 mov r0,r3
 3217 0014 DE21     	 mov r1,#222
 3218 0016 0022     	 mov r2,#0
 3219 0018 FFF7FEFF 	 bl XMC_I2C_CH_MasterStart
 3220              	.LBB32:
 436:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 437:../DeviceObject/infotainment/info_operation.c **** 	for(uint16_t count=0; count < 500; count++){}
 3221              	 .loc 5 437 0
 3222 001c 1623     	 mov r3,#22
 3223 001e FB18     	 add r3,r7,r3
 3224 0020 0022     	 mov r2,#0
 3225 0022 1A80     	 strh r2,[r3]
 3226 0024 06E0     	 b .L157
 3227              	.L158:
 3228              	 .loc 5 437 0 is_stmt 0 discriminator 3
 3229 0026 1623     	 mov r3,#22
 3230 0028 FB18     	 add r3,r7,r3
 3231 002a 1A88     	 ldrh r2,[r3]
 3232 002c 1623     	 mov r3,#22
 3233 002e FB18     	 add r3,r7,r3
 3234 0030 0132     	 add r2,r2,#1
 3235 0032 1A80     	 strh r2,[r3]
 3236              	.L157:
 3237              	 .loc 5 437 0 discriminator 1
 3238 0034 1623     	 mov r3,#22
 3239 0036 FB18     	 add r3,r7,r3
 3240 0038 1A88     	 ldrh r2,[r3]
 3241 003a F423     	 mov r3,#244
 3242 003c FF33     	 add r3,r3,#255
 3243 003e 9A42     	 cmp r2,r3
 3244 0040 F1D9     	 bls .L158
 3245              	.LBE32:
 438:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 3246              	 .loc 5 438 0 is_stmt 1
 3247 0042 A34A     	 ldr r2,.L170+4
 3248 0044 8023     	 mov r3,#128
 3249 0046 9B00     	 lsl r3,r3,#2
 3250 0048 101C     	 mov r0,r2
 3251 004a 191C     	 mov r1,r3
 3252 004c FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 439:../DeviceObject/infotainment/info_operation.c **** 
 440:../DeviceObject/infotainment/info_operation.c ****   	/*    						Write Seconds Address Byte   					*/
 441:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, RTCSECOND);
 3253              	 .loc 5 441 0
 3254 0050 9F4B     	 ldr r3,.L170+4
 3255 0052 181C     	 mov r0,r3
 3256 0054 0021     	 mov r1,#0
 3257 0056 FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 3258              	.LBB33:
 442:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 443:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 3259              	 .loc 5 443 0
 3260 005a 1423     	 mov r3,#20
 3261 005c FB18     	 add r3,r7,r3
 3262 005e 0022     	 mov r2,#0
 3263 0060 1A80     	 strh r2,[r3]
 3264 0062 06E0     	 b .L159
 3265              	.L160:
 3266              	 .loc 5 443 0 is_stmt 0 discriminator 3
 3267 0064 1423     	 mov r3,#20
 3268 0066 FB18     	 add r3,r7,r3
 3269 0068 1A88     	 ldrh r2,[r3]
 3270 006a 1423     	 mov r3,#20
 3271 006c FB18     	 add r3,r7,r3
 3272 006e 0132     	 add r2,r2,#1
 3273 0070 1A80     	 strh r2,[r3]
 3274              	.L159:
 3275              	 .loc 5 443 0 discriminator 1
 3276 0072 1423     	 mov r3,#20
 3277 0074 FB18     	 add r3,r7,r3
 3278 0076 1A88     	 ldrh r2,[r3]
 3279 0078 F423     	 mov r3,#244
 3280 007a FF33     	 add r3,r3,#255
 3281 007c 9A42     	 cmp r2,r3
 3282 007e F1D9     	 bls .L160
 3283              	.LBE33:
 444:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 3284              	 .loc 5 444 0 is_stmt 1
 3285 0080 934A     	 ldr r2,.L170+4
 3286 0082 8023     	 mov r3,#128
 3287 0084 9B00     	 lsl r3,r3,#2
 3288 0086 101C     	 mov r0,r2
 3289 0088 191C     	 mov r1,r3
 3290 008a FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 445:../DeviceObject/infotainment/info_operation.c **** 
 446:../DeviceObject/infotainment/info_operation.c **** 	/* 							Start Read Sequence								*/
 447:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterRepeatedStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_READ);
 3291              	 .loc 5 447 0
 3292 008e 904B     	 ldr r3,.L170+4
 3293 0090 181C     	 mov r0,r3
 3294 0092 DE21     	 mov r1,#222
 3295 0094 0122     	 mov r2,#1
 3296 0096 FFF7FEFF 	 bl XMC_I2C_CH_MasterRepeatedStart
 3297              	.LBB34:
 448:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 449:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 3298              	 .loc 5 449 0
 3299 009a 1223     	 mov r3,#18
 3300 009c FB18     	 add r3,r7,r3
 3301 009e 0022     	 mov r2,#0
 3302 00a0 1A80     	 strh r2,[r3]
 3303 00a2 06E0     	 b .L161
 3304              	.L162:
 3305              	 .loc 5 449 0 is_stmt 0 discriminator 3
 3306 00a4 1223     	 mov r3,#18
 3307 00a6 FB18     	 add r3,r7,r3
 3308 00a8 1A88     	 ldrh r2,[r3]
 3309 00aa 1223     	 mov r3,#18
 3310 00ac FB18     	 add r3,r7,r3
 3311 00ae 0132     	 add r2,r2,#1
 3312 00b0 1A80     	 strh r2,[r3]
 3313              	.L161:
 3314              	 .loc 5 449 0 discriminator 1
 3315 00b2 1223     	 mov r3,#18
 3316 00b4 FB18     	 add r3,r7,r3
 3317 00b6 1A88     	 ldrh r2,[r3]
 3318 00b8 F423     	 mov r3,#244
 3319 00ba FF33     	 add r3,r3,#255
 3320 00bc 9A42     	 cmp r2,r3
 3321 00be F1D9     	 bls .L162
 3322              	.LBE34:
 450:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 3323              	 .loc 5 450 0 is_stmt 1
 3324 00c0 834A     	 ldr r2,.L170+4
 3325 00c2 8023     	 mov r3,#128
 3326 00c4 9B00     	 lsl r3,r3,#2
 3327 00c6 101C     	 mov r0,r2
 3328 00c8 191C     	 mov r1,r3
 3329 00ca FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 451:../DeviceObject/infotainment/info_operation.c **** 
 452:../DeviceObject/infotainment/info_operation.c **** 	/* 							Read first sequence 							*/
 453:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterReceiveAck(XMC_USIC1_CH1);
 3330              	 .loc 5 453 0
 3331 00ce 804B     	 ldr r3,.L170+4
 3332 00d0 181C     	 mov r0,r3
 3333 00d2 FFF7FEFF 	 bl XMC_I2C_CH_MasterReceiveAck
 3334              	.LBB35:
 454:../DeviceObject/infotainment/info_operation.c **** //    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & (XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 455:../DeviceObject/infotainment/info_operation.c **** //                                   XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)) == 0U)
 456:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 3335              	 .loc 5 456 0
 3336 00d6 1023     	 mov r3,#16
 3337 00d8 FB18     	 add r3,r7,r3
 3338 00da 0022     	 mov r2,#0
 3339 00dc 1A80     	 strh r2,[r3]
 3340 00de 06E0     	 b .L163
 3341              	.L164:
 3342              	 .loc 5 456 0 is_stmt 0 discriminator 3
 3343 00e0 1023     	 mov r3,#16
 3344 00e2 FB18     	 add r3,r7,r3
 3345 00e4 1A88     	 ldrh r2,[r3]
 3346 00e6 1023     	 mov r3,#16
 3347 00e8 FB18     	 add r3,r7,r3
 3348 00ea 0132     	 add r2,r2,#1
 3349 00ec 1A80     	 strh r2,[r3]
 3350              	.L163:
 3351              	 .loc 5 456 0 discriminator 1
 3352 00ee 1023     	 mov r3,#16
 3353 00f0 FB18     	 add r3,r7,r3
 3354 00f2 1A88     	 ldrh r2,[r3]
 3355 00f4 F423     	 mov r3,#244
 3356 00f6 FF33     	 add r3,r3,#255
 3357 00f8 9A42     	 cmp r2,r3
 3358 00fa F1D9     	 bls .L164
 3359              	.LBE35:
 457:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 3360              	 .loc 5 457 0 is_stmt 1
 3361 00fc 744A     	 ldr r2,.L170+4
 3362 00fe C023     	 mov r3,#192
 3363 0100 1B02     	 lsl r3,r3,#8
 3364 0102 101C     	 mov r0,r2
 3365 0104 191C     	 mov r1,r3
 3366 0106 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 458:../DeviceObject/infotainment/info_operation.c ****                                    XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
 459:../DeviceObject/infotainment/info_operation.c **** 
 460:../DeviceObject/infotainment/info_operation.c ****     DataReceived.second   = XMC_I2C_CH_GetReceivedData(XMC_USIC1_CH1);
 3367              	 .loc 5 460 0
 3368 010a 714B     	 ldr r3,.L170+4
 3369 010c 181C     	 mov r0,r3
 3370 010e FFF7FEFF 	 bl XMC_I2C_CH_GetReceivedData
 3371 0112 031C     	 mov r3,r0
 3372 0114 1A1C     	 mov r2,r3
 3373 0116 3B1C     	 mov r3,r7
 3374 0118 9A70     	 strb r2,[r3,#2]
 461:../DeviceObject/infotainment/info_operation.c ****     DataReceived.second   = DataReceived.second & 0x7F;
 3375              	 .loc 5 461 0
 3376 011a 3B1C     	 mov r3,r7
 3377 011c 9B78     	 ldrb r3,[r3,#2]
 3378 011e 7F22     	 mov r2,#127
 3379 0120 1340     	 and r3,r2
 3380 0122 DAB2     	 uxtb r2,r3
 3381 0124 3B1C     	 mov r3,r7
 3382 0126 9A70     	 strb r2,[r3,#2]
 462:../DeviceObject/infotainment/info_operation.c **** 
 463:../DeviceObject/infotainment/info_operation.c ****     /*							Read Second Sequence							*/
 464:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterReceiveAck(XMC_USIC1_CH1);
 3383              	 .loc 5 464 0
 3384 0128 694B     	 ldr r3,.L170+4
 3385 012a 181C     	 mov r0,r3
 3386 012c FFF7FEFF 	 bl XMC_I2C_CH_MasterReceiveAck
 3387              	.LBB36:
 465:../DeviceObject/infotainment/info_operation.c **** //    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & (XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 466:../DeviceObject/infotainment/info_operation.c **** //                                   XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)) == 0U)
 467:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 3388              	 .loc 5 467 0
 3389 0130 0E23     	 mov r3,#14
 3390 0132 FB18     	 add r3,r7,r3
 3391 0134 0022     	 mov r2,#0
 3392 0136 1A80     	 strh r2,[r3]
 3393 0138 06E0     	 b .L165
 3394              	.L166:
 3395              	 .loc 5 467 0 is_stmt 0 discriminator 3
 3396 013a 0E23     	 mov r3,#14
 3397 013c FB18     	 add r3,r7,r3
 3398 013e 1A88     	 ldrh r2,[r3]
 3399 0140 0E23     	 mov r3,#14
 3400 0142 FB18     	 add r3,r7,r3
 3401 0144 0132     	 add r2,r2,#1
 3402 0146 1A80     	 strh r2,[r3]
 3403              	.L165:
 3404              	 .loc 5 467 0 discriminator 1
 3405 0148 0E23     	 mov r3,#14
 3406 014a FB18     	 add r3,r7,r3
 3407 014c 1A88     	 ldrh r2,[r3]
 3408 014e F423     	 mov r3,#244
 3409 0150 FF33     	 add r3,r3,#255
 3410 0152 9A42     	 cmp r2,r3
 3411 0154 F1D9     	 bls .L166
 3412              	.LBE36:
 468:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 3413              	 .loc 5 468 0 is_stmt 1
 3414 0156 5E4A     	 ldr r2,.L170+4
 3415 0158 C023     	 mov r3,#192
 3416 015a 1B02     	 lsl r3,r3,#8
 3417 015c 101C     	 mov r0,r2
 3418 015e 191C     	 mov r1,r3
 3419 0160 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 469:../DeviceObject/infotainment/info_operation.c ****                                    XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
 470:../DeviceObject/infotainment/info_operation.c **** 
 471:../DeviceObject/infotainment/info_operation.c ****     DataReceived.minute    = XMC_I2C_CH_GetReceivedData(XMC_USIC1_CH1);
 3420              	 .loc 5 471 0
 3421 0164 5A4B     	 ldr r3,.L170+4
 3422 0166 181C     	 mov r0,r3
 3423 0168 FFF7FEFF 	 bl XMC_I2C_CH_GetReceivedData
 3424 016c 031C     	 mov r3,r0
 3425 016e 1A1C     	 mov r2,r3
 3426 0170 3B1C     	 mov r3,r7
 3427 0172 5A70     	 strb r2,[r3,#1]
 472:../DeviceObject/infotainment/info_operation.c ****     DataReceived.minute	 = DataReceived.minute & 0x7F;
 3428              	 .loc 5 472 0
 3429 0174 3B1C     	 mov r3,r7
 3430 0176 5B78     	 ldrb r3,[r3,#1]
 3431 0178 7F22     	 mov r2,#127
 3432 017a 1340     	 and r3,r2
 3433 017c DAB2     	 uxtb r2,r3
 3434 017e 3B1C     	 mov r3,r7
 3435 0180 5A70     	 strb r2,[r3,#1]
 473:../DeviceObject/infotainment/info_operation.c **** 
 474:../DeviceObject/infotainment/info_operation.c ****     /*							Read Third Sequence then Dismiss				*/
 475:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterReceiveNack(XMC_USIC1_CH1);
 3436              	 .loc 5 475 0
 3437 0182 534B     	 ldr r3,.L170+4
 3438 0184 181C     	 mov r0,r3
 3439 0186 FFF7FEFF 	 bl XMC_I2C_CH_MasterReceiveNack
 3440              	.LBB37:
 476:../DeviceObject/infotainment/info_operation.c **** //    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & (XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 477:../DeviceObject/infotainment/info_operation.c **** //                                   XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)) == 0U)
 478:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 3441              	 .loc 5 478 0
 3442 018a 0C23     	 mov r3,#12
 3443 018c FB18     	 add r3,r7,r3
 3444 018e 0022     	 mov r2,#0
 3445 0190 1A80     	 strh r2,[r3]
 3446 0192 06E0     	 b .L167
 3447              	.L168:
 3448              	 .loc 5 478 0 is_stmt 0 discriminator 3
 3449 0194 0C23     	 mov r3,#12
 3450 0196 FB18     	 add r3,r7,r3
 3451 0198 1A88     	 ldrh r2,[r3]
 3452 019a 0C23     	 mov r3,#12
 3453 019c FB18     	 add r3,r7,r3
 3454 019e 0132     	 add r2,r2,#1
 3455 01a0 1A80     	 strh r2,[r3]
 3456              	.L167:
 3457              	 .loc 5 478 0 discriminator 1
 3458 01a2 0C23     	 mov r3,#12
 3459 01a4 FB18     	 add r3,r7,r3
 3460 01a6 1A88     	 ldrh r2,[r3]
 3461 01a8 F423     	 mov r3,#244
 3462 01aa FF33     	 add r3,r3,#255
 3463 01ac 9A42     	 cmp r2,r3
 3464 01ae F1D9     	 bls .L168
 3465              	.LBE37:
 479:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 3466              	 .loc 5 479 0 is_stmt 1
 3467 01b0 474A     	 ldr r2,.L170+4
 3468 01b2 C023     	 mov r3,#192
 3469 01b4 1B02     	 lsl r3,r3,#8
 3470 01b6 101C     	 mov r0,r2
 3471 01b8 191C     	 mov r1,r3
 3472 01ba FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 480:../DeviceObject/infotainment/info_operation.c ****                                     XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
 481:../DeviceObject/infotainment/info_operation.c **** 
 482:../DeviceObject/infotainment/info_operation.c ****     DataReceived.hour      = XMC_I2C_CH_GetReceivedData(XMC_USIC1_CH1);
 3473              	 .loc 5 482 0
 3474 01be 444B     	 ldr r3,.L170+4
 3475 01c0 181C     	 mov r0,r3
 3476 01c2 FFF7FEFF 	 bl XMC_I2C_CH_GetReceivedData
 3477 01c6 031C     	 mov r3,r0
 3478 01c8 1A1C     	 mov r2,r3
 3479 01ca 3B1C     	 mov r3,r7
 3480 01cc 1A70     	 strb r2,[r3]
 483:../DeviceObject/infotainment/info_operation.c ****     DataReceived.hour	     = DataReceived.hour & 0x3F;
 3481              	 .loc 5 483 0
 3482 01ce 3B1C     	 mov r3,r7
 3483 01d0 1B78     	 ldrb r3,[r3]
 3484 01d2 3F22     	 mov r2,#63
 3485 01d4 1340     	 and r3,r2
 3486 01d6 DAB2     	 uxtb r2,r3
 3487 01d8 3B1C     	 mov r3,r7
 3488 01da 1A70     	 strb r2,[r3]
 484:../DeviceObject/infotainment/info_operation.c **** 
 485:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterStop(XMC_USIC1_CH1);
 3489              	 .loc 5 485 0
 3490 01dc 3C4B     	 ldr r3,.L170+4
 3491 01de 181C     	 mov r0,r3
 3492 01e0 FFF7FEFF 	 bl XMC_I2C_CH_MasterStop
 486:../DeviceObject/infotainment/info_operation.c **** 
 487:../DeviceObject/infotainment/info_operation.c ****     tens = 10*(DataReceived.hour >> 4);
 3493              	 .loc 5 487 0
 3494 01e4 3B1C     	 mov r3,r7
 3495 01e6 1B78     	 ldrb r3,[r3]
 3496 01e8 1B09     	 lsr r3,r3,#4
 3497 01ea DBB2     	 uxtb r3,r3
 3498 01ec 0B22     	 mov r2,#11
 3499 01ee BA18     	 add r2,r7,r2
 3500 01f0 191C     	 add r1,r3,#0
 3501 01f2 8900     	 lsl r1,r1,#2
 3502 01f4 CB18     	 add r3,r1,r3
 3503 01f6 DB18     	 add r3,r3,r3
 3504 01f8 1370     	 strb r3,[r2]
 488:../DeviceObject/infotainment/info_operation.c ****     ones = DataReceived.hour & 0x0F;
 3505              	 .loc 5 488 0
 3506 01fa 3B1C     	 mov r3,r7
 3507 01fc 1A78     	 ldrb r2,[r3]
 3508 01fe 0A23     	 mov r3,#10
 3509 0200 FB18     	 add r3,r7,r3
 3510 0202 0F21     	 mov r1,#15
 3511 0204 0A40     	 and r2,r1
 3512 0206 1A70     	 strb r2,[r3]
 489:../DeviceObject/infotainment/info_operation.c ****     DataReceived.hour = tens + ones;
 3513              	 .loc 5 489 0
 3514 0208 0B23     	 mov r3,#11
 3515 020a FA18     	 add r2,r7,r3
 3516 020c 0A23     	 mov r3,#10
 3517 020e FB18     	 add r3,r7,r3
 3518 0210 1278     	 ldrb r2,[r2]
 3519 0212 1B78     	 ldrb r3,[r3]
 3520 0214 D318     	 add r3,r2,r3
 3521 0216 DAB2     	 uxtb r2,r3
 3522 0218 3B1C     	 mov r3,r7
 3523 021a 1A70     	 strb r2,[r3]
 490:../DeviceObject/infotainment/info_operation.c **** 
 491:../DeviceObject/infotainment/info_operation.c ****     tens = 10*(DataReceived.minute >> 4);
 3524              	 .loc 5 491 0
 3525 021c 3B1C     	 mov r3,r7
 3526 021e 5B78     	 ldrb r3,[r3,#1]
 3527 0220 1B09     	 lsr r3,r3,#4
 3528 0222 DBB2     	 uxtb r3,r3
 3529 0224 0B22     	 mov r2,#11
 3530 0226 BA18     	 add r2,r7,r2
 3531 0228 191C     	 add r1,r3,#0
 3532 022a 8900     	 lsl r1,r1,#2
 3533 022c CB18     	 add r3,r1,r3
 3534 022e DB18     	 add r3,r3,r3
 3535 0230 1370     	 strb r3,[r2]
 492:../DeviceObject/infotainment/info_operation.c ****     ones = DataReceived.minute & 0x0F;
 3536              	 .loc 5 492 0
 3537 0232 3B1C     	 mov r3,r7
 3538 0234 5A78     	 ldrb r2,[r3,#1]
 3539 0236 0A23     	 mov r3,#10
 3540 0238 FB18     	 add r3,r7,r3
 3541 023a 0F21     	 mov r1,#15
 3542 023c 0A40     	 and r2,r1
 3543 023e 1A70     	 strb r2,[r3]
 493:../DeviceObject/infotainment/info_operation.c ****     DataReceived.minute = tens + ones;
 3544              	 .loc 5 493 0
 3545 0240 0B23     	 mov r3,#11
 3546 0242 FA18     	 add r2,r7,r3
 3547 0244 0A23     	 mov r3,#10
 3548 0246 FB18     	 add r3,r7,r3
 3549 0248 1278     	 ldrb r2,[r2]
 3550 024a 1B78     	 ldrb r3,[r3]
 3551 024c D318     	 add r3,r2,r3
 3552 024e DAB2     	 uxtb r2,r3
 3553 0250 3B1C     	 mov r3,r7
 3554 0252 5A70     	 strb r2,[r3,#1]
 494:../DeviceObject/infotainment/info_operation.c **** 
 495:../DeviceObject/infotainment/info_operation.c ****     tens = 10*(DataReceived.second >> 4);
 3555              	 .loc 5 495 0
 3556 0254 3B1C     	 mov r3,r7
 3557 0256 9B78     	 ldrb r3,[r3,#2]
 3558 0258 1B09     	 lsr r3,r3,#4
 3559 025a DBB2     	 uxtb r3,r3
 3560 025c 0B22     	 mov r2,#11
 3561 025e BA18     	 add r2,r7,r2
 3562 0260 191C     	 add r1,r3,#0
 3563 0262 8900     	 lsl r1,r1,#2
 3564 0264 CB18     	 add r3,r1,r3
 3565 0266 DB18     	 add r3,r3,r3
 3566 0268 1370     	 strb r3,[r2]
 496:../DeviceObject/infotainment/info_operation.c ****     ones = DataReceived.second & 0x0F;
 3567              	 .loc 5 496 0
 3568 026a 3B1C     	 mov r3,r7
 3569 026c 9A78     	 ldrb r2,[r3,#2]
 3570 026e 0A23     	 mov r3,#10
 3571 0270 FB18     	 add r3,r7,r3
 3572 0272 0F21     	 mov r1,#15
 3573 0274 0A40     	 and r2,r1
 3574 0276 1A70     	 strb r2,[r3]
 497:../DeviceObject/infotainment/info_operation.c ****     DataReceived.second = tens + ones;
 3575              	 .loc 5 497 0
 3576 0278 0B23     	 mov r3,#11
 3577 027a FA18     	 add r2,r7,r3
 3578 027c 0A23     	 mov r3,#10
 3579 027e FB18     	 add r3,r7,r3
 3580 0280 1278     	 ldrb r2,[r2]
 3581 0282 1B78     	 ldrb r3,[r3]
 3582 0284 D318     	 add r3,r2,r3
 3583 0286 DAB2     	 uxtb r2,r3
 3584 0288 3B1C     	 mov r3,r7
 3585 028a 9A70     	 strb r2,[r3,#2]
 498:../DeviceObject/infotainment/info_operation.c **** 
 499:../DeviceObject/infotainment/info_operation.c ****     return DataReceived;
 3586              	 .loc 5 499 0
 3587 028c 3B1D     	 add r3,r7,#4
 3588 028e 3A1C     	 mov r2,r7
 3589 0290 1188     	 ldrh r1,[r2]
 3590 0292 1980     	 strh r1,[r3]
 3591 0294 9278     	 ldrb r2,[r2,#2]
 3592 0296 9A70     	 strb r2,[r3,#2]
 3593 0298 3A1D     	 add r2,r7,#4
 3594 029a 0023     	 mov r3,#0
 3595 029c 1178     	 ldrb r1,[r2]
 3596 029e FF20     	 mov r0,#255
 3597 02a0 0140     	 and r1,r0
 3598 02a2 FF20     	 mov r0,#255
 3599 02a4 8343     	 bic r3,r0
 3600 02a6 0B43     	 orr r3,r1
 3601 02a8 5178     	 ldrb r1,[r2,#1]
 3602 02aa FF20     	 mov r0,#255
 3603 02ac 0140     	 and r1,r0
 3604 02ae 0902     	 lsl r1,r1,#8
 3605 02b0 0848     	 ldr r0,.L170+8
 3606 02b2 0340     	 and r3,r0
 3607 02b4 0B43     	 orr r3,r1
 3608 02b6 9278     	 ldrb r2,[r2,#2]
 3609 02b8 FF21     	 mov r1,#255
 3610 02ba 0A40     	 and r2,r1
 3611 02bc 1204     	 lsl r2,r2,#16
 3612 02be 0649     	 ldr r1,.L170+12
 3613 02c0 0B40     	 and r3,r1
 3614 02c2 1343     	 orr r3,r2
 500:../DeviceObject/infotainment/info_operation.c **** }
 3615              	 .loc 5 500 0
 3616 02c4 181C     	 mov r0,r3
 3617 02c6 BD46     	 mov sp,r7
 3618 02c8 06B0     	 add sp,sp,#24
 3619              	 
 3620 02ca 80BD     	 pop {r7,pc}
 3621              	.L171:
 3622              	 .align 2
 3623              	.L170:
 3624 02cc 00020440 	 .word 1074004480
 3625 02d0 00420048 	 .word 1207976448
 3626 02d4 FF00FFFF 	 .word -65281
 3627 02d8 FFFF00FF 	 .word -16711681
 3628              	 .cfi_endproc
 3629              	.LFE235:
 3631              	 .section .text.INFO_RTCVBatEnable,"ax",%progbits
 3632              	 .align 2
 3633              	 .global INFO_RTCVBatEnable
 3634              	 .code 16
 3635              	 .thumb_func
 3637              	INFO_RTCVBatEnable:
 3638              	.LFB236:
 501:../DeviceObject/infotainment/info_operation.c **** 
 502:../DeviceObject/infotainment/info_operation.c **** void INFO_RTCVBatEnable(void)
 503:../DeviceObject/infotainment/info_operation.c **** {
 3639              	 .loc 5 503 0
 3640              	 .cfi_startproc
 3641 0000 90B5     	 push {r4,r7,lr}
 3642              	.LCFI72:
 3643              	 .cfi_def_cfa_offset 12
 3644              	 .cfi_offset 4,-12
 3645              	 .cfi_offset 7,-8
 3646              	 .cfi_offset 14,-4
 3647 0002 85B0     	 sub sp,sp,#20
 3648              	.LCFI73:
 3649              	 .cfi_def_cfa_offset 32
 3650 0004 00AF     	 add r7,sp,#0
 3651              	.LCFI74:
 3652              	 .cfi_def_cfa_register 7
 504:../DeviceObject/infotainment/info_operation.c **** 	uint8_t data;
 505:../DeviceObject/infotainment/info_operation.c **** 
 506:../DeviceObject/infotainment/info_operation.c **** 	/*    						Accessing RTCC Control Byte w/ WR					*/
 507:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_WRITE);
 3653              	 .loc 5 507 0
 3654 0006 774B     	 ldr r3,.L187
 3655 0008 181C     	 mov r0,r3
 3656 000a DE21     	 mov r1,#222
 3657 000c 0022     	 mov r2,#0
 3658 000e FFF7FEFF 	 bl XMC_I2C_CH_MasterStart
 3659              	.LBB38:
 508:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 509:../DeviceObject/infotainment/info_operation.c **** 	for(uint16_t count=0; count < 500; count++){}
 3660              	 .loc 5 509 0
 3661 0012 0E23     	 mov r3,#14
 3662 0014 FB18     	 add r3,r7,r3
 3663 0016 0022     	 mov r2,#0
 3664 0018 1A80     	 strh r2,[r3]
 3665 001a 06E0     	 b .L173
 3666              	.L174:
 3667              	 .loc 5 509 0 is_stmt 0 discriminator 3
 3668 001c 0E23     	 mov r3,#14
 3669 001e FB18     	 add r3,r7,r3
 3670 0020 1A88     	 ldrh r2,[r3]
 3671 0022 0E23     	 mov r3,#14
 3672 0024 FB18     	 add r3,r7,r3
 3673 0026 0132     	 add r2,r2,#1
 3674 0028 1A80     	 strh r2,[r3]
 3675              	.L173:
 3676              	 .loc 5 509 0 discriminator 1
 3677 002a 0E23     	 mov r3,#14
 3678 002c FB18     	 add r3,r7,r3
 3679 002e 1A88     	 ldrh r2,[r3]
 3680 0030 F423     	 mov r3,#244
 3681 0032 FF33     	 add r3,r3,#255
 3682 0034 9A42     	 cmp r2,r3
 3683 0036 F1D9     	 bls .L174
 3684              	.LBE38:
 510:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 3685              	 .loc 5 510 0 is_stmt 1
 3686 0038 6A4A     	 ldr r2,.L187
 3687 003a 8023     	 mov r3,#128
 3688 003c 9B00     	 lsl r3,r3,#2
 3689 003e 101C     	 mov r0,r2
 3690 0040 191C     	 mov r1,r3
 3691 0042 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 511:../DeviceObject/infotainment/info_operation.c **** 
 512:../DeviceObject/infotainment/info_operation.c ****     /*    						Write Date Address Byte   							*/
 513:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, RTCWKDAY);
 3692              	 .loc 5 513 0
 3693 0046 674B     	 ldr r3,.L187
 3694 0048 181C     	 mov r0,r3
 3695 004a 0321     	 mov r1,#3
 3696 004c FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 3697              	.LBB39:
 514:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 515:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 3698              	 .loc 5 515 0
 3699 0050 0C23     	 mov r3,#12
 3700 0052 FB18     	 add r3,r7,r3
 3701 0054 0022     	 mov r2,#0
 3702 0056 1A80     	 strh r2,[r3]
 3703 0058 06E0     	 b .L175
 3704              	.L176:
 3705              	 .loc 5 515 0 is_stmt 0 discriminator 3
 3706 005a 0C23     	 mov r3,#12
 3707 005c FB18     	 add r3,r7,r3
 3708 005e 1A88     	 ldrh r2,[r3]
 3709 0060 0C23     	 mov r3,#12
 3710 0062 FB18     	 add r3,r7,r3
 3711 0064 0132     	 add r2,r2,#1
 3712 0066 1A80     	 strh r2,[r3]
 3713              	.L175:
 3714              	 .loc 5 515 0 discriminator 1
 3715 0068 0C23     	 mov r3,#12
 3716 006a FB18     	 add r3,r7,r3
 3717 006c 1A88     	 ldrh r2,[r3]
 3718 006e F423     	 mov r3,#244
 3719 0070 FF33     	 add r3,r3,#255
 3720 0072 9A42     	 cmp r2,r3
 3721 0074 F1D9     	 bls .L176
 3722              	.LBE39:
 516:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 3723              	 .loc 5 516 0 is_stmt 1
 3724 0076 5B4A     	 ldr r2,.L187
 3725 0078 8023     	 mov r3,#128
 3726 007a 9B00     	 lsl r3,r3,#2
 3727 007c 101C     	 mov r0,r2
 3728 007e 191C     	 mov r1,r3
 3729 0080 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 517:../DeviceObject/infotainment/info_operation.c **** 
 518:../DeviceObject/infotainment/info_operation.c ****     /*    						Accessing RTCC Control Byte again w/ RD				*/
 519:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterRepeatedStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_READ);
 3730              	 .loc 5 519 0
 3731 0084 574B     	 ldr r3,.L187
 3732 0086 181C     	 mov r0,r3
 3733 0088 DE21     	 mov r1,#222
 3734 008a 0122     	 mov r2,#1
 3735 008c FFF7FEFF 	 bl XMC_I2C_CH_MasterRepeatedStart
 3736              	.LBB40:
 520:../DeviceObject/infotainment/info_operation.c **** //    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){
 521:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 3737              	 .loc 5 521 0
 3738 0090 0A23     	 mov r3,#10
 3739 0092 FB18     	 add r3,r7,r3
 3740 0094 0022     	 mov r2,#0
 3741 0096 1A80     	 strh r2,[r3]
 3742 0098 06E0     	 b .L177
 3743              	.L178:
 3744              	 .loc 5 521 0 is_stmt 0 discriminator 3
 3745 009a 0A23     	 mov r3,#10
 3746 009c FB18     	 add r3,r7,r3
 3747 009e 1A88     	 ldrh r2,[r3]
 3748 00a0 0A23     	 mov r3,#10
 3749 00a2 FB18     	 add r3,r7,r3
 3750 00a4 0132     	 add r2,r2,#1
 3751 00a6 1A80     	 strh r2,[r3]
 3752              	.L177:
 3753              	 .loc 5 521 0 discriminator 1
 3754 00a8 0A23     	 mov r3,#10
 3755 00aa FB18     	 add r3,r7,r3
 3756 00ac 1A88     	 ldrh r2,[r3]
 3757 00ae F423     	 mov r3,#244
 3758 00b0 FF33     	 add r3,r3,#255
 3759 00b2 9A42     	 cmp r2,r3
 3760 00b4 F1D9     	 bls .L178
 3761              	.LBE40:
 522:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 3762              	 .loc 5 522 0 is_stmt 1
 3763 00b6 4B4A     	 ldr r2,.L187
 3764 00b8 8023     	 mov r3,#128
 3765 00ba 9B00     	 lsl r3,r3,#2
 3766 00bc 101C     	 mov r0,r2
 3767 00be 191C     	 mov r1,r3
 3768 00c0 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 523:../DeviceObject/infotainment/info_operation.c **** 
 524:../DeviceObject/infotainment/info_operation.c **** 	/*							Send NACK											*/
 525:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterReceiveNack(XMC_USIC1_CH1);
 3769              	 .loc 5 525 0
 3770 00c4 474B     	 ldr r3,.L187
 3771 00c6 181C     	 mov r0,r3
 3772 00c8 FFF7FEFF 	 bl XMC_I2C_CH_MasterReceiveNack
 3773              	.LBB41:
 526:../DeviceObject/infotainment/info_operation.c **** //    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & (XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 527:../DeviceObject/infotainment/info_operation.c **** //	                              XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)) == 0U){/* 
 528:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 3774              	 .loc 5 528 0
 3775 00cc 0823     	 mov r3,#8
 3776 00ce FB18     	 add r3,r7,r3
 3777 00d0 0022     	 mov r2,#0
 3778 00d2 1A80     	 strh r2,[r3]
 3779 00d4 06E0     	 b .L179
 3780              	.L180:
 3781              	 .loc 5 528 0 is_stmt 0 discriminator 3
 3782 00d6 0823     	 mov r3,#8
 3783 00d8 FB18     	 add r3,r7,r3
 3784 00da 1A88     	 ldrh r2,[r3]
 3785 00dc 0823     	 mov r3,#8
 3786 00de FB18     	 add r3,r7,r3
 3787 00e0 0132     	 add r2,r2,#1
 3788 00e2 1A80     	 strh r2,[r3]
 3789              	.L179:
 3790              	 .loc 5 528 0 discriminator 1
 3791 00e4 0823     	 mov r3,#8
 3792 00e6 FB18     	 add r3,r7,r3
 3793 00e8 1A88     	 ldrh r2,[r3]
 3794 00ea F423     	 mov r3,#244
 3795 00ec FF33     	 add r3,r3,#255
 3796 00ee 9A42     	 cmp r2,r3
 3797 00f0 F1D9     	 bls .L180
 3798              	.LBE41:
 529:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 3799              	 .loc 5 529 0 is_stmt 1
 3800 00f2 3C4A     	 ldr r2,.L187
 3801 00f4 C023     	 mov r3,#192
 3802 00f6 1B02     	 lsl r3,r3,#8
 3803 00f8 101C     	 mov r0,r2
 3804 00fa 191C     	 mov r1,r3
 3805 00fc FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 530:../DeviceObject/infotainment/info_operation.c ****                                   XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
 531:../DeviceObject/infotainment/info_operation.c **** 
 532:../DeviceObject/infotainment/info_operation.c ****     /*    						Load Register Information  								*/
 533:../DeviceObject/infotainment/info_operation.c ****     data     = XMC_I2C_CH_GetReceivedData(XMC_USIC1_CH1);
 3806              	 .loc 5 533 0
 3807 0100 7C1C     	 add r4,r7,#1
 3808 0102 384B     	 ldr r3,.L187
 3809 0104 181C     	 mov r0,r3
 3810 0106 FFF7FEFF 	 bl XMC_I2C_CH_GetReceivedData
 3811 010a 031C     	 mov r3,r0
 3812 010c 2370     	 strb r3,[r4]
 534:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterStop(XMC_USIC1_CH1);
 3813              	 .loc 5 534 0
 3814 010e 354B     	 ldr r3,.L187
 3815 0110 181C     	 mov r0,r3
 3816 0112 FFF7FEFF 	 bl XMC_I2C_CH_MasterStop
 535:../DeviceObject/infotainment/info_operation.c **** 
 536:../DeviceObject/infotainment/info_operation.c ****     /* 							Enable VBATEN bit										*/
 537:../DeviceObject/infotainment/info_operation.c ****     data	= data & 0x07; // enable VBATEN bit
 3817              	 .loc 5 537 0
 3818 0116 7B1C     	 add r3,r7,#1
 3819 0118 7A1C     	 add r2,r7,#1
 3820 011a 1278     	 ldrb r2,[r2]
 3821 011c 0721     	 mov r1,#7
 3822 011e 0A40     	 and r2,r1
 3823 0120 1A70     	 strb r2,[r3]
 538:../DeviceObject/infotainment/info_operation.c ****     data	= data | 0x08; // enable VBATEN bit
 3824              	 .loc 5 538 0
 3825 0122 7B1C     	 add r3,r7,#1
 3826 0124 7A1C     	 add r2,r7,#1
 3827 0126 1278     	 ldrb r2,[r2]
 3828 0128 0821     	 mov r1,#8
 3829 012a 0A43     	 orr r2,r1
 3830 012c 1A70     	 strb r2,[r3]
 539:../DeviceObject/infotainment/info_operation.c **** 
 540:../DeviceObject/infotainment/info_operation.c **** 	/*    						Accessing RTCC Control Byte 						*/
 541:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_WRITE);
 3831              	 .loc 5 541 0
 3832 012e 2D4B     	 ldr r3,.L187
 3833 0130 181C     	 mov r0,r3
 3834 0132 DE21     	 mov r1,#222
 3835 0134 0022     	 mov r2,#0
 3836 0136 FFF7FEFF 	 bl XMC_I2C_CH_MasterStart
 3837              	.LBB42:
 542:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 543:../DeviceObject/infotainment/info_operation.c **** 	for(uint16_t count=0; count < 500; count++){}
 3838              	 .loc 5 543 0
 3839 013a BB1D     	 add r3,r7,#6
 3840 013c 0022     	 mov r2,#0
 3841 013e 1A80     	 strh r2,[r3]
 3842 0140 04E0     	 b .L181
 3843              	.L182:
 3844              	 .loc 5 543 0 is_stmt 0 discriminator 3
 3845 0142 BB1D     	 add r3,r7,#6
 3846 0144 1A88     	 ldrh r2,[r3]
 3847 0146 BB1D     	 add r3,r7,#6
 3848 0148 0132     	 add r2,r2,#1
 3849 014a 1A80     	 strh r2,[r3]
 3850              	.L181:
 3851              	 .loc 5 543 0 discriminator 1
 3852 014c BB1D     	 add r3,r7,#6
 3853 014e 1A88     	 ldrh r2,[r3]
 3854 0150 F423     	 mov r3,#244
 3855 0152 FF33     	 add r3,r3,#255
 3856 0154 9A42     	 cmp r2,r3
 3857 0156 F4D9     	 bls .L182
 3858              	.LBE42:
 544:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 3859              	 .loc 5 544 0 is_stmt 1
 3860 0158 224A     	 ldr r2,.L187
 3861 015a 8023     	 mov r3,#128
 3862 015c 9B00     	 lsl r3,r3,#2
 3863 015e 101C     	 mov r0,r2
 3864 0160 191C     	 mov r1,r3
 3865 0162 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 545:../DeviceObject/infotainment/info_operation.c **** 
 546:../DeviceObject/infotainment/info_operation.c ****     /*    						Write Control Address Byte  					*/
 547:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, RTCWKDAY);
 3866              	 .loc 5 547 0
 3867 0166 1F4B     	 ldr r3,.L187
 3868 0168 181C     	 mov r0,r3
 3869 016a 0321     	 mov r1,#3
 3870 016c FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 3871              	.LBB43:
 548:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 549:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 3872              	 .loc 5 549 0
 3873 0170 3B1D     	 add r3,r7,#4
 3874 0172 0022     	 mov r2,#0
 3875 0174 1A80     	 strh r2,[r3]
 3876 0176 04E0     	 b .L183
 3877              	.L184:
 3878              	 .loc 5 549 0 is_stmt 0 discriminator 3
 3879 0178 3B1D     	 add r3,r7,#4
 3880 017a 1A88     	 ldrh r2,[r3]
 3881 017c 3B1D     	 add r3,r7,#4
 3882 017e 0132     	 add r2,r2,#1
 3883 0180 1A80     	 strh r2,[r3]
 3884              	.L183:
 3885              	 .loc 5 549 0 discriminator 1
 3886 0182 3B1D     	 add r3,r7,#4
 3887 0184 1A88     	 ldrh r2,[r3]
 3888 0186 F423     	 mov r3,#244
 3889 0188 FF33     	 add r3,r3,#255
 3890 018a 9A42     	 cmp r2,r3
 3891 018c F4D9     	 bls .L184
 3892              	.LBE43:
 550:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 3893              	 .loc 5 550 0 is_stmt 1
 3894 018e 154A     	 ldr r2,.L187
 3895 0190 8023     	 mov r3,#128
 3896 0192 9B00     	 lsl r3,r3,#2
 3897 0194 101C     	 mov r0,r2
 3898 0196 191C     	 mov r1,r3
 3899 0198 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 551:../DeviceObject/infotainment/info_operation.c **** 
 552:../DeviceObject/infotainment/info_operation.c **** 	/*	 					   Write value at Control Register 					*/
 553:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, data);
 3900              	 .loc 5 553 0
 3901 019c 114A     	 ldr r2,.L187
 3902 019e 7B1C     	 add r3,r7,#1
 3903 01a0 1B78     	 ldrb r3,[r3]
 3904 01a2 101C     	 mov r0,r2
 3905 01a4 191C     	 mov r1,r3
 3906 01a6 FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 3907              	.LBB44:
 554:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 555:../DeviceObject/infotainment/info_operation.c **** 	for(uint16_t count=0; count < 500; count++){}
 3908              	 .loc 5 555 0
 3909 01aa BB1C     	 add r3,r7,#2
 3910 01ac 0022     	 mov r2,#0
 3911 01ae 1A80     	 strh r2,[r3]
 3912 01b0 04E0     	 b .L185
 3913              	.L186:
 3914              	 .loc 5 555 0 is_stmt 0 discriminator 3
 3915 01b2 BB1C     	 add r3,r7,#2
 3916 01b4 1A88     	 ldrh r2,[r3]
 3917 01b6 BB1C     	 add r3,r7,#2
 3918 01b8 0132     	 add r2,r2,#1
 3919 01ba 1A80     	 strh r2,[r3]
 3920              	.L185:
 3921              	 .loc 5 555 0 discriminator 1
 3922 01bc BB1C     	 add r3,r7,#2
 3923 01be 1A88     	 ldrh r2,[r3]
 3924 01c0 F423     	 mov r3,#244
 3925 01c2 FF33     	 add r3,r3,#255
 3926 01c4 9A42     	 cmp r2,r3
 3927 01c6 F4D9     	 bls .L186
 3928              	.LBE44:
 556:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 3929              	 .loc 5 556 0 is_stmt 1
 3930 01c8 064A     	 ldr r2,.L187
 3931 01ca 8023     	 mov r3,#128
 3932 01cc 9B00     	 lsl r3,r3,#2
 3933 01ce 101C     	 mov r0,r2
 3934 01d0 191C     	 mov r1,r3
 3935 01d2 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 557:../DeviceObject/infotainment/info_operation.c **** 
 558:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterStop(XMC_USIC1_CH1);
 3936              	 .loc 5 558 0
 3937 01d6 034B     	 ldr r3,.L187
 3938 01d8 181C     	 mov r0,r3
 3939 01da FFF7FEFF 	 bl XMC_I2C_CH_MasterStop
 559:../DeviceObject/infotainment/info_operation.c **** }
 3940              	 .loc 5 559 0
 3941 01de BD46     	 mov sp,r7
 3942 01e0 05B0     	 add sp,sp,#20
 3943              	 
 3944 01e2 90BD     	 pop {r4,r7,pc}
 3945              	.L188:
 3946              	 .align 2
 3947              	.L187:
 3948 01e4 00420048 	 .word 1207976448
 3949              	 .cfi_endproc
 3950              	.LFE236:
 3952              	 .section .text.INFO_RTCMFPEnable,"ax",%progbits
 3953              	 .align 2
 3954              	 .global INFO_RTCMFPEnable
 3955              	 .code 16
 3956              	 .thumb_func
 3958              	INFO_RTCMFPEnable:
 3959              	.LFB237:
 560:../DeviceObject/infotainment/info_operation.c **** 
 561:../DeviceObject/infotainment/info_operation.c **** void INFO_RTCMFPEnable(void)
 562:../DeviceObject/infotainment/info_operation.c **** {
 3960              	 .loc 5 562 0
 3961              	 .cfi_startproc
 3962 0000 90B5     	 push {r4,r7,lr}
 3963              	.LCFI75:
 3964              	 .cfi_def_cfa_offset 12
 3965              	 .cfi_offset 4,-12
 3966              	 .cfi_offset 7,-8
 3967              	 .cfi_offset 14,-4
 3968 0002 85B0     	 sub sp,sp,#20
 3969              	.LCFI76:
 3970              	 .cfi_def_cfa_offset 32
 3971 0004 00AF     	 add r7,sp,#0
 3972              	.LCFI77:
 3973              	 .cfi_def_cfa_register 7
 563:../DeviceObject/infotainment/info_operation.c **** 	uint8_t data;
 564:../DeviceObject/infotainment/info_operation.c **** 
 565:../DeviceObject/infotainment/info_operation.c **** 	/*    						Accessing RTCC Control Byte w/ WR					*/
 566:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_WRITE);
 3974              	 .loc 5 566 0
 3975 0006 744B     	 ldr r3,.L204
 3976 0008 181C     	 mov r0,r3
 3977 000a DE21     	 mov r1,#222
 3978 000c 0022     	 mov r2,#0
 3979 000e FFF7FEFF 	 bl XMC_I2C_CH_MasterStart
 3980              	.LBB45:
 567:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 568:../DeviceObject/infotainment/info_operation.c **** 	for(uint16_t count=0; count < 500; count++){}
 3981              	 .loc 5 568 0
 3982 0012 0E23     	 mov r3,#14
 3983 0014 FB18     	 add r3,r7,r3
 3984 0016 0022     	 mov r2,#0
 3985 0018 1A80     	 strh r2,[r3]
 3986 001a 06E0     	 b .L190
 3987              	.L191:
 3988              	 .loc 5 568 0 is_stmt 0 discriminator 3
 3989 001c 0E23     	 mov r3,#14
 3990 001e FB18     	 add r3,r7,r3
 3991 0020 1A88     	 ldrh r2,[r3]
 3992 0022 0E23     	 mov r3,#14
 3993 0024 FB18     	 add r3,r7,r3
 3994 0026 0132     	 add r2,r2,#1
 3995 0028 1A80     	 strh r2,[r3]
 3996              	.L190:
 3997              	 .loc 5 568 0 discriminator 1
 3998 002a 0E23     	 mov r3,#14
 3999 002c FB18     	 add r3,r7,r3
 4000 002e 1A88     	 ldrh r2,[r3]
 4001 0030 F423     	 mov r3,#244
 4002 0032 FF33     	 add r3,r3,#255
 4003 0034 9A42     	 cmp r2,r3
 4004 0036 F1D9     	 bls .L191
 4005              	.LBE45:
 569:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 4006              	 .loc 5 569 0 is_stmt 1
 4007 0038 674A     	 ldr r2,.L204
 4008 003a 8023     	 mov r3,#128
 4009 003c 9B00     	 lsl r3,r3,#2
 4010 003e 101C     	 mov r0,r2
 4011 0040 191C     	 mov r1,r3
 4012 0042 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 570:../DeviceObject/infotainment/info_operation.c **** 
 571:../DeviceObject/infotainment/info_operation.c ****     /*    						Write RTC Second Address Byte   							*/
 572:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, MFPCONTROL);
 4013              	 .loc 5 572 0
 4014 0046 644B     	 ldr r3,.L204
 4015 0048 181C     	 mov r0,r3
 4016 004a 0721     	 mov r1,#7
 4017 004c FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 4018              	.LBB46:
 573:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 574:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 4019              	 .loc 5 574 0
 4020 0050 0C23     	 mov r3,#12
 4021 0052 FB18     	 add r3,r7,r3
 4022 0054 0022     	 mov r2,#0
 4023 0056 1A80     	 strh r2,[r3]
 4024 0058 06E0     	 b .L192
 4025              	.L193:
 4026              	 .loc 5 574 0 is_stmt 0 discriminator 3
 4027 005a 0C23     	 mov r3,#12
 4028 005c FB18     	 add r3,r7,r3
 4029 005e 1A88     	 ldrh r2,[r3]
 4030 0060 0C23     	 mov r3,#12
 4031 0062 FB18     	 add r3,r7,r3
 4032 0064 0132     	 add r2,r2,#1
 4033 0066 1A80     	 strh r2,[r3]
 4034              	.L192:
 4035              	 .loc 5 574 0 discriminator 1
 4036 0068 0C23     	 mov r3,#12
 4037 006a FB18     	 add r3,r7,r3
 4038 006c 1A88     	 ldrh r2,[r3]
 4039 006e F423     	 mov r3,#244
 4040 0070 FF33     	 add r3,r3,#255
 4041 0072 9A42     	 cmp r2,r3
 4042 0074 F1D9     	 bls .L193
 4043              	.LBE46:
 575:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 4044              	 .loc 5 575 0 is_stmt 1
 4045 0076 584A     	 ldr r2,.L204
 4046 0078 8023     	 mov r3,#128
 4047 007a 9B00     	 lsl r3,r3,#2
 4048 007c 101C     	 mov r0,r2
 4049 007e 191C     	 mov r1,r3
 4050 0080 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 576:../DeviceObject/infotainment/info_operation.c **** 
 577:../DeviceObject/infotainment/info_operation.c ****     /*    						Accessing RTCC Control Byte again w/ RD				*/
 578:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterRepeatedStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_READ);
 4051              	 .loc 5 578 0
 4052 0084 544B     	 ldr r3,.L204
 4053 0086 181C     	 mov r0,r3
 4054 0088 DE21     	 mov r1,#222
 4055 008a 0122     	 mov r2,#1
 4056 008c FFF7FEFF 	 bl XMC_I2C_CH_MasterRepeatedStart
 4057              	.LBB47:
 579:../DeviceObject/infotainment/info_operation.c **** //    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){
 580:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 4058              	 .loc 5 580 0
 4059 0090 0A23     	 mov r3,#10
 4060 0092 FB18     	 add r3,r7,r3
 4061 0094 0022     	 mov r2,#0
 4062 0096 1A80     	 strh r2,[r3]
 4063 0098 06E0     	 b .L194
 4064              	.L195:
 4065              	 .loc 5 580 0 is_stmt 0 discriminator 3
 4066 009a 0A23     	 mov r3,#10
 4067 009c FB18     	 add r3,r7,r3
 4068 009e 1A88     	 ldrh r2,[r3]
 4069 00a0 0A23     	 mov r3,#10
 4070 00a2 FB18     	 add r3,r7,r3
 4071 00a4 0132     	 add r2,r2,#1
 4072 00a6 1A80     	 strh r2,[r3]
 4073              	.L194:
 4074              	 .loc 5 580 0 discriminator 1
 4075 00a8 0A23     	 mov r3,#10
 4076 00aa FB18     	 add r3,r7,r3
 4077 00ac 1A88     	 ldrh r2,[r3]
 4078 00ae F423     	 mov r3,#244
 4079 00b0 FF33     	 add r3,r3,#255
 4080 00b2 9A42     	 cmp r2,r3
 4081 00b4 F1D9     	 bls .L195
 4082              	.LBE47:
 581:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 4083              	 .loc 5 581 0 is_stmt 1
 4084 00b6 484A     	 ldr r2,.L204
 4085 00b8 8023     	 mov r3,#128
 4086 00ba 9B00     	 lsl r3,r3,#2
 4087 00bc 101C     	 mov r0,r2
 4088 00be 191C     	 mov r1,r3
 4089 00c0 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 582:../DeviceObject/infotainment/info_operation.c **** 
 583:../DeviceObject/infotainment/info_operation.c **** 	/*							Send NACK											*/
 584:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterReceiveNack(XMC_USIC1_CH1);
 4090              	 .loc 5 584 0
 4091 00c4 444B     	 ldr r3,.L204
 4092 00c6 181C     	 mov r0,r3
 4093 00c8 FFF7FEFF 	 bl XMC_I2C_CH_MasterReceiveNack
 4094              	.LBB48:
 585:../DeviceObject/infotainment/info_operation.c **** //    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & (XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 586:../DeviceObject/infotainment/info_operation.c **** //	                              XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)) == 0U){/* 
 587:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 4095              	 .loc 5 587 0
 4096 00cc 0823     	 mov r3,#8
 4097 00ce FB18     	 add r3,r7,r3
 4098 00d0 0022     	 mov r2,#0
 4099 00d2 1A80     	 strh r2,[r3]
 4100 00d4 06E0     	 b .L196
 4101              	.L197:
 4102              	 .loc 5 587 0 is_stmt 0 discriminator 3
 4103 00d6 0823     	 mov r3,#8
 4104 00d8 FB18     	 add r3,r7,r3
 4105 00da 1A88     	 ldrh r2,[r3]
 4106 00dc 0823     	 mov r3,#8
 4107 00de FB18     	 add r3,r7,r3
 4108 00e0 0132     	 add r2,r2,#1
 4109 00e2 1A80     	 strh r2,[r3]
 4110              	.L196:
 4111              	 .loc 5 587 0 discriminator 1
 4112 00e4 0823     	 mov r3,#8
 4113 00e6 FB18     	 add r3,r7,r3
 4114 00e8 1A88     	 ldrh r2,[r3]
 4115 00ea F423     	 mov r3,#244
 4116 00ec FF33     	 add r3,r3,#255
 4117 00ee 9A42     	 cmp r2,r3
 4118 00f0 F1D9     	 bls .L197
 4119              	.LBE48:
 588:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 4120              	 .loc 5 588 0 is_stmt 1
 4121 00f2 394A     	 ldr r2,.L204
 4122 00f4 C023     	 mov r3,#192
 4123 00f6 1B02     	 lsl r3,r3,#8
 4124 00f8 101C     	 mov r0,r2
 4125 00fa 191C     	 mov r1,r3
 4126 00fc FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 589:../DeviceObject/infotainment/info_operation.c ****                                   XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
 590:../DeviceObject/infotainment/info_operation.c **** 
 591:../DeviceObject/infotainment/info_operation.c ****     /*    						Load Register Information  								*/
 592:../DeviceObject/infotainment/info_operation.c ****     data     = XMC_I2C_CH_GetReceivedData(XMC_USIC1_CH1);
 4127              	 .loc 5 592 0
 4128 0100 7C1C     	 add r4,r7,#1
 4129 0102 354B     	 ldr r3,.L204
 4130 0104 181C     	 mov r0,r3
 4131 0106 FFF7FEFF 	 bl XMC_I2C_CH_GetReceivedData
 4132 010a 031C     	 mov r3,r0
 4133 010c 2370     	 strb r3,[r4]
 593:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterStop(XMC_USIC1_CH1);
 4134              	 .loc 5 593 0
 4135 010e 324B     	 ldr r3,.L204
 4136 0110 181C     	 mov r0,r3
 4137 0112 FFF7FEFF 	 bl XMC_I2C_CH_MasterStop
 594:../DeviceObject/infotainment/info_operation.c **** 
 595:../DeviceObject/infotainment/info_operation.c ****     /* 							Enable SQWEN Bit SQWFS1 and SQWFS0 depend on MFP_FREQ value, others '0'									*/
 596:../DeviceObject/infotainment/info_operation.c ****     data	= data | 0x40;
 4138              	 .loc 5 596 0
 4139 0116 7B1C     	 add r3,r7,#1
 4140 0118 7A1C     	 add r2,r7,#1
 4141 011a 1278     	 ldrb r2,[r2]
 4142 011c 4021     	 mov r1,#64
 4143 011e 0A43     	 orr r2,r1
 4144 0120 1A70     	 strb r2,[r3]
 597:../DeviceObject/infotainment/info_operation.c **** 
 598:../DeviceObject/infotainment/info_operation.c **** 	/*    						Accessing RTCC Control Byte 						*/
 599:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_WRITE);
 4145              	 .loc 5 599 0
 4146 0122 2D4B     	 ldr r3,.L204
 4147 0124 181C     	 mov r0,r3
 4148 0126 DE21     	 mov r1,#222
 4149 0128 0022     	 mov r2,#0
 4150 012a FFF7FEFF 	 bl XMC_I2C_CH_MasterStart
 4151              	.LBB49:
 600:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 601:../DeviceObject/infotainment/info_operation.c **** 	for(uint16_t count=0; count < 500; count++){}
 4152              	 .loc 5 601 0
 4153 012e BB1D     	 add r3,r7,#6
 4154 0130 0022     	 mov r2,#0
 4155 0132 1A80     	 strh r2,[r3]
 4156 0134 04E0     	 b .L198
 4157              	.L199:
 4158              	 .loc 5 601 0 is_stmt 0 discriminator 3
 4159 0136 BB1D     	 add r3,r7,#6
 4160 0138 1A88     	 ldrh r2,[r3]
 4161 013a BB1D     	 add r3,r7,#6
 4162 013c 0132     	 add r2,r2,#1
 4163 013e 1A80     	 strh r2,[r3]
 4164              	.L198:
 4165              	 .loc 5 601 0 discriminator 1
 4166 0140 BB1D     	 add r3,r7,#6
 4167 0142 1A88     	 ldrh r2,[r3]
 4168 0144 F423     	 mov r3,#244
 4169 0146 FF33     	 add r3,r3,#255
 4170 0148 9A42     	 cmp r2,r3
 4171 014a F4D9     	 bls .L199
 4172              	.LBE49:
 602:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 4173              	 .loc 5 602 0 is_stmt 1
 4174 014c 224A     	 ldr r2,.L204
 4175 014e 8023     	 mov r3,#128
 4176 0150 9B00     	 lsl r3,r3,#2
 4177 0152 101C     	 mov r0,r2
 4178 0154 191C     	 mov r1,r3
 4179 0156 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 603:../DeviceObject/infotainment/info_operation.c **** 
 604:../DeviceObject/infotainment/info_operation.c ****     /*    						Write RTC Control Address Byte  					*/
 605:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, MFPCONTROL);
 4180              	 .loc 5 605 0
 4181 015a 1F4B     	 ldr r3,.L204
 4182 015c 181C     	 mov r0,r3
 4183 015e 0721     	 mov r1,#7
 4184 0160 FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 4185              	.LBB50:
 606:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 607:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 4186              	 .loc 5 607 0
 4187 0164 3B1D     	 add r3,r7,#4
 4188 0166 0022     	 mov r2,#0
 4189 0168 1A80     	 strh r2,[r3]
 4190 016a 04E0     	 b .L200
 4191              	.L201:
 4192              	 .loc 5 607 0 is_stmt 0 discriminator 3
 4193 016c 3B1D     	 add r3,r7,#4
 4194 016e 1A88     	 ldrh r2,[r3]
 4195 0170 3B1D     	 add r3,r7,#4
 4196 0172 0132     	 add r2,r2,#1
 4197 0174 1A80     	 strh r2,[r3]
 4198              	.L200:
 4199              	 .loc 5 607 0 discriminator 1
 4200 0176 3B1D     	 add r3,r7,#4
 4201 0178 1A88     	 ldrh r2,[r3]
 4202 017a F423     	 mov r3,#244
 4203 017c FF33     	 add r3,r3,#255
 4204 017e 9A42     	 cmp r2,r3
 4205 0180 F4D9     	 bls .L201
 4206              	.LBE50:
 608:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 4207              	 .loc 5 608 0 is_stmt 1
 4208 0182 154A     	 ldr r2,.L204
 4209 0184 8023     	 mov r3,#128
 4210 0186 9B00     	 lsl r3,r3,#2
 4211 0188 101C     	 mov r0,r2
 4212 018a 191C     	 mov r1,r3
 4213 018c FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 609:../DeviceObject/infotainment/info_operation.c **** 
 610:../DeviceObject/infotainment/info_operation.c **** 	/*	 					   Write value at Control Address Byte 					*/
 611:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, data);
 4214              	 .loc 5 611 0
 4215 0190 114A     	 ldr r2,.L204
 4216 0192 7B1C     	 add r3,r7,#1
 4217 0194 1B78     	 ldrb r3,[r3]
 4218 0196 101C     	 mov r0,r2
 4219 0198 191C     	 mov r1,r3
 4220 019a FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 4221              	.LBB51:
 612:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 613:../DeviceObject/infotainment/info_operation.c **** 	for(uint16_t count=0; count < 500; count++){}
 4222              	 .loc 5 613 0
 4223 019e BB1C     	 add r3,r7,#2
 4224 01a0 0022     	 mov r2,#0
 4225 01a2 1A80     	 strh r2,[r3]
 4226 01a4 04E0     	 b .L202
 4227              	.L203:
 4228              	 .loc 5 613 0 is_stmt 0 discriminator 3
 4229 01a6 BB1C     	 add r3,r7,#2
 4230 01a8 1A88     	 ldrh r2,[r3]
 4231 01aa BB1C     	 add r3,r7,#2
 4232 01ac 0132     	 add r2,r2,#1
 4233 01ae 1A80     	 strh r2,[r3]
 4234              	.L202:
 4235              	 .loc 5 613 0 discriminator 1
 4236 01b0 BB1C     	 add r3,r7,#2
 4237 01b2 1A88     	 ldrh r2,[r3]
 4238 01b4 F423     	 mov r3,#244
 4239 01b6 FF33     	 add r3,r3,#255
 4240 01b8 9A42     	 cmp r2,r3
 4241 01ba F4D9     	 bls .L203
 4242              	.LBE51:
 614:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 4243              	 .loc 5 614 0 is_stmt 1
 4244 01bc 064A     	 ldr r2,.L204
 4245 01be 8023     	 mov r3,#128
 4246 01c0 9B00     	 lsl r3,r3,#2
 4247 01c2 101C     	 mov r0,r2
 4248 01c4 191C     	 mov r1,r3
 4249 01c6 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 615:../DeviceObject/infotainment/info_operation.c **** 
 616:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterStop(XMC_USIC1_CH1);
 4250              	 .loc 5 616 0
 4251 01ca 034B     	 ldr r3,.L204
 4252 01cc 181C     	 mov r0,r3
 4253 01ce FFF7FEFF 	 bl XMC_I2C_CH_MasterStop
 617:../DeviceObject/infotainment/info_operation.c **** }
 4254              	 .loc 5 617 0
 4255 01d2 BD46     	 mov sp,r7
 4256 01d4 05B0     	 add sp,sp,#20
 4257              	 
 4258 01d6 90BD     	 pop {r4,r7,pc}
 4259              	.L205:
 4260              	 .align 2
 4261              	.L204:
 4262 01d8 00420048 	 .word 1207976448
 4263              	 .cfi_endproc
 4264              	.LFE237:
 4266              	 .section .text.INFO_RTCMFPDisable,"ax",%progbits
 4267              	 .align 2
 4268              	 .global INFO_RTCMFPDisable
 4269              	 .code 16
 4270              	 .thumb_func
 4272              	INFO_RTCMFPDisable:
 4273              	.LFB238:
 618:../DeviceObject/infotainment/info_operation.c **** void INFO_RTCMFPDisable(void)
 619:../DeviceObject/infotainment/info_operation.c **** {
 4274              	 .loc 5 619 0
 4275              	 .cfi_startproc
 4276 0000 90B5     	 push {r4,r7,lr}
 4277              	.LCFI78:
 4278              	 .cfi_def_cfa_offset 12
 4279              	 .cfi_offset 4,-12
 4280              	 .cfi_offset 7,-8
 4281              	 .cfi_offset 14,-4
 4282 0002 85B0     	 sub sp,sp,#20
 4283              	.LCFI79:
 4284              	 .cfi_def_cfa_offset 32
 4285 0004 00AF     	 add r7,sp,#0
 4286              	.LCFI80:
 4287              	 .cfi_def_cfa_register 7
 620:../DeviceObject/infotainment/info_operation.c **** 	uint8_t data;
 621:../DeviceObject/infotainment/info_operation.c **** 
 622:../DeviceObject/infotainment/info_operation.c **** 	/*    						Accessing RTCC Control Byte w/ WR					*/
 623:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_WRITE);
 4288              	 .loc 5 623 0
 4289 0006 744B     	 ldr r3,.L221
 4290 0008 181C     	 mov r0,r3
 4291 000a DE21     	 mov r1,#222
 4292 000c 0022     	 mov r2,#0
 4293 000e FFF7FEFF 	 bl XMC_I2C_CH_MasterStart
 4294              	.LBB52:
 624:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 625:../DeviceObject/infotainment/info_operation.c **** 	for(uint16_t count=0; count < 500; count++){}
 4295              	 .loc 5 625 0
 4296 0012 0E23     	 mov r3,#14
 4297 0014 FB18     	 add r3,r7,r3
 4298 0016 0022     	 mov r2,#0
 4299 0018 1A80     	 strh r2,[r3]
 4300 001a 06E0     	 b .L207
 4301              	.L208:
 4302              	 .loc 5 625 0 is_stmt 0 discriminator 3
 4303 001c 0E23     	 mov r3,#14
 4304 001e FB18     	 add r3,r7,r3
 4305 0020 1A88     	 ldrh r2,[r3]
 4306 0022 0E23     	 mov r3,#14
 4307 0024 FB18     	 add r3,r7,r3
 4308 0026 0132     	 add r2,r2,#1
 4309 0028 1A80     	 strh r2,[r3]
 4310              	.L207:
 4311              	 .loc 5 625 0 discriminator 1
 4312 002a 0E23     	 mov r3,#14
 4313 002c FB18     	 add r3,r7,r3
 4314 002e 1A88     	 ldrh r2,[r3]
 4315 0030 F423     	 mov r3,#244
 4316 0032 FF33     	 add r3,r3,#255
 4317 0034 9A42     	 cmp r2,r3
 4318 0036 F1D9     	 bls .L208
 4319              	.LBE52:
 626:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 4320              	 .loc 5 626 0 is_stmt 1
 4321 0038 674A     	 ldr r2,.L221
 4322 003a 8023     	 mov r3,#128
 4323 003c 9B00     	 lsl r3,r3,#2
 4324 003e 101C     	 mov r0,r2
 4325 0040 191C     	 mov r1,r3
 4326 0042 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 627:../DeviceObject/infotainment/info_operation.c **** 
 628:../DeviceObject/infotainment/info_operation.c ****     /*    						Write RTC Second Address Byte   							*/
 629:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, MFPCONTROL);
 4327              	 .loc 5 629 0
 4328 0046 644B     	 ldr r3,.L221
 4329 0048 181C     	 mov r0,r3
 4330 004a 0721     	 mov r1,#7
 4331 004c FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 4332              	.LBB53:
 630:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 631:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 4333              	 .loc 5 631 0
 4334 0050 0C23     	 mov r3,#12
 4335 0052 FB18     	 add r3,r7,r3
 4336 0054 0022     	 mov r2,#0
 4337 0056 1A80     	 strh r2,[r3]
 4338 0058 06E0     	 b .L209
 4339              	.L210:
 4340              	 .loc 5 631 0 is_stmt 0 discriminator 3
 4341 005a 0C23     	 mov r3,#12
 4342 005c FB18     	 add r3,r7,r3
 4343 005e 1A88     	 ldrh r2,[r3]
 4344 0060 0C23     	 mov r3,#12
 4345 0062 FB18     	 add r3,r7,r3
 4346 0064 0132     	 add r2,r2,#1
 4347 0066 1A80     	 strh r2,[r3]
 4348              	.L209:
 4349              	 .loc 5 631 0 discriminator 1
 4350 0068 0C23     	 mov r3,#12
 4351 006a FB18     	 add r3,r7,r3
 4352 006c 1A88     	 ldrh r2,[r3]
 4353 006e F423     	 mov r3,#244
 4354 0070 FF33     	 add r3,r3,#255
 4355 0072 9A42     	 cmp r2,r3
 4356 0074 F1D9     	 bls .L210
 4357              	.LBE53:
 632:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 4358              	 .loc 5 632 0 is_stmt 1
 4359 0076 584A     	 ldr r2,.L221
 4360 0078 8023     	 mov r3,#128
 4361 007a 9B00     	 lsl r3,r3,#2
 4362 007c 101C     	 mov r0,r2
 4363 007e 191C     	 mov r1,r3
 4364 0080 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 633:../DeviceObject/infotainment/info_operation.c **** 
 634:../DeviceObject/infotainment/info_operation.c ****     /*    						Accessing RTCC Control Byte again w/ RD				*/
 635:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterRepeatedStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_READ);
 4365              	 .loc 5 635 0
 4366 0084 544B     	 ldr r3,.L221
 4367 0086 181C     	 mov r0,r3
 4368 0088 DE21     	 mov r1,#222
 4369 008a 0122     	 mov r2,#1
 4370 008c FFF7FEFF 	 bl XMC_I2C_CH_MasterRepeatedStart
 4371              	.LBB54:
 636:../DeviceObject/infotainment/info_operation.c **** //    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){
 637:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 4372              	 .loc 5 637 0
 4373 0090 0A23     	 mov r3,#10
 4374 0092 FB18     	 add r3,r7,r3
 4375 0094 0022     	 mov r2,#0
 4376 0096 1A80     	 strh r2,[r3]
 4377 0098 06E0     	 b .L211
 4378              	.L212:
 4379              	 .loc 5 637 0 is_stmt 0 discriminator 3
 4380 009a 0A23     	 mov r3,#10
 4381 009c FB18     	 add r3,r7,r3
 4382 009e 1A88     	 ldrh r2,[r3]
 4383 00a0 0A23     	 mov r3,#10
 4384 00a2 FB18     	 add r3,r7,r3
 4385 00a4 0132     	 add r2,r2,#1
 4386 00a6 1A80     	 strh r2,[r3]
 4387              	.L211:
 4388              	 .loc 5 637 0 discriminator 1
 4389 00a8 0A23     	 mov r3,#10
 4390 00aa FB18     	 add r3,r7,r3
 4391 00ac 1A88     	 ldrh r2,[r3]
 4392 00ae F423     	 mov r3,#244
 4393 00b0 FF33     	 add r3,r3,#255
 4394 00b2 9A42     	 cmp r2,r3
 4395 00b4 F1D9     	 bls .L212
 4396              	.LBE54:
 638:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 4397              	 .loc 5 638 0 is_stmt 1
 4398 00b6 484A     	 ldr r2,.L221
 4399 00b8 8023     	 mov r3,#128
 4400 00ba 9B00     	 lsl r3,r3,#2
 4401 00bc 101C     	 mov r0,r2
 4402 00be 191C     	 mov r1,r3
 4403 00c0 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 639:../DeviceObject/infotainment/info_operation.c **** 
 640:../DeviceObject/infotainment/info_operation.c **** 	/*							Send NACK											*/
 641:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterReceiveNack(XMC_USIC1_CH1);
 4404              	 .loc 5 641 0
 4405 00c4 444B     	 ldr r3,.L221
 4406 00c6 181C     	 mov r0,r3
 4407 00c8 FFF7FEFF 	 bl XMC_I2C_CH_MasterReceiveNack
 4408              	.LBB55:
 642:../DeviceObject/infotainment/info_operation.c **** //    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & (XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 643:../DeviceObject/infotainment/info_operation.c **** //	                              XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)) == 0U){/* 
 644:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 4409              	 .loc 5 644 0
 4410 00cc 0823     	 mov r3,#8
 4411 00ce FB18     	 add r3,r7,r3
 4412 00d0 0022     	 mov r2,#0
 4413 00d2 1A80     	 strh r2,[r3]
 4414 00d4 06E0     	 b .L213
 4415              	.L214:
 4416              	 .loc 5 644 0 is_stmt 0 discriminator 3
 4417 00d6 0823     	 mov r3,#8
 4418 00d8 FB18     	 add r3,r7,r3
 4419 00da 1A88     	 ldrh r2,[r3]
 4420 00dc 0823     	 mov r3,#8
 4421 00de FB18     	 add r3,r7,r3
 4422 00e0 0132     	 add r2,r2,#1
 4423 00e2 1A80     	 strh r2,[r3]
 4424              	.L213:
 4425              	 .loc 5 644 0 discriminator 1
 4426 00e4 0823     	 mov r3,#8
 4427 00e6 FB18     	 add r3,r7,r3
 4428 00e8 1A88     	 ldrh r2,[r3]
 4429 00ea F423     	 mov r3,#244
 4430 00ec FF33     	 add r3,r3,#255
 4431 00ee 9A42     	 cmp r2,r3
 4432 00f0 F1D9     	 bls .L214
 4433              	.LBE55:
 645:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 4434              	 .loc 5 645 0 is_stmt 1
 4435 00f2 394A     	 ldr r2,.L221
 4436 00f4 C023     	 mov r3,#192
 4437 00f6 1B02     	 lsl r3,r3,#8
 4438 00f8 101C     	 mov r0,r2
 4439 00fa 191C     	 mov r1,r3
 4440 00fc FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 646:../DeviceObject/infotainment/info_operation.c ****                                   XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
 647:../DeviceObject/infotainment/info_operation.c **** 
 648:../DeviceObject/infotainment/info_operation.c ****     /*    						Load Register Information  								*/
 649:../DeviceObject/infotainment/info_operation.c ****     data     = XMC_I2C_CH_GetReceivedData(XMC_USIC1_CH1);
 4441              	 .loc 5 649 0
 4442 0100 7C1C     	 add r4,r7,#1
 4443 0102 354B     	 ldr r3,.L221
 4444 0104 181C     	 mov r0,r3
 4445 0106 FFF7FEFF 	 bl XMC_I2C_CH_GetReceivedData
 4446 010a 031C     	 mov r3,r0
 4447 010c 2370     	 strb r3,[r4]
 650:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterStop(XMC_USIC1_CH1);
 4448              	 .loc 5 650 0
 4449 010e 324B     	 ldr r3,.L221
 4450 0110 181C     	 mov r0,r3
 4451 0112 FFF7FEFF 	 bl XMC_I2C_CH_MasterStop
 651:../DeviceObject/infotainment/info_operation.c **** 
 652:../DeviceObject/infotainment/info_operation.c ****     /* 							Disable SQWEN Bit SQWFS1 and SQWFS0 depend on MFP_FREQ value, others '0'									*/
 653:../DeviceObject/infotainment/info_operation.c ****     data	= data & 0x3F;
 4452              	 .loc 5 653 0
 4453 0116 7B1C     	 add r3,r7,#1
 4454 0118 7A1C     	 add r2,r7,#1
 4455 011a 1278     	 ldrb r2,[r2]
 4456 011c 3F21     	 mov r1,#63
 4457 011e 0A40     	 and r2,r1
 4458 0120 1A70     	 strb r2,[r3]
 654:../DeviceObject/infotainment/info_operation.c **** 
 655:../DeviceObject/infotainment/info_operation.c **** 	/*    						Accessing RTCC Control Byte 						*/
 656:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_WRITE);
 4459              	 .loc 5 656 0
 4460 0122 2D4B     	 ldr r3,.L221
 4461 0124 181C     	 mov r0,r3
 4462 0126 DE21     	 mov r1,#222
 4463 0128 0022     	 mov r2,#0
 4464 012a FFF7FEFF 	 bl XMC_I2C_CH_MasterStart
 4465              	.LBB56:
 657:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 658:../DeviceObject/infotainment/info_operation.c **** 	for(uint16_t count=0; count < 500; count++){}
 4466              	 .loc 5 658 0
 4467 012e BB1D     	 add r3,r7,#6
 4468 0130 0022     	 mov r2,#0
 4469 0132 1A80     	 strh r2,[r3]
 4470 0134 04E0     	 b .L215
 4471              	.L216:
 4472              	 .loc 5 658 0 is_stmt 0 discriminator 3
 4473 0136 BB1D     	 add r3,r7,#6
 4474 0138 1A88     	 ldrh r2,[r3]
 4475 013a BB1D     	 add r3,r7,#6
 4476 013c 0132     	 add r2,r2,#1
 4477 013e 1A80     	 strh r2,[r3]
 4478              	.L215:
 4479              	 .loc 5 658 0 discriminator 1
 4480 0140 BB1D     	 add r3,r7,#6
 4481 0142 1A88     	 ldrh r2,[r3]
 4482 0144 F423     	 mov r3,#244
 4483 0146 FF33     	 add r3,r3,#255
 4484 0148 9A42     	 cmp r2,r3
 4485 014a F4D9     	 bls .L216
 4486              	.LBE56:
 659:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 4487              	 .loc 5 659 0 is_stmt 1
 4488 014c 224A     	 ldr r2,.L221
 4489 014e 8023     	 mov r3,#128
 4490 0150 9B00     	 lsl r3,r3,#2
 4491 0152 101C     	 mov r0,r2
 4492 0154 191C     	 mov r1,r3
 4493 0156 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 660:../DeviceObject/infotainment/info_operation.c **** 
 661:../DeviceObject/infotainment/info_operation.c ****     /*    						Write RTC Control Address Byte  					*/
 662:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, MFPCONTROL);
 4494              	 .loc 5 662 0
 4495 015a 1F4B     	 ldr r3,.L221
 4496 015c 181C     	 mov r0,r3
 4497 015e 0721     	 mov r1,#7
 4498 0160 FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 4499              	.LBB57:
 663:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 664:../DeviceObject/infotainment/info_operation.c ****     for(uint16_t count=0; count < 500; count++){}
 4500              	 .loc 5 664 0
 4501 0164 3B1D     	 add r3,r7,#4
 4502 0166 0022     	 mov r2,#0
 4503 0168 1A80     	 strh r2,[r3]
 4504 016a 04E0     	 b .L217
 4505              	.L218:
 4506              	 .loc 5 664 0 is_stmt 0 discriminator 3
 4507 016c 3B1D     	 add r3,r7,#4
 4508 016e 1A88     	 ldrh r2,[r3]
 4509 0170 3B1D     	 add r3,r7,#4
 4510 0172 0132     	 add r2,r2,#1
 4511 0174 1A80     	 strh r2,[r3]
 4512              	.L217:
 4513              	 .loc 5 664 0 discriminator 1
 4514 0176 3B1D     	 add r3,r7,#4
 4515 0178 1A88     	 ldrh r2,[r3]
 4516 017a F423     	 mov r3,#244
 4517 017c FF33     	 add r3,r3,#255
 4518 017e 9A42     	 cmp r2,r3
 4519 0180 F4D9     	 bls .L218
 4520              	.LBE57:
 665:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 4521              	 .loc 5 665 0 is_stmt 1
 4522 0182 154A     	 ldr r2,.L221
 4523 0184 8023     	 mov r3,#128
 4524 0186 9B00     	 lsl r3,r3,#2
 4525 0188 101C     	 mov r0,r2
 4526 018a 191C     	 mov r1,r3
 4527 018c FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 666:../DeviceObject/infotainment/info_operation.c **** 
 667:../DeviceObject/infotainment/info_operation.c **** 	/*	 					   Write value at Control Address Byte 					*/
 668:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, data);
 4528              	 .loc 5 668 0
 4529 0190 114A     	 ldr r2,.L221
 4530 0192 7B1C     	 add r3,r7,#1
 4531 0194 1B78     	 ldrb r3,[r3]
 4532 0196 101C     	 mov r0,r2
 4533 0198 191C     	 mov r1,r3
 4534 019a FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 4535              	.LBB58:
 669:../DeviceObject/infotainment/info_operation.c **** //	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* 
 670:../DeviceObject/infotainment/info_operation.c **** 	for(uint16_t count=0; count < 500; count++){}
 4536              	 .loc 5 670 0
 4537 019e BB1C     	 add r3,r7,#2
 4538 01a0 0022     	 mov r2,#0
 4539 01a2 1A80     	 strh r2,[r3]
 4540 01a4 04E0     	 b .L219
 4541              	.L220:
 4542              	 .loc 5 670 0 is_stmt 0 discriminator 3
 4543 01a6 BB1C     	 add r3,r7,#2
 4544 01a8 1A88     	 ldrh r2,[r3]
 4545 01aa BB1C     	 add r3,r7,#2
 4546 01ac 0132     	 add r2,r2,#1
 4547 01ae 1A80     	 strh r2,[r3]
 4548              	.L219:
 4549              	 .loc 5 670 0 discriminator 1
 4550 01b0 BB1C     	 add r3,r7,#2
 4551 01b2 1A88     	 ldrh r2,[r3]
 4552 01b4 F423     	 mov r3,#244
 4553 01b6 FF33     	 add r3,r3,#255
 4554 01b8 9A42     	 cmp r2,r3
 4555 01ba F4D9     	 bls .L220
 4556              	.LBE58:
 671:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 4557              	 .loc 5 671 0 is_stmt 1
 4558 01bc 064A     	 ldr r2,.L221
 4559 01be 8023     	 mov r3,#128
 4560 01c0 9B00     	 lsl r3,r3,#2
 4561 01c2 101C     	 mov r0,r2
 4562 01c4 191C     	 mov r1,r3
 4563 01c6 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 672:../DeviceObject/infotainment/info_operation.c **** 
 673:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterStop(XMC_USIC1_CH1);
 4564              	 .loc 5 673 0
 4565 01ca 034B     	 ldr r3,.L221
 4566 01cc 181C     	 mov r0,r3
 4567 01ce FFF7FEFF 	 bl XMC_I2C_CH_MasterStop
 674:../DeviceObject/infotainment/info_operation.c **** }
 4568              	 .loc 5 674 0
 4569 01d2 BD46     	 mov sp,r7
 4570 01d4 05B0     	 add sp,sp,#20
 4571              	 
 4572 01d6 90BD     	 pop {r4,r7,pc}
 4573              	.L222:
 4574              	 .align 2
 4575              	.L221:
 4576 01d8 00420048 	 .word 1207976448
 4577              	 .cfi_endproc
 4578              	.LFE238:
 4580              	 .section .text.INFO_EEPROM_Write,"ax",%progbits
 4581              	 .align 2
 4582              	 .global INFO_EEPROM_Write
 4583              	 .code 16
 4584              	 .thumb_func
 4586              	INFO_EEPROM_Write:
 4587              	.LFB239:
 675:../DeviceObject/infotainment/info_operation.c **** 
 676:../DeviceObject/infotainment/info_operation.c **** /* EEPROM Methods */
 677:../DeviceObject/infotainment/info_operation.c **** void INFO_EEPROM_Write(uint16_t address, uint8_t data)
 678:../DeviceObject/infotainment/info_operation.c **** {
 4588              	 .loc 5 678 0
 4589              	 .cfi_startproc
 4590 0000 80B5     	 push {r7,lr}
 4591              	.LCFI81:
 4592              	 .cfi_def_cfa_offset 8
 4593              	 .cfi_offset 7,-8
 4594              	 .cfi_offset 14,-4
 4595 0002 84B0     	 sub sp,sp,#16
 4596              	.LCFI82:
 4597              	 .cfi_def_cfa_offset 24
 4598 0004 00AF     	 add r7,sp,#0
 4599              	.LCFI83:
 4600              	 .cfi_def_cfa_register 7
 4601 0006 021C     	 mov r2,r0
 4602 0008 BB1D     	 add r3,r7,#6
 4603 000a 1A80     	 strh r2,[r3]
 4604 000c 7B1D     	 add r3,r7,#5
 4605 000e 0A1C     	 add r2,r1,#0
 4606 0010 1A70     	 strb r2,[r3]
 679:../DeviceObject/infotainment/info_operation.c **** 	uint8_t address_buff;
 680:../DeviceObject/infotainment/info_operation.c **** 	/*    						Accessing Device Address 						*/
 681:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterStart(XMC_USIC1_CH1, AT24ADDR, XMC_I2C_CH_CMD_WRITE);
 4607              	 .loc 5 681 0
 4608 0012 3A4B     	 ldr r3,.L228
 4609 0014 181C     	 mov r0,r3
 4610 0016 A021     	 mov r1,#160
 4611 0018 0022     	 mov r2,#0
 4612 001a FFF7FEFF 	 bl XMC_I2C_CH_MasterStart
 682:../DeviceObject/infotainment/info_operation.c **** 	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 4613              	 .loc 5 682 0
 4614 001e C046     	 mov r8,r8
 4615              	.L224:
 4616              	 .loc 5 682 0 is_stmt 0 discriminator 1
 4617 0020 364B     	 ldr r3,.L228
 4618 0022 181C     	 mov r0,r3
 4619 0024 FFF7FEFF 	 bl XMC_I2C_CH_GetStatusFlag
 4620 0028 021C     	 mov r2,r0
 4621 002a 8023     	 mov r3,#128
 4622 002c 9B00     	 lsl r3,r3,#2
 4623 002e 1340     	 and r3,r2
 4624 0030 F6D0     	 beq .L224
 683:../DeviceObject/infotainment/info_operation.c **** 	{
 684:../DeviceObject/infotainment/info_operation.c **** 		/* wait for ACK */
 685:../DeviceObject/infotainment/info_operation.c **** 	}
 686:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 4625              	 .loc 5 686 0 is_stmt 1
 4626 0032 324A     	 ldr r2,.L228
 4627 0034 8023     	 mov r3,#128
 4628 0036 9B00     	 lsl r3,r3,#2
 4629 0038 101C     	 mov r0,r2
 4630 003a 191C     	 mov r1,r3
 4631 003c FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 687:../DeviceObject/infotainment/info_operation.c **** 
 688:../DeviceObject/infotainment/info_operation.c **** 	/*    						Write MSB Address Byte   					*/
 689:../DeviceObject/infotainment/info_operation.c **** 	address_buff = (address >> 8);
 4632              	 .loc 5 689 0
 4633 0040 BB1D     	 add r3,r7,#6
 4634 0042 1B88     	 ldrh r3,[r3]
 4635 0044 1B0A     	 lsr r3,r3,#8
 4636 0046 9AB2     	 uxth r2,r3
 4637 0048 0F23     	 mov r3,#15
 4638 004a FB18     	 add r3,r7,r3
 4639 004c 1A70     	 strb r2,[r3]
 690:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, address_buff);
 4640              	 .loc 5 690 0
 4641 004e 2B4A     	 ldr r2,.L228
 4642 0050 0F23     	 mov r3,#15
 4643 0052 FB18     	 add r3,r7,r3
 4644 0054 1B78     	 ldrb r3,[r3]
 4645 0056 101C     	 mov r0,r2
 4646 0058 191C     	 mov r1,r3
 4647 005a FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 691:../DeviceObject/infotainment/info_operation.c **** 
 692:../DeviceObject/infotainment/info_operation.c **** 	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 4648              	 .loc 5 692 0
 4649 005e C046     	 mov r8,r8
 4650              	.L225:
 4651              	 .loc 5 692 0 is_stmt 0 discriminator 1
 4652 0060 264B     	 ldr r3,.L228
 4653 0062 181C     	 mov r0,r3
 4654 0064 FFF7FEFF 	 bl XMC_I2C_CH_GetStatusFlag
 4655 0068 021C     	 mov r2,r0
 4656 006a 8023     	 mov r3,#128
 4657 006c 9B00     	 lsl r3,r3,#2
 4658 006e 1340     	 and r3,r2
 4659 0070 F6D0     	 beq .L225
 693:../DeviceObject/infotainment/info_operation.c **** 	{
 694:../DeviceObject/infotainment/info_operation.c **** 		/* wait for ACK */
 695:../DeviceObject/infotainment/info_operation.c **** 	}
 696:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 4660              	 .loc 5 696 0 is_stmt 1
 4661 0072 224A     	 ldr r2,.L228
 4662 0074 8023     	 mov r3,#128
 4663 0076 9B00     	 lsl r3,r3,#2
 4664 0078 101C     	 mov r0,r2
 4665 007a 191C     	 mov r1,r3
 4666 007c FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 697:../DeviceObject/infotainment/info_operation.c **** 
 698:../DeviceObject/infotainment/info_operation.c **** 	/*	 					   Write LSB Address Byte						*/
 699:../DeviceObject/infotainment/info_operation.c **** 	address_buff = address & 0xFF;
 4667              	 .loc 5 699 0
 4668 0080 0F23     	 mov r3,#15
 4669 0082 FB18     	 add r3,r7,r3
 4670 0084 BA1D     	 add r2,r7,#6
 4671 0086 1288     	 ldrh r2,[r2]
 4672 0088 1A70     	 strb r2,[r3]
 700:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, (address_buff));
 4673              	 .loc 5 700 0
 4674 008a 1C4A     	 ldr r2,.L228
 4675 008c 0F23     	 mov r3,#15
 4676 008e FB18     	 add r3,r7,r3
 4677 0090 1B78     	 ldrb r3,[r3]
 4678 0092 101C     	 mov r0,r2
 4679 0094 191C     	 mov r1,r3
 4680 0096 FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 701:../DeviceObject/infotainment/info_operation.c **** 	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 4681              	 .loc 5 701 0
 4682 009a C046     	 mov r8,r8
 4683              	.L226:
 4684              	 .loc 5 701 0 is_stmt 0 discriminator 1
 4685 009c 174B     	 ldr r3,.L228
 4686 009e 181C     	 mov r0,r3
 4687 00a0 FFF7FEFF 	 bl XMC_I2C_CH_GetStatusFlag
 4688 00a4 021C     	 mov r2,r0
 4689 00a6 8023     	 mov r3,#128
 4690 00a8 9B00     	 lsl r3,r3,#2
 4691 00aa 1340     	 and r3,r2
 4692 00ac F6D0     	 beq .L226
 702:../DeviceObject/infotainment/info_operation.c **** 	{
 703:../DeviceObject/infotainment/info_operation.c **** 		/* wait for ACK */
 704:../DeviceObject/infotainment/info_operation.c **** 	}
 705:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 4693              	 .loc 5 705 0 is_stmt 1
 4694 00ae 134A     	 ldr r2,.L228
 4695 00b0 8023     	 mov r3,#128
 4696 00b2 9B00     	 lsl r3,r3,#2
 4697 00b4 101C     	 mov r0,r2
 4698 00b6 191C     	 mov r1,r3
 4699 00b8 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 706:../DeviceObject/infotainment/info_operation.c **** 
 707:../DeviceObject/infotainment/info_operation.c **** 	/*	 					   Write Data into the AT24C64						*/
 708:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, data);
 4700              	 .loc 5 708 0
 4701 00bc 0F4A     	 ldr r2,.L228
 4702 00be 7B1D     	 add r3,r7,#5
 4703 00c0 1B78     	 ldrb r3,[r3]
 4704 00c2 101C     	 mov r0,r2
 4705 00c4 191C     	 mov r1,r3
 4706 00c6 FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 709:../DeviceObject/infotainment/info_operation.c **** 
 710:../DeviceObject/infotainment/info_operation.c **** 	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 4707              	 .loc 5 710 0
 4708 00ca C046     	 mov r8,r8
 4709              	.L227:
 4710              	 .loc 5 710 0 is_stmt 0 discriminator 1
 4711 00cc 0B4B     	 ldr r3,.L228
 4712 00ce 181C     	 mov r0,r3
 4713 00d0 FFF7FEFF 	 bl XMC_I2C_CH_GetStatusFlag
 4714 00d4 021C     	 mov r2,r0
 4715 00d6 8023     	 mov r3,#128
 4716 00d8 9B00     	 lsl r3,r3,#2
 4717 00da 1340     	 and r3,r2
 4718 00dc F6D0     	 beq .L227
 711:../DeviceObject/infotainment/info_operation.c **** 	{
 712:../DeviceObject/infotainment/info_operation.c **** 		/* wait for ACK */
 713:../DeviceObject/infotainment/info_operation.c **** 	}
 714:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 4719              	 .loc 5 714 0 is_stmt 1
 4720 00de 074A     	 ldr r2,.L228
 4721 00e0 8023     	 mov r3,#128
 4722 00e2 9B00     	 lsl r3,r3,#2
 4723 00e4 101C     	 mov r0,r2
 4724 00e6 191C     	 mov r1,r3
 4725 00e8 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 715:../DeviceObject/infotainment/info_operation.c **** 
 716:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterStop(XMC_USIC1_CH1);
 4726              	 .loc 5 716 0
 4727 00ec 034B     	 ldr r3,.L228
 4728 00ee 181C     	 mov r0,r3
 4729 00f0 FFF7FEFF 	 bl XMC_I2C_CH_MasterStop
 717:../DeviceObject/infotainment/info_operation.c **** }
 4730              	 .loc 5 717 0
 4731 00f4 BD46     	 mov sp,r7
 4732 00f6 04B0     	 add sp,sp,#16
 4733              	 
 4734 00f8 80BD     	 pop {r7,pc}
 4735              	.L229:
 4736 00fa C046     	 .align 2
 4737              	.L228:
 4738 00fc 00420048 	 .word 1207976448
 4739              	 .cfi_endproc
 4740              	.LFE239:
 4742              	 .section .text.INFO_EEPROM_Read,"ax",%progbits
 4743              	 .align 2
 4744              	 .global INFO_EEPROM_Read
 4745              	 .code 16
 4746              	 .thumb_func
 4748              	INFO_EEPROM_Read:
 4749              	.LFB240:
 718:../DeviceObject/infotainment/info_operation.c **** uint8_t INFO_EEPROM_Read(uint16_t address)
 719:../DeviceObject/infotainment/info_operation.c **** {
 4750              	 .loc 5 719 0
 4751              	 .cfi_startproc
 4752 0000 90B5     	 push {r4,r7,lr}
 4753              	.LCFI84:
 4754              	 .cfi_def_cfa_offset 12
 4755              	 .cfi_offset 4,-12
 4756              	 .cfi_offset 7,-8
 4757              	 .cfi_offset 14,-4
 4758 0002 85B0     	 sub sp,sp,#20
 4759              	.LCFI85:
 4760              	 .cfi_def_cfa_offset 32
 4761 0004 00AF     	 add r7,sp,#0
 4762              	.LCFI86:
 4763              	 .cfi_def_cfa_register 7
 4764 0006 021C     	 mov r2,r0
 4765 0008 BB1D     	 add r3,r7,#6
 4766 000a 1A80     	 strh r2,[r3]
 720:../DeviceObject/infotainment/info_operation.c **** 	uint8_t data=0;
 4767              	 .loc 5 720 0
 4768 000c 0F23     	 mov r3,#15
 4769 000e FB18     	 add r3,r7,r3
 4770 0010 0022     	 mov r2,#0
 4771 0012 1A70     	 strb r2,[r3]
 721:../DeviceObject/infotainment/info_operation.c **** 
 722:../DeviceObject/infotainment/info_operation.c **** 	/*    						Accessing Device Address 				*/
 723:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterStart(XMC_USIC1_CH1, AT24ADDR, XMC_I2C_CH_CMD_WRITE);
 4772              	 .loc 5 723 0
 4773 0014 444B     	 ldr r3,.L237
 4774 0016 181C     	 mov r0,r3
 4775 0018 A021     	 mov r1,#160
 4776 001a 0022     	 mov r2,#0
 4777 001c FFF7FEFF 	 bl XMC_I2C_CH_MasterStart
 724:../DeviceObject/infotainment/info_operation.c **** 
 725:../DeviceObject/infotainment/info_operation.c **** 	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 4778              	 .loc 5 725 0
 4779 0020 C046     	 mov r8,r8
 4780              	.L231:
 4781              	 .loc 5 725 0 is_stmt 0 discriminator 1
 4782 0022 414B     	 ldr r3,.L237
 4783 0024 181C     	 mov r0,r3
 4784 0026 FFF7FEFF 	 bl XMC_I2C_CH_GetStatusFlag
 4785 002a 021C     	 mov r2,r0
 4786 002c 8023     	 mov r3,#128
 4787 002e 9B00     	 lsl r3,r3,#2
 4788 0030 1340     	 and r3,r2
 4789 0032 F6D0     	 beq .L231
 726:../DeviceObject/infotainment/info_operation.c **** 	{
 727:../DeviceObject/infotainment/info_operation.c **** 		/* wait for ACK */
 728:../DeviceObject/infotainment/info_operation.c **** 	}
 729:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 4790              	 .loc 5 729 0 is_stmt 1
 4791 0034 3C4A     	 ldr r2,.L237
 4792 0036 8023     	 mov r3,#128
 4793 0038 9B00     	 lsl r3,r3,#2
 4794 003a 101C     	 mov r0,r2
 4795 003c 191C     	 mov r1,r3
 4796 003e FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 730:../DeviceObject/infotainment/info_operation.c **** 
 731:../DeviceObject/infotainment/info_operation.c **** 	/*    						Write MSB Address Byte   					*/
 732:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, (uint8_t)(address>>8));
 4797              	 .loc 5 732 0
 4798 0042 BB1D     	 add r3,r7,#6
 4799 0044 1B88     	 ldrh r3,[r3]
 4800 0046 1B0A     	 lsr r3,r3,#8
 4801 0048 9BB2     	 uxth r3,r3
 4802 004a DBB2     	 uxtb r3,r3
 4803 004c 364A     	 ldr r2,.L237
 4804 004e 101C     	 mov r0,r2
 4805 0050 191C     	 mov r1,r3
 4806 0052 FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 733:../DeviceObject/infotainment/info_operation.c **** 	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 4807              	 .loc 5 733 0
 4808 0056 C046     	 mov r8,r8
 4809              	.L232:
 4810              	 .loc 5 733 0 is_stmt 0 discriminator 1
 4811 0058 334B     	 ldr r3,.L237
 4812 005a 181C     	 mov r0,r3
 4813 005c FFF7FEFF 	 bl XMC_I2C_CH_GetStatusFlag
 4814 0060 021C     	 mov r2,r0
 4815 0062 8023     	 mov r3,#128
 4816 0064 9B00     	 lsl r3,r3,#2
 4817 0066 1340     	 and r3,r2
 4818 0068 F6D0     	 beq .L232
 734:../DeviceObject/infotainment/info_operation.c **** 	{
 735:../DeviceObject/infotainment/info_operation.c **** 		/* wait for ACK */
 736:../DeviceObject/infotainment/info_operation.c **** 	}
 737:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 4819              	 .loc 5 737 0 is_stmt 1
 4820 006a 2F4A     	 ldr r2,.L237
 4821 006c 8023     	 mov r3,#128
 4822 006e 9B00     	 lsl r3,r3,#2
 4823 0070 101C     	 mov r0,r2
 4824 0072 191C     	 mov r1,r3
 4825 0074 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 738:../DeviceObject/infotainment/info_operation.c **** 
 739:../DeviceObject/infotainment/info_operation.c **** 	/*	 					   Write LSB Address Byte						*/
 740:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, (uint8_t)(address));
 4826              	 .loc 5 740 0
 4827 0078 BB1D     	 add r3,r7,#6
 4828 007a 1B88     	 ldrh r3,[r3]
 4829 007c DBB2     	 uxtb r3,r3
 4830 007e 2A4A     	 ldr r2,.L237
 4831 0080 101C     	 mov r0,r2
 4832 0082 191C     	 mov r1,r3
 4833 0084 FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
 741:../DeviceObject/infotainment/info_operation.c **** 	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 4834              	 .loc 5 741 0
 4835 0088 C046     	 mov r8,r8
 4836              	.L233:
 4837              	 .loc 5 741 0 is_stmt 0 discriminator 1
 4838 008a 274B     	 ldr r3,.L237
 4839 008c 181C     	 mov r0,r3
 4840 008e FFF7FEFF 	 bl XMC_I2C_CH_GetStatusFlag
 4841 0092 021C     	 mov r2,r0
 4842 0094 8023     	 mov r3,#128
 4843 0096 9B00     	 lsl r3,r3,#2
 4844 0098 1340     	 and r3,r2
 4845 009a F6D0     	 beq .L233
 742:../DeviceObject/infotainment/info_operation.c **** 	{
 743:../DeviceObject/infotainment/info_operation.c **** 		/* wait for ACK */
 744:../DeviceObject/infotainment/info_operation.c **** 
 745:../DeviceObject/infotainment/info_operation.c **** 	}
 746:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 4846              	 .loc 5 746 0 is_stmt 1
 4847 009c 224A     	 ldr r2,.L237
 4848 009e 8023     	 mov r3,#128
 4849 00a0 9B00     	 lsl r3,r3,#2
 4850 00a2 101C     	 mov r0,r2
 4851 00a4 191C     	 mov r1,r3
 4852 00a6 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 747:../DeviceObject/infotainment/info_operation.c **** 
 748:../DeviceObject/infotainment/info_operation.c ****     /*    						Accessing RTCC Control Byte again  					*/
 749:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterRepeatedStart(XMC_USIC1_CH1, AT24ADDR, XMC_I2C_CH_CMD_READ);
 4853              	 .loc 5 749 0
 4854 00aa 1F4B     	 ldr r3,.L237
 4855 00ac 181C     	 mov r0,r3
 4856 00ae A021     	 mov r1,#160
 4857 00b0 0122     	 mov r2,#1
 4858 00b2 FFF7FEFF 	 bl XMC_I2C_CH_MasterRepeatedStart
 750:../DeviceObject/infotainment/info_operation.c **** 	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 4859              	 .loc 5 750 0
 4860 00b6 C046     	 mov r8,r8
 4861              	.L234:
 4862              	 .loc 5 750 0 is_stmt 0 discriminator 1
 4863 00b8 1B4B     	 ldr r3,.L237
 4864 00ba 181C     	 mov r0,r3
 4865 00bc FFF7FEFF 	 bl XMC_I2C_CH_GetStatusFlag
 4866 00c0 021C     	 mov r2,r0
 4867 00c2 8023     	 mov r3,#128
 4868 00c4 9B00     	 lsl r3,r3,#2
 4869 00c6 1340     	 and r3,r2
 4870 00c8 F6D0     	 beq .L234
 751:../DeviceObject/infotainment/info_operation.c **** 	{
 752:../DeviceObject/infotainment/info_operation.c **** 		/* wait for ACK */
 753:../DeviceObject/infotainment/info_operation.c **** 	}
 754:../DeviceObject/infotainment/info_operation.c **** 	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 4871              	 .loc 5 754 0 is_stmt 1
 4872 00ca 174A     	 ldr r2,.L237
 4873 00cc 8023     	 mov r3,#128
 4874 00ce 9B00     	 lsl r3,r3,#2
 4875 00d0 101C     	 mov r0,r2
 4876 00d2 191C     	 mov r1,r3
 4877 00d4 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 755:../DeviceObject/infotainment/info_operation.c **** 
 756:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterReceiveAck(XMC_USIC1_CH1);
 4878              	 .loc 5 756 0
 4879 00d8 134B     	 ldr r3,.L237
 4880 00da 181C     	 mov r0,r3
 4881 00dc FFF7FEFF 	 bl XMC_I2C_CH_MasterReceiveAck
 757:../DeviceObject/infotainment/info_operation.c **** 
 758:../DeviceObject/infotainment/info_operation.c ****     while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & (XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 4882              	 .loc 5 758 0
 4883 00e0 C046     	 mov r8,r8
 4884              	.L235:
 4885              	 .loc 5 758 0 is_stmt 0 discriminator 1
 4886 00e2 114B     	 ldr r3,.L237
 4887 00e4 181C     	 mov r0,r3
 4888 00e6 FFF7FEFF 	 bl XMC_I2C_CH_GetStatusFlag
 4889 00ea 021C     	 mov r2,r0
 4890 00ec C023     	 mov r3,#192
 4891 00ee 1B02     	 lsl r3,r3,#8
 4892 00f0 1340     	 and r3,r2
 4893 00f2 F6D0     	 beq .L235
 759:../DeviceObject/infotainment/info_operation.c **** 	                                                 XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICA
 760:../DeviceObject/infotainment/info_operation.c ****     {
 761:../DeviceObject/infotainment/info_operation.c ****     	/* wait for ACK */
 762:../DeviceObject/infotainment/info_operation.c ****     }
 763:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 4894              	 .loc 5 763 0 is_stmt 1
 4895 00f4 0C4A     	 ldr r2,.L237
 4896 00f6 C023     	 mov r3,#192
 4897 00f8 1B02     	 lsl r3,r3,#8
 4898 00fa 101C     	 mov r0,r2
 4899 00fc 191C     	 mov r1,r3
 4900 00fe FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 764:../DeviceObject/infotainment/info_operation.c ****                                            XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
 765:../DeviceObject/infotainment/info_operation.c **** 
 766:../DeviceObject/infotainment/info_operation.c ****     /*    						Read Month Information  					*/
 767:../DeviceObject/infotainment/info_operation.c ****     data    = (uint8_t)(XMC_I2C_CH_GetReceivedData(XMC_USIC1_CH1));
 4901              	 .loc 5 767 0
 4902 0102 0F23     	 mov r3,#15
 4903 0104 FC18     	 add r4,r7,r3
 4904 0106 084B     	 ldr r3,.L237
 4905 0108 181C     	 mov r0,r3
 4906 010a FFF7FEFF 	 bl XMC_I2C_CH_GetReceivedData
 4907 010e 031C     	 mov r3,r0
 4908 0110 2370     	 strb r3,[r4]
 768:../DeviceObject/infotainment/info_operation.c **** 
 769:../DeviceObject/infotainment/info_operation.c ****     XMC_I2C_CH_MasterStop(XMC_USIC1_CH1);
 4909              	 .loc 5 769 0
 4910 0112 054B     	 ldr r3,.L237
 4911 0114 181C     	 mov r0,r3
 4912 0116 FFF7FEFF 	 bl XMC_I2C_CH_MasterStop
 770:../DeviceObject/infotainment/info_operation.c **** 
 771:../DeviceObject/infotainment/info_operation.c **** 	return data;
 4913              	 .loc 5 771 0
 4914 011a 0F23     	 mov r3,#15
 4915 011c FB18     	 add r3,r7,r3
 4916 011e 1B78     	 ldrb r3,[r3]
 772:../DeviceObject/infotainment/info_operation.c **** }
 4917              	 .loc 5 772 0
 4918 0120 181C     	 mov r0,r3
 4919 0122 BD46     	 mov sp,r7
 4920 0124 05B0     	 add sp,sp,#20
 4921              	 
 4922 0126 90BD     	 pop {r4,r7,pc}
 4923              	.L238:
 4924              	 .align 2
 4925              	.L237:
 4926 0128 00420048 	 .word 1207976448
 4927              	 .cfi_endproc
 4928              	.LFE240:
 4930              	 .section .bss.ones.8805,"aw",%nobits
 4933              	ones.8805:
 4934 0000 00       	 .space 1
 4935              	 .section .bss.tens.8804,"aw",%nobits
 4938              	tens.8804:
 4939 0000 00       	 .space 1
 4940              	 .section .bss.ones.8833,"aw",%nobits
 4943              	ones.8833:
 4944 0000 00       	 .space 1
 4945              	 .section .bss.tens.8832,"aw",%nobits
 4948              	tens.8832:
 4949 0000 00       	 .space 1
 4950              	 .text
 4951              	.Letext0:
 4952              	 .file 6 "d:\\software\\dave_4-4-2_64bit_2018-02-23\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 4953              	 .file 7 "d:\\software\\dave_4-4-2_64bit_2018-02-23\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 4954              	 .file 8 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Infineon/XMC1400_series/Include/XMC1400.h"
 4955              	 .file 9 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc/xmc1_gpio.h"
 4956              	 .file 10 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc/xmc_eru.h"
 4957              	 .file 11 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc/xmc1_scu.h"
 4958              	 .file 12 "../DeviceObject/infotainment/info_operation.h"
 4959              	 .file 13 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Infineon/XMC1400_series/Include/system_XMC1400.h"
 4960              	 .file 14 "../DeviceObject/infotainment/info_operation_conf.h"
DEFINED SYMBOLS
                            *ABS*:00000000 info_operation.c
    {standard input}:18     .text.__NVIC_EnableIRQ:00000000 $t
    {standard input}:22     .text.__NVIC_EnableIRQ:00000000 __NVIC_EnableIRQ
    {standard input}:66     .text.__NVIC_EnableIRQ:00000030 $d
    {standard input}:71     .text.__NVIC_SetPriority:00000000 $t
    {standard input}:75     .text.__NVIC_SetPriority:00000000 __NVIC_SetPriority
    {standard input}:204    .text.__NVIC_SetPriority:000000cc $d
    {standard input}:210    .text.XMC_USIC_CH_SetInputSource:00000000 $t
    {standard input}:214    .text.XMC_USIC_CH_SetInputSource:00000000 XMC_USIC_CH_SetInputSource
    {standard input}:271    .text.XMC_USIC_CH_SetMode:00000000 $t
    {standard input}:275    .text.XMC_USIC_CH_SetMode:00000000 XMC_USIC_CH_SetMode
    {standard input}:314    .text.XMC_GPIO_SetOutputLevel:00000000 $t
    {standard input}:318    .text.XMC_GPIO_SetOutputLevel:00000000 XMC_GPIO_SetOutputLevel
    {standard input}:357    .text.XMC_GPIO_SetOutputHigh:00000000 $t
    {standard input}:361    .text.XMC_GPIO_SetOutputHigh:00000000 XMC_GPIO_SetOutputHigh
    {standard input}:396    .text.XMC_GPIO_GetInput:00000000 $t
    {standard input}:400    .text.XMC_GPIO_GetInput:00000000 XMC_GPIO_GetInput
    {standard input}:438    .text.XMC_I2C_CH_Start:00000000 $t
    {standard input}:442    .text.XMC_I2C_CH_Start:00000000 XMC_I2C_CH_Start
    {standard input}:473    .text.XMC_I2C_CH_SetInputSource:00000000 $t
    {standard input}:477    .text.XMC_I2C_CH_SetInputSource:00000000 XMC_I2C_CH_SetInputSource
    {standard input}:539    .text.XMC_I2C_CH_GetStatusFlag:00000000 $t
    {standard input}:543    .text.XMC_I2C_CH_GetStatusFlag:00000000 XMC_I2C_CH_GetStatusFlag
    {standard input}:572    .text.XMC_I2C_CH_ClearStatusFlag:00000000 $t
    {standard input}:576    .text.XMC_I2C_CH_ClearStatusFlag:00000000 XMC_I2C_CH_ClearStatusFlag
                            *COM*:00000008 button_config
                            *COM*:00000008 led_config
                            *COM*:00000008 dipswitch_config
                            *COM*:00000008 gpio_config
                            *COM*:00000008 iic_config
                            *COM*:00000008 eru1_etl2_config
                            *COM*:00000004 eru1_ogu3_config
                            *COM*:00000008 eru0_etl2_config
                            *COM*:00000004 eru0_ogu2_config
                            *COM*:00000008 rtc_sda_config
                            *COM*:00000008 rtc_scl_config
                            *COM*:00000008 eru_io_config
                            *COM*:00000008 eru_mfp_config
    {standard input}:622    .text.INFO_StartButtonInit:00000000 $t
    {standard input}:627    .text.INFO_StartButtonInit:00000000 INFO_StartButtonInit
    {standard input}:654    .text.INFO_StartButtonInit:00000018 $d
    {standard input}:660    .text.INFO_ResetButtonInit:00000000 $t
    {standard input}:665    .text.INFO_ResetButtonInit:00000000 INFO_ResetButtonInit
    {standard input}:717    .text.INFO_ResetButtonInit:0000004c $d
    {standard input}:727    .text.INFO_LEDInit:00000000 $t
    {standard input}:732    .text.INFO_LEDInit:00000000 INFO_LEDInit
    {standard input}:790    .text.INFO_LEDInit:00000058 $d
    {standard input}:796    .text.INFO_GPIOInit:00000000 $t
    {standard input}:801    .text.INFO_GPIOInit:00000000 INFO_GPIOInit
    {standard input}:856    .text.INFO_GPIOInit:00000050 $d
    {standard input}:862    .text.INFO_ModeSelectorInit:00000000 $t
    {standard input}:867    .text.INFO_ModeSelectorInit:00000000 INFO_ModeSelectorInit
    {standard input}:914    .text.INFO_ModeSelectorInit:00000040 $d
    {standard input}:920    .text.INFO_RTCEEPROMInit:00000000 $t
    {standard input}:925    .text.INFO_RTCEEPROMInit:00000000 INFO_RTCEEPROMInit
    {standard input}:1013   .text.INFO_RTCEEPROMInit:00000094 $d
    {standard input}:1028   .text.INFO_LEDSwitch:00000000 $t
    {standard input}:1033   .text.INFO_LEDSwitch:00000000 INFO_LEDSwitch
    {standard input}:1150   .text.INFO_LEDSwitch:000000a4 $d
    {standard input}:1155   .text.INFO_ModeSelectorGetStatus:00000000 $t
    {standard input}:1160   .text.INFO_ModeSelectorGetStatus:00000000 INFO_ModeSelectorGetStatus
    {standard input}:1238   .text.INFO_ModeSelectorGetStatus:00000078 $d
    {standard input}:1243   .text.INFO_GPIOSet:00000000 $t
    {standard input}:1248   .text.INFO_GPIOSet:00000000 INFO_GPIOSet
    {standard input}:1397   .text.INFO_GPIOSet:000000d4 $d
    {standard input}:1402   .text.INFO_RTCOscillatorEnable:00000000 $t
    {standard input}:1407   .text.INFO_RTCOscillatorEnable:00000000 INFO_RTCOscillatorEnable
    {standard input}:1716   .text.INFO_RTCOscillatorEnable:000001e0 $d
    {standard input}:1721   .text.INFO_RTCOscillatorDisable:00000000 $t
    {standard input}:1726   .text.INFO_RTCOscillatorDisable:00000000 INFO_RTCOscillatorDisable
    {standard input}:2030   .text.INFO_RTCOscillatorDisable:000001d8 $d
    {standard input}:2037   .text.INFO_RTCTimeInit:00000000 $t
    {standard input}:2042   .text.INFO_RTCTimeInit:00000000 INFO_RTCTimeInit
    {standard input}:2398   .text.INFO_RTCTimeInit:00000258 $d
    {standard input}:4933   .bss.ones.8805:00000000 ones.8805
    {standard input}:4938   .bss.tens.8804:00000000 tens.8804
    {standard input}:2405   .text.INFO_RTCDateInit:00000000 $t
    {standard input}:2410   .text.INFO_RTCDateInit:00000000 INFO_RTCDateInit
    {standard input}:2762   .text.INFO_RTCDateInit:00000250 $d
    {standard input}:4943   .bss.ones.8833:00000000 ones.8833
    {standard input}:4948   .bss.tens.8832:00000000 tens.8832
    {standard input}:2769   .text.INFO_RTCGetDate:00000000 $t
    {standard input}:2774   .text.INFO_RTCGetDate:00000000 INFO_RTCGetDate
    {standard input}:3184   .text.INFO_RTCGetDate:000002a8 $d
    {standard input}:3189   .text.INFO_RTCGetTime:00000000 $t
    {standard input}:3194   .text.INFO_RTCGetTime:00000000 INFO_RTCGetTime
    {standard input}:3624   .text.INFO_RTCGetTime:000002cc $d
    {standard input}:3632   .text.INFO_RTCVBatEnable:00000000 $t
    {standard input}:3637   .text.INFO_RTCVBatEnable:00000000 INFO_RTCVBatEnable
    {standard input}:3948   .text.INFO_RTCVBatEnable:000001e4 $d
    {standard input}:3953   .text.INFO_RTCMFPEnable:00000000 $t
    {standard input}:3958   .text.INFO_RTCMFPEnable:00000000 INFO_RTCMFPEnable
    {standard input}:4262   .text.INFO_RTCMFPEnable:000001d8 $d
    {standard input}:4267   .text.INFO_RTCMFPDisable:00000000 $t
    {standard input}:4272   .text.INFO_RTCMFPDisable:00000000 INFO_RTCMFPDisable
    {standard input}:4576   .text.INFO_RTCMFPDisable:000001d8 $d
    {standard input}:4581   .text.INFO_EEPROM_Write:00000000 $t
    {standard input}:4586   .text.INFO_EEPROM_Write:00000000 INFO_EEPROM_Write
    {standard input}:4738   .text.INFO_EEPROM_Write:000000fc $d
    {standard input}:4743   .text.INFO_EEPROM_Read:00000000 $t
    {standard input}:4748   .text.INFO_EEPROM_Read:00000000 INFO_EEPROM_Read
    {standard input}:4926   .text.INFO_EEPROM_Read:00000128 $d
    {standard input}:4934   .bss.ones.8805:00000000 $d
    {standard input}:4939   .bss.tens.8804:00000000 $d
    {standard input}:4944   .bss.ones.8833:00000000 $d
    {standard input}:4949   .bss.tens.8832:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_GPIO_Init
XMC_ERU_ETL_Init
XMC_ERU_OGU_Init
XMC_SCU_SetInterruptControl
XMC_I2C_CH_Init
XMC_I2C_CH_MasterStart
XMC_I2C_CH_MasterTransmit
XMC_I2C_CH_MasterRepeatedStart
XMC_I2C_CH_MasterReceiveNack
XMC_I2C_CH_GetReceivedData
XMC_I2C_CH_MasterStop
__aeabi_uidivmod
__aeabi_uidiv
XMC_I2C_CH_MasterReceiveAck
