   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "pcs_operation.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.__NVIC_EnableIRQ,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	__NVIC_EnableIRQ:
  23              	.LFB23:
  24              	 .file 1 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include/core_cm0.h"
   1:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**************************************************************************//**
   2:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * @file     core_cm0.h
   3:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * @version  V5.0.2
   5:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * @date     19. April 2017
   6:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
   7:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*
   8:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  *
  10:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  *
  12:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * not use this file except in compliance with the License.
  14:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * You may obtain a copy of the License at
  15:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  *
  16:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  *
  18:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * See the License for the specific language governing permissions and
  22:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  * limitations under the License.
  23:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
  24:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  25:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #if   defined ( __ICCARM__ )
  26:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #elif defined (__clang__)
  28:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #endif
  30:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  31:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  34:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #include <stdint.h>
  35:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  36:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
  37:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  extern "C" {
  38:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #endif
  39:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  40:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
  41:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  44:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  47:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****      Unions are used for effective representation of core registers.
  49:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  50:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
  53:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  54:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  55:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*******************************************************************************
  56:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  *                 CMSIS definitions
  57:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
  58:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
  59:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup Cortex_M0
  60:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   @{
  61:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
  62:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  63:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #include "cmsis_version.h"
  64:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  
  65:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*  CMSIS CM0 definitions */
  66:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  71:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  73:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     This core does not support an FPU at all
  75:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** */
  76:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define __FPU_USED       0U
  77:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  78:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #if defined ( __CC_ARM )
  79:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  82:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  83:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  87:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  88:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __GNUC__ )
  89:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  92:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  93:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __ICCARM__ )
  94:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __ARMVFP__
  95:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  97:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
  98:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 102:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 103:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __TASKING__ )
 104:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __FPU_VFP__
 105:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 107:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 108:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __CSMC__ )
 109:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 112:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 113:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #endif
 114:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 115:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 117:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 118:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
 119:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** }
 120:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #endif
 121:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 122:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 124:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 126:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 129:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
 130:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  extern "C" {
 131:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #endif
 132:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 133:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* check device defines and use defaults */
 134:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef __CM0_REV
 136:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #define __CM0_REV               0x0000U
 137:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 139:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 140:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 144:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 145:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 149:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #endif
 150:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 151:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 153:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 155:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     \li to specify the access to peripheral variables.
 157:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** */
 159:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
 160:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #else
 162:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #endif
 164:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 167:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* following defines should be used for structure members */
 168:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 172:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group Cortex_M0 */
 173:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 174:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 175:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 176:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*******************************************************************************
 177:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  *                 Register Abstraction
 178:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   Core Register contain:
 179:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   - Core Register
 180:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   - Core NVIC Register
 181:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   - Core SCB Register
 182:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   - Core SysTick Register
 183:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
 184:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 185:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** */
 188:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 189:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 190:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 191:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Core Register type definitions.
 193:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   @{
 194:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 195:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 196:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 197:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 199:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 200:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
 201:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   struct
 202:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 203:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** } APSR_Type;
 211:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 212:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* APSR Register Definitions */
 213:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 216:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 219:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 222:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 225:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 226:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 227:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 229:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 230:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
 231:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   struct
 232:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 233:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** } IPSR_Type;
 238:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 239:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* IPSR Register Definitions */
 240:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 243:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 244:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 245:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 247:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 248:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
 249:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   struct
 250:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 251:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** } xPSR_Type;
 262:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 263:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* xPSR Register Definitions */
 264:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 267:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 270:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 273:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 276:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 279:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 282:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 283:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 284:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 286:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 287:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
 288:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   struct
 289:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 290:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** } CONTROL_Type;
 296:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 297:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* CONTROL Register Definitions */
 298:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 301:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 303:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 304:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 305:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 306:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   @{
 309:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 310:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 311:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 312:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 314:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** typedef struct
 315:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
 316:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED0[31U];
 318:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RSERVED1[31U];
 320:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED2[31U];
 322:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED3[31U];
 324:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED4[64U];
 325:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** }  NVIC_Type;
 327:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 328:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 330:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 331:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 332:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_core_register
 333:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   @{
 336:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 337:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 338:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 339:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 341:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** typedef struct
 342:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
 343:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED0;
 346:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED1;
 350:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** } SCB_Type;
 353:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 354:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* SCB CPUID Register Definitions */
 355:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 358:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 361:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 364:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 367:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 370:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 374:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 377:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 380:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 383:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 386:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 389:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 392:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 395:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 398:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 402:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 405:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 408:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 411:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 414:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* SCB System Control Register Definitions */
 415:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 418:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 421:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 424:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 428:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 431:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 435:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 437:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 438:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 439:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_core_register
 440:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   @{
 443:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 444:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 445:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 446:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 448:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** typedef struct
 449:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
 450:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** } SysTick_Type;
 455:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 456:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 460:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 463:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 466:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 469:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Reload Register Definitions */
 470:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 473:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Current Register Definitions */
 474:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 477:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 481:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 484:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 487:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 489:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 490:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 491:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_core_register
 492:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   @{
 496:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 497:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 499:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 500:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 501:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 502:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   @{
 505:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 506:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 507:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 508:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \return           Masked and shifted value.
 512:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** */
 513:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 515:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 516:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \return           Masked and shifted bit field value.
 520:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** */
 521:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 523:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 525:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 526:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 527:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 528:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   @{
 531:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 532:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 533:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* Memory mapping of Core Hardware */
 534:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 539:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 543:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 544:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*@} */
 545:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 546:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 547:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 548:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*******************************************************************************
 549:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  *                Hardware Abstraction Layer
 550:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   Core Function Interface contains:
 551:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   - Core NVIC Functions
 552:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   - Core SysTick Functions
 553:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   - Core Register Access Functions
 554:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
 555:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 556:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** */
 558:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 559:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 560:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 561:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 563:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   @{
 567:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 568:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 569:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 573:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #else
 575:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*#define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping   not available for Cortex-M0 */
 576:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*#define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping   not available for Cortex-M0 */
 577:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 589:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 593:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #else
 595:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 599:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 601:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 602:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 603:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 604:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 605:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 606:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 607:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 608:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 609:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 610:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Enable Interrupt
 611:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 612:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 613:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 614:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 615:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 616:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
  25              	 .loc 1 616 0
  26              	 .cfi_startproc
  27 0000 80B5     	 push {r7,lr}
  28              	.LCFI0:
  29              	 .cfi_def_cfa_offset 8
  30              	 .cfi_offset 7,-8
  31              	 .cfi_offset 14,-4
  32 0002 82B0     	 sub sp,sp,#8
  33              	.LCFI1:
  34              	 .cfi_def_cfa_offset 16
  35 0004 00AF     	 add r7,sp,#0
  36              	.LCFI2:
  37              	 .cfi_def_cfa_register 7
  38 0006 021C     	 mov r2,r0
  39 0008 FB1D     	 add r3,r7,#7
  40 000a 1A70     	 strb r2,[r3]
 617:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
  41              	 .loc 1 617 0
  42 000c FB1D     	 add r3,r7,#7
  43 000e 1B78     	 ldrb r3,[r3]
  44 0010 7F2B     	 cmp r3,#127
  45 0012 09D8     	 bhi .L1
 618:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 619:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  46              	 .loc 1 619 0
  47 0014 064B     	 ldr r3,.L3
  48 0016 FA1D     	 add r2,r7,#7
  49 0018 1278     	 ldrb r2,[r2]
  50 001a 111C     	 mov r1,r2
  51 001c 1F22     	 mov r2,#31
  52 001e 0A40     	 and r2,r1
  53 0020 0121     	 mov r1,#1
  54 0022 9140     	 lsl r1,r1,r2
  55 0024 0A1C     	 mov r2,r1
  56 0026 1A60     	 str r2,[r3]
  57              	.L1:
 620:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   }
 621:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** }
  58              	 .loc 1 621 0
  59 0028 BD46     	 mov sp,r7
  60 002a 02B0     	 add sp,sp,#8
  61              	 
  62 002c 80BD     	 pop {r7,pc}
  63              	.L4:
  64 002e C046     	 .align 2
  65              	.L3:
  66 0030 00E100E0 	 .word -536813312
  67              	 .cfi_endproc
  68              	.LFE23:
  70              	 .section .text.__NVIC_SetPriority,"ax",%progbits
  71              	 .align 2
  72              	 .code 16
  73              	 .thumb_func
  75              	__NVIC_SetPriority:
  76              	.LFB29:
 622:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 623:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 624:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 625:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Get Interrupt Enable status
 626:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 627:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 628:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \return             0  Interrupt is not enabled.
 629:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \return             1  Interrupt is enabled.
 630:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 631:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 632:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 633:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
 634:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 635:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 636:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1
 637:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   }
 638:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   else
 639:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 640:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     return(0U);
 641:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   }
 642:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** }
 643:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 644:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 645:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 646:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Disable Interrupt
 647:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 648:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 649:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 650:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 651:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 652:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
 653:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 654:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 655:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 656:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     __DSB();
 657:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     __ISB();
 658:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   }
 659:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** }
 660:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 661:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 662:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 663:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Get Pending Interrupt
 664:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 665:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 666:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \return             0  Interrupt status is not pending.
 667:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \return             1  Interrupt status is pending.
 668:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 669:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 670:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 671:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
 672:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 673:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 674:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1
 675:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   }
 676:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   else
 677:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 678:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     return(0U);
 679:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   }
 680:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** }
 681:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 682:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 683:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 684:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Set Pending Interrupt
 685:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 686:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 687:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 688:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 689:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 690:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
 691:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 692:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 693:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 694:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   }
 695:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** }
 696:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 697:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 698:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 699:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Clear Pending Interrupt
 700:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 701:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 702:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 703:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 704:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 705:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
 706:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 707:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 708:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 709:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   }
 710:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** }
 711:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 712:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** 
 713:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** /**
 714:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Set Interrupt Priority
 715:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 716:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 717:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****            or negative to specify a processor exception.
 718:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 719:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]  priority  Priority to set.
 720:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 721:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****  */
 722:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 723:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** {
  77              	 .loc 1 723 0
  78              	 .cfi_startproc
  79 0000 B0B5     	 push {r4,r5,r7,lr}
  80              	.LCFI3:
  81              	 .cfi_def_cfa_offset 16
  82              	 .cfi_offset 4,-16
  83              	 .cfi_offset 5,-12
  84              	 .cfi_offset 7,-8
  85              	 .cfi_offset 14,-4
  86 0002 82B0     	 sub sp,sp,#8
  87              	.LCFI4:
  88              	 .cfi_def_cfa_offset 24
  89 0004 00AF     	 add r7,sp,#0
  90              	.LCFI5:
  91              	 .cfi_def_cfa_register 7
  92 0006 021C     	 mov r2,r0
  93 0008 3960     	 str r1,[r7]
  94 000a FB1D     	 add r3,r7,#7
  95 000c 1A70     	 strb r2,[r3]
 724:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
  96              	 .loc 1 724 0
  97 000e FB1D     	 add r3,r7,#7
  98 0010 1B78     	 ldrb r3,[r3]
  99 0012 7F2B     	 cmp r3,#127
 100 0014 27D8     	 bhi .L6
 725:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 726:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 101              	 .loc 1 726 0
 102 0016 2D4C     	 ldr r4,.L8
 103 0018 FB1D     	 add r3,r7,#7
 104 001a 1B78     	 ldrb r3,[r3]
 105 001c 5BB2     	 sxtb r3,r3
 106 001e 9B08     	 lsr r3,r3,#2
 107 0020 2A49     	 ldr r1,.L8
 108 0022 FA1D     	 add r2,r7,#7
 109 0024 1278     	 ldrb r2,[r2]
 110 0026 52B2     	 sxtb r2,r2
 111 0028 9208     	 lsr r2,r2,#2
 112 002a C032     	 add r2,r2,#192
 113 002c 9200     	 lsl r2,r2,#2
 114 002e 5258     	 ldr r2,[r2,r1]
 115 0030 F91D     	 add r1,r7,#7
 116 0032 0978     	 ldrb r1,[r1]
 117 0034 081C     	 mov r0,r1
 118 0036 0321     	 mov r1,#3
 119 0038 0140     	 and r1,r0
 120 003a C900     	 lsl r1,r1,#3
 121 003c 081C     	 mov r0,r1
 122 003e FF21     	 mov r1,#255
 123 0040 8140     	 lsl r1,r1,r0
 124 0042 C943     	 mvn r1,r1
 125 0044 1140     	 and r1,r2
 727:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 126              	 .loc 1 727 0
 127 0046 3A68     	 ldr r2,[r7]
 128 0048 9201     	 lsl r2,r2,#6
 129 004a FF20     	 mov r0,#255
 130 004c 0240     	 and r2,r0
 131 004e F81D     	 add r0,r7,#7
 132 0050 0078     	 ldrb r0,[r0]
 133 0052 051C     	 mov r5,r0
 134 0054 0320     	 mov r0,#3
 135 0056 2840     	 and r0,r5
 136 0058 C000     	 lsl r0,r0,#3
 137 005a 8240     	 lsl r2,r2,r0
 726:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 138              	 .loc 1 726 0
 139 005c 0A43     	 orr r2,r1
 140 005e C033     	 add r3,r3,#192
 141 0060 9B00     	 lsl r3,r3,#2
 142 0062 1A51     	 str r2,[r3,r4]
 143 0064 2EE0     	 b .L5
 144              	.L6:
 728:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   }
 729:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   else
 730:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   {
 731:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 145              	 .loc 1 731 0
 146 0066 1A4C     	 ldr r4,.L8+4
 147 0068 FB1D     	 add r3,r7,#7
 148 006a 1B78     	 ldrb r3,[r3]
 149 006c 1A1C     	 mov r2,r3
 150 006e 0F23     	 mov r3,#15
 151 0070 1340     	 and r3,r2
 152 0072 083B     	 sub r3,r3,#8
 153 0074 9908     	 lsr r1,r3,#2
 154 0076 164A     	 ldr r2,.L8+4
 155 0078 FB1D     	 add r3,r7,#7
 156 007a 1B78     	 ldrb r3,[r3]
 157 007c 181C     	 mov r0,r3
 158 007e 0F23     	 mov r3,#15
 159 0080 0340     	 and r3,r0
 160 0082 083B     	 sub r3,r3,#8
 161 0084 9B08     	 lsr r3,r3,#2
 162 0086 0633     	 add r3,r3,#6
 163 0088 9B00     	 lsl r3,r3,#2
 164 008a D318     	 add r3,r2,r3
 165 008c 5B68     	 ldr r3,[r3,#4]
 166 008e FA1D     	 add r2,r7,#7
 167 0090 1278     	 ldrb r2,[r2]
 168 0092 101C     	 mov r0,r2
 169 0094 0322     	 mov r2,#3
 170 0096 0240     	 and r2,r0
 171 0098 D200     	 lsl r2,r2,#3
 172 009a 101C     	 mov r0,r2
 173 009c FF22     	 mov r2,#255
 174 009e 8240     	 lsl r2,r2,r0
 175 00a0 D243     	 mvn r2,r2
 176 00a2 1A40     	 and r2,r3
 732:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 177              	 .loc 1 732 0
 178 00a4 3B68     	 ldr r3,[r7]
 179 00a6 9B01     	 lsl r3,r3,#6
 180 00a8 FF20     	 mov r0,#255
 181 00aa 0340     	 and r3,r0
 182 00ac F81D     	 add r0,r7,#7
 183 00ae 0078     	 ldrb r0,[r0]
 184 00b0 051C     	 mov r5,r0
 185 00b2 0320     	 mov r0,#3
 186 00b4 2840     	 and r0,r5
 187 00b6 C000     	 lsl r0,r0,#3
 188 00b8 8340     	 lsl r3,r3,r0
 731:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 189              	 .loc 1 731 0
 190 00ba 1A43     	 orr r2,r3
 191 00bc 8B1D     	 add r3,r1,#6
 192 00be 9B00     	 lsl r3,r3,#2
 193 00c0 E318     	 add r3,r4,r3
 194 00c2 5A60     	 str r2,[r3,#4]
 195              	.L5:
 733:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h ****   }
 734:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Include\core_cm0.h **** }
 196              	 .loc 1 734 0
 197 00c4 BD46     	 mov sp,r7
 198 00c6 02B0     	 add sp,sp,#8
 199              	 
 200 00c8 B0BD     	 pop {r4,r5,r7,pc}
 201              	.L9:
 202 00ca C046     	 .align 2
 203              	.L8:
 204 00cc 00E100E0 	 .word -536813312
 205 00d0 00ED00E0 	 .word -536810240
 206              	 .cfi_endproc
 207              	.LFE29:
 209              	 .section .text.XMC_CAN_NODE_SetReceiveInput,"ax",%progbits
 210              	 .align 2
 211              	 .code 16
 212              	 .thumb_func
 214              	XMC_CAN_NODE_SetReceiveInput:
 215              	.LFB65:
 216              	 .file 2 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc/xmc_can.h"
   1:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
   2:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @file xmc_can.h
   3:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @date 2017-11-09
   4:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
   5:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @cond
   6:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
   7:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
   9:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * All rights reserved.                        
  11:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *                                             
  12:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * following conditions are met:   
  14:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  15:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * disclaimer.                        
  17:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 
  18:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 
  21:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  24:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  32:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
  35:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
  36:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Change History
  37:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * --------------
  38:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
  39:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-02-20:
  40:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - Initial <br>
  41:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - Documentation improved <br>
  42:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
  43:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-05-20:
  44:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - New elements have added in XMC_CAN_MO_t data structure <br>
  45:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  46:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_STATUS_t enum structure has updated. <br>
  47:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
  48:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-06-20:
  49:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - New APIs added: XMC_CAN_NODE_ClearStatus(),XMC_CAN_MO_ReceiveData(), XMC_CAN_GATEWAY_InitD
  50:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  51:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *      
  52:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-07-09:
  53:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - New API added: XMC_CAN_NODE_Enable. <br>
  54:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
  55:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-01:
  56:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed fCANB clock support <br>
  57:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
  58:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-15:
  59:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added "xmc_can_map.h" include <br>
  60:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
  61:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-07:
  62:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_IsPanelControlReady()
  63:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 
  64:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 2017-11-09:
  65:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_InitEx() and XMC_CAN_NODE_NominalBitTimeConfigureEx()
  66:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - Make XMC_CAN_GetBaudrateClockSource(), XMC_CAN_SetBaudrateClockSource() and XMC_CAN_GetBau
  67:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
  68:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Details of use for node configuration related APIs</b><br>
  69:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Please use the XMC_CAN_NODE_SetInitBit() and XMC_CAN_NODE_EnableConfigurationChange() before cal
  70:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * related APIs.
  71:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange() and  XMC_CAN_NODE_ResetInitBit() can be called for dis
  72:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * change and enable the node for communication afterwards.
  73:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Do not use this when configuring the nominal bit time with XMC_CAN_NODE_NominalBitTimeConfigure(
  74:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Enable/Disable node configuration change is taken in account.
  75:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
  76:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Example Usage:</b>
  77:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @code
  78:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * //disabling the Node
  79:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetInitBit(CAN_NODE0)
  80:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * //allowing the configuration change
  81:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0)
  82:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * //Node configuration
  83:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_FrameCounterConfigure(CAN_NODE0,&can_node_frame_counter);
  84:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack(CAN_NODE0)
  85:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * //disable configuration
  86:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0)
  87:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * //Enabling node for communication
  88:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_ResetInitBit(CAN_NODE0)
  89:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @endcode
  90:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
  91:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-20:
  92:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *     - Fixed bug in XMC_CAN_MO_Config() <br>  
  93:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @endcond
  94:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
  95:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
  96:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
  97:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #ifndef XMC_CAN_H
  98:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_H
  99:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 100:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 101:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * HEADER FILES
 102:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 103:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_common.h"
 104:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 105:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #if defined(CAN)
 106:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 107:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_scu.h"
 108:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_can_map.h"
 109:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #include <string.h>
 110:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 111:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 112:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup XMClib XMC Peripheral Library
 113:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 114:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 115:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 116:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 117:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup CAN
 118:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @brief Controller Area Network Controller (CAN) driver for the XMC microcontroller family.
 119:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 120:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * CAN driver provides transfer of CAN frames in accordance with CAN specificetion V2.0 B (active).
 121:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * can receive and transmit standard frames with 11-bit identifiers as well as extended frames with
 122:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * All CAN nodes share a common set of message objects. Each message object can be individually all
 123:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * CAN nodes. 
 124:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Besides serving as a storage container for incoming and outgoing frames, message objects can be 
 125:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * gateways between 
 126:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * the CAN nodes or to setup a FIFO buffer. The CAN module provides Analyzer mode,Loop-back mode an
 127:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * node analysis.
 128:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 
 129:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * The driver is divided into five sections:
 130:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN Global features:
 131:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure module frequency using function XMC_CAN_Init().
 132:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Module interrupt using configuration structure XMC_CAN_NODE_INTERRUPT_TRI
 133:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_EventTrigger().
 134:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 
 135:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_NODE features:
 136:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to set baud rate by configuration structure XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t and
 137:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *    function XMC_CAN_NODE_NominalBitTimeConfigure().
 138:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure loop-back mode using fuction XMC_CAN_NODE_EnableLoopBack().
 139:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure CAN Node analyzer using function XMC_CAN_NODE_SetAnalyzerMode().
 140:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows CAN node events enable/ disable by enum structure XMC_CAN_NODE_EVENT_t and functions X
 141:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *    and XMC_CAN_NODE_DisableEvent().
 142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides bit timming analysis, configuration structure XMC_CAN_NODE_FRAME_COUNTER_t and funct
 143:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_NODE_FrameCounterConfigure(). 
 144:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 145:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_MO features:
 146:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object initialization by configuration structure XMC_CAN_MO_t and function XMC
 147:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows transfer of message objects using functions XMC_CAN_MO_Transmit() and XMC_CAN_MO_Recei
 148:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Single Data Transfer and Single Transmit Trial using functions 
 149:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_MO_EnableSingleTransmitTrial() and XMC_CAN_MO_EnableSingleTransmitTrial().
 150:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure MO events using function XMC_CAN_MO_EnableEvent(). 
 151:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 152:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_FIFO features:
 153:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object FIFO structure by configuration structure XMC_CAN_FIFO_CONFIG_t and fun
 154:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_TXFIFO_ConfigMOBaseObject() , XMC_CAN_RXFIFO_ConfigMOBaseObject() and XMC_CAN_TXFIFO_Tra
 155:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 156:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_GATEWAY features:
 157:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides Gateway mode, configuration structure XMC_CAN_GATEWAY_CONFIG_t and function XMC_CAN_
 158:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 159:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 160:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 161:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 162:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 163:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * MACROS
 164:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 165:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Pos (18U)   /**< Standard Identifier bitposition */
 166:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 167:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Msk ((0x000007FFUL) << XMC_CAN_MO_MOAR_STDID_Pos) /**< Standard Ident
 168:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 169:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_NODE_NIPR_Msk         (0x7UL) /**< Node event mask */
 170:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 171:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_MO_MOIPR_Msk          (0x7U)  /**< Message Object event mask */
 172:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 173:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 174:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * ENUMS
 175:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 176:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 177:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Defines the status of CAN, to verify the CAN related API calls. Use type \a XMC_CAN_STATUS_t fo
 178:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** */
 179:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_STATUS
 180:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 181:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_SUCCESS,           /**< Driver accepted application request*/
 182:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_ERROR,             /**< Returned when unknown error occurred */
 183:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_BUSY,              /**< Driver is busy and can not handle request*/
 184:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_NOT_ACCEPTABLE, /**< Message object type not allowed*/
 185:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_DISABLED       /**< Returned if Message object is disabled */
 186:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_STATUS_t;
 187:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 188:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 189:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN module Panel Commands . Use type \a XMC_CAN_PANCMD_t for this enum.
 190:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** */
 191:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_PANCMD
 192:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 193:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_INIT_LIST = 1U,              /**< Command to initialize a list */
 194:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_ALLOCATE = 2U,        /**< Command to activate static allocation */
 195:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_ALLOCATE = 3U,       /**< Command to activate dynamic allocation */
 196:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 197:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEFORE = 4U,   /**< Remove a message object from the list and insert
 198:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEFORE = 5U,  /**< Command to activate dynamic allocation */
 199:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEHIND = 6U,   /**< Command to activate dynamic allocation */
 200:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEHIND = 7U   /**< Command to activate dynamic allocation */
 201:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_PANCMD_t;
 202:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 203:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 204:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** * Defines loop Back Mode, to enable/disable an in-system test of the MultiCAN module .
 205:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** * Use type \a XMC_CAN_LOOKBACKMODE_t for this enum.
 206:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** */
 207:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_LOOKBACKMODE
 208:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 209:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_ENABLED,   /**< Each CAN node can be connected to the internal CAN bus  */
 210:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_DISABLED   /**< Each CAN node can be connected to the external CAN bus */
 211:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_LOOKBACKMODE_t;
 212:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 213:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 214:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Message Object direction. Use type \a XMC_CAN_MO_TYPE_t for this enum.
 215:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 216:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_TYPE
 217:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 218:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_RECMSGOBJ,   /**< Receive Message Object selected */
 219:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_TRANSMSGOBJ  /**< Transmit Message Object selected */
 220:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_TYPE_t;
 221:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 222:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 223:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Data frame types. Use type \a XMC_CAN_FRAME_TYPE_t for this enum.
 224:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 225:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_TYPE
 226:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 227:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_STANDARD_11BITS, /**< Standard type identifier*/
 228:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_EXTENDED_29BITS  /**< Extended type identifier*/
 229:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_TYPE_t;
 230:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 231:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 232:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 233:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines arbitration mode for transmit acceptance filtering. Use type \a XMC_CAN_ARBITRATION_MODE
 234:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 235:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_ARBITRATION_MODE
 236:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 237:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_1 = 1U,   /**< Transmit acceptance based in the order(p
 238:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_IDE_DIR_BASED_PRIO_2 = 2U, /**< Transmit acceptance filtering is based o
 239:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_3 = 3U    /**< Transmit acceptance based in the order *
 240:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_ARBITRATION_MODE_t;
 241:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 242:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 243:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the operation mode of the frame counter. Use type \a XMC_CAN_FRAME_COUNT_MODE_t for this
 244:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 245:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_COUNT_MODE
 246:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 247:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE = 0U,       /**< Frame Count Mode */
 248:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_TIME_STAMP = 1U,  /**< The frame counter is incremented with the beginni
 249:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_BIT_TIMING = 2U   /**< Used for baud rate detection and analysis of the 
 250:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_COUNT_MODE_t;
 251:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 252:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 253:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Divider Modes. Use type \a XMC_CAN_DM_t for this enum.
 254:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 255:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_DM
 256:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 257:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_NORMAL = 1U,      /**< Normal divider mode */
 258:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_FRACTIONAL = 2U,  /**< Fractional divider mode */
 259:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_OFF = 3U          /**< Divider Mode in off-state*/
 260:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_DM_t;
 261:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 262:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 263:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object set status. Use type \a XMC_CAN_MO_SET_STATUS_t for th
 264:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 265:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_SET_STATUS
 266:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 267:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_PENDING = CAN_MO_MOCTR_SETRXPND_Msk,     /**< Set receive pending */
 268:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_PENDING = CAN_MO_MOCTR_SETTXPND_Msk,     /**< Set transmit pending */
 269:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_UPDATING = CAN_MO_MOCTR_SETRXUPD_Msk,    /**< Set receive updating */
 270:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_NEW_DATA = CAN_MO_MOCTR_SETNEWDAT_Msk,      /**< Set new data */
 271:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_SETMSGLST_Msk,  /**< Set message lost */
 272:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_SETMSGVAL_Msk, /**< Set message valid */
 273:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_SETRTSEL_Msk, /**< Set transmit/receive selec
 274:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_ENABLE = CAN_MO_MOCTR_SETRXEN_Msk,       /**< Set receive enable */
 275:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_REQUEST = CAN_MO_MOCTR_SETTXRQ_Msk,      /**< Set transmit request */
 276:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_SETTXEN0_Msk,     /**< Set transmit enable 0 */
 277:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_SETTXEN1_Msk,     /**< Set transmit enable 1 */
 278:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_SETDIR_Msk /**< Set message direction */
 279:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_SET_STATUS_t;
 280:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 281:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 282:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object reset status. Use type \a XMC_CAN_MO_RESET_STATUS_t fo
 283:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 284:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_RESET_STATUS
 285:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 286:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_PENDING = CAN_MO_MOCTR_RESRXPND_Msk,     /**< Reset receive pending */
 287:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_PENDING = CAN_MO_MOCTR_RESTXPND_Msk,     /**< Reset transmit pending *
 288:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_UPDATING = CAN_MO_MOCTR_RESRXUPD_Msk,    /**< Reset receive updating *
 289:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_NEW_DATA = CAN_MO_MOCTR_RESNEWDAT_Msk,      /**< Reset new data */
 290:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_RESMSGLST_Msk,  /**< Reset message lost */
 291:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_RESMSGVAL_Msk, /**< Reset message valid */
 292:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_RESRTSEL_Msk, /**< Reset transmit/receive s
 293:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_ENABLE = CAN_MO_MOCTR_RESRXEN_Msk,       /**< Reset receive enable */
 294:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_REQUEST = CAN_MO_MOCTR_RESTXRQ_Msk,      /**< Reset transmit request *
 295:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_RESTXEN0_Msk,     /**< Reset transmit enable 0 
 296:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_RESTXEN1_Msk,     /**< Reset transmit enable 1 
 297:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_RESDIR_Msk /**< Reset message direction 
 298:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_RESET_STATUS_t;
 299:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 300:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 301:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object status. Use type \a XMC_CAN_MO_STATUS_t for this enum.
 302:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 303:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_STATUS
 304:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 305:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_PENDING = CAN_MO_MOSTAT_RXPND_Msk,                   /**< Defines message ha
 306:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_PENDING = CAN_MO_MOSTAT_TXPND_Msk,                   /**< Defines message ha
 307:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_UPDATING = CAN_MO_MOSTAT_RXUPD_Msk,                  /**< Defines Message id
 308:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_NEW_DATA = CAN_MO_MOSTAT_NEWDAT_Msk,                    /**< Defines no update 
 309:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_LOST = CAN_MO_MOSTAT_MSGLST_Msk,                /**< CAN message is los
 310:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_VALID = CAN_MO_MOSTAT_MSGVAL_Msk,               /**< Message valid */
 311:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_TX_SELECTED = CAN_MO_MOSTAT_RTSEL_Msk,               /**< Transmit/Receive s
 312:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_ENABLE = CAN_MO_MOSTAT_RXEN_Msk,                     /**< Receive enable */
 313:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_REQUEST = CAN_MO_MOSTAT_TXRQ_Msk,                    /**< Transmit request *
 314:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE0 = CAN_MO_MOSTAT_TXEN0_Msk,                   /**< Transmit enable 0 
 315:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE1 = CAN_MO_MOSTAT_TXEN1_Msk,                   /**< Transmit enable 1 
 316:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_DIRECTION = CAN_MO_MOSTAT_DIR_Msk,              /**< Message direction 
 317:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_LIST = CAN_MO_MOSTAT_LIST_Msk,                          /**< List allocation */
 318:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_PREVIOUS_MO = CAN_MO_MOSTAT_PPREV_Msk,     /**< Pointer to previous 
 319:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_NEXT_MO = (int32_t)CAN_MO_MOSTAT_PNEXT_Msk   /**< Pointer to next Me
 320:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_STATUS_t;
 321:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 322:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 323:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node status. Use type \a XMC_CAN_NODE_STATUS_t for this enum.
 324:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 325:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_STATUS
 326:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 327:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LAST_ERROR_CODE = CAN_NODE_NSR_LEC_Msk,       /**< Last Error Code */
 328:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_TX_OK = CAN_NODE_NSR_TXOK_Msk,                /**< Message transmitted succes
 329:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_RX_OK = CAN_NODE_NSR_RXOK_Msk,                /**< Message received successfu
 330:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ALERT_WARNING = CAN_NODE_NSR_ALERT_Msk,       /**< Alert warning */
 331:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ERROR_WARNING_STATUS = CAN_NODE_NSR_EWRN_Msk, /**< Error warning status */
 332:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_BUS_OFF= CAN_NODE_NSR_BOFF_Msk,       /**< Bus-off status */
 333:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_LENGTH_ERROR = CAN_NODE_NSR_LLE_Msk,     /**< List length error */
 334:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_OBJECT_ERROR = CAN_NODE_NSR_LOE_Msk,     /**< List object error */
 335:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 336:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_SUSPENDED_ACK = CAN_NODE_NSR_SUSACK_Msk       /**< Suspend Acknowledge */
 337:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #endif
 338:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_STATUS_t;
 339:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 340:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 341:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node control like initialization, node disable and analyzer mode .
 342:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_NODE_CONTROL_t for this enum.
 343:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 344:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_CONTROL
 345:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 346:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_NODE_INIT = CAN_NODE_NCR_INIT_Msk,            /**< Node initialization */
 347:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_TX_INT_ENABLE = CAN_NODE_NCR_TRIE_Msk,        /**< Transfer event enable */
 348:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_LEC_INT_ENABLE = CAN_NODE_NCR_LECIE_Msk,      /**< LEC Indicated Error Event
 349:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_ALERT_INT_ENABLE = CAN_NODE_NCR_ALIE_Msk,     /**< Alert Event Enable */
 350:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_DISABLE = CAN_NODE_NCR_CANDIS_Msk,        /**< CAN disable */
 351:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CONF_CHANGE_ENABLE= CAN_NODE_NCR_CCE_Msk,     /**< Configuration change enab
 352:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_ANALYZER_NODEDE = CAN_NODE_NCR_CALM_Msk,  /**< CAN Analyzer mode */
 353:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 354:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_SUSPENDED_ENABLE = CAN_NODE_NCR_SUSEN_Msk     /**< Suspend Enable */
 355:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #endif
 356:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_CONTROL_t;
 357:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 358:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 359:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node events. Use type \a XMC_CAN_NODE_EVENT_t for this enum.
 360:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 361:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_EVENT
 362:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 363:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_TX_INT = CAN_NODE_NCR_TRIE_Msk,   /**< Node Transfer OK Event */
 364:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_ALERT = CAN_NODE_NCR_ALIE_Msk,    /**< Node Alert Event */
 365:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_LEC = CAN_NODE_NCR_LECIE_Msk,     /**< Last Error code Event */
 366:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_CFCIE = CAN_NODE_NFCR_CFCIE_Msk   /**< CAN Frame Count Event  */
 367:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_EVENT_t;
 368:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 369:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 370:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN node pointer events position. Use type \a XMC_CAN_NODE_POINTER_EVENT_
 371:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 372:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_POINTER_EVENT
 373:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 374:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_ALERT = CAN_NODE_NIPR_ALINP_Pos,           /**< Node Alert Event node 
 375:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_LEC = CAN_NODE_NIPR_LECINP_Pos,            /**< Last Error code Event 
 376:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK = CAN_NODE_NIPR_TRINP_Pos,     /**< Transmit Event node po
 377:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER = CAN_NODE_NIPR_CFCINP_Pos   /**< CAN Frame Count Event 
 378:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_POINTER_EVENT_t;
 379:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 380:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 381:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object event node pointer position. Use type \a XMC_CAN_MO_POINTER_EVENT_t f
 382:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 383:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_POINTER_EVENT
 384:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 385:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_TRANSMIT = CAN_MO_MOIPR_TXINP_Pos,     /**< Transmit Event node pointer 
 386:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_RECEIVE = CAN_MO_MOIPR_RXINP_Pos       /**< Receive Event node pointer *
 387:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_POINTER_EVENT_t;
 388:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 389:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 390:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object event type. Use type \a XMC_CAN_MO_EVENT_t for this en
 391:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 392:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_EVENT
 393:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 394:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_TRANSMIT = CAN_MO_MOFCR_TXIE_Msk,  /**< Message Object transmit event */
 395:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_RECEIVE = CAN_MO_MOFCR_RXIE_Msk,   /**< Message Object receive event */
 396:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_OVERFLOW = CAN_MO_MOFCR_OVIE_Msk,  /**< Message Object overflow event */
 397:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_EVENT_t;
 398:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 399:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 400:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the possible receive inputs. Use type \a XMC_CAN_NODE_RECEIVE_INPUT_t for this enum.
 401:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 402:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_RECEIVE_INPUT
 403:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 404:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCA,   /**< CAN Receive Input A */
 405:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCB,   /**< CAN Receive Input B */
 406:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCC,   /**< CAN Receive Input C */
 407:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCD,   /**< CAN Receive Input D */
 408:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCE,   /**< CAN Receive Input E */
 409:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCF,   /**< CAN Receive Input F */
 410:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCG,   /**< CAN Receive Input G */
 411:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCH    /**< CAN Receive Input H */
 412:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_RECEIVE_INPUT_t;
 413:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 414:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 415:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error transfer direction. Use type \a XMC_CAN_NODE_LAST_ERROR_DIR_t for this enum.
 416:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 417:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_DIR
 418:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 419:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_RECEPCION,    /**< The last error occurred while the CAN n
 420:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_TRANSMISSION  /**< The last error occurred while the CAN n
 421:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_DIR_t;
 422:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 423:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 424:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 425:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error increment. Use type \a XMC_CAN_NODE_LAST_ERROR_INC_t for this enum.
 426:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 427:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_INC
 428:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 429:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_1, /**< The last error led to an error counter increment of 1. */
 430:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_8  /**< The last error led to an error counter increment of 8. */
 431:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_INC_t;
 432:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 433:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 434:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines interrupt request on interrupt output line INT_O[n]. Use type \a XMC_CAN_NODE_INTERRUPT_
 435:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 436:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_INTERRUPT_TRIGGER
 437:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 438:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_0 = 0x1U,
 439:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_1 = 0x2U,
 440:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_2 = 0x4U,
 441:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_3 = 0x8U,
 442:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_4 = 0x16U,
 443:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_5 = 0x32U,
 444:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_6 = 0x64U,
 445:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_7 = 0x128U,
 446:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_INTERRUPT_TRIGGER_t;
 447:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 448:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 449:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Clock source used for the MCAN baudrate generator 
 450:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 451:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_CANCLKSRC
 452:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {  
 453:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 454:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #if (UC_FAMILY == XMC4)
 455:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 456:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #else
 457:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_MCLK = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock. 
 458:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #endif
 459:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FOHP = 0x2U, /**< Use high performance oscillator (fOHP) as MCAN baudrate gener
 460:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #else
 461:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 462:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #endif
 463:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_CANCLKSRC_t;
 464:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 465:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 466:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * DATA STRUCTURES
 467:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 468:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 469:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN node Nominal Bit Time. Use type \a XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t for this s
 470:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** */
 471:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG
 472:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 473:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t can_frequency;       /**< Frequency of the CAN module(fCAN). \a can_frequency shall be r
 474:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t baudrate;          /**< Specifies the node baud rate. Unit: baud \a baudrate shall be ra
 475:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sample_point;      /**< Sample point is used to compensate mismatch between transmitter 
 476:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                    the synchronization segment. Sample point. Range = [0, 10000] with respect [0%, 
 477:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sjw;               /**< (Re) Synchronization Jump Width. Range:0-3 */
 478:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t;
 479:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 480:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 481:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines base, top and bottom of CAN Message Object FIFO Structure. Use type \a XMC_CAN_FIFO_CONF
 482:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * A FIFO consists of one base object and n slave objects.
 483:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 484:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_FIFO_CONFIG
 485:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 486:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_bottom;    /**< points to the first element(slave object) in a FIFO structure.Range 
 487:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_top;     /**< points to the last element(slave object) in a FIFO structure. Range :0
 488:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_base;    /**< points to the actual target object(Base object) within a FIFO/Gateway 
 489:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FIFO_CONFIG_t;
 490:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 491:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 492:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Gateway FIFO structure and provides additional options for gateway destination objec
 493:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_GATEWAY_CONFIG_t for this structure.
 494:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 495:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_GATEWAY_CONFIG
 496:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 497:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_bottom;       /**< points to the first element(gateway destination object) in a F
 498:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_top;        /**< points to the last element(gateway destination object) in a FIFO
 499:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_base;       /**< points to the actual target object within a FIFO/Gateway structu
 500:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_frame_send;   /**< TXRQ updated in the gateway destination object after the int
 501:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object */
 502:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_identifier_copy;   /**< The identifier of the gateway source object (after storing t
 503:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object. */
 504:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 505:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_length_code_copy; /**< Data length code of the gateway source object (after sto
 506:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                            gateway destination object */
 507:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_copy;  /**< Data fields in registers MODATALn and MODATAHn of the gateway sourc
 508:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                 are copied to the gateway destination.*/
 509:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 510:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_GATEWAY_CONFIG_t;
 511:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 512:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 513:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN Global Initialization structure
 514:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** */
 515:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_GLOBAL_TypeDef XMC_CAN_t;
 516:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 517:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard start*/
 518:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 519:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   #pragma push
 520:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   #pragma anon_unions
 521:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 522:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   #pragma warning 586
 523:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #endif
 524:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 525:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 526:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines frame counter configuration. Use type \a XMC_CAN_NODE_FRAME_COUNTER_t for this structure
 527:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * It provides configuration of frame counter that counts transmitted/received CAN frames or obtain
 528:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * when a frame has been started to transmit or be received by the CAN node.
 529:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** */
 530:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_FRAME_COUNTER
 531:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 532:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 533:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   union{
 534:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 535:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 16;
 536:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_selection:3;   /**<   Defines function of the frame counter  */
 537:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_mode:2;      /**<   Determines the operation mode of the frame count
 538:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 11;
 539:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****     };
 540:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t nfcr;
 541:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 542:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   };
 543:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_FRAME_COUNTER_t;
 544:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 545:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 546:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *Defines Node Runtime structure.
 547:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** */
 548:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_NODE_TypeDef  XMC_CAN_NODE_t;            /**<  pointer to the Node CAN register */
 549:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 550:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 551:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object runtime elements. Use type \a XMC_CAN_MO_t for this structure.
 552:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 553:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_MO
 554:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 555:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   CAN_MO_TypeDef *can_mo_ptr;                     /**< Pointer to the Message Object CAN register *
 556:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   union{
 557:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 558:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_identifier:29;            /**< standard (11 bit)/Extended (29 bit) message ident
 559:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mode:1;                /**< Standard/Extended identifier support */
 560:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_priority:2;               /**< Arbitration Mode/Priority */
 561:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****     };
 562:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_ar;
 563:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   };
 564:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   union{
 565:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 566:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mask:29;              /**< CAN Identifier of Message Object */
 567:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_ide_mask:1;              /**< Identifier Extension Bit of Message Object */
 568:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****     };
 569:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_amr;
 570:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   };
 571:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t can_data_length;                        /**< Message data length, Range:0-8 */
 572:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 573:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   union{
 574:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 575:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       uint8_t can_data_byte[8];                 /**< Each position of the array represents a data b
 576:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       uint16_t can_data_word[4];                /**< Each position of the array represents a 16 bit
 577:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_data[2];                     /**< can_data[0] lower 4 bytes of the data. can_dat
 578:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                               of the data */
 579:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       uint64_t can_data_long;                   /** Data of the Message Object*/
 580:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****       };
 581:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 582:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_t can_mo_type;                  /**<  Message Type */
 583:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 584:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_t;
 585:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard end*/
 586:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 587:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   #pragma pop
 588:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 589:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   #pragma warning restore
 590:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #endif
 591:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 592:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * API Prototypes
 593:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 594:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #ifdef __cplusplus
 595:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** extern "C" {
 596:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #endif
 597:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 598:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 599:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 600:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 601:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 602:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 603:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 604:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 605:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 606:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Disables CAN module. In disabled state, no registers of CAN module can be read or written excep
 607:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 608:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 609:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_Enable()\n\n\n
 610:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 611:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 612:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 613:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Disable(XMC_CAN_t *const obj);
 614:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 615:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 616:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 617:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 618:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *         for details.
 619:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 620:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 621:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 622:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 623:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Enables CAN module and initializes all CAN registers to reset values. It is required to re-conf
 624:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  before any data transfer. It configures CAN_CLC.DISR bit.
 625:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 626:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 627:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_Disable()\n\n\n
 628:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 629:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 630:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 631:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Enable(XMC_CAN_t *const obj);
 632:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 633:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 634:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 635:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 636:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 637:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 638:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param node_num  CAN node number,Range : 0-2
 639:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param mo_num  CAN Message Object number,Range : 0-63
 640:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 641:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 642:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 643:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 644:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Allocates Message Object from free list to node list. Each \a node_num is linked to one unique 
 645:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  A CAN node performs message transfer only with the \a mo_num message objects that are allocated
 646:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  It configures PANCTR register.
 647:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 648:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 649:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 650:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 651:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 652:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 653:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 654:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 655:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 656:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 657:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 658:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 659:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 660:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return Ready status of list controller
 661:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 662:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 663:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns ready status of the list controller
 664:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 665:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 666:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_PanelControl()
 667:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 668:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 669:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
 670:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 671:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 672:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
 673:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 674:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 675:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 676:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 677:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 678:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 679:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param pancmd panal command selection. Refer @ref XMC_CAN_PANCMD_t for valid values.
 680:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg1   Panel Argument 1,Range : 0-2
 681:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg2   Panel Argument 2, Range : 0-63
 682:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 683:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 684:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 685:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 686:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures the panel command and panel arguments. A panel operation consists of a command code 
 687:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  panel arguments (PANAR1, PANAR2). Commands that have a return value deliver it to the PANAR1 bi
 688:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  return an error flag deliver it to bit 31 of the Panel Control Register, this means bit 7 of PA
 689:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  panel argument PANAR1,\a arg2 represents panel argument PANAR2 and \a pancmd represents command
 690:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  register.
 691:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 692:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 693:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 694:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 695:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 696:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 697:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
 698:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_PANCMD_t pancmd,
 699:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                       const uint8_t arg1,
 700:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                       const uint8_t arg2)
 701:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 702:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 703:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 704:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 705:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
 706:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 707:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 708:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 709:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 710:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 711:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 712:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 713:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_requestr  Interrupt trigger number selection. Refer @ref XMC_CAN_NODE_INTERRUPT_T
 714:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *               Multiple interrupt trigger events can be ORed.
 715:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 716:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 717:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 718:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 719:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures multiple interrupt requests with a single write operation. \a service_requestr repre
 720:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  request or multiple.It configures MITR register.
 721:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 722:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 723:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 724:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 725:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 726:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 727:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_EventTrigger(XMC_CAN_t *const obj,const XMC_CAN_NODE_INTERRUPT_TRIGGER
 728:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 729:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   obj->MITR = ((uint32_t)service_requestr << CAN_MITR_IT_Pos) & (uint32_t)CAN_MITR_IT_Msk;
 730:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
 731:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 732:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 733:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 734:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 735:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 736:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 737:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 738:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source
 739:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). 
 740:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *        The can_frequency shall be an integer divisor of the CAN clock source frequency (fPERI/fM
 741:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *        it should be selected such that if fulfills the minimum operating frequency specified in 
 742:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *        In addition the can_frequency shall be an integer multiple of the baudrate.
 743:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *        Max. value: Max. clock source frequency, i.e. if using fOHP and using a XTAL of 20MHz the
 744:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 745:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return Actual frequency
 746:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 747:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 748:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_Init() configures clock rate of the module timer clock fCAN. 
 749:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that only the normal divider is used to avoid jitter.
 750:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * In addition the actual achievable frequency is returned.
 751:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 752:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 753:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Altering CAN module \a can_frequency shall affects baud rate, call XMC_CAN_NODE_NominalBitTimeCo
 754:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 755:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 756:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 757:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx()\n\n\n
 758:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 759:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 760:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 761:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 762:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 763:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 764:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 765:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 766:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return Baudrate generator clock source
 767:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 768:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 769:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Returns CAN baudrate generator clock source
 770:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 771:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use only for XMC1400 series and XMC47/4800 series projects
 772:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 773:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 774:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj);
 775:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 776:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 777:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 778:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 779:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 780:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 781:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * 
 782:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 783:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Sets CAN baudrate generator clock source
 784:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 785:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use only for XMC1400 series and XMC47/4800 series projects
 786:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 787:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 788:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source);
 789:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 790:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 791:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 792:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 793:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 794:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return baudrate generator input clock frequency 
 795:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 796:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 797:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Gets CAN baudrate generator input clock frequency
 798:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 799:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use only for XMC1400 series and XMC47/4800 series projects
 800:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 801:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 802:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj);
 803:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 804:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 805:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 806:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 807:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 808:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 809:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 810:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source.
 811:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). Max. value: Max. clock source frequency, i.e. i
 812:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use clksrc parameter only for XMC1400 series and XMC47/4800 series projects, otherwise omi
 813:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 814:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 815:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 816:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 817:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Configures clock rate of the module timer clock fCAN. Altering CAN module \a can_frequency shall
 818:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_NominalBitTimeConfigure() or XMC_CAN_NODE_NominalBitTimeConfigureEx() to confi
 819:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 820:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 821:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 822:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 823:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 824:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx(), XMC_CAN_InitEx
 825:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 826:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 827:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 828:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #else
 829:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency);
 830:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #endif
 831:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 832:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 833:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 834:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
 835:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 836:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 837:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 838:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 839:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Initializes CAN message object. Initialization includes configuring Message Object identifier ty
 840:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * identifier value, Message Object type, and transfer requests. It configures FDR register.
 841:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 842:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 843:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * None
 844:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 845:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 846:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo);
 847:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 848:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /* NODE APIs */
 849:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 850:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 851:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 852:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node      Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers.
 853:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param ptr_event     CAN_NODE interrupt pointer position. Refer @ref XMC_CAN_NODE_POINTER_EVENT_
 854:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_request Interrupt service request number. Range : 0-7
 855:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 856:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 857:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 858:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 859:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures node interrupt pointer \a service_request for CAN Node events \a ptr_event. It confi
 860:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 861:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 862:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * None
 863:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 864:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 865:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 866:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
 867:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
 868:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                           const uint32_t service_request)
 869:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 870:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_eve
 871:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
 872:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 873:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 874:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 875:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 876:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 877:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 878:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 879:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 880:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 881:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 882:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 883:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 884:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 885:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 886:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * None
 887:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 888:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 889:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_NominalBitTimeConfigure(XMC_CAN_NODE_t *const can_node,
 890:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_b
 891:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 892:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 893:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 894:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 895:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 896:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 897:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return Status on the sucess setting the desired bitrate XMC_CAN_STATUS_t
 898:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 899:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 900:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_NODE_NominalBitTimeConfigure() configures the CAN node baudrate. 
 901:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that allows bitrates below 100kpbs.
 902:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @note Consider using the new API for new projects. XMC_CAN_NODE_NominalBitTimeConfigure() is kep
 903:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 904:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 905:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 906:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 907:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 908:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_InitEx()
 909:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 910:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 911:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
 912:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                                const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const 
 913:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 914:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 915:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 916:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param input    CAN receive input selection. Refer @ref XMC_CAN_NODE_RECEIVE_INPUT_t for details
 917:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 918:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 919:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 920:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 921:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \a input specifies CAN input receive pin. This API Configures NPCRx register,it is required to c
 922:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(), before configuring NPCRx register, call XMC_CAN_NODE_D
 923:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * API after configuring NPCRx register. CAN input receive pins which falls under analog port pins 
 924:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_GPIO_EnableDigitalInput(),to enable digital pad.
 925:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 926:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *\par<b>Related APIs:</b><BR>
 927:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * None
 928:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 929:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 930:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 931:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 932:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 933:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 934:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
 935:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                               const XMC_CAN_NODE_RECEIVE_INPUT_t input)
 936:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 217              	 .loc 2 936 0
 218              	 .cfi_startproc
 219 0000 80B5     	 push {r7,lr}
 220              	.LCFI6:
 221              	 .cfi_def_cfa_offset 8
 222              	 .cfi_offset 7,-8
 223              	 .cfi_offset 14,-4
 224 0002 82B0     	 sub sp,sp,#8
 225              	.LCFI7:
 226              	 .cfi_def_cfa_offset 16
 227 0004 00AF     	 add r7,sp,#0
 228              	.LCFI8:
 229              	 .cfi_def_cfa_register 7
 230 0006 7860     	 str r0,[r7,#4]
 231 0008 0A1C     	 mov r2,r1
 232 000a FB1C     	 add r3,r7,#3
 233 000c 1A70     	 strb r2,[r3]
 937:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 234              	 .loc 2 937 0
 235 000e 7B68     	 ldr r3,[r7,#4]
 236 0010 DB68     	 ldr r3,[r3,#12]
 237 0012 0722     	 mov r2,#7
 238 0014 9343     	 bic r3,r2
 239 0016 1A1C     	 mov r2,r3
 938:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                    (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Ms
 240              	 .loc 2 938 0
 241 0018 FB1C     	 add r3,r7,#3
 242 001a 1B78     	 ldrb r3,[r3]
 243 001c 0721     	 mov r1,#7
 244 001e 0B40     	 and r3,r1
 937:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 245              	 .loc 2 937 0
 246 0020 1A43     	 orr r2,r3
 247 0022 7B68     	 ldr r3,[r7,#4]
 248 0024 DA60     	 str r2,[r3,#12]
 939:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
 249              	 .loc 2 939 0
 250 0026 BD46     	 mov sp,r7
 251 0028 02B0     	 add sp,sp,#8
 252              	 
 253 002a 80BD     	 pop {r7,pc}
 254              	 .cfi_endproc
 255              	.LFE65:
 257              	 .section .text.XMC_CAN_NODE_EnableConfigurationChange,"ax",%progbits
 258              	 .align 2
 259              	 .code 16
 260              	 .thumb_func
 262              	XMC_CAN_NODE_EnableConfigurationChange:
 263              	.LFB78:
 940:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 941:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 942:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 943:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node  Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_
 944:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 945:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 946:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 947:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 948:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Enable Node \a can_node in Loop-Back Mode. A Node is connected to an internal (virtual) loop-bac
 949:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * nodes which are in Loop- Back Mode are connected to this virtual CAN bus so that they can commun
 950:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * other internally. The external transmit line is forced recessive in Loop-Back Mode. This API Con
 951:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 952:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration configuration.
 953:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 954:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 955:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_DisableLoopBack().
 956:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 957:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
 958:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  NPCRx can be written only if bit NCRx.CCE is set.
 959:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 960:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 961:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 962:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
 963:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 964:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 965:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
 966:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 967:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 968:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 969:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 970:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 971:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 972:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 973:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 974:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Disable Node Loop-Back Mode, disables internal (virtual) loop-back CAN bus. This API Configures 
 975:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 976:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration.
 977:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 978:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 979:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack()
 980:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 981:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 982:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 983:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 984:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 985:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
 986:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 987:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableLoopBack(XMC_CAN_NODE_t *const can_node)
 988:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 989:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR &= ~(uint32_t)CAN_NODE_NPCR_LBM_Msk;
 990:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
 991:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 992:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
 993:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
 994:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 995:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 996:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
 997:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
 998:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
 999:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1000:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1001:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1002:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Enable CAN Node events. It configures NFCR register.
1003:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1004:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1005:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableEvent()
1006:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1007:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1008:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1009:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1010:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1011:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1012:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1013:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1014:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1015:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
1016:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
1017:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1018:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1019:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1020:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1021:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Disable CAN Node events. It configures NFCR register.
1022:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1023:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1024:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableEvent()
1025:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1026:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1027:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1028:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1029:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1030:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1031:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1032:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1033:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1034:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1035:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_DIR_t Last error transfer direction. Refer @ref XMC_CAN_NODE_LAS
1036:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1037:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1038:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Returns NODE Last Error occurred during Transmit/receive direction. It returns value of NFCR reg
1039:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1040:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1041:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferInc()\n\n\n
1042:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1043:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1044:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1045:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_DIR_t XMC_CAN_NODE_GetLastErrTransferDir(XMC_CAN_NODE_t *co
1046:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1047:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_DIR_t)(((node->NECNT) & CAN_NODE_NECNT_LETD_Msk) >> CAN_NODE_NECN
1048:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1049:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1050:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1051:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1052:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1053:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1054:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1055:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_INC_t Last error transfer increment. Refer @ref XMC_CAN_NODE_LAS
1056:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1057:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1058:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns NODE Last Error Transfer Increment. It returns value of NFCR register.
1059:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1060:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1061:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferDir()\n\n\n
1062:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1063:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1064:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1065:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_INC_t XMC_CAN_NODE_GetLastErrTransferInc(XMC_CAN_NODE_t *co
1066:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1067:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_INC_t)(((node->NECNT) & CAN_NODE_NECNT_LEINC_Msk)>> CAN_NODE_NECN
1068:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1069:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1070:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1071:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1072:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1073:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1074:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param  error_warning_level  Error Warning level value. Range :0-255.
1075:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1076:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1077:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1078:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1079:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Configures error warning level in order to set the corresponding error warning bit EWRN. It conf
1080:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * into NECNT register. Before this configuration call XMC_CAN_NODE_EnableConfigurationChange() API
1081:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1082:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1083:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetErrorWarningLevel()\n\n\n
1084:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1085:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1086:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1087:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1088:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1089:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1090:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetErrorWarningLevel(XMC_CAN_NODE_t *const can_node, uint8_t erro
1091:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1092:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_EWRNLVL_Msk)) |
1093:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)error_warning_level << CAN_NODE_NECNT_EWRNLVL_Pos) & (uint32_t)CAN_
1094:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1095:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1096:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1097:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1098:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1099:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1100:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_tec  transmit error counter value. Range :0-255
1101:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1102:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1103:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1104:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1105:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures Transmit error counter. It configures \a can_tec into NECNT register. Before this co
1106:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_EnableConfigurationChange() API.
1107:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1108:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1109:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetTransmitErrorCounter()\n\n\n
1110:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1111:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
1112:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1113:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1114:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1115:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1116:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1117:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t c
1118:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1119:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_TEC_Msk)) |
1120:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)can_tec << CAN_NODE_NECNT_TEC_Pos) & (uint32_t)CAN_NODE_NECNT_TEC_M
1121:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1122:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1123:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1124:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1125:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1126:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1127:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_rec  receive error counter value. Range :0-255
1128:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1129:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1130:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1131:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1132:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Configures Receive Error Counter. It configures \a can_rec into NECNT register. Before this conf
1133:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange() API.
1134:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1135:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1136:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetReceiveErrorCounter()\n\n\n
1137:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1138:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1139:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1140:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1141:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1143:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t ca
1144:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1145:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_REC_Msk)) |
1146:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                    (((uint32_t)can_rec << CAN_NODE_NECNT_REC_Pos) & (uint32_t)CAN_NODE_NECNT_REC_Ms
1147:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1148:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1149:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1150:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1151:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1152:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1153:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1154:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t Error Warning Level. Range :0 - 255
1155:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1156:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1157:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns error warning level. This determines the threshold value (warning level, default 96) to
1158:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  to set the corresponding error warning bit EWRN. It reads NECNT register.
1159:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1160:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1161:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetErrorWarningLevel()\n\n\n
1162:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1163:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1164:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1165:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1166:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetErrorWarningLevel(XMC_CAN_NODE_t *const can_node)
1167:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1168:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_EWRNLVL_Msk) >> CAN_NODE_NECNT_EWR
1169:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1170:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1171:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1172:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1173:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1174:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1175:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1176:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t transmit error counter value. Range :0 - 255
1177:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1178:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1179:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Transmit Error Counter value. If the Bitstream Processor detects an error while a trans
1180:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  running, the Transmit Error Counter is incremented by 8. An increment of 1 is used when the err
1181:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  reported by an external CAN node via an Error Frame generation. It reads NECNT register.
1182:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1183:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1184:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetTransmitErrorCounter()
1185:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1186:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1187:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1188:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1189:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1190:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1191:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node)
1192:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1193:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_TEC_Msk) >> CAN_NODE_NECNT_TEC_Po
1194:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1195:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1196:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1197:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1198:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1199:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1200:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1201:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t  receive error counter value.
1202:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1203:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1204:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Receive Error Counter value. It reads NECNT register.
1205:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1206:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1207:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetReceiveErrorCounter()
1208:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1209:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1210:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1211:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node)
1212:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1213:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_REC_Msk) >> CAN_NODE_NECNT_REC_Po
1214:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1215:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1216:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1217:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1218:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1219:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1220:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1221:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint32_t Current status of the node.
1222:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1223:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1224:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Returns errors status as well as successfully transferred CAN frames status.
1225:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1226:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1227:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_ClearStatus()
1228:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1229:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1230:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1231:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint32_t XMC_CAN_NODE_GetStatus(XMC_CAN_NODE_t *const can_node)
1232:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1233:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   return ((can_node->NSR));
1234:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1235:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1236:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1237:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1238:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1239:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node_status Status to clear.Refer @ref XMC_CAN_NODE_STATUS_t for valid values.
1240:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1241:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1242:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1243:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1244:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Clear errors status as well as successfully transferred CAN frames status.
1245:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1246:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1247:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetStatus()
1248:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1249:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1250:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1251:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ClearStatus(XMC_CAN_NODE_t *const can_node,XMC_CAN_NODE_STATUS_t 
1252:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1253:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****    can_node->NSR &= ~(uint32_t)can_node_status;
1254:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1255:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1256:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1257:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1258:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1259:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1260:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1261:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1262:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1263:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1264:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Allow to change the configuration of the CAN node, like bit timing, CAN bus transmit/receive por
1265:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * counters read. It configures NCRx.CCE bit.
1266:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1267:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1268:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange()
1269:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1270:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1271:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1272:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1273:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 264              	 .loc 2 1273 0
 265              	 .cfi_startproc
 266 0000 80B5     	 push {r7,lr}
 267              	.LCFI9:
 268              	 .cfi_def_cfa_offset 8
 269              	 .cfi_offset 7,-8
 270              	 .cfi_offset 14,-4
 271 0002 82B0     	 sub sp,sp,#8
 272              	.LCFI10:
 273              	 .cfi_def_cfa_offset 16
 274 0004 00AF     	 add r7,sp,#0
 275              	.LCFI11:
 276              	 .cfi_def_cfa_register 7
 277 0006 7860     	 str r0,[r7,#4]
1274:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 278              	 .loc 2 1274 0
 279 0008 7B68     	 ldr r3,[r7,#4]
 280 000a 1B68     	 ldr r3,[r3]
 281 000c 4022     	 mov r2,#64
 282 000e 1A43     	 orr r2,r3
 283 0010 7B68     	 ldr r3,[r7,#4]
 284 0012 1A60     	 str r2,[r3]
1275:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
 285              	 .loc 2 1275 0
 286 0014 BD46     	 mov sp,r7
 287 0016 02B0     	 add sp,sp,#8
 288              	 
 289 0018 80BD     	 pop {r7,pc}
 290              	 .cfi_endproc
 291              	.LFE78:
 293 001a C046     	 .section .text.XMC_CAN_NODE_DisableConfigurationChange,"ax",%progbits
 294              	 .align 2
 295              	 .code 16
 296              	 .thumb_func
 298              	XMC_CAN_NODE_DisableConfigurationChange:
 299              	.LFB79:
1276:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1277:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1278:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1279:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1280:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1281:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1282:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1283:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1284:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1285:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Forbid to change the configuration of the CAN node. It configures NCRx.CCE bit.
1286:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1287:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1288:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange()
1289:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1290:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1291:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1292:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1293:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 300              	 .loc 2 1293 0
 301              	 .cfi_startproc
 302 0000 80B5     	 push {r7,lr}
 303              	.LCFI12:
 304              	 .cfi_def_cfa_offset 8
 305              	 .cfi_offset 7,-8
 306              	 .cfi_offset 14,-4
 307 0002 82B0     	 sub sp,sp,#8
 308              	.LCFI13:
 309              	 .cfi_def_cfa_offset 16
 310 0004 00AF     	 add r7,sp,#0
 311              	.LCFI14:
 312              	 .cfi_def_cfa_register 7
 313 0006 7860     	 str r0,[r7,#4]
1294:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 314              	 .loc 2 1294 0
 315 0008 7B68     	 ldr r3,[r7,#4]
 316 000a 1B68     	 ldr r3,[r3]
 317 000c 4022     	 mov r2,#64
 318 000e 9343     	 bic r3,r2
 319 0010 1A1C     	 mov r2,r3
 320 0012 7B68     	 ldr r3,[r7,#4]
 321 0014 1A60     	 str r2,[r3]
1295:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
 322              	 .loc 2 1295 0
 323 0016 BD46     	 mov sp,r7
 324 0018 02B0     	 add sp,sp,#8
 325              	 
 326 001a 80BD     	 pop {r7,pc}
 327              	 .cfi_endproc
 328              	.LFE79:
 330              	 .section .text.XMC_CAN_NODE_ResetInitBit,"ax",%progbits
 331              	 .align 2
 332              	 .code 16
 333              	 .thumb_func
 335              	XMC_CAN_NODE_ResetInitBit:
 336              	.LFB81:
1296:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1297:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1298:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1299:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1300:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1301:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1302:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1303:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1304:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1305:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1306:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Disable CAN node participation in CAN traffic. Bit INIT is automatically set when the CAN node e
1307:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * state. It configures NCR.INIT bit.
1308:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1309:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1310:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_ResetInitBit()
1311:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1312:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1313:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1314:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
1315:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1316:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
1317:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1318:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1319:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1320:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1321:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1322:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1323:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1324:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1325:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1326:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Enable CAN node participation in CAN traffic. Bit INIT is automatically set when the CAN node en
1327:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * state. It configures NCR.INIT bit.
1328:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1329:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1330:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetInitBit()
1331:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1332:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1333:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
1334:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 337              	 .loc 2 1334 0
 338              	 .cfi_startproc
 339 0000 80B5     	 push {r7,lr}
 340              	.LCFI15:
 341              	 .cfi_def_cfa_offset 8
 342              	 .cfi_offset 7,-8
 343              	 .cfi_offset 14,-4
 344 0002 82B0     	 sub sp,sp,#8
 345              	.LCFI16:
 346              	 .cfi_def_cfa_offset 16
 347 0004 00AF     	 add r7,sp,#0
 348              	.LCFI17:
 349              	 .cfi_def_cfa_register 7
 350 0006 7860     	 str r0,[r7,#4]
1335:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
 351              	 .loc 2 1335 0
 352 0008 7B68     	 ldr r3,[r7,#4]
 353 000a 1B68     	 ldr r3,[r3]
 354 000c 0122     	 mov r2,#1
 355 000e 9343     	 bic r3,r2
 356 0010 1A1C     	 mov r2,r3
 357 0012 7B68     	 ldr r3,[r7,#4]
 358 0014 1A60     	 str r2,[r3]
1336:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
 359              	 .loc 2 1336 0
 360 0016 BD46     	 mov sp,r7
 361 0018 02B0     	 add sp,sp,#8
 362              	 
 363 001a 80BD     	 pop {r7,pc}
 364              	 .cfi_endproc
 365              	.LFE81:
 367              	 .section .text.XMC_CAN_MO_SetEventNodePointer,"ax",%progbits
 368              	 .align 2
 369              	 .code 16
 370              	 .thumb_func
 372              	XMC_CAN_MO_SetEventNodePointer:
 373              	.LFB89:
1337:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1338:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1339:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1340:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1341:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1342:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1343:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1344:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1345:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Enable the CAN node, starts the participation in CAN traffic. It configures NCR.CANDIS and the N
1346:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1347:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1348:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * None
1349:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1350:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1351:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_Enable(XMC_CAN_NODE_t *const can_node)
1352:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1353:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CANDIS_Msk;
1354:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_ResetInitBit(can_node);
1355:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1356:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1357:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1358:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1359:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1360:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1361:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1362:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1363:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1364:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Disable the CAN node, terminates participation in CAN traffic. It configures NCR.CANDIS bit.
1365:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1366:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1367:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * None
1368:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1369:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1370:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_Disable(XMC_CAN_NODE_t *const can_node)
1371:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1372:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CANDIS_Msk;
1373:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1374:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1375:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1376:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1377:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1378:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1379:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1380:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1381:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Configure CAN node in Analyzer Mode. This means that messages may be received, but not transmitt
1382:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * is sent on the CAN bus upon frame reception. Active-error flags are sent recessive instead of do
1383:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * The transmit line is continuously held at recessive (1) level. XMC_CAN_NODE_SetInitBit() should 
1384:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * set / reset AnalyzerMode. It configures NCR.CALM bit.
1385:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1386:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1387:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_ReSetAnalyzerMode()
1388:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1389:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1390:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1391:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1392:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetAnalyzerMode(XMC_CAN_NODE_t *const can_node)
1393:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1394:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CALM_Msk;
1395:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1396:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1397:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1398:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1399:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1400:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1401:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1402:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1403:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1404:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Reset the Analyzer mode. CAN node is no more in Analyzer Mode. Please refer XMC_CAN_NODE_SetAnal
1405:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NCR.CALM bit. XMC_CAN_NODE_SetInitBit() should be called before set / reset Analyz
1406:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1407:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1408:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetAnalyzerMode()
1409:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1410:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1411:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1412:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ReSetAnalyzerMode(XMC_CAN_NODE_t *const can_node)
1413:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1414:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CALM_Msk;
1415:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1416:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1417:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
1418:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1419:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1420:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1421:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1422:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1423:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1424:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Trigger the suspension of the CAN node. An OCDS(on chip debug support) suspend trigger disables 
1425:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * soon as the CAN node becomes bus-idle or bus-off, bit INIT is internally forced to 1 to disable 
1426:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * The actual value of bit INIT remains unchanged. It configures NCR.SUSEN bit
1427:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1428:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1429:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * None
1430:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1431:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *\par<b>Note:</b><br>
1432:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Bit SUSEN is reset via OCDS(on chip debug support) Reset.
1433:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1434:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1435:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1436:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableSuspend(XMC_CAN_NODE_t *const can_node)
1437:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1438:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_SUSEN_Msk;
1439:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1440:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #else
1441:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1442:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1443:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1444:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1445:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1446:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1447:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Disables the transmission on CAN node x as soon as bus-idle is reached.
1448:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1449:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1450:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * None
1451:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1452:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @note Only available for XMC1400,XMC4800 and XMC4700 series
1453:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1454:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1455:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableTransmit(XMC_CAN_NODE_t *const can_node)
1456:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1457:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_TXDIS_Msk;
1458:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1459:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** #endif
1460:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1461:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1462:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1463:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1464:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1465:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node_init frame counter mode selection. Refer @ref XMC_CAN_NODE_FRAME_COUNTER_t for v
1466:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1467:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1468:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1469:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1470:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Configures frame counter functions. Each CAN \a can_node is equipped with a frame counter that c
1471:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * CAN frames or obtains information about the time when a frame has been started to transmit or be
1472:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * node. It configures NFCR register.
1473:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1474:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1475:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * None
1476:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1477:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1478:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1479:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_FrameCounterConfigure(XMC_CAN_NODE_t *const can_node,
1480:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                         const XMC_CAN_NODE_FRAME_COUNTER_t *const can_node_init)
1481:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1482:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NFCR = (can_node->NFCR & ~(uint32_t)(CAN_NODE_NFCR_CFMOD_Msk |
1483:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                        CAN_NODE_NFCR_CFSEL_Msk)) |
1484:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                     can_node_init->nfcr;
1485:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1486:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1487:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1488:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1489:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1490:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1491:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1492:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint16_t current value of the CAN frame counter. Range :0-65535
1493:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1494:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1495:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns the frame counter value \a can_node of the CAN node. In Frame Count Mode (CFMOD = 00B),
1496:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  count value. In Time Stamp Mode (CFMOD = 01B), this API returns the captured bit time count val
1497:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  the start of a new frame. In all Bit Timing Analysis Modes (CFMOD = 10B), this API always retur
1498:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  fCLC clock cycles (measurement result) minus 1.
1499:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1500:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1501:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * None
1502:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1503:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1504:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1505:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint16_t XMC_CAN_NODE_GetCANFrameCounter(XMC_CAN_NODE_t *const can_node)
1506:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1507:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   return (uint16_t)(((uint32_t)(can_node->NFCR & CAN_NODE_NFCR_CFC_Msk) >> CAN_NODE_NFCR_CFC_Pos));
1508:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1509:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1510:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                      /*MO APIs*/
1511:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1512:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1513:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1514:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1515:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1516:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_STATUS_t CAN Node status. Refer @ref XMC_CAN_STATUS_t structure for details.
1517:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1518:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1519:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1520:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1521:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Configures Data to be transmitted and data length code.
1522:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1523:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1524:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_MO_Config()\n\n\n
1525:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1526:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1527:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1528:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1529:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo);
1530:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1531:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1532:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1533:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1534:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1535:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_STATUS_t CAN Node status. Refer @ref XMC_CAN_STATUS_t structure for details.
1536:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1537:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1538:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures transmit request for sending data frame. It configures MOCTR register. Data shall be
1539:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  using XMC_CAN_MO_UpdateData() before calling this API.
1540:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1541:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1542:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_MO_UpdateData()\n\n\n
1543:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1544:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1545:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1546:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo);
1547:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1548:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1549:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1550:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1551:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1552:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_STATUS_t CAN Node status. Refer @ref XMC_CAN_STATUS_t structure for details.
1553:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1554:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1555:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Reads the Message Object data bytes, into message pointer passed as input parameter \a can_mo.
1556:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  can_data[0] of can_mo holds lower 4 bytes, can_data[1] of can_mo holds higher 4 bytes.
1557:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1558:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1559:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * None
1560:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1561:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1562:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1563:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_STATUS_t XMC_CAN_MO_Receive(XMC_CAN_MO_t *can_mo);
1564:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1565:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1566:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1567:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1568:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1569:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_STATUS_t CAN Node status. Refer @ref XMC_CAN_STATUS_t structure for details.
1570:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1571:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1572:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Reads the Message Object data bytes, into message pointer passed as input parameter \a can_mo.
1573:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  can_data[0] of can_mo holds lower 4 bytes, can_data[1] of can_mo holds higher 4 bytes.
1574:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1575:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1576:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * None
1577:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1578:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1579:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_STATUS_t XMC_CAN_MO_ReceiveData (XMC_CAN_MO_t *can_mo);
1580:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1581:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo       Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure 
1582:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo_ptr_int   Message Object event node pointer selection. Refer @ref XMC_CAN_MO_POINT
1583:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *                for valid values.
1584:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_request interrupt output line of multiCAN module.
1585:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1586:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1587:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1588:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1589:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Configures Message Object event node pointer with \a service_request number. It configures MOIPR
1590:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1591:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1592:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * None
1593:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1594:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1595:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1596:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
1597:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                                 const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
1598:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                                 const uint32_t service_request)
1599:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 374              	 .loc 2 1599 0
 375              	 .cfi_startproc
 376 0000 80B5     	 push {r7,lr}
 377              	.LCFI18:
 378              	 .cfi_def_cfa_offset 8
 379              	 .cfi_offset 7,-8
 380              	 .cfi_offset 14,-4
 381 0002 84B0     	 sub sp,sp,#16
 382              	.LCFI19:
 383              	 .cfi_def_cfa_offset 24
 384 0004 00AF     	 add r7,sp,#0
 385              	.LCFI20:
 386              	 .cfi_def_cfa_register 7
 387 0006 F860     	 str r0,[r7,#12]
 388 0008 7A60     	 str r2,[r7,#4]
 389 000a 0B23     	 mov r3,#11
 390 000c FB18     	 add r3,r7,r3
 391 000e 0A1C     	 add r2,r1,#0
 392 0010 1A70     	 strb r2,[r3]
1600:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Ms
 393              	 .loc 2 1600 0
 394 0012 FB68     	 ldr r3,[r7,#12]
 395 0014 1B68     	 ldr r3,[r3]
 396 0016 FA68     	 ldr r2,[r7,#12]
 397 0018 1268     	 ldr r2,[r2]
 398 001a 9268     	 ldr r2,[r2,#8]
 399 001c 0B21     	 mov r1,#11
 400 001e 7918     	 add r1,r7,r1
 401 0020 0978     	 ldrb r1,[r1]
 402 0022 0720     	 mov r0,#7
 403 0024 8840     	 lsl r0,r0,r1
 404 0026 011C     	 mov r1,r0
 405 0028 C943     	 mvn r1,r1
 406 002a 1140     	 and r1,r2
1601:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                           (service_request << (uint32_t)can_mo_ptr_int);
 407              	 .loc 2 1601 0
 408 002c 0B22     	 mov r2,#11
 409 002e BA18     	 add r2,r7,r2
 410 0030 1278     	 ldrb r2,[r2]
 411 0032 7868     	 ldr r0,[r7,#4]
 412 0034 9040     	 lsl r0,r0,r2
 413 0036 021C     	 mov r2,r0
1600:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Ms
 414              	 .loc 2 1600 0
 415 0038 0A43     	 orr r2,r1
 416 003a 9A60     	 str r2,[r3,#8]
1602:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
 417              	 .loc 2 1602 0
 418 003c BD46     	 mov sp,r7
 419 003e 04B0     	 add sp,sp,#16
 420              	 
 421 0040 80BD     	 pop {r7,pc}
 422              	 .cfi_endproc
 423              	.LFE89:
 425 0042 C046     	 .section .text.XMC_CAN_MO_EnableEvent,"ax",%progbits
 426              	 .align 2
 427              	 .code 16
 428              	 .thumb_func
 430              	XMC_CAN_MO_EnableEvent:
 431              	.LFB93:
1603:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1604:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1605:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1606:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1607:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint32_t Current Message Object status.
1608:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1609:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1610:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Message Object status, that indicates message object transfer status and message object
1611:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  information such as the number of the current message object predecessor and successor message 
1612:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  the list number to which the message object is assigned.
1613:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1614:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1615:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * None
1616:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1617:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1618:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1619:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint32_t XMC_CAN_MO_GetStatus(const XMC_CAN_MO_t *const can_mo)
1620:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1621:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   return ((can_mo->can_mo_ptr->MOSTAT));
1622:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1623:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1624:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1625:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1626:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1627:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param mask   Message Object set status selection. Refer @ref XMC_CAN_MO_SET_STATUS_t for detail
1628:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *         Multiple enums can be ORed.
1629:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1630:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1631:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1632:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures Message Object set Status. It configures MOCTR register.
1633:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1634:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1635:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_MO_ResetStatus()\n\n\n
1636:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1637:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1638:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1639:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_MO_SetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
1640:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1641:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_mo->can_mo_ptr->MOCTR = mask;
1642:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1643:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1644:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1645:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1646:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1647:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param mask   Message Object set status selection. Refer @ref XMC_CAN_MO_RESET_STATUS_t for deta
1648:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *             Multiple enums can be ORed.
1649:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1650:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1651:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1652:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  Clears Message Object interrupt events. It configures MOCTR register.
1653:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1654:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1655:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * None
1656:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1657:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1658:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1659:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo,const uint32_t mask)
1660:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
1661:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_mo->can_mo_ptr->MOCTR = mask;
1662:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
1663:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1664:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1665:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1666:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** /**
1667:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1668:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @param event  CAN node Message Object event selection. Refer @ref XMC_CAN_MO_EVENT_t for details
1669:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1670:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1671:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1672:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1673:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * Enable CAN Message Object events. \a event can be ORed multiple Message Object events. It config
1674:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1675:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1676:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_MO_DisableEvent()
1677:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  *
1678:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****  */
1679:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** 
1680:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
1681:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****                                         const uint32_t event)
1682:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** {
 432              	 .loc 2 1682 0
 433              	 .cfi_startproc
 434 0000 80B5     	 push {r7,lr}
 435              	.LCFI21:
 436              	 .cfi_def_cfa_offset 8
 437              	 .cfi_offset 7,-8
 438              	 .cfi_offset 14,-4
 439 0002 82B0     	 sub sp,sp,#8
 440              	.LCFI22:
 441              	 .cfi_def_cfa_offset 16
 442 0004 00AF     	 add r7,sp,#0
 443              	.LCFI23:
 444              	 .cfi_def_cfa_register 7
 445 0006 7860     	 str r0,[r7,#4]
 446 0008 3960     	 str r1,[r7]
1683:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h ****   can_mo->can_mo_ptr->MOFCR |= event;
 447              	 .loc 2 1683 0
 448 000a 7B68     	 ldr r3,[r7,#4]
 449 000c 1B68     	 ldr r3,[r3]
 450 000e 7A68     	 ldr r2,[r7,#4]
 451 0010 1268     	 ldr r2,[r2]
 452 0012 1168     	 ldr r1,[r2]
 453 0014 3A68     	 ldr r2,[r7]
 454 0016 0A43     	 orr r2,r1
 455 0018 1A60     	 str r2,[r3]
1684:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc\xmc_can.h **** }
 456              	 .loc 2 1684 0
 457 001a BD46     	 mov sp,r7
 458 001c 02B0     	 add sp,sp,#8
 459              	 
 460 001e 80BD     	 pop {r7,pc}
 461              	 .cfi_endproc
 462              	.LFE93:
 464              	 .comm pcs_button_config,8,4
 465              	 .comm CAN0_txd_config,8,4
 466              	 .comm CAN0_rxd_config,8,4
 467              	 .comm can_baud,12,4
 468              	 .comm msgObjToPCS,32,8
 469              	 .comm msgObjFromPCS,32,8
 470              	 .comm SLICE0_config,8,4
 471              	 .comm SLICE1_config,8,4
 472              	 .comm sysTickHandle,6,4
 473              	 .comm esp32_tx_config,8,4
 474              	 .comm esp32_rx_config,8,4
 475              	 .comm esp32_config,12,4
 476              	 .comm g_global_handle,24,4
 477              	 .comm g_group_handle,20,4
 478              	 .comm g_queue_handle,12,4
 479              	 .comm g_queue_entry,16,4
 480              	 .comm g_channel_handle,64,4
 481              	 .comm g_result_handle,16,4
 482              	 .comm adc_io,8,4
 483              	 .comm relay_KMP,8,4
 484              	 .comm relay_KMF,8,4
 485              	 .comm relay_KDSG,8,4
 486              	 .comm relay_KBAT,8,4
 487              	 .comm button_config,8,4
 488              	 .comm led_config,8,4
 489              	 .comm dipswitch_config,8,4
 490              	 .comm gpio_config,8,4
 491              	 .comm iic_config,8,4
 492              	 .comm eru1_etl2_config,8,4
 493              	 .comm eru1_ogu3_config,4,4
 494              	 .comm eru0_etl2_config,8,4
 495              	 .comm eru0_ogu2_config,4,4
 496              	 .comm rtc_sda_config,8,4
 497              	 .comm rtc_scl_config,8,4
 498              	 .comm eru_io_config,8,4
 499              	 .comm eru_mfp_config,8,4
 500              	 .comm geenix_sel_config,8,4
 501              	 .comm geenix_tx_config,8,4
 502              	 .comm geenix_rx_config,8,4
 503              	 .comm geenix_config,12,4
 504              	 .comm rs232_tx_config,8,4
 505              	 .comm rs232_rx_config,8,4
 506              	 .comm rs232_config,12,4
 507              	 .comm buffer,300,4
 508              	 .comm ErrorBeingHandled,1,1
 509              	 .comm flag_standby,1,1
 510              	 .comm IsPerformingPrecharge,1,1
 511              	 .comm recEspCommIsHalt,1,1
 512              	 .comm esp32IsHandShake,1,1
 513              	 .comm recbmsIsHandShake,1,1
 514              	 .comm sysTickFlag,1,1
 515              	 .comm system_start,1,1
 516              	 .comm pvHShake,8,4
 517              	 .comm esp32HShake,8,4
 518              	 .comm buttonHShake,8,4
 519              	 .comm controlFlag,6,4
 520              	 .comm flag_pcs,1,1
 521              	 .comm flag_pcsBlockIsStandby,1,1
 522              	 .comm pcsBmsStatus,4,4
 523              	 .comm bmsSensor,8,4
 524              	 .comm pcsVoltages,8,4
 525              	 .comm pcsCurrents,8,4
 526              	 .comm pcsPowers,8,4
 527              	 .comm pcsMiscs,4,4
 528              	 .comm pcsSystemStatus,5,4
 529              	 .comm pcsDCgridStatus,4,4
 530              	 .comm pcsACinvStatus,4,4
 531              	 .comm pcsPVconvStatus,4,4
 532              	 .comm pcsBatconvStatus,4,4
 533              	 .comm flag_pdu,1,1
 534              	 .comm flag_pdu_adc,1,1
 535              	 .comm pduSensorRaw,8,4
 536              	 .comm pduSensorAvg,20,4
 537              	 .comm pduSensor,16,4
 538              	 .comm flag_button,1,1
 539              	 .comm flag_error,1,1
 540              	 .comm flag_misc,1,1
 541              	 .comm flag_rs232,1,1
 542              	 .comm rtcDate,4,4
 543              	 .comm rtcTime,3,4
 544              	 .comm flag_rtc,1,1
 545              	 .comm flag_esp32,1,1
 546              	 .comm enable_bt,1,1
 547              	 .comm btData,44,4
 548              	 .comm esp32DataPack,92,4
 549              	 .comm batPackData,8,4
 550              	 .comm temporaryStatus,1,1
 551              	 .comm soc_f,4,4
 552              	 .comm ocv,4,4
 553              	 .comm genix_send,1,1
 554              	 .comm isPeriphMode,1,1
 555              	 .comm isStartHShake,1,1
 556              	 .comm isHShakeValid,1,1
 557              	 .comm NTPdata,200,4
 558              	 .section .text.PCS_Connection_Init,"ax",%progbits
 559              	 .align 2
 560              	 .global PCS_Connection_Init
 561              	 .code 16
 562              	 .thumb_func
 564              	PCS_Connection_Init:
 565              	.LFB362:
 566              	 .file 3 "../DeviceObject/pcs/pcs_operation.c"
   1:../DeviceObject/pcs/pcs_operation.c **** /*
   2:../DeviceObject/pcs/pcs_operation.c ****  * pcs_operation.c
   3:../DeviceObject/pcs/pcs_operation.c ****  *
   4:../DeviceObject/pcs/pcs_operation.c ****  *  Created on: Oct 28, 2019
   5:../DeviceObject/pcs/pcs_operation.c ****  *      Author: lenovo
   6:../DeviceObject/pcs/pcs_operation.c ****  */
   7:../DeviceObject/pcs/pcs_operation.c **** 
   8:../DeviceObject/pcs/pcs_operation.c **** #include "pcs_operation.h"
   9:../DeviceObject/pcs/pcs_operation.c **** #include "xmc_uart.h"
  10:../DeviceObject/pcs/pcs_operation.c **** 
  11:../DeviceObject/pcs/pcs_operation.c **** #include "global_var.h"
  12:../DeviceObject/pcs/pcs_operation.c **** 
  13:../DeviceObject/pcs/pcs_operation.c **** void PCS_Connection_Init(void)
  14:../DeviceObject/pcs/pcs_operation.c **** {
 567              	 .loc 3 14 0
 568              	 .cfi_startproc
 569 0000 80B5     	 push {r7,lr}
 570              	.LCFI24:
 571              	 .cfi_def_cfa_offset 8
 572              	 .cfi_offset 7,-8
 573              	 .cfi_offset 14,-4
 574 0002 00AF     	 add r7,sp,#0
 575              	.LCFI25:
 576              	 .cfi_def_cfa_register 7
  15:../DeviceObject/pcs/pcs_operation.c **** 	/* Configure CAN Module */
  16:../DeviceObject/pcs/pcs_operation.c **** 	XMC_GPIO_Init(CAN0_TXD, &CAN0_txd_config);
 577              	 .loc 3 16 0
 578 0004 314A     	 ldr r2,.L17
 579 0006 324B     	 ldr r3,.L17+4
 580 0008 101C     	 mov r0,r2
 581 000a 0521     	 mov r1,#5
 582 000c 1A1C     	 mov r2,r3
 583 000e FFF7FEFF 	 bl XMC_GPIO_Init
  17:../DeviceObject/pcs/pcs_operation.c **** 	XMC_GPIO_Init(CAN0_RXD, &CAN0_rxd_config);
 584              	 .loc 3 17 0
 585 0012 2E4A     	 ldr r2,.L17
 586 0014 2F4B     	 ldr r3,.L17+8
 587 0016 101C     	 mov r0,r2
 588 0018 0421     	 mov r1,#4
 589 001a 1A1C     	 mov r2,r3
 590 001c FFF7FEFF 	 bl XMC_GPIO_Init
  18:../DeviceObject/pcs/pcs_operation.c **** 
  19:../DeviceObject/pcs/pcs_operation.c **** 	XMC_CAN_Init(CAN, XMC_CAN_CANCLKSRC_MCLK, 11000000);
 591              	 .loc 3 19 0
 592 0020 2D4A     	 ldr r2,.L17+12
 593 0022 2E4B     	 ldr r3,.L17+16
 594 0024 101C     	 mov r0,r2
 595 0026 0121     	 mov r1,#1
 596 0028 1A1C     	 mov r2,r3
 597 002a FFF7FEFF 	 bl XMC_CAN_Init
  20:../DeviceObject/pcs/pcs_operation.c **** 
  21:../DeviceObject/pcs/pcs_operation.c **** 	XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0);
 598              	 .loc 3 21 0
 599 002e 2C4B     	 ldr r3,.L17+20
 600 0030 181C     	 mov r0,r3
 601 0032 FFF7FEFF 	 bl XMC_CAN_NODE_EnableConfigurationChange
  22:../DeviceObject/pcs/pcs_operation.c **** 	XMC_CAN_NODE_SetReceiveInput(CAN_NODE0, XMC_CAN_NODE_RECEIVE_INPUT_RXDCA);
 602              	 .loc 3 22 0
 603 0036 2A4B     	 ldr r3,.L17+20
 604 0038 181C     	 mov r0,r3
 605 003a 0021     	 mov r1,#0
 606 003c FFF7FEFF 	 bl XMC_CAN_NODE_SetReceiveInput
  23:../DeviceObject/pcs/pcs_operation.c **** 	XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0);
 607              	 .loc 3 23 0
 608 0040 274B     	 ldr r3,.L17+20
 609 0042 181C     	 mov r0,r3
 610 0044 FFF7FEFF 	 bl XMC_CAN_NODE_DisableConfigurationChange
  24:../DeviceObject/pcs/pcs_operation.c **** 
  25:../DeviceObject/pcs/pcs_operation.c **** 	/* NODE 1 Initialization */
  26:../DeviceObject/pcs/pcs_operation.c **** 	XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0);
 611              	 .loc 3 26 0
 612 0048 254B     	 ldr r3,.L17+20
 613 004a 181C     	 mov r0,r3
 614 004c FFF7FEFF 	 bl XMC_CAN_NODE_EnableConfigurationChange
  27:../DeviceObject/pcs/pcs_operation.c **** 	XMC_CAN_NODE_NominalBitTimeConfigure(CAN_NODE0,&can_baud);
 615              	 .loc 3 27 0
 616 0050 234A     	 ldr r2,.L17+20
 617 0052 244B     	 ldr r3,.L17+24
 618 0054 101C     	 mov r0,r2
 619 0056 191C     	 mov r1,r3
 620 0058 FFF7FEFF 	 bl XMC_CAN_NODE_NominalBitTimeConfigure
  28:../DeviceObject/pcs/pcs_operation.c **** 	XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0);
 621              	 .loc 3 28 0
 622 005c 204B     	 ldr r3,.L17+20
 623 005e 181C     	 mov r0,r3
 624 0060 FFF7FEFF 	 bl XMC_CAN_NODE_DisableConfigurationChange
  29:../DeviceObject/pcs/pcs_operation.c **** 
  30:../DeviceObject/pcs/pcs_operation.c **** 	XMC_CAN_MO_Config(&msgObjToPCS);
 625              	 .loc 3 30 0
 626 0064 204B     	 ldr r3,.L17+28
 627 0066 181C     	 mov r0,r3
 628 0068 FFF7FEFF 	 bl XMC_CAN_MO_Config
  31:../DeviceObject/pcs/pcs_operation.c **** 	XMC_CAN_MO_Config(&msgObjFromPCS);
 629              	 .loc 3 31 0
 630 006c 1F4B     	 ldr r3,.L17+32
 631 006e 181C     	 mov r0,r3
 632 0070 FFF7FEFF 	 bl XMC_CAN_MO_Config
  32:../DeviceObject/pcs/pcs_operation.c **** 
  33:../DeviceObject/pcs/pcs_operation.c **** 	/* Enable receive event */
  34:../DeviceObject/pcs/pcs_operation.c **** 	XMC_CAN_MO_EnableEvent(&msgObjFromPCS, XMC_CAN_MO_EVENT_RECEIVE);
 633              	 .loc 3 34 0
 634 0074 1D4A     	 ldr r2,.L17+32
 635 0076 8023     	 mov r3,#128
 636 0078 5B02     	 lsl r3,r3,#9
 637 007a 101C     	 mov r0,r2
 638 007c 191C     	 mov r1,r3
 639 007e FFF7FEFF 	 bl XMC_CAN_MO_EnableEvent
  35:../DeviceObject/pcs/pcs_operation.c **** 
  36:../DeviceObject/pcs/pcs_operation.c **** 	/* Set receive interrupt Service request number */
  37:../DeviceObject/pcs/pcs_operation.c **** 	XMC_SCU_SetInterruptControl(7, XMC_SCU_IRQCTRL_CAN0_SR3_IRQ7);
 640              	 .loc 3 37 0
 641 0082 1B4B     	 ldr r3,.L17+36
 642 0084 0720     	 mov r0,#7
 643 0086 191C     	 mov r1,r3
 644 0088 FFF7FEFF 	 bl XMC_SCU_SetInterruptControl
  38:../DeviceObject/pcs/pcs_operation.c **** 	XMC_CAN_MO_SetEventNodePointer(&msgObjFromPCS, XMC_CAN_MO_POINTER_EVENT_RECEIVE, 3);
 645              	 .loc 3 38 0
 646 008c 174B     	 ldr r3,.L17+32
 647 008e 181C     	 mov r0,r3
 648 0090 0021     	 mov r1,#0
 649 0092 0322     	 mov r2,#3
 650 0094 FFF7FEFF 	 bl XMC_CAN_MO_SetEventNodePointer
  39:../DeviceObject/pcs/pcs_operation.c **** 	NVIC_SetPriority(IRQ7_IRQn, 1);
 651              	 .loc 3 39 0
 652 0098 0720     	 mov r0,#7
 653 009a 0121     	 mov r1,#1
 654 009c FFF7FEFF 	 bl __NVIC_SetPriority
  40:../DeviceObject/pcs/pcs_operation.c **** 	NVIC_EnableIRQ(IRQ7_IRQn);
 655              	 .loc 3 40 0
 656 00a0 0720     	 mov r0,#7
 657 00a2 FFF7FEFF 	 bl __NVIC_EnableIRQ
  41:../DeviceObject/pcs/pcs_operation.c **** 
  42:../DeviceObject/pcs/pcs_operation.c **** 	XMC_CAN_AllocateMOtoNodeList(CAN,0,4);
 658              	 .loc 3 42 0
 659 00a6 0C4B     	 ldr r3,.L17+12
 660 00a8 181C     	 mov r0,r3
 661 00aa 0021     	 mov r1,#0
 662 00ac 0422     	 mov r2,#4
 663 00ae FFF7FEFF 	 bl XMC_CAN_AllocateMOtoNodeList
  43:../DeviceObject/pcs/pcs_operation.c **** 	XMC_CAN_AllocateMOtoNodeList(CAN,0,2);
 664              	 .loc 3 43 0
 665 00b2 094B     	 ldr r3,.L17+12
 666 00b4 181C     	 mov r0,r3
 667 00b6 0021     	 mov r1,#0
 668 00b8 0222     	 mov r2,#2
 669 00ba FFF7FEFF 	 bl XMC_CAN_AllocateMOtoNodeList
  44:../DeviceObject/pcs/pcs_operation.c **** 	XMC_CAN_NODE_ResetInitBit(CAN_NODE0);
 670              	 .loc 3 44 0
 671 00be 084B     	 ldr r3,.L17+20
 672 00c0 181C     	 mov r0,r3
 673 00c2 FFF7FEFF 	 bl XMC_CAN_NODE_ResetInitBit
  45:../DeviceObject/pcs/pcs_operation.c **** }
 674              	 .loc 3 45 0
 675 00c6 BD46     	 mov sp,r7
 676              	 
 677 00c8 80BD     	 pop {r7,pc}
 678              	.L18:
 679 00ca C046     	 .align 2
 680              	.L17:
 681 00cc 00000440 	 .word 1074003968
 682 00d0 00000000 	 .word CAN0_txd_config
 683 00d4 00000000 	 .word CAN0_rxd_config
 684 00d8 00000450 	 .word 1342439424
 685 00dc C0D8A700 	 .word 11000000
 686 00e0 00020450 	 .word 1342439936
 687 00e4 00000000 	 .word can_baud
 688 00e8 00000000 	 .word msgObjToPCS
 689 00ec 00000000 	 .word msgObjFromPCS
 690 00f0 01070000 	 .word 1793
 691              	 .cfi_endproc
 692              	.LFE362:
 694              	 .section .text.PCS_BMSTransmitToPCS,"ax",%progbits
 695              	 .align 2
 696              	 .global PCS_BMSTransmitToPCS
 697              	 .code 16
 698              	 .thumb_func
 700              	PCS_BMSTransmitToPCS:
 701              	.LFB363:
  46:../DeviceObject/pcs/pcs_operation.c **** 
  47:../DeviceObject/pcs/pcs_operation.c **** void PCS_BMSTransmitToPCS(uint32_t id, PCS_BMS_STATUS_t *bmsStatus, BMS_PARAMETER_t *bmsParam)
  48:../DeviceObject/pcs/pcs_operation.c **** {
 702              	 .loc 3 48 0
 703              	 .cfi_startproc
 704 0000 80B5     	 push {r7,lr}
 705              	.LCFI26:
 706              	 .cfi_def_cfa_offset 8
 707              	 .cfi_offset 7,-8
 708              	 .cfi_offset 14,-4
 709 0002 84B0     	 sub sp,sp,#16
 710              	.LCFI27:
 711              	 .cfi_def_cfa_offset 24
 712 0004 00AF     	 add r7,sp,#0
 713              	.LCFI28:
 714              	 .cfi_def_cfa_register 7
 715 0006 F860     	 str r0,[r7,#12]
 716 0008 B960     	 str r1,[r7,#8]
 717 000a 7A60     	 str r2,[r7,#4]
  49:../DeviceObject/pcs/pcs_operation.c **** 	switch(id)
 718              	 .loc 3 49 0
 719 000c FB68     	 ldr r3,[r7,#12]
 720 000e 8022     	 mov r2,#128
 721 0010 5200     	 lsl r2,r2,#1
 722 0012 9342     	 cmp r3,r2
 723 0014 04D0     	 beq .L21
 724 0016 0222     	 mov r2,#2
 725 0018 FF32     	 add r2,r2,#255
 726 001a 9342     	 cmp r3,r2
 727 001c 37D0     	 beq .L22
  50:../DeviceObject/pcs/pcs_operation.c **** 	{
  51:../DeviceObject/pcs/pcs_operation.c **** 		case (0x100)	:
  52:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_identifier 	 = id;
  53:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[0] = 0x00;
  54:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[1] = bmsStatus->bms_status;
  55:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[2] = 0x00;
  56:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[3] = bmsStatus->bms_pcs_command;
  57:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[4] = 0x00;
  58:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[5] = 0x00;
  59:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[5]|= (bmsStatus->bms_precharge_relay<<1) | bmsStatus->bms_main_relay;
  60:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[6] = 0x00;
  61:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[7] = 0x00;
  62:../DeviceObject/pcs/pcs_operation.c **** 			break;
  63:../DeviceObject/pcs/pcs_operation.c **** 		case (0x101)	:
  64:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_identifier 	 = id;
  65:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[0] = (uint8_t)(bmsParam->soc>>8);
  66:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[1] = (uint8_t)(bmsParam->soc);
  67:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[2] = (uint8_t)(bmsParam->vbat>>8);
  68:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[3] = (uint8_t)(bmsParam->vbat);
  69:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[4] = (uint8_t)(bmsParam->ibat>>8);
  70:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[5] = (uint8_t)(bmsParam->ibat);
  71:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[6] = (uint8_t)(bmsParam->tempbat>>8);
  72:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[7] = (uint8_t)(bmsParam->tempbat);
  73:../DeviceObject/pcs/pcs_operation.c **** 			break;
  74:../DeviceObject/pcs/pcs_operation.c **** 		default		:
  75:../DeviceObject/pcs/pcs_operation.c **** 			break;
 728              	 .loc 3 75 0
 729 001e 72E0     	 b .L23
 730              	.L21:
  52:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[0] = 0x00;
 731              	 .loc 3 52 0
 732 0020 FB68     	 ldr r3,[r7,#12]
 733 0022 DB00     	 lsl r3,r3,#3
 734 0024 DA08     	 lsr r2,r3,#3
 735 0026 3D4B     	 ldr r3,.L24
 736 0028 D200     	 lsl r2,r2,#3
 737 002a D208     	 lsr r2,r2,#3
 738 002c 5968     	 ldr r1,[r3,#4]
 739 002e 490F     	 lsr r1,r1,#29
 740 0030 4907     	 lsl r1,r1,#29
 741 0032 0A43     	 orr r2,r1
 742 0034 5A60     	 str r2,[r3,#4]
  53:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[1] = bmsStatus->bms_status;
 743              	 .loc 3 53 0
 744 0036 394B     	 ldr r3,.L24
 745 0038 0022     	 mov r2,#0
 746 003a 1A74     	 strb r2,[r3,#16]
  54:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[2] = 0x00;
 747              	 .loc 3 54 0
 748 003c BB68     	 ldr r3,[r7,#8]
 749 003e 1A78     	 ldrb r2,[r3]
 750 0040 364B     	 ldr r3,.L24
 751 0042 5A74     	 strb r2,[r3,#17]
  55:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[3] = bmsStatus->bms_pcs_command;
 752              	 .loc 3 55 0
 753 0044 354B     	 ldr r3,.L24
 754 0046 0022     	 mov r2,#0
 755 0048 9A74     	 strb r2,[r3,#18]
  56:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[4] = 0x00;
 756              	 .loc 3 56 0
 757 004a BB68     	 ldr r3,[r7,#8]
 758 004c 5A78     	 ldrb r2,[r3,#1]
 759 004e 334B     	 ldr r3,.L24
 760 0050 DA74     	 strb r2,[r3,#19]
  57:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[5] = 0x00;
 761              	 .loc 3 57 0
 762 0052 324B     	 ldr r3,.L24
 763 0054 0022     	 mov r2,#0
 764 0056 1A75     	 strb r2,[r3,#20]
  58:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[5]|= (bmsStatus->bms_precharge_relay<<1) | bmsStatus->bms_main_relay;
 765              	 .loc 3 58 0
 766 0058 304B     	 ldr r3,.L24
 767 005a 0022     	 mov r2,#0
 768 005c 5A75     	 strb r2,[r3,#21]
  59:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[6] = 0x00;
 769              	 .loc 3 59 0
 770 005e 2F4B     	 ldr r3,.L24
 771 0060 5B7D     	 ldrb r3,[r3,#21]
 772 0062 DAB2     	 uxtb r2,r3
 773 0064 BB68     	 ldr r3,[r7,#8]
 774 0066 DB78     	 ldrb r3,[r3,#3]
 775 0068 5B00     	 lsl r3,r3,#1
 776 006a D9B2     	 uxtb r1,r3
 777 006c BB68     	 ldr r3,[r7,#8]
 778 006e 9B78     	 ldrb r3,[r3,#2]
 779 0070 DBB2     	 uxtb r3,r3
 780 0072 0B43     	 orr r3,r1
 781 0074 DBB2     	 uxtb r3,r3
 782 0076 1343     	 orr r3,r2
 783 0078 DBB2     	 uxtb r3,r3
 784 007a DAB2     	 uxtb r2,r3
 785 007c 274B     	 ldr r3,.L24
 786 007e 5A75     	 strb r2,[r3,#21]
  60:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[7] = 0x00;
 787              	 .loc 3 60 0
 788 0080 264B     	 ldr r3,.L24
 789 0082 0022     	 mov r2,#0
 790 0084 9A75     	 strb r2,[r3,#22]
  61:../DeviceObject/pcs/pcs_operation.c **** 			break;
 791              	 .loc 3 61 0
 792 0086 254B     	 ldr r3,.L24
 793 0088 0022     	 mov r2,#0
 794 008a DA75     	 strb r2,[r3,#23]
  62:../DeviceObject/pcs/pcs_operation.c **** 		case (0x101)	:
 795              	 .loc 3 62 0
 796 008c 3BE0     	 b .L23
 797              	.L22:
  64:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[0] = (uint8_t)(bmsParam->soc>>8);
 798              	 .loc 3 64 0
 799 008e FB68     	 ldr r3,[r7,#12]
 800 0090 DB00     	 lsl r3,r3,#3
 801 0092 DA08     	 lsr r2,r3,#3
 802 0094 214B     	 ldr r3,.L24
 803 0096 D200     	 lsl r2,r2,#3
 804 0098 D208     	 lsr r2,r2,#3
 805 009a 5968     	 ldr r1,[r3,#4]
 806 009c 490F     	 lsr r1,r1,#29
 807 009e 4907     	 lsl r1,r1,#29
 808 00a0 0A43     	 orr r2,r1
 809 00a2 5A60     	 str r2,[r3,#4]
  65:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[1] = (uint8_t)(bmsParam->soc);
 810              	 .loc 3 65 0
 811 00a4 7B68     	 ldr r3,[r7,#4]
 812 00a6 1B88     	 ldrh r3,[r3]
 813 00a8 1B0A     	 lsr r3,r3,#8
 814 00aa 9BB2     	 uxth r3,r3
 815 00ac DAB2     	 uxtb r2,r3
 816 00ae 1B4B     	 ldr r3,.L24
 817 00b0 1A74     	 strb r2,[r3,#16]
  66:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[2] = (uint8_t)(bmsParam->vbat>>8);
 818              	 .loc 3 66 0
 819 00b2 7B68     	 ldr r3,[r7,#4]
 820 00b4 1B88     	 ldrh r3,[r3]
 821 00b6 DAB2     	 uxtb r2,r3
 822 00b8 184B     	 ldr r3,.L24
 823 00ba 5A74     	 strb r2,[r3,#17]
  67:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[3] = (uint8_t)(bmsParam->vbat);
 824              	 .loc 3 67 0
 825 00bc 7B68     	 ldr r3,[r7,#4]
 826 00be 5B88     	 ldrh r3,[r3,#2]
 827 00c0 1B0A     	 lsr r3,r3,#8
 828 00c2 9BB2     	 uxth r3,r3
 829 00c4 DAB2     	 uxtb r2,r3
 830 00c6 154B     	 ldr r3,.L24
 831 00c8 9A74     	 strb r2,[r3,#18]
  68:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[4] = (uint8_t)(bmsParam->ibat>>8);
 832              	 .loc 3 68 0
 833 00ca 7B68     	 ldr r3,[r7,#4]
 834 00cc 5B88     	 ldrh r3,[r3,#2]
 835 00ce DAB2     	 uxtb r2,r3
 836 00d0 124B     	 ldr r3,.L24
 837 00d2 DA74     	 strb r2,[r3,#19]
  69:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[5] = (uint8_t)(bmsParam->ibat);
 838              	 .loc 3 69 0
 839 00d4 7B68     	 ldr r3,[r7,#4]
 840 00d6 9B88     	 ldrh r3,[r3,#4]
 841 00d8 1B0A     	 lsr r3,r3,#8
 842 00da 9BB2     	 uxth r3,r3
 843 00dc DAB2     	 uxtb r2,r3
 844 00de 0F4B     	 ldr r3,.L24
 845 00e0 1A75     	 strb r2,[r3,#20]
  70:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[6] = (uint8_t)(bmsParam->tempbat>>8);
 846              	 .loc 3 70 0
 847 00e2 7B68     	 ldr r3,[r7,#4]
 848 00e4 9B88     	 ldrh r3,[r3,#4]
 849 00e6 DAB2     	 uxtb r2,r3
 850 00e8 0C4B     	 ldr r3,.L24
 851 00ea 5A75     	 strb r2,[r3,#21]
  71:../DeviceObject/pcs/pcs_operation.c **** 			msgObjToPCS.can_data_byte[7] = (uint8_t)(bmsParam->tempbat);
 852              	 .loc 3 71 0
 853 00ec 7B68     	 ldr r3,[r7,#4]
 854 00ee DB88     	 ldrh r3,[r3,#6]
 855 00f0 1B0A     	 lsr r3,r3,#8
 856 00f2 9BB2     	 uxth r3,r3
 857 00f4 DAB2     	 uxtb r2,r3
 858 00f6 094B     	 ldr r3,.L24
 859 00f8 9A75     	 strb r2,[r3,#22]
  72:../DeviceObject/pcs/pcs_operation.c **** 			break;
 860              	 .loc 3 72 0
 861 00fa 7B68     	 ldr r3,[r7,#4]
 862 00fc DB88     	 ldrh r3,[r3,#6]
 863 00fe DAB2     	 uxtb r2,r3
 864 0100 064B     	 ldr r3,.L24
 865 0102 DA75     	 strb r2,[r3,#23]
  73:../DeviceObject/pcs/pcs_operation.c **** 		default		:
 866              	 .loc 3 73 0
 867 0104 C046     	 mov r8,r8
 868              	.L23:
  76:../DeviceObject/pcs/pcs_operation.c **** 	}
  77:../DeviceObject/pcs/pcs_operation.c **** 	XMC_CAN_MO_Config(&msgObjToPCS);
 869              	 .loc 3 77 0
 870 0106 054B     	 ldr r3,.L24
 871 0108 181C     	 mov r0,r3
 872 010a FFF7FEFF 	 bl XMC_CAN_MO_Config
  78:../DeviceObject/pcs/pcs_operation.c **** 	XMC_CAN_MO_Transmit(&msgObjToPCS);
 873              	 .loc 3 78 0
 874 010e 034B     	 ldr r3,.L24
 875 0110 181C     	 mov r0,r3
 876 0112 FFF7FEFF 	 bl XMC_CAN_MO_Transmit
  79:../DeviceObject/pcs/pcs_operation.c **** }
 877              	 .loc 3 79 0
 878 0116 BD46     	 mov sp,r7
 879 0118 04B0     	 add sp,sp,#16
 880              	 
 881 011a 80BD     	 pop {r7,pc}
 882              	.L25:
 883              	 .align 2
 884              	.L24:
 885 011c 00000000 	 .word msgObjToPCS
 886              	 .cfi_endproc
 887              	.LFE363:
 889              	 .section .text.PCS_GetPCSStatus,"ax",%progbits
 890              	 .align 2
 891              	 .global PCS_GetPCSStatus
 892              	 .code 16
 893              	 .thumb_func
 895              	PCS_GetPCSStatus:
 896              	.LFB364:
  80:../DeviceObject/pcs/pcs_operation.c **** 
  81:../DeviceObject/pcs/pcs_operation.c **** PCS_STATUS_t PCS_GetPCSStatus(XMC_CAN_MO_t *can_m0_obj)
  82:../DeviceObject/pcs/pcs_operation.c **** {
 897              	 .loc 3 82 0
 898              	 .cfi_startproc
 899 0000 80B5     	 push {r7,lr}
 900              	.LCFI29:
 901              	 .cfi_def_cfa_offset 8
 902              	 .cfi_offset 7,-8
 903              	 .cfi_offset 14,-4
 904 0002 84B0     	 sub sp,sp,#16
 905              	.LCFI30:
 906              	 .cfi_def_cfa_offset 24
 907 0004 00AF     	 add r7,sp,#0
 908              	.LCFI31:
 909              	 .cfi_def_cfa_register 7
 910 0006 7860     	 str r0,[r7,#4]
 911 0008 3960     	 str r1,[r7]
  83:../DeviceObject/pcs/pcs_operation.c **** 	PCS_STATUS_t param;
  84:../DeviceObject/pcs/pcs_operation.c **** 	uint8_t 	 status;
  85:../DeviceObject/pcs/pcs_operation.c **** 	status = can_m0_obj->can_data_byte[0];
 912              	 .loc 3 85 0
 913 000a 0F23     	 mov r3,#15
 914 000c FB18     	 add r3,r7,r3
 915 000e 3A68     	 ldr r2,[r7]
 916 0010 127C     	 ldrb r2,[r2,#16]
 917 0012 1A70     	 strb r2,[r3]
  86:../DeviceObject/pcs/pcs_operation.c **** 	if(status<=3) 						{param.pcs_system_status = PCS_STAT_INITIAL;}
 918              	 .loc 3 86 0
 919 0014 0F23     	 mov r3,#15
 920 0016 FB18     	 add r3,r7,r3
 921 0018 1B78     	 ldrb r3,[r3]
 922 001a 032B     	 cmp r3,#3
 923 001c 04D8     	 bhi .L27
 924              	 .loc 3 86 0 is_stmt 0 discriminator 1
 925 001e 0823     	 mov r3,#8
 926 0020 FB18     	 add r3,r7,r3
 927 0022 0022     	 mov r2,#0
 928 0024 1A70     	 strb r2,[r3]
 929 0026 17E0     	 b .L28
 930              	.L27:
  87:../DeviceObject/pcs/pcs_operation.c **** 	else if((status==4) || (status==5)) {param.pcs_system_status = PCS_STAT_STANDBY;}
 931              	 .loc 3 87 0 is_stmt 1
 932 0028 0F23     	 mov r3,#15
 933 002a FB18     	 add r3,r7,r3
 934 002c 1B78     	 ldrb r3,[r3]
 935 002e 042B     	 cmp r3,#4
 936 0030 04D0     	 beq .L29
 937              	 .loc 3 87 0 is_stmt 0 discriminator 2
 938 0032 0F23     	 mov r3,#15
 939 0034 FB18     	 add r3,r7,r3
 940 0036 1B78     	 ldrb r3,[r3]
 941 0038 052B     	 cmp r3,#5
 942 003a 04D1     	 bne .L30
 943              	.L29:
 944              	 .loc 3 87 0 discriminator 3
 945 003c 0823     	 mov r3,#8
 946 003e FB18     	 add r3,r7,r3
 947 0040 0422     	 mov r2,#4
 948 0042 1A70     	 strb r2,[r3]
 949 0044 08E0     	 b .L28
 950              	.L30:
  88:../DeviceObject/pcs/pcs_operation.c **** 	else if(status==6) 					{param.pcs_system_status = PCS_STAT_RUNNING;}
 951              	 .loc 3 88 0 is_stmt 1
 952 0046 0F23     	 mov r3,#15
 953 0048 FB18     	 add r3,r7,r3
 954 004a 1B78     	 ldrb r3,[r3]
 955 004c 062B     	 cmp r3,#6
 956 004e 03D1     	 bne .L28
 957              	 .loc 3 88 0 is_stmt 0 discriminator 1
 958 0050 0823     	 mov r3,#8
 959 0052 FB18     	 add r3,r7,r3
 960 0054 0622     	 mov r2,#6
 961 0056 1A70     	 strb r2,[r3]
 962              	.L28:
  89:../DeviceObject/pcs/pcs_operation.c **** 
  90:../DeviceObject/pcs/pcs_operation.c **** 	status = can_m0_obj->can_data_byte[1];
 963              	 .loc 3 90 0 is_stmt 1
 964 0058 0F23     	 mov r3,#15
 965 005a FB18     	 add r3,r7,r3
 966 005c 3A68     	 ldr r2,[r7]
 967 005e 527C     	 ldrb r2,[r2,#17]
 968 0060 1A70     	 strb r2,[r3]
  91:../DeviceObject/pcs/pcs_operation.c **** 	if(status)	{param.pcs_precharge_IsComplete = true;}
 969              	 .loc 3 91 0
 970 0062 0F23     	 mov r3,#15
 971 0064 FB18     	 add r3,r7,r3
 972 0066 1B78     	 ldrb r3,[r3]
 973 0068 002B     	 cmp r3,#0
 974 006a 04D0     	 beq .L31
 975              	 .loc 3 91 0 is_stmt 0 discriminator 1
 976 006c 0823     	 mov r3,#8
 977 006e FB18     	 add r3,r7,r3
 978 0070 0122     	 mov r2,#1
 979 0072 5A70     	 strb r2,[r3,#1]
 980 0074 03E0     	 b .L32
 981              	.L31:
  92:../DeviceObject/pcs/pcs_operation.c **** 	else 		{param.pcs_precharge_IsComplete = false;}
 982              	 .loc 3 92 0 is_stmt 1
 983 0076 0823     	 mov r3,#8
 984 0078 FB18     	 add r3,r7,r3
 985 007a 0022     	 mov r2,#0
 986 007c 5A70     	 strb r2,[r3,#1]
 987              	.L32:
  93:../DeviceObject/pcs/pcs_operation.c **** 
  94:../DeviceObject/pcs/pcs_operation.c **** 	param.pcs_system_warning = PCS_WARN_NORMAL;
 988              	 .loc 3 94 0
 989 007e 0823     	 mov r3,#8
 990 0080 FB18     	 add r3,r7,r3
 991 0082 0022     	 mov r2,#0
 992 0084 9A70     	 strb r2,[r3,#2]
  95:../DeviceObject/pcs/pcs_operation.c **** 	param.pcs_system_pcsIsStandBy = false;
 993              	 .loc 3 95 0
 994 0086 0823     	 mov r3,#8
 995 0088 FB18     	 add r3,r7,r3
 996 008a 0022     	 mov r2,#0
 997 008c 1A71     	 strb r2,[r3,#4]
  96:../DeviceObject/pcs/pcs_operation.c **** 
  97:../DeviceObject/pcs/pcs_operation.c **** 	/* check the warning status */
  98:../DeviceObject/pcs/pcs_operation.c **** 	status = can_m0_obj->can_data_byte[2];
 998              	 .loc 3 98 0
 999 008e 0F23     	 mov r3,#15
 1000 0090 FB18     	 add r3,r7,r3
 1001 0092 3A68     	 ldr r2,[r7]
 1002 0094 927C     	 ldrb r2,[r2,#18]
 1003 0096 1A70     	 strb r2,[r3]
  99:../DeviceObject/pcs/pcs_operation.c **** 	if((status>>6)&0x01)
 1004              	 .loc 3 99 0
 1005 0098 0F23     	 mov r3,#15
 1006 009a FB18     	 add r3,r7,r3
 1007 009c 1B78     	 ldrb r3,[r3]
 1008 009e 9B09     	 lsr r3,r3,#6
 1009 00a0 DBB2     	 uxtb r3,r3
 1010 00a2 1A1C     	 mov r2,r3
 1011 00a4 0123     	 mov r3,#1
 1012 00a6 1340     	 and r3,r2
 1013 00a8 07D0     	 beq .L33
 100:../DeviceObject/pcs/pcs_operation.c **** 	{
 101:../DeviceObject/pcs/pcs_operation.c **** 		param.pcs_system_warning = PCS_WARN_PCS_OT;
 1014              	 .loc 3 101 0
 1015 00aa 0823     	 mov r3,#8
 1016 00ac FB18     	 add r3,r7,r3
 1017 00ae 0622     	 mov r2,#6
 1018 00b0 9A70     	 strb r2,[r3,#2]
 102:../DeviceObject/pcs/pcs_operation.c **** 		param.pcs_system_pcsIsStandBy = true;
 1019              	 .loc 3 102 0
 1020 00b2 0823     	 mov r3,#8
 1021 00b4 FB18     	 add r3,r7,r3
 1022 00b6 0122     	 mov r2,#1
 1023 00b8 1A71     	 strb r2,[r3,#4]
 1024              	.L33:
 103:../DeviceObject/pcs/pcs_operation.c **** 	}
 104:../DeviceObject/pcs/pcs_operation.c **** 
 105:../DeviceObject/pcs/pcs_operation.c **** 	status = can_m0_obj->can_data_byte[3];
 1025              	 .loc 3 105 0
 1026 00ba 0F23     	 mov r3,#15
 1027 00bc FB18     	 add r3,r7,r3
 1028 00be 3A68     	 ldr r2,[r7]
 1029 00c0 D27C     	 ldrb r2,[r2,#19]
 1030 00c2 1A70     	 strb r2,[r3]
 106:../DeviceObject/pcs/pcs_operation.c **** 	if((status>>7)&0x01)
 1031              	 .loc 3 106 0
 1032 00c4 0F23     	 mov r3,#15
 1033 00c6 FB18     	 add r3,r7,r3
 1034 00c8 1B78     	 ldrb r3,[r3]
 1035 00ca DB09     	 lsr r3,r3,#7
 1036 00cc DBB2     	 uxtb r3,r3
 1037 00ce 1A1C     	 mov r2,r3
 1038 00d0 0123     	 mov r3,#1
 1039 00d2 1340     	 and r3,r2
 1040 00d4 07D0     	 beq .L34
 107:../DeviceObject/pcs/pcs_operation.c **** 	{
 108:../DeviceObject/pcs/pcs_operation.c **** 		param.pcs_system_warning = PCS_WARN_BAT_OVCHG;
 1041              	 .loc 3 108 0
 1042 00d6 0823     	 mov r3,#8
 1043 00d8 FB18     	 add r3,r7,r3
 1044 00da 0122     	 mov r2,#1
 1045 00dc 9A70     	 strb r2,[r3,#2]
 109:../DeviceObject/pcs/pcs_operation.c **** 		param.pcs_system_pcsIsStandBy = true;
 1046              	 .loc 3 109 0
 1047 00de 0823     	 mov r3,#8
 1048 00e0 FB18     	 add r3,r7,r3
 1049 00e2 0122     	 mov r2,#1
 1050 00e4 1A71     	 strb r2,[r3,#4]
 1051              	.L34:
 110:../DeviceObject/pcs/pcs_operation.c **** 	}
 111:../DeviceObject/pcs/pcs_operation.c **** 	if((status>>6)&0x01){param.pcs_system_warning = PCS_WARN_BAT_CHGSUP;}
 1052              	 .loc 3 111 0
 1053 00e6 0F23     	 mov r3,#15
 1054 00e8 FB18     	 add r3,r7,r3
 1055 00ea 1B78     	 ldrb r3,[r3]
 1056 00ec 9B09     	 lsr r3,r3,#6
 1057 00ee DBB2     	 uxtb r3,r3
 1058 00f0 1A1C     	 mov r2,r3
 1059 00f2 0123     	 mov r3,#1
 1060 00f4 1340     	 and r3,r2
 1061 00f6 03D0     	 beq .L35
 1062              	 .loc 3 111 0 is_stmt 0 discriminator 1
 1063 00f8 0823     	 mov r3,#8
 1064 00fa FB18     	 add r3,r7,r3
 1065 00fc 0222     	 mov r2,#2
 1066 00fe 9A70     	 strb r2,[r3,#2]
 1067              	.L35:
 112:../DeviceObject/pcs/pcs_operation.c **** 	if((status>>5)&0x01){param.pcs_system_warning = PCS_WARN_BAT_DSGSUP;}
 1068              	 .loc 3 112 0 is_stmt 1
 1069 0100 0F23     	 mov r3,#15
 1070 0102 FB18     	 add r3,r7,r3
 1071 0104 1B78     	 ldrb r3,[r3]
 1072 0106 5B09     	 lsr r3,r3,#5
 1073 0108 DBB2     	 uxtb r3,r3
 1074 010a 1A1C     	 mov r2,r3
 1075 010c 0123     	 mov r3,#1
 1076 010e 1340     	 and r3,r2
 1077 0110 03D0     	 beq .L36
 1078              	 .loc 3 112 0 is_stmt 0 discriminator 1
 1079 0112 0823     	 mov r3,#8
 1080 0114 FB18     	 add r3,r7,r3
 1081 0116 0322     	 mov r2,#3
 1082 0118 9A70     	 strb r2,[r3,#2]
 1083              	.L36:
 113:../DeviceObject/pcs/pcs_operation.c **** 	if((status>>4)&0x01){param.pcs_system_warning = PCS_WARN_BAT_OVDSG;}
 1084              	 .loc 3 113 0 is_stmt 1
 1085 011a 0F23     	 mov r3,#15
 1086 011c FB18     	 add r3,r7,r3
 1087 011e 1B78     	 ldrb r3,[r3]
 1088 0120 1B09     	 lsr r3,r3,#4
 1089 0122 DBB2     	 uxtb r3,r3
 1090 0124 1A1C     	 mov r2,r3
 1091 0126 0123     	 mov r3,#1
 1092 0128 1340     	 and r3,r2
 1093 012a 03D0     	 beq .L37
 1094              	 .loc 3 113 0 is_stmt 0 discriminator 1
 1095 012c 0823     	 mov r3,#8
 1096 012e FB18     	 add r3,r7,r3
 1097 0130 0422     	 mov r2,#4
 1098 0132 9A70     	 strb r2,[r3,#2]
 1099              	.L37:
 114:../DeviceObject/pcs/pcs_operation.c **** 	if((status>>3)&0x01)
 1100              	 .loc 3 114 0 is_stmt 1
 1101 0134 0F23     	 mov r3,#15
 1102 0136 FB18     	 add r3,r7,r3
 1103 0138 1B78     	 ldrb r3,[r3]
 1104 013a DB08     	 lsr r3,r3,#3
 1105 013c DBB2     	 uxtb r3,r3
 1106 013e 1A1C     	 mov r2,r3
 1107 0140 0123     	 mov r3,#1
 1108 0142 1340     	 and r3,r2
 1109 0144 07D0     	 beq .L38
 115:../DeviceObject/pcs/pcs_operation.c **** 	{
 116:../DeviceObject/pcs/pcs_operation.c **** 		param.pcs_system_warning = PCS_WARN_BAT_OVDSG2;
 1110              	 .loc 3 116 0
 1111 0146 0823     	 mov r3,#8
 1112 0148 FB18     	 add r3,r7,r3
 1113 014a 0522     	 mov r2,#5
 1114 014c 9A70     	 strb r2,[r3,#2]
 117:../DeviceObject/pcs/pcs_operation.c **** 		param.pcs_system_pcsIsStandBy = true;
 1115              	 .loc 3 117 0
 1116 014e 0823     	 mov r3,#8
 1117 0150 FB18     	 add r3,r7,r3
 1118 0152 0122     	 mov r2,#1
 1119 0154 1A71     	 strb r2,[r3,#4]
 1120              	.L38:
 118:../DeviceObject/pcs/pcs_operation.c **** 	}
 119:../DeviceObject/pcs/pcs_operation.c **** 
 120:../DeviceObject/pcs/pcs_operation.c **** 	return param;
 1121              	 .loc 3 120 0
 1122 0156 7A68     	 ldr r2,[r7,#4]
 1123 0158 0823     	 mov r3,#8
 1124 015a FB18     	 add r3,r7,r3
 1125 015c 111C     	 mov r1,r2
 1126 015e 1A1C     	 mov r2,r3
 1127 0160 0523     	 mov r3,#5
 1128 0162 081C     	 mov r0,r1
 1129 0164 111C     	 mov r1,r2
 1130 0166 1A1C     	 mov r2,r3
 1131 0168 FFF7FEFF 	 bl memcpy
 121:../DeviceObject/pcs/pcs_operation.c **** }
 1132              	 .loc 3 121 0
 1133 016c 7868     	 ldr r0,[r7,#4]
 1134 016e BD46     	 mov sp,r7
 1135 0170 04B0     	 add sp,sp,#16
 1136              	 
 1137 0172 80BD     	 pop {r7,pc}
 1138              	 .cfi_endproc
 1139              	.LFE364:
 1141              	 .section .text.PCS_GetDCGridStatus,"ax",%progbits
 1142              	 .align 2
 1143              	 .global PCS_GetDCGridStatus
 1144              	 .code 16
 1145              	 .thumb_func
 1147              	PCS_GetDCGridStatus:
 1148              	.LFB365:
 122:../DeviceObject/pcs/pcs_operation.c **** 
 123:../DeviceObject/pcs/pcs_operation.c **** DCGRID_STATUS_t 	PCS_GetDCGridStatus(XMC_CAN_MO_t *can_m0_obj)
 124:../DeviceObject/pcs/pcs_operation.c **** {
 1149              	 .loc 3 124 0
 1150              	 .cfi_startproc
 1151 0000 80B5     	 push {r7,lr}
 1152              	.LCFI32:
 1153              	 .cfi_def_cfa_offset 8
 1154              	 .cfi_offset 7,-8
 1155              	 .cfi_offset 14,-4
 1156 0002 86B0     	 sub sp,sp,#24
 1157              	.LCFI33:
 1158              	 .cfi_def_cfa_offset 32
 1159 0004 00AF     	 add r7,sp,#0
 1160              	.LCFI34:
 1161              	 .cfi_def_cfa_register 7
 1162 0006 7860     	 str r0,[r7,#4]
 125:../DeviceObject/pcs/pcs_operation.c **** 	DCGRID_STATUS_t param;
 126:../DeviceObject/pcs/pcs_operation.c **** 	uint8_t			status;
 127:../DeviceObject/pcs/pcs_operation.c **** 
 128:../DeviceObject/pcs/pcs_operation.c **** 	param.dcgrid_system_pcsIsStandBy = false;
 1163              	 .loc 3 128 0
 1164 0008 0C23     	 mov r3,#12
 1165 000a FB18     	 add r3,r7,r3
 1166 000c 0022     	 mov r2,#0
 1167 000e DA70     	 strb r2,[r3,#3]
 129:../DeviceObject/pcs/pcs_operation.c **** 
 130:../DeviceObject/pcs/pcs_operation.c **** 	status = can_m0_obj->can_data_byte[0];
 1168              	 .loc 3 130 0
 1169 0010 1723     	 mov r3,#23
 1170 0012 FB18     	 add r3,r7,r3
 1171 0014 7A68     	 ldr r2,[r7,#4]
 1172 0016 127C     	 ldrb r2,[r2,#16]
 1173 0018 1A70     	 strb r2,[r3]
 131:../DeviceObject/pcs/pcs_operation.c **** 	if		((status<=3)||(status==6)||(status==7)) {param.dcgrid_system_status = GRID_STAT_NOT_RUNNING;}
 1174              	 .loc 3 131 0
 1175 001a 1723     	 mov r3,#23
 1176 001c FB18     	 add r3,r7,r3
 1177 001e 1B78     	 ldrb r3,[r3]
 1178 0020 032B     	 cmp r3,#3
 1179 0022 09D9     	 bls .L41
 1180              	 .loc 3 131 0 is_stmt 0 discriminator 2
 1181 0024 1723     	 mov r3,#23
 1182 0026 FB18     	 add r3,r7,r3
 1183 0028 1B78     	 ldrb r3,[r3]
 1184 002a 062B     	 cmp r3,#6
 1185 002c 04D0     	 beq .L41
 1186              	 .loc 3 131 0 discriminator 4
 1187 002e 1723     	 mov r3,#23
 1188 0030 FB18     	 add r3,r7,r3
 1189 0032 1B78     	 ldrb r3,[r3]
 1190 0034 072B     	 cmp r3,#7
 1191 0036 04D1     	 bne .L42
 1192              	.L41:
 1193              	 .loc 3 131 0 discriminator 5
 1194 0038 0C23     	 mov r3,#12
 1195 003a FB18     	 add r3,r7,r3
 1196 003c 0022     	 mov r2,#0
 1197 003e 1A70     	 strb r2,[r3]
 1198 0040 1CE0     	 b .L43
 1199              	.L42:
 132:../DeviceObject/pcs/pcs_operation.c **** 	else if ((status==4)||(status ==5)) 			{param.dcgrid_system_status = GRID_STAT_CHG;}
 1200              	 .loc 3 132 0 is_stmt 1
 1201 0042 1723     	 mov r3,#23
 1202 0044 FB18     	 add r3,r7,r3
 1203 0046 1B78     	 ldrb r3,[r3]
 1204 0048 042B     	 cmp r3,#4
 1205 004a 04D0     	 beq .L44
 1206              	 .loc 3 132 0 is_stmt 0 discriminator 2
 1207 004c 1723     	 mov r3,#23
 1208 004e FB18     	 add r3,r7,r3
 1209 0050 1B78     	 ldrb r3,[r3]
 1210 0052 052B     	 cmp r3,#5
 1211 0054 04D1     	 bne .L45
 1212              	.L44:
 1213              	 .loc 3 132 0 discriminator 3
 1214 0056 0C23     	 mov r3,#12
 1215 0058 FB18     	 add r3,r7,r3
 1216 005a 0422     	 mov r2,#4
 1217 005c 1A70     	 strb r2,[r3]
 1218 005e 0DE0     	 b .L43
 1219              	.L45:
 133:../DeviceObject/pcs/pcs_operation.c **** 	else if ((status==8)||(status ==9)) 			{param.dcgrid_system_status = GRID_STAT_DSG;}
 1220              	 .loc 3 133 0 is_stmt 1
 1221 0060 1723     	 mov r3,#23
 1222 0062 FB18     	 add r3,r7,r3
 1223 0064 1B78     	 ldrb r3,[r3]
 1224 0066 082B     	 cmp r3,#8
 1225 0068 04D0     	 beq .L46
 1226              	 .loc 3 133 0 is_stmt 0 discriminator 2
 1227 006a 1723     	 mov r3,#23
 1228 006c FB18     	 add r3,r7,r3
 1229 006e 1B78     	 ldrb r3,[r3]
 1230 0070 092B     	 cmp r3,#9
 1231 0072 03D1     	 bne .L43
 1232              	.L46:
 1233              	 .loc 3 133 0 discriminator 3
 1234 0074 0C23     	 mov r3,#12
 1235 0076 FB18     	 add r3,r7,r3
 1236 0078 0822     	 mov r2,#8
 1237 007a 1A70     	 strb r2,[r3]
 1238              	.L43:
 134:../DeviceObject/pcs/pcs_operation.c **** 
 135:../DeviceObject/pcs/pcs_operation.c **** 	param.dcgrid_system_warning=GRID_WARN_NORMAL;
 1239              	 .loc 3 135 0 is_stmt 1
 1240 007c 0C23     	 mov r3,#12
 1241 007e FB18     	 add r3,r7,r3
 1242 0080 0022     	 mov r2,#0
 1243 0082 5A70     	 strb r2,[r3,#1]
 136:../DeviceObject/pcs/pcs_operation.c **** 
 137:../DeviceObject/pcs/pcs_operation.c **** 	/* check the warning status */
 138:../DeviceObject/pcs/pcs_operation.c **** 	status = can_m0_obj->can_data_byte[2];
 1244              	 .loc 3 138 0
 1245 0084 1723     	 mov r3,#23
 1246 0086 FB18     	 add r3,r7,r3
 1247 0088 7A68     	 ldr r2,[r7,#4]
 1248 008a 927C     	 ldrb r2,[r2,#18]
 1249 008c 1A70     	 strb r2,[r3]
 139:../DeviceObject/pcs/pcs_operation.c **** 	if((status>>7)&0x01){param.dcgrid_system_warning=GRID_WARN_OV;}
 1250              	 .loc 3 139 0
 1251 008e 1723     	 mov r3,#23
 1252 0090 FB18     	 add r3,r7,r3
 1253 0092 1B78     	 ldrb r3,[r3]
 1254 0094 DB09     	 lsr r3,r3,#7
 1255 0096 DBB2     	 uxtb r3,r3
 1256 0098 1A1C     	 mov r2,r3
 1257 009a 0123     	 mov r3,#1
 1258 009c 1340     	 and r3,r2
 1259 009e 03D0     	 beq .L47
 1260              	 .loc 3 139 0 is_stmt 0 discriminator 1
 1261 00a0 0C23     	 mov r3,#12
 1262 00a2 FB18     	 add r3,r7,r3
 1263 00a4 0122     	 mov r2,#1
 1264 00a6 5A70     	 strb r2,[r3,#1]
 1265              	.L47:
 140:../DeviceObject/pcs/pcs_operation.c **** 	if((status>>6)&0x01){param.dcgrid_system_warning=GRID_WARN_OC;}
 1266              	 .loc 3 140 0 is_stmt 1
 1267 00a8 1723     	 mov r3,#23
 1268 00aa FB18     	 add r3,r7,r3
 1269 00ac 1B78     	 ldrb r3,[r3]
 1270 00ae 9B09     	 lsr r3,r3,#6
 1271 00b0 DBB2     	 uxtb r3,r3
 1272 00b2 1A1C     	 mov r2,r3
 1273 00b4 0123     	 mov r3,#1
 1274 00b6 1340     	 and r3,r2
 1275 00b8 03D0     	 beq .L48
 1276              	 .loc 3 140 0 is_stmt 0 discriminator 1
 1277 00ba 0C23     	 mov r3,#12
 1278 00bc FB18     	 add r3,r7,r3
 1279 00be 0222     	 mov r2,#2
 1280 00c0 5A70     	 strb r2,[r3,#1]
 1281              	.L48:
 141:../DeviceObject/pcs/pcs_operation.c **** 
 142:../DeviceObject/pcs/pcs_operation.c **** 	return param;
 1282              	 .loc 3 142 0 is_stmt 1
 1283 00c2 1023     	 mov r3,#16
 1284 00c4 FB18     	 add r3,r7,r3
 1285 00c6 0C22     	 mov r2,#12
 1286 00c8 BA18     	 add r2,r7,r2
 1287 00ca 1268     	 ldr r2,[r2]
 1288 00cc 1A60     	 str r2,[r3]
 1289 00ce 1023     	 mov r3,#16
 1290 00d0 FA18     	 add r2,r7,r3
 1291 00d2 0023     	 mov r3,#0
 1292 00d4 1178     	 ldrb r1,[r2]
 1293 00d6 FF20     	 mov r0,#255
 1294 00d8 0140     	 and r1,r0
 1295 00da FF20     	 mov r0,#255
 1296 00dc 8343     	 bic r3,r0
 1297 00de 0B43     	 orr r3,r1
 1298 00e0 5178     	 ldrb r1,[r2,#1]
 1299 00e2 FF20     	 mov r0,#255
 1300 00e4 0140     	 and r1,r0
 1301 00e6 0902     	 lsl r1,r1,#8
 1302 00e8 0948     	 ldr r0,.L50
 1303 00ea 0340     	 and r3,r0
 1304 00ec 0B43     	 orr r3,r1
 1305 00ee 9178     	 ldrb r1,[r2,#2]
 1306 00f0 FF20     	 mov r0,#255
 1307 00f2 0140     	 and r1,r0
 1308 00f4 0904     	 lsl r1,r1,#16
 1309 00f6 0748     	 ldr r0,.L50+4
 1310 00f8 0340     	 and r3,r0
 1311 00fa 0B43     	 orr r3,r1
 1312 00fc D278     	 ldrb r2,[r2,#3]
 1313 00fe 1206     	 lsl r2,r2,#24
 1314 0100 1B02     	 lsl r3,r3,#8
 1315 0102 1B0A     	 lsr r3,r3,#8
 1316 0104 1343     	 orr r3,r2
 143:../DeviceObject/pcs/pcs_operation.c **** }
 1317              	 .loc 3 143 0
 1318 0106 181C     	 mov r0,r3
 1319 0108 BD46     	 mov sp,r7
 1320 010a 06B0     	 add sp,sp,#24
 1321              	 
 1322 010c 80BD     	 pop {r7,pc}
 1323              	.L51:
 1324 010e C046     	 .align 2
 1325              	.L50:
 1326 0110 FF00FFFF 	 .word -65281
 1327 0114 FFFF00FF 	 .word -16711681
 1328              	 .cfi_endproc
 1329              	.LFE365:
 1331              	 .section .text.PCS_GetACInvStatus,"ax",%progbits
 1332              	 .align 2
 1333              	 .global PCS_GetACInvStatus
 1334              	 .code 16
 1335              	 .thumb_func
 1337              	PCS_GetACInvStatus:
 1338              	.LFB366:
 144:../DeviceObject/pcs/pcs_operation.c **** 
 145:../DeviceObject/pcs/pcs_operation.c **** ACINV_STATUS_t 		PCS_GetACInvStatus(XMC_CAN_MO_t *can_m0_obj)
 146:../DeviceObject/pcs/pcs_operation.c **** {
 1339              	 .loc 3 146 0
 1340              	 .cfi_startproc
 1341 0000 80B5     	 push {r7,lr}
 1342              	.LCFI35:
 1343              	 .cfi_def_cfa_offset 8
 1344              	 .cfi_offset 7,-8
 1345              	 .cfi_offset 14,-4
 1346 0002 86B0     	 sub sp,sp,#24
 1347              	.LCFI36:
 1348              	 .cfi_def_cfa_offset 32
 1349 0004 00AF     	 add r7,sp,#0
 1350              	.LCFI37:
 1351              	 .cfi_def_cfa_register 7
 1352 0006 7860     	 str r0,[r7,#4]
 147:../DeviceObject/pcs/pcs_operation.c **** 	ACINV_STATUS_t param;
 148:../DeviceObject/pcs/pcs_operation.c **** 	uint8_t		   status;
 149:../DeviceObject/pcs/pcs_operation.c **** 
 150:../DeviceObject/pcs/pcs_operation.c **** 	status = can_m0_obj->can_data_byte[0];
 1353              	 .loc 3 150 0
 1354 0008 1723     	 mov r3,#23
 1355 000a FB18     	 add r3,r7,r3
 1356 000c 7A68     	 ldr r2,[r7,#4]
 1357 000e 127C     	 ldrb r2,[r2,#16]
 1358 0010 1A70     	 strb r2,[r3]
 151:../DeviceObject/pcs/pcs_operation.c **** 	if((status<=3)||(status==11)||(status==13))	{param.acinv_system_status = INV_STAT_NOT_RUNNING;}
 1359              	 .loc 3 151 0
 1360 0012 1723     	 mov r3,#23
 1361 0014 FB18     	 add r3,r7,r3
 1362 0016 1B78     	 ldrb r3,[r3]
 1363 0018 032B     	 cmp r3,#3
 1364 001a 09D9     	 bls .L53
 1365              	 .loc 3 151 0 is_stmt 0 discriminator 2
 1366 001c 1723     	 mov r3,#23
 1367 001e FB18     	 add r3,r7,r3
 1368 0020 1B78     	 ldrb r3,[r3]
 1369 0022 0B2B     	 cmp r3,#11
 1370 0024 04D0     	 beq .L53
 1371              	 .loc 3 151 0 discriminator 4
 1372 0026 1723     	 mov r3,#23
 1373 0028 FB18     	 add r3,r7,r3
 1374 002a 1B78     	 ldrb r3,[r3]
 1375 002c 0D2B     	 cmp r3,#13
 1376 002e 04D1     	 bne .L54
 1377              	.L53:
 1378              	 .loc 3 151 0 discriminator 5
 1379 0030 0C23     	 mov r3,#12
 1380 0032 FB18     	 add r3,r7,r3
 1381 0034 0022     	 mov r2,#0
 1382 0036 1A70     	 strb r2,[r3]
 1383 0038 12E0     	 b .L55
 1384              	.L54:
 152:../DeviceObject/pcs/pcs_operation.c **** 	else if((status==14)||(status ==15))  		{param.acinv_system_status = INV_STAT_RUNNING;}
 1385              	 .loc 3 152 0 is_stmt 1
 1386 003a 1723     	 mov r3,#23
 1387 003c FB18     	 add r3,r7,r3
 1388 003e 1B78     	 ldrb r3,[r3]
 1389 0040 0E2B     	 cmp r3,#14
 1390 0042 04D0     	 beq .L56
 1391              	 .loc 3 152 0 is_stmt 0 discriminator 2
 1392 0044 1723     	 mov r3,#23
 1393 0046 FB18     	 add r3,r7,r3
 1394 0048 1B78     	 ldrb r3,[r3]
 1395 004a 0F2B     	 cmp r3,#15
 1396 004c 04D1     	 bne .L57
 1397              	.L56:
 1398              	 .loc 3 152 0 discriminator 3
 1399 004e 0C23     	 mov r3,#12
 1400 0050 FB18     	 add r3,r7,r3
 1401 0052 0E22     	 mov r2,#14
 1402 0054 1A70     	 strb r2,[r3]
 1403 0056 03E0     	 b .L55
 1404              	.L57:
 153:../DeviceObject/pcs/pcs_operation.c **** 	else							 			{param.acinv_system_status = INV_STAT_NONE;}
 1405              	 .loc 3 153 0 is_stmt 1
 1406 0058 0C23     	 mov r3,#12
 1407 005a FB18     	 add r3,r7,r3
 1408 005c 0422     	 mov r2,#4
 1409 005e 1A70     	 strb r2,[r3]
 1410              	.L55:
 154:../DeviceObject/pcs/pcs_operation.c **** 
 155:../DeviceObject/pcs/pcs_operation.c **** 	param.acinv_system_warning = INV_WARN_NORMAL;
 1411              	 .loc 3 155 0
 1412 0060 0C23     	 mov r3,#12
 1413 0062 FB18     	 add r3,r7,r3
 1414 0064 0022     	 mov r2,#0
 1415 0066 5A70     	 strb r2,[r3,#1]
 156:../DeviceObject/pcs/pcs_operation.c **** 	param.acinv_system_pcsIsStandBy = false;
 1416              	 .loc 3 156 0
 1417 0068 0C23     	 mov r3,#12
 1418 006a FB18     	 add r3,r7,r3
 1419 006c 0022     	 mov r2,#0
 1420 006e DA70     	 strb r2,[r3,#3]
 157:../DeviceObject/pcs/pcs_operation.c **** 
 158:../DeviceObject/pcs/pcs_operation.c **** 	/* check the warning status */
 159:../DeviceObject/pcs/pcs_operation.c **** 	status = can_m0_obj->can_data_byte[2];
 1421              	 .loc 3 159 0
 1422 0070 1723     	 mov r3,#23
 1423 0072 FB18     	 add r3,r7,r3
 1424 0074 7A68     	 ldr r2,[r7,#4]
 1425 0076 927C     	 ldrb r2,[r2,#18]
 1426 0078 1A70     	 strb r2,[r3]
 160:../DeviceObject/pcs/pcs_operation.c **** 	if((status>>7)&0x01)
 1427              	 .loc 3 160 0
 1428 007a 1723     	 mov r3,#23
 1429 007c FB18     	 add r3,r7,r3
 1430 007e 1B78     	 ldrb r3,[r3]
 1431 0080 DB09     	 lsr r3,r3,#7
 1432 0082 DBB2     	 uxtb r3,r3
 1433 0084 1A1C     	 mov r2,r3
 1434 0086 0123     	 mov r3,#1
 1435 0088 1340     	 and r3,r2
 1436 008a 07D0     	 beq .L58
 161:../DeviceObject/pcs/pcs_operation.c **** 		{
 162:../DeviceObject/pcs/pcs_operation.c **** 			param.acinv_system_warning = INV_WARN_MCU_OV;
 1437              	 .loc 3 162 0
 1438 008c 0C23     	 mov r3,#12
 1439 008e FB18     	 add r3,r7,r3
 1440 0090 0122     	 mov r2,#1
 1441 0092 5A70     	 strb r2,[r3,#1]
 163:../DeviceObject/pcs/pcs_operation.c **** 			param.acinv_system_pcsIsStandBy = true;
 1442              	 .loc 3 163 0
 1443 0094 0C23     	 mov r3,#12
 1444 0096 FB18     	 add r3,r7,r3
 1445 0098 0122     	 mov r2,#1
 1446 009a DA70     	 strb r2,[r3,#3]
 1447              	.L58:
 164:../DeviceObject/pcs/pcs_operation.c **** 		}
 165:../DeviceObject/pcs/pcs_operation.c **** 	if((status>>3)&0x01){param.acinv_system_warning = INV_WARN_OT;}
 1448              	 .loc 3 165 0
 1449 009c 1723     	 mov r3,#23
 1450 009e FB18     	 add r3,r7,r3
 1451 00a0 1B78     	 ldrb r3,[r3]
 1452 00a2 DB08     	 lsr r3,r3,#3
 1453 00a4 DBB2     	 uxtb r3,r3
 1454 00a6 1A1C     	 mov r2,r3
 1455 00a8 0123     	 mov r3,#1
 1456 00aa 1340     	 and r3,r2
 1457 00ac 03D0     	 beq .L59
 1458              	 .loc 3 165 0 is_stmt 0 discriminator 1
 1459 00ae 0C23     	 mov r3,#12
 1460 00b0 FB18     	 add r3,r7,r3
 1461 00b2 0222     	 mov r2,#2
 1462 00b4 5A70     	 strb r2,[r3,#1]
 1463              	.L59:
 166:../DeviceObject/pcs/pcs_operation.c **** 	if((status>>2)&0x01){param.acinv_system_warning = INV_WARN_OV;}
 1464              	 .loc 3 166 0 is_stmt 1
 1465 00b6 1723     	 mov r3,#23
 1466 00b8 FB18     	 add r3,r7,r3
 1467 00ba 1B78     	 ldrb r3,[r3]
 1468 00bc 9B08     	 lsr r3,r3,#2
 1469 00be DBB2     	 uxtb r3,r3
 1470 00c0 1A1C     	 mov r2,r3
 1471 00c2 0123     	 mov r3,#1
 1472 00c4 1340     	 and r3,r2
 1473 00c6 03D0     	 beq .L60
 1474              	 .loc 3 166 0 is_stmt 0 discriminator 1
 1475 00c8 0C23     	 mov r3,#12
 1476 00ca FB18     	 add r3,r7,r3
 1477 00cc 0322     	 mov r2,#3
 1478 00ce 5A70     	 strb r2,[r3,#1]
 1479              	.L60:
 167:../DeviceObject/pcs/pcs_operation.c **** 	if((status>>1)&0x01){param.acinv_system_warning = INV_WARN_UV;}
 1480              	 .loc 3 167 0 is_stmt 1
 1481 00d0 1723     	 mov r3,#23
 1482 00d2 FB18     	 add r3,r7,r3
 1483 00d4 1B78     	 ldrb r3,[r3]
 1484 00d6 5B08     	 lsr r3,r3,#1
 1485 00d8 DBB2     	 uxtb r3,r3
 1486 00da 1A1C     	 mov r2,r3
 1487 00dc 0123     	 mov r3,#1
 1488 00de 1340     	 and r3,r2
 1489 00e0 03D0     	 beq .L61
 1490              	 .loc 3 167 0 is_stmt 0 discriminator 1
 1491 00e2 0C23     	 mov r3,#12
 1492 00e4 FB18     	 add r3,r7,r3
 1493 00e6 0422     	 mov r2,#4
 1494 00e8 5A70     	 strb r2,[r3,#1]
 1495              	.L61:
 168:../DeviceObject/pcs/pcs_operation.c **** 	if((status)&0x01){param.acinv_system_warning = INV_WARN_OL;}
 1496              	 .loc 3 168 0 is_stmt 1
 1497 00ea 1723     	 mov r3,#23
 1498 00ec FB18     	 add r3,r7,r3
 1499 00ee 1B78     	 ldrb r3,[r3]
 1500 00f0 0122     	 mov r2,#1
 1501 00f2 1340     	 and r3,r2
 1502 00f4 03D0     	 beq .L62
 1503              	 .loc 3 168 0 is_stmt 0 discriminator 1
 1504 00f6 0C23     	 mov r3,#12
 1505 00f8 FB18     	 add r3,r7,r3
 1506 00fa 0522     	 mov r2,#5
 1507 00fc 5A70     	 strb r2,[r3,#1]
 1508              	.L62:
 169:../DeviceObject/pcs/pcs_operation.c **** 
 170:../DeviceObject/pcs/pcs_operation.c **** 	return param;
 1509              	 .loc 3 170 0 is_stmt 1
 1510 00fe 1023     	 mov r3,#16
 1511 0100 FB18     	 add r3,r7,r3
 1512 0102 0C22     	 mov r2,#12
 1513 0104 BA18     	 add r2,r7,r2
 1514 0106 1268     	 ldr r2,[r2]
 1515 0108 1A60     	 str r2,[r3]
 1516 010a 1023     	 mov r3,#16
 1517 010c FA18     	 add r2,r7,r3
 1518 010e 0023     	 mov r3,#0
 1519 0110 1178     	 ldrb r1,[r2]
 1520 0112 FF20     	 mov r0,#255
 1521 0114 0140     	 and r1,r0
 1522 0116 FF20     	 mov r0,#255
 1523 0118 8343     	 bic r3,r0
 1524 011a 0B43     	 orr r3,r1
 1525 011c 5178     	 ldrb r1,[r2,#1]
 1526 011e FF20     	 mov r0,#255
 1527 0120 0140     	 and r1,r0
 1528 0122 0902     	 lsl r1,r1,#8
 1529 0124 0948     	 ldr r0,.L64
 1530 0126 0340     	 and r3,r0
 1531 0128 0B43     	 orr r3,r1
 1532 012a 9178     	 ldrb r1,[r2,#2]
 1533 012c FF20     	 mov r0,#255
 1534 012e 0140     	 and r1,r0
 1535 0130 0904     	 lsl r1,r1,#16
 1536 0132 0748     	 ldr r0,.L64+4
 1537 0134 0340     	 and r3,r0
 1538 0136 0B43     	 orr r3,r1
 1539 0138 D278     	 ldrb r2,[r2,#3]
 1540 013a 1206     	 lsl r2,r2,#24
 1541 013c 1B02     	 lsl r3,r3,#8
 1542 013e 1B0A     	 lsr r3,r3,#8
 1543 0140 1343     	 orr r3,r2
 171:../DeviceObject/pcs/pcs_operation.c **** }
 1544              	 .loc 3 171 0
 1545 0142 181C     	 mov r0,r3
 1546 0144 BD46     	 mov sp,r7
 1547 0146 06B0     	 add sp,sp,#24
 1548              	 
 1549 0148 80BD     	 pop {r7,pc}
 1550              	.L65:
 1551 014a C046     	 .align 2
 1552              	.L64:
 1553 014c FF00FFFF 	 .word -65281
 1554 0150 FFFF00FF 	 .word -16711681
 1555              	 .cfi_endproc
 1556              	.LFE366:
 1558              	 .section .text.PCS_GetPVConvStatus,"ax",%progbits
 1559              	 .align 2
 1560              	 .global PCS_GetPVConvStatus
 1561              	 .code 16
 1562              	 .thumb_func
 1564              	PCS_GetPVConvStatus:
 1565              	.LFB367:
 172:../DeviceObject/pcs/pcs_operation.c **** 
 173:../DeviceObject/pcs/pcs_operation.c **** PVCONV_STATUS_t 	PCS_GetPVConvStatus(XMC_CAN_MO_t *can_m0_obj)
 174:../DeviceObject/pcs/pcs_operation.c **** {
 1566              	 .loc 3 174 0
 1567              	 .cfi_startproc
 1568 0000 80B5     	 push {r7,lr}
 1569              	.LCFI38:
 1570              	 .cfi_def_cfa_offset 8
 1571              	 .cfi_offset 7,-8
 1572              	 .cfi_offset 14,-4
 1573 0002 86B0     	 sub sp,sp,#24
 1574              	.LCFI39:
 1575              	 .cfi_def_cfa_offset 32
 1576 0004 00AF     	 add r7,sp,#0
 1577              	.LCFI40:
 1578              	 .cfi_def_cfa_register 7
 1579 0006 7860     	 str r0,[r7,#4]
 175:../DeviceObject/pcs/pcs_operation.c **** 	PVCONV_STATUS_t param;
 176:../DeviceObject/pcs/pcs_operation.c **** 	uint8_t		   status;
 177:../DeviceObject/pcs/pcs_operation.c **** 	status = can_m0_obj->can_data_byte[0];
 1580              	 .loc 3 177 0
 1581 0008 1723     	 mov r3,#23
 1582 000a FB18     	 add r3,r7,r3
 1583 000c 7A68     	 ldr r2,[r7,#4]
 1584 000e 127C     	 ldrb r2,[r2,#16]
 1585 0010 1A70     	 strb r2,[r3]
 178:../DeviceObject/pcs/pcs_operation.c **** 	if 		(status<=3) 				{param.pvconv_system_status = PV_STAT_NOT_RUNNING;}
 1586              	 .loc 3 178 0
 1587 0012 1723     	 mov r3,#23
 1588 0014 FB18     	 add r3,r7,r3
 1589 0016 1B78     	 ldrb r3,[r3]
 1590 0018 032B     	 cmp r3,#3
 1591 001a 04D8     	 bhi .L67
 1592              	 .loc 3 178 0 is_stmt 0 discriminator 1
 1593 001c 0C23     	 mov r3,#12
 1594 001e FB18     	 add r3,r7,r3
 1595 0020 0022     	 mov r2,#0
 1596 0022 1A70     	 strb r2,[r3]
 1597 0024 0DE0     	 b .L68
 1598              	.L67:
 179:../DeviceObject/pcs/pcs_operation.c **** 	else if ((status==4)||(status ==5))	{param.pvconv_system_status = PV_STAT_RUNNING;}
 1599              	 .loc 3 179 0 is_stmt 1
 1600 0026 1723     	 mov r3,#23
 1601 0028 FB18     	 add r3,r7,r3
 1602 002a 1B78     	 ldrb r3,[r3]
 1603 002c 042B     	 cmp r3,#4
 1604 002e 04D0     	 beq .L69
 1605              	 .loc 3 179 0 is_stmt 0 discriminator 2
 1606 0030 1723     	 mov r3,#23
 1607 0032 FB18     	 add r3,r7,r3
 1608 0034 1B78     	 ldrb r3,[r3]
 1609 0036 052B     	 cmp r3,#5
 1610 0038 03D1     	 bne .L68
 1611              	.L69:
 1612              	 .loc 3 179 0 discriminator 3
 1613 003a 0C23     	 mov r3,#12
 1614 003c FB18     	 add r3,r7,r3
 1615 003e 0422     	 mov r2,#4
 1616 0040 1A70     	 strb r2,[r3]
 1617              	.L68:
 180:../DeviceObject/pcs/pcs_operation.c **** 
 181:../DeviceObject/pcs/pcs_operation.c **** 	param.pvconv_system_warning = PV_WARN_NORMAL;
 1618              	 .loc 3 181 0 is_stmt 1
 1619 0042 0C23     	 mov r3,#12
 1620 0044 FB18     	 add r3,r7,r3
 1621 0046 0022     	 mov r2,#0
 1622 0048 5A70     	 strb r2,[r3,#1]
 182:../DeviceObject/pcs/pcs_operation.c **** 	param.pvconv_system_pcsIsStandBy = false;
 1623              	 .loc 3 182 0
 1624 004a 0C23     	 mov r3,#12
 1625 004c FB18     	 add r3,r7,r3
 1626 004e 0022     	 mov r2,#0
 1627 0050 DA70     	 strb r2,[r3,#3]
 183:../DeviceObject/pcs/pcs_operation.c **** 
 184:../DeviceObject/pcs/pcs_operation.c **** 	/* check the warning status */
 185:../DeviceObject/pcs/pcs_operation.c **** 	status = can_m0_obj->can_data_byte[2];
 1628              	 .loc 3 185 0
 1629 0052 1723     	 mov r3,#23
 1630 0054 FB18     	 add r3,r7,r3
 1631 0056 7A68     	 ldr r2,[r7,#4]
 1632 0058 927C     	 ldrb r2,[r2,#18]
 1633 005a 1A70     	 strb r2,[r3]
 186:../DeviceObject/pcs/pcs_operation.c **** 	if((status>>7)&0x01){param.pvconv_system_warning = PV_WARN_OV;}
 1634              	 .loc 3 186 0
 1635 005c 1723     	 mov r3,#23
 1636 005e FB18     	 add r3,r7,r3
 1637 0060 1B78     	 ldrb r3,[r3]
 1638 0062 DB09     	 lsr r3,r3,#7
 1639 0064 DBB2     	 uxtb r3,r3
 1640 0066 1A1C     	 mov r2,r3
 1641 0068 0123     	 mov r3,#1
 1642 006a 1340     	 and r3,r2
 1643 006c 03D0     	 beq .L70
 1644              	 .loc 3 186 0 is_stmt 0 discriminator 1
 1645 006e 0C23     	 mov r3,#12
 1646 0070 FB18     	 add r3,r7,r3
 1647 0072 0122     	 mov r2,#1
 1648 0074 5A70     	 strb r2,[r3,#1]
 1649              	.L70:
 187:../DeviceObject/pcs/pcs_operation.c **** 	if((status>>6)&0x01){param.pvconv_system_warning = PV_WARN_OC;}
 1650              	 .loc 3 187 0 is_stmt 1
 1651 0076 1723     	 mov r3,#23
 1652 0078 FB18     	 add r3,r7,r3
 1653 007a 1B78     	 ldrb r3,[r3]
 1654 007c 9B09     	 lsr r3,r3,#6
 1655 007e DBB2     	 uxtb r3,r3
 1656 0080 1A1C     	 mov r2,r3
 1657 0082 0123     	 mov r3,#1
 1658 0084 1340     	 and r3,r2
 1659 0086 03D0     	 beq .L71
 1660              	 .loc 3 187 0 is_stmt 0 discriminator 1
 1661 0088 0C23     	 mov r3,#12
 1662 008a FB18     	 add r3,r7,r3
 1663 008c 0222     	 mov r2,#2
 1664 008e 5A70     	 strb r2,[r3,#1]
 1665              	.L71:
 188:../DeviceObject/pcs/pcs_operation.c **** 
 189:../DeviceObject/pcs/pcs_operation.c **** 	return param;
 1666              	 .loc 3 189 0 is_stmt 1
 1667 0090 1023     	 mov r3,#16
 1668 0092 FB18     	 add r3,r7,r3
 1669 0094 0C22     	 mov r2,#12
 1670 0096 BA18     	 add r2,r7,r2
 1671 0098 1268     	 ldr r2,[r2]
 1672 009a 1A60     	 str r2,[r3]
 1673 009c 1023     	 mov r3,#16
 1674 009e FA18     	 add r2,r7,r3
 1675 00a0 0023     	 mov r3,#0
 1676 00a2 1178     	 ldrb r1,[r2]
 1677 00a4 FF20     	 mov r0,#255
 1678 00a6 0140     	 and r1,r0
 1679 00a8 FF20     	 mov r0,#255
 1680 00aa 8343     	 bic r3,r0
 1681 00ac 0B43     	 orr r3,r1
 1682 00ae 5178     	 ldrb r1,[r2,#1]
 1683 00b0 FF20     	 mov r0,#255
 1684 00b2 0140     	 and r1,r0
 1685 00b4 0902     	 lsl r1,r1,#8
 1686 00b6 0948     	 ldr r0,.L73
 1687 00b8 0340     	 and r3,r0
 1688 00ba 0B43     	 orr r3,r1
 1689 00bc 9178     	 ldrb r1,[r2,#2]
 1690 00be FF20     	 mov r0,#255
 1691 00c0 0140     	 and r1,r0
 1692 00c2 0904     	 lsl r1,r1,#16
 1693 00c4 0648     	 ldr r0,.L73+4
 1694 00c6 0340     	 and r3,r0
 1695 00c8 0B43     	 orr r3,r1
 1696 00ca D278     	 ldrb r2,[r2,#3]
 1697 00cc 1206     	 lsl r2,r2,#24
 1698 00ce 1B02     	 lsl r3,r3,#8
 1699 00d0 1B0A     	 lsr r3,r3,#8
 1700 00d2 1343     	 orr r3,r2
 190:../DeviceObject/pcs/pcs_operation.c **** }
 1701              	 .loc 3 190 0
 1702 00d4 181C     	 mov r0,r3
 1703 00d6 BD46     	 mov sp,r7
 1704 00d8 06B0     	 add sp,sp,#24
 1705              	 
 1706 00da 80BD     	 pop {r7,pc}
 1707              	.L74:
 1708              	 .align 2
 1709              	.L73:
 1710 00dc FF00FFFF 	 .word -65281
 1711 00e0 FFFF00FF 	 .word -16711681
 1712              	 .cfi_endproc
 1713              	.LFE367:
 1715              	 .section .text.PCS_GetBatConvStatus,"ax",%progbits
 1716              	 .align 2
 1717              	 .global PCS_GetBatConvStatus
 1718              	 .code 16
 1719              	 .thumb_func
 1721              	PCS_GetBatConvStatus:
 1722              	.LFB368:
 191:../DeviceObject/pcs/pcs_operation.c **** 
 192:../DeviceObject/pcs/pcs_operation.c **** BATCONV_STATUS_t 	PCS_GetBatConvStatus(XMC_CAN_MO_t *can_m0_obj)
 193:../DeviceObject/pcs/pcs_operation.c **** {
 1723              	 .loc 3 193 0
 1724              	 .cfi_startproc
 1725 0000 80B5     	 push {r7,lr}
 1726              	.LCFI41:
 1727              	 .cfi_def_cfa_offset 8
 1728              	 .cfi_offset 7,-8
 1729              	 .cfi_offset 14,-4
 1730 0002 86B0     	 sub sp,sp,#24
 1731              	.LCFI42:
 1732              	 .cfi_def_cfa_offset 32
 1733 0004 00AF     	 add r7,sp,#0
 1734              	.LCFI43:
 1735              	 .cfi_def_cfa_register 7
 1736 0006 7860     	 str r0,[r7,#4]
 194:../DeviceObject/pcs/pcs_operation.c **** 	BATCONV_STATUS_t param;
 195:../DeviceObject/pcs/pcs_operation.c **** 	uint8_t		   status;
 196:../DeviceObject/pcs/pcs_operation.c **** 	status = can_m0_obj->can_data_byte[0];
 1737              	 .loc 3 196 0
 1738 0008 1723     	 mov r3,#23
 1739 000a FB18     	 add r3,r7,r3
 1740 000c 7A68     	 ldr r2,[r7,#4]
 1741 000e 127C     	 ldrb r2,[r2,#16]
 1742 0010 1A70     	 strb r2,[r3]
 197:../DeviceObject/pcs/pcs_operation.c **** 	if (status<=3) 						{param.batconv_system_status = BATCONV_STAT_NOT_RUNNING;}
 1743              	 .loc 3 197 0
 1744 0012 1723     	 mov r3,#23
 1745 0014 FB18     	 add r3,r7,r3
 1746 0016 1B78     	 ldrb r3,[r3]
 1747 0018 032B     	 cmp r3,#3
 1748 001a 04D8     	 bhi .L76
 1749              	 .loc 3 197 0 is_stmt 0 discriminator 1
 1750 001c 0C23     	 mov r3,#12
 1751 001e FB18     	 add r3,r7,r3
 1752 0020 0022     	 mov r2,#0
 1753 0022 1A70     	 strb r2,[r3]
 1754 0024 0DE0     	 b .L77
 1755              	.L76:
 198:../DeviceObject/pcs/pcs_operation.c **** 	else if((status==4)||(status ==5))	{param.batconv_system_status = BATCONV_STAT_RUNNING;}
 1756              	 .loc 3 198 0 is_stmt 1
 1757 0026 1723     	 mov r3,#23
 1758 0028 FB18     	 add r3,r7,r3
 1759 002a 1B78     	 ldrb r3,[r3]
 1760 002c 042B     	 cmp r3,#4
 1761 002e 04D0     	 beq .L78
 1762              	 .loc 3 198 0 is_stmt 0 discriminator 2
 1763 0030 1723     	 mov r3,#23
 1764 0032 FB18     	 add r3,r7,r3
 1765 0034 1B78     	 ldrb r3,[r3]
 1766 0036 052B     	 cmp r3,#5
 1767 0038 03D1     	 bne .L77
 1768              	.L78:
 1769              	 .loc 3 198 0 discriminator 3
 1770 003a 0C23     	 mov r3,#12
 1771 003c FB18     	 add r3,r7,r3
 1772 003e 0422     	 mov r2,#4
 1773 0040 1A70     	 strb r2,[r3]
 1774              	.L77:
 199:../DeviceObject/pcs/pcs_operation.c **** 
 200:../DeviceObject/pcs/pcs_operation.c **** 	param.batconv_system_warning = BATCONV_WARN_NORMAL;
 1775              	 .loc 3 200 0 is_stmt 1
 1776 0042 0C23     	 mov r3,#12
 1777 0044 FB18     	 add r3,r7,r3
 1778 0046 0022     	 mov r2,#0
 1779 0048 5A70     	 strb r2,[r3,#1]
 201:../DeviceObject/pcs/pcs_operation.c **** 	param.batconv_system_pcsIsStandBy = false;
 1780              	 .loc 3 201 0
 1781 004a 0C23     	 mov r3,#12
 1782 004c FB18     	 add r3,r7,r3
 1783 004e 0022     	 mov r2,#0
 1784 0050 DA70     	 strb r2,[r3,#3]
 202:../DeviceObject/pcs/pcs_operation.c **** 
 203:../DeviceObject/pcs/pcs_operation.c **** 	/* check the warning status */
 204:../DeviceObject/pcs/pcs_operation.c **** 	status = can_m0_obj->can_data_byte[2];
 1785              	 .loc 3 204 0
 1786 0052 1723     	 mov r3,#23
 1787 0054 FB18     	 add r3,r7,r3
 1788 0056 7A68     	 ldr r2,[r7,#4]
 1789 0058 927C     	 ldrb r2,[r2,#18]
 1790 005a 1A70     	 strb r2,[r3]
 205:../DeviceObject/pcs/pcs_operation.c **** 	if((status>>7)&0x01)
 1791              	 .loc 3 205 0
 1792 005c 1723     	 mov r3,#23
 1793 005e FB18     	 add r3,r7,r3
 1794 0060 1B78     	 ldrb r3,[r3]
 1795 0062 DB09     	 lsr r3,r3,#7
 1796 0064 DBB2     	 uxtb r3,r3
 1797 0066 1A1C     	 mov r2,r3
 1798 0068 0123     	 mov r3,#1
 1799 006a 1340     	 and r3,r2
 1800 006c 07D0     	 beq .L79
 206:../DeviceObject/pcs/pcs_operation.c **** 		{
 207:../DeviceObject/pcs/pcs_operation.c **** 			param.batconv_system_warning = BATCONV_WARN_OV;
 1801              	 .loc 3 207 0
 1802 006e 0C23     	 mov r3,#12
 1803 0070 FB18     	 add r3,r7,r3
 1804 0072 0122     	 mov r2,#1
 1805 0074 5A70     	 strb r2,[r3,#1]
 208:../DeviceObject/pcs/pcs_operation.c **** 			param.batconv_system_pcsIsStandBy = true;
 1806              	 .loc 3 208 0
 1807 0076 0C23     	 mov r3,#12
 1808 0078 FB18     	 add r3,r7,r3
 1809 007a 0122     	 mov r2,#1
 1810 007c DA70     	 strb r2,[r3,#3]
 1811              	.L79:
 209:../DeviceObject/pcs/pcs_operation.c **** 		}
 210:../DeviceObject/pcs/pcs_operation.c **** 	if((status>>6)&0x01)
 1812              	 .loc 3 210 0
 1813 007e 1723     	 mov r3,#23
 1814 0080 FB18     	 add r3,r7,r3
 1815 0082 1B78     	 ldrb r3,[r3]
 1816 0084 9B09     	 lsr r3,r3,#6
 1817 0086 DBB2     	 uxtb r3,r3
 1818 0088 1A1C     	 mov r2,r3
 1819 008a 0123     	 mov r3,#1
 1820 008c 1340     	 and r3,r2
 1821 008e 07D0     	 beq .L80
 211:../DeviceObject/pcs/pcs_operation.c **** 		{
 212:../DeviceObject/pcs/pcs_operation.c **** 			param.batconv_system_warning = BATCONV_WARN_OC;
 1822              	 .loc 3 212 0
 1823 0090 0C23     	 mov r3,#12
 1824 0092 FB18     	 add r3,r7,r3
 1825 0094 0222     	 mov r2,#2
 1826 0096 5A70     	 strb r2,[r3,#1]
 213:../DeviceObject/pcs/pcs_operation.c **** 			param.batconv_system_pcsIsStandBy = true;
 1827              	 .loc 3 213 0
 1828 0098 0C23     	 mov r3,#12
 1829 009a FB18     	 add r3,r7,r3
 1830 009c 0122     	 mov r2,#1
 1831 009e DA70     	 strb r2,[r3,#3]
 1832              	.L80:
 214:../DeviceObject/pcs/pcs_operation.c **** 		}
 215:../DeviceObject/pcs/pcs_operation.c **** 	if((status>>5)&0x01)
 1833              	 .loc 3 215 0
 1834 00a0 1723     	 mov r3,#23
 1835 00a2 FB18     	 add r3,r7,r3
 1836 00a4 1B78     	 ldrb r3,[r3]
 1837 00a6 5B09     	 lsr r3,r3,#5
 1838 00a8 DBB2     	 uxtb r3,r3
 1839 00aa 1A1C     	 mov r2,r3
 1840 00ac 0123     	 mov r3,#1
 1841 00ae 1340     	 and r3,r2
 1842 00b0 07D0     	 beq .L81
 216:../DeviceObject/pcs/pcs_operation.c **** 		{
 217:../DeviceObject/pcs/pcs_operation.c **** 			param.batconv_system_warning = BATCONV_WARN_DCDC_OV;
 1843              	 .loc 3 217 0
 1844 00b2 0C23     	 mov r3,#12
 1845 00b4 FB18     	 add r3,r7,r3
 1846 00b6 0322     	 mov r2,#3
 1847 00b8 5A70     	 strb r2,[r3,#1]
 218:../DeviceObject/pcs/pcs_operation.c **** 			param.batconv_system_pcsIsStandBy = true;
 1848              	 .loc 3 218 0
 1849 00ba 0C23     	 mov r3,#12
 1850 00bc FB18     	 add r3,r7,r3
 1851 00be 0122     	 mov r2,#1
 1852 00c0 DA70     	 strb r2,[r3,#3]
 1853              	.L81:
 219:../DeviceObject/pcs/pcs_operation.c **** 		}
 220:../DeviceObject/pcs/pcs_operation.c **** 	if((status>>2)&0x01)
 1854              	 .loc 3 220 0
 1855 00c2 1723     	 mov r3,#23
 1856 00c4 FB18     	 add r3,r7,r3
 1857 00c6 1B78     	 ldrb r3,[r3]
 1858 00c8 9B08     	 lsr r3,r3,#2
 1859 00ca DBB2     	 uxtb r3,r3
 1860 00cc 1A1C     	 mov r2,r3
 1861 00ce 0123     	 mov r3,#1
 1862 00d0 1340     	 and r3,r2
 1863 00d2 07D0     	 beq .L82
 221:../DeviceObject/pcs/pcs_operation.c **** 		{
 222:../DeviceObject/pcs/pcs_operation.c **** 			param.batconv_system_warning = BATCONV_WARN_DCDC_OT;
 1864              	 .loc 3 222 0
 1865 00d4 0C23     	 mov r3,#12
 1866 00d6 FB18     	 add r3,r7,r3
 1867 00d8 0422     	 mov r2,#4
 1868 00da 5A70     	 strb r2,[r3,#1]
 223:../DeviceObject/pcs/pcs_operation.c **** 			param.batconv_system_pcsIsStandBy = true;
 1869              	 .loc 3 223 0
 1870 00dc 0C23     	 mov r3,#12
 1871 00de FB18     	 add r3,r7,r3
 1872 00e0 0122     	 mov r2,#1
 1873 00e2 DA70     	 strb r2,[r3,#3]
 1874              	.L82:
 224:../DeviceObject/pcs/pcs_operation.c **** 		}
 225:../DeviceObject/pcs/pcs_operation.c **** 
 226:../DeviceObject/pcs/pcs_operation.c **** 	return param;
 1875              	 .loc 3 226 0
 1876 00e4 1023     	 mov r3,#16
 1877 00e6 FB18     	 add r3,r7,r3
 1878 00e8 0C22     	 mov r2,#12
 1879 00ea BA18     	 add r2,r7,r2
 1880 00ec 1268     	 ldr r2,[r2]
 1881 00ee 1A60     	 str r2,[r3]
 1882 00f0 1023     	 mov r3,#16
 1883 00f2 FA18     	 add r2,r7,r3
 1884 00f4 0023     	 mov r3,#0
 1885 00f6 1178     	 ldrb r1,[r2]
 1886 00f8 FF20     	 mov r0,#255
 1887 00fa 0140     	 and r1,r0
 1888 00fc FF20     	 mov r0,#255
 1889 00fe 8343     	 bic r3,r0
 1890 0100 0B43     	 orr r3,r1
 1891 0102 5178     	 ldrb r1,[r2,#1]
 1892 0104 FF20     	 mov r0,#255
 1893 0106 0140     	 and r1,r0
 1894 0108 0902     	 lsl r1,r1,#8
 1895 010a 0948     	 ldr r0,.L84
 1896 010c 0340     	 and r3,r0
 1897 010e 0B43     	 orr r3,r1
 1898 0110 9178     	 ldrb r1,[r2,#2]
 1899 0112 FF20     	 mov r0,#255
 1900 0114 0140     	 and r1,r0
 1901 0116 0904     	 lsl r1,r1,#16
 1902 0118 0648     	 ldr r0,.L84+4
 1903 011a 0340     	 and r3,r0
 1904 011c 0B43     	 orr r3,r1
 1905 011e D278     	 ldrb r2,[r2,#3]
 1906 0120 1206     	 lsl r2,r2,#24
 1907 0122 1B02     	 lsl r3,r3,#8
 1908 0124 1B0A     	 lsr r3,r3,#8
 1909 0126 1343     	 orr r3,r2
 227:../DeviceObject/pcs/pcs_operation.c **** }
 1910              	 .loc 3 227 0
 1911 0128 181C     	 mov r0,r3
 1912 012a BD46     	 mov sp,r7
 1913 012c 06B0     	 add sp,sp,#24
 1914              	 
 1915 012e 80BD     	 pop {r7,pc}
 1916              	.L85:
 1917              	 .align 2
 1918              	.L84:
 1919 0130 FF00FFFF 	 .word -65281
 1920 0134 FFFF00FF 	 .word -16711681
 1921              	 .cfi_endproc
 1922              	.LFE368:
 1924              	 .section .text.PCS_GetVoltParam,"ax",%progbits
 1925              	 .align 2
 1926              	 .global PCS_GetVoltParam
 1927              	 .code 16
 1928              	 .thumb_func
 1930              	PCS_GetVoltParam:
 1931              	.LFB369:
 228:../DeviceObject/pcs/pcs_operation.c **** 
 229:../DeviceObject/pcs/pcs_operation.c **** PCS_VOLTAGE_PARAM_t	PCS_GetVoltParam(XMC_CAN_MO_t *can_m0_obj)
 230:../DeviceObject/pcs/pcs_operation.c **** {
 1932              	 .loc 3 230 0
 1933              	 .cfi_startproc
 1934 0000 80B5     	 push {r7,lr}
 1935              	.LCFI44:
 1936              	 .cfi_def_cfa_offset 8
 1937              	 .cfi_offset 7,-8
 1938              	 .cfi_offset 14,-4
 1939 0002 84B0     	 sub sp,sp,#16
 1940              	.LCFI45:
 1941              	 .cfi_def_cfa_offset 24
 1942 0004 00AF     	 add r7,sp,#0
 1943              	.LCFI46:
 1944              	 .cfi_def_cfa_register 7
 1945 0006 7860     	 str r0,[r7,#4]
 1946 0008 3960     	 str r1,[r7]
 231:../DeviceObject/pcs/pcs_operation.c **** 	PCS_VOLTAGE_PARAM_t param;
 232:../DeviceObject/pcs/pcs_operation.c **** 
 233:../DeviceObject/pcs/pcs_operation.c **** 	param.vdcGrid 	= ((uint16_t)(can_m0_obj->can_data_byte[0])<<8) | can_m0_obj->can_data_byte[1];
 1947              	 .loc 3 233 0
 1948 000a 3B68     	 ldr r3,[r7]
 1949 000c 1B7C     	 ldrb r3,[r3,#16]
 1950 000e 1B02     	 lsl r3,r3,#8
 1951 0010 9AB2     	 uxth r2,r3
 1952 0012 3B68     	 ldr r3,[r7]
 1953 0014 5B7C     	 ldrb r3,[r3,#17]
 1954 0016 9BB2     	 uxth r3,r3
 1955 0018 1343     	 orr r3,r2
 1956 001a 9BB2     	 uxth r3,r3
 1957 001c 9AB2     	 uxth r2,r3
 1958 001e 0823     	 mov r3,#8
 1959 0020 FB18     	 add r3,r7,r3
 1960 0022 1A80     	 strh r2,[r3]
 234:../DeviceObject/pcs/pcs_operation.c **** 	param.vacOut  	= ((uint16_t)(can_m0_obj->can_data_byte[2])<<8) | can_m0_obj->can_data_byte[3];
 1961              	 .loc 3 234 0
 1962 0024 3B68     	 ldr r3,[r7]
 1963 0026 9B7C     	 ldrb r3,[r3,#18]
 1964 0028 1B02     	 lsl r3,r3,#8
 1965 002a 9AB2     	 uxth r2,r3
 1966 002c 3B68     	 ldr r3,[r7]
 1967 002e DB7C     	 ldrb r3,[r3,#19]
 1968 0030 9BB2     	 uxth r3,r3
 1969 0032 1343     	 orr r3,r2
 1970 0034 9BB2     	 uxth r3,r3
 1971 0036 9AB2     	 uxth r2,r3
 1972 0038 0823     	 mov r3,#8
 1973 003a FB18     	 add r3,r7,r3
 1974 003c 5A80     	 strh r2,[r3,#2]
 235:../DeviceObject/pcs/pcs_operation.c **** 	param.vPV 		= ((uint16_t)(can_m0_obj->can_data_byte[4])<<8) | can_m0_obj->can_data_byte[5];
 1975              	 .loc 3 235 0
 1976 003e 3B68     	 ldr r3,[r7]
 1977 0040 1B7D     	 ldrb r3,[r3,#20]
 1978 0042 1B02     	 lsl r3,r3,#8
 1979 0044 9AB2     	 uxth r2,r3
 1980 0046 3B68     	 ldr r3,[r7]
 1981 0048 5B7D     	 ldrb r3,[r3,#21]
 1982 004a 9BB2     	 uxth r3,r3
 1983 004c 1343     	 orr r3,r2
 1984 004e 9BB2     	 uxth r3,r3
 1985 0050 9AB2     	 uxth r2,r3
 1986 0052 0823     	 mov r3,#8
 1987 0054 FB18     	 add r3,r7,r3
 1988 0056 9A80     	 strh r2,[r3,#4]
 236:../DeviceObject/pcs/pcs_operation.c **** 	param.vbat  	= ((uint16_t)(can_m0_obj->can_data_byte[6])<<8) | can_m0_obj->can_data_byte[7];
 1989              	 .loc 3 236 0
 1990 0058 3B68     	 ldr r3,[r7]
 1991 005a 9B7D     	 ldrb r3,[r3,#22]
 1992 005c 1B02     	 lsl r3,r3,#8
 1993 005e 9AB2     	 uxth r2,r3
 1994 0060 3B68     	 ldr r3,[r7]
 1995 0062 DB7D     	 ldrb r3,[r3,#23]
 1996 0064 9BB2     	 uxth r3,r3
 1997 0066 1343     	 orr r3,r2
 1998 0068 9BB2     	 uxth r3,r3
 1999 006a 9AB2     	 uxth r2,r3
 2000 006c 0823     	 mov r3,#8
 2001 006e FB18     	 add r3,r7,r3
 2002 0070 DA80     	 strh r2,[r3,#6]
 237:../DeviceObject/pcs/pcs_operation.c **** 
 238:../DeviceObject/pcs/pcs_operation.c **** 	return param;
 2003              	 .loc 3 238 0
 2004 0072 7A68     	 ldr r2,[r7,#4]
 2005 0074 0823     	 mov r3,#8
 2006 0076 FB18     	 add r3,r7,r3
 2007 0078 111C     	 mov r1,r2
 2008 007a 1A1C     	 mov r2,r3
 2009 007c 0823     	 mov r3,#8
 2010 007e 081C     	 mov r0,r1
 2011 0080 111C     	 mov r1,r2
 2012 0082 1A1C     	 mov r2,r3
 2013 0084 FFF7FEFF 	 bl memcpy
 239:../DeviceObject/pcs/pcs_operation.c **** }
 2014              	 .loc 3 239 0
 2015 0088 7868     	 ldr r0,[r7,#4]
 2016 008a BD46     	 mov sp,r7
 2017 008c 04B0     	 add sp,sp,#16
 2018              	 
 2019 008e 80BD     	 pop {r7,pc}
 2020              	 .cfi_endproc
 2021              	.LFE369:
 2023              	 .section .text.PCS_GetAmpParam,"ax",%progbits
 2024              	 .align 2
 2025              	 .global PCS_GetAmpParam
 2026              	 .code 16
 2027              	 .thumb_func
 2029              	PCS_GetAmpParam:
 2030              	.LFB370:
 240:../DeviceObject/pcs/pcs_operation.c **** 
 241:../DeviceObject/pcs/pcs_operation.c **** PCS_CURRENT_PARAM_t	PCS_GetAmpParam(XMC_CAN_MO_t *can_m0_obj)
 242:../DeviceObject/pcs/pcs_operation.c **** {
 2031              	 .loc 3 242 0
 2032              	 .cfi_startproc
 2033 0000 80B5     	 push {r7,lr}
 2034              	.LCFI47:
 2035              	 .cfi_def_cfa_offset 8
 2036              	 .cfi_offset 7,-8
 2037              	 .cfi_offset 14,-4
 2038 0002 84B0     	 sub sp,sp,#16
 2039              	.LCFI48:
 2040              	 .cfi_def_cfa_offset 24
 2041 0004 00AF     	 add r7,sp,#0
 2042              	.LCFI49:
 2043              	 .cfi_def_cfa_register 7
 2044 0006 7860     	 str r0,[r7,#4]
 2045 0008 3960     	 str r1,[r7]
 243:../DeviceObject/pcs/pcs_operation.c **** 	PCS_CURRENT_PARAM_t param;
 244:../DeviceObject/pcs/pcs_operation.c **** 
 245:../DeviceObject/pcs/pcs_operation.c **** 	param.idcGrid  = ((int16_t)(can_m0_obj->can_data_byte[0])<<8) | can_m0_obj->can_data_byte[1];
 2046              	 .loc 3 245 0
 2047 000a 3B68     	 ldr r3,[r7]
 2048 000c 1B7C     	 ldrb r3,[r3,#16]
 2049 000e 1B02     	 lsl r3,r3,#8
 2050 0010 9AB2     	 uxth r2,r3
 2051 0012 3B68     	 ldr r3,[r7]
 2052 0014 5B7C     	 ldrb r3,[r3,#17]
 2053 0016 9BB2     	 uxth r3,r3
 2054 0018 1343     	 orr r3,r2
 2055 001a 9AB2     	 uxth r2,r3
 2056 001c 0823     	 mov r3,#8
 2057 001e FB18     	 add r3,r7,r3
 2058 0020 1A80     	 strh r2,[r3]
 246:../DeviceObject/pcs/pcs_operation.c **** 	param.iacOut   = ((uint16_t)(can_m0_obj->can_data_byte[2])<<8) | can_m0_obj->can_data_byte[3];
 2059              	 .loc 3 246 0
 2060 0022 3B68     	 ldr r3,[r7]
 2061 0024 9B7C     	 ldrb r3,[r3,#18]
 2062 0026 1B02     	 lsl r3,r3,#8
 2063 0028 9AB2     	 uxth r2,r3
 2064 002a 3B68     	 ldr r3,[r7]
 2065 002c DB7C     	 ldrb r3,[r3,#19]
 2066 002e 9BB2     	 uxth r3,r3
 2067 0030 1343     	 orr r3,r2
 2068 0032 9AB2     	 uxth r2,r3
 2069 0034 0823     	 mov r3,#8
 2070 0036 FB18     	 add r3,r7,r3
 2071 0038 5A80     	 strh r2,[r3,#2]
 247:../DeviceObject/pcs/pcs_operation.c **** 	param.iPV 		= ((uint16_t)(can_m0_obj->can_data_byte[4])<<8) | can_m0_obj->can_data_byte[5];
 2072              	 .loc 3 247 0
 2073 003a 3B68     	 ldr r3,[r7]
 2074 003c 1B7D     	 ldrb r3,[r3,#20]
 2075 003e 1B02     	 lsl r3,r3,#8
 2076 0040 9AB2     	 uxth r2,r3
 2077 0042 3B68     	 ldr r3,[r7]
 2078 0044 5B7D     	 ldrb r3,[r3,#21]
 2079 0046 9BB2     	 uxth r3,r3
 2080 0048 1343     	 orr r3,r2
 2081 004a 9AB2     	 uxth r2,r3
 2082 004c 0823     	 mov r3,#8
 2083 004e FB18     	 add r3,r7,r3
 2084 0050 9A80     	 strh r2,[r3,#4]
 248:../DeviceObject/pcs/pcs_operation.c **** 	param.ibat  	= ((int16_t)(can_m0_obj->can_data_byte[6])<<8) | can_m0_obj->can_data_byte[7];
 2085              	 .loc 3 248 0
 2086 0052 3B68     	 ldr r3,[r7]
 2087 0054 9B7D     	 ldrb r3,[r3,#22]
 2088 0056 1B02     	 lsl r3,r3,#8
 2089 0058 9AB2     	 uxth r2,r3
 2090 005a 3B68     	 ldr r3,[r7]
 2091 005c DB7D     	 ldrb r3,[r3,#23]
 2092 005e 9BB2     	 uxth r3,r3
 2093 0060 1343     	 orr r3,r2
 2094 0062 9AB2     	 uxth r2,r3
 2095 0064 0823     	 mov r3,#8
 2096 0066 FB18     	 add r3,r7,r3
 2097 0068 DA80     	 strh r2,[r3,#6]
 249:../DeviceObject/pcs/pcs_operation.c **** 
 250:../DeviceObject/pcs/pcs_operation.c **** 	return param;
 2098              	 .loc 3 250 0
 2099 006a 7A68     	 ldr r2,[r7,#4]
 2100 006c 0823     	 mov r3,#8
 2101 006e FB18     	 add r3,r7,r3
 2102 0070 111C     	 mov r1,r2
 2103 0072 1A1C     	 mov r2,r3
 2104 0074 0823     	 mov r3,#8
 2105 0076 081C     	 mov r0,r1
 2106 0078 111C     	 mov r1,r2
 2107 007a 1A1C     	 mov r2,r3
 2108 007c FFF7FEFF 	 bl memcpy
 251:../DeviceObject/pcs/pcs_operation.c **** }
 2109              	 .loc 3 251 0
 2110 0080 7868     	 ldr r0,[r7,#4]
 2111 0082 BD46     	 mov sp,r7
 2112 0084 04B0     	 add sp,sp,#16
 2113              	 
 2114 0086 80BD     	 pop {r7,pc}
 2115              	 .cfi_endproc
 2116              	.LFE370:
 2118              	 .section .text.PCS_GetPowerParam,"ax",%progbits
 2119              	 .align 2
 2120              	 .global PCS_GetPowerParam
 2121              	 .code 16
 2122              	 .thumb_func
 2124              	PCS_GetPowerParam:
 2125              	.LFB371:
 252:../DeviceObject/pcs/pcs_operation.c **** 
 253:../DeviceObject/pcs/pcs_operation.c **** PCS_POWER_PARAM_t 	PCS_GetPowerParam(XMC_CAN_MO_t *can_m0_obj)
 254:../DeviceObject/pcs/pcs_operation.c **** {
 2126              	 .loc 3 254 0
 2127              	 .cfi_startproc
 2128 0000 80B5     	 push {r7,lr}
 2129              	.LCFI50:
 2130              	 .cfi_def_cfa_offset 8
 2131              	 .cfi_offset 7,-8
 2132              	 .cfi_offset 14,-4
 2133 0002 84B0     	 sub sp,sp,#16
 2134              	.LCFI51:
 2135              	 .cfi_def_cfa_offset 24
 2136 0004 00AF     	 add r7,sp,#0
 2137              	.LCFI52:
 2138              	 .cfi_def_cfa_register 7
 2139 0006 7860     	 str r0,[r7,#4]
 2140 0008 3960     	 str r1,[r7]
 255:../DeviceObject/pcs/pcs_operation.c **** 	PCS_POWER_PARAM_t param;
 256:../DeviceObject/pcs/pcs_operation.c **** 
 257:../DeviceObject/pcs/pcs_operation.c **** 	param.pdcGrid  = ((int16_t)(can_m0_obj->can_data_byte[0])<<8) | can_m0_obj->can_data_byte[1];
 2141              	 .loc 3 257 0
 2142 000a 3B68     	 ldr r3,[r7]
 2143 000c 1B7C     	 ldrb r3,[r3,#16]
 2144 000e 1B02     	 lsl r3,r3,#8
 2145 0010 9AB2     	 uxth r2,r3
 2146 0012 3B68     	 ldr r3,[r7]
 2147 0014 5B7C     	 ldrb r3,[r3,#17]
 2148 0016 9BB2     	 uxth r3,r3
 2149 0018 1343     	 orr r3,r2
 2150 001a 9BB2     	 uxth r3,r3
 2151 001c 9AB2     	 uxth r2,r3
 2152 001e 0823     	 mov r3,#8
 2153 0020 FB18     	 add r3,r7,r3
 2154 0022 1A80     	 strh r2,[r3]
 258:../DeviceObject/pcs/pcs_operation.c **** 	param.pacOut   = ((uint16_t)(can_m0_obj->can_data_byte[2])<<8) | can_m0_obj->can_data_byte[3];
 2155              	 .loc 3 258 0
 2156 0024 3B68     	 ldr r3,[r7]
 2157 0026 9B7C     	 ldrb r3,[r3,#18]
 2158 0028 1B02     	 lsl r3,r3,#8
 2159 002a 9AB2     	 uxth r2,r3
 2160 002c 3B68     	 ldr r3,[r7]
 2161 002e DB7C     	 ldrb r3,[r3,#19]
 2162 0030 9BB2     	 uxth r3,r3
 2163 0032 1343     	 orr r3,r2
 2164 0034 9BB2     	 uxth r3,r3
 2165 0036 9AB2     	 uxth r2,r3
 2166 0038 0823     	 mov r3,#8
 2167 003a FB18     	 add r3,r7,r3
 2168 003c 5A80     	 strh r2,[r3,#2]
 259:../DeviceObject/pcs/pcs_operation.c **** 	param.pPV 	   = ((uint16_t)(can_m0_obj->can_data_byte[4])<<8) | can_m0_obj->can_data_byte[5];
 2169              	 .loc 3 259 0
 2170 003e 3B68     	 ldr r3,[r7]
 2171 0040 1B7D     	 ldrb r3,[r3,#20]
 2172 0042 1B02     	 lsl r3,r3,#8
 2173 0044 9AB2     	 uxth r2,r3
 2174 0046 3B68     	 ldr r3,[r7]
 2175 0048 5B7D     	 ldrb r3,[r3,#21]
 2176 004a 9BB2     	 uxth r3,r3
 2177 004c 1343     	 orr r3,r2
 2178 004e 9BB2     	 uxth r3,r3
 2179 0050 9AB2     	 uxth r2,r3
 2180 0052 0823     	 mov r3,#8
 2181 0054 FB18     	 add r3,r7,r3
 2182 0056 9A80     	 strh r2,[r3,#4]
 260:../DeviceObject/pcs/pcs_operation.c **** 	param.pbat     = ((int16_t)(can_m0_obj->can_data_byte[6])<<8) | can_m0_obj->can_data_byte[7];
 2183              	 .loc 3 260 0
 2184 0058 3B68     	 ldr r3,[r7]
 2185 005a 9B7D     	 ldrb r3,[r3,#22]
 2186 005c 1B02     	 lsl r3,r3,#8
 2187 005e 9AB2     	 uxth r2,r3
 2188 0060 3B68     	 ldr r3,[r7]
 2189 0062 DB7D     	 ldrb r3,[r3,#23]
 2190 0064 9BB2     	 uxth r3,r3
 2191 0066 1343     	 orr r3,r2
 2192 0068 9BB2     	 uxth r3,r3
 2193 006a 9AB2     	 uxth r2,r3
 2194 006c 0823     	 mov r3,#8
 2195 006e FB18     	 add r3,r7,r3
 2196 0070 DA80     	 strh r2,[r3,#6]
 261:../DeviceObject/pcs/pcs_operation.c **** 
 262:../DeviceObject/pcs/pcs_operation.c **** 	return param;
 2197              	 .loc 3 262 0
 2198 0072 7A68     	 ldr r2,[r7,#4]
 2199 0074 0823     	 mov r3,#8
 2200 0076 FB18     	 add r3,r7,r3
 2201 0078 111C     	 mov r1,r2
 2202 007a 1A1C     	 mov r2,r3
 2203 007c 0823     	 mov r3,#8
 2204 007e 081C     	 mov r0,r1
 2205 0080 111C     	 mov r1,r2
 2206 0082 1A1C     	 mov r2,r3
 2207 0084 FFF7FEFF 	 bl memcpy
 263:../DeviceObject/pcs/pcs_operation.c **** }
 2208              	 .loc 3 263 0
 2209 0088 7868     	 ldr r0,[r7,#4]
 2210 008a BD46     	 mov sp,r7
 2211 008c 04B0     	 add sp,sp,#16
 2212              	 
 2213 008e 80BD     	 pop {r7,pc}
 2214              	 .cfi_endproc
 2215              	.LFE371:
 2217              	 .section .text.PCS_GetMiscParam,"ax",%progbits
 2218              	 .align 2
 2219              	 .global PCS_GetMiscParam
 2220              	 .code 16
 2221              	 .thumb_func
 2223              	PCS_GetMiscParam:
 2224              	.LFB372:
 264:../DeviceObject/pcs/pcs_operation.c **** 
 265:../DeviceObject/pcs/pcs_operation.c **** PCS_MISC_PARAM_t 	PCS_GetMiscParam(XMC_CAN_MO_t *can_m0_obj)
 266:../DeviceObject/pcs/pcs_operation.c **** {
 2225              	 .loc 3 266 0
 2226              	 .cfi_startproc
 2227 0000 80B5     	 push {r7,lr}
 2228              	.LCFI53:
 2229              	 .cfi_def_cfa_offset 8
 2230              	 .cfi_offset 7,-8
 2231              	 .cfi_offset 14,-4
 2232 0002 84B0     	 sub sp,sp,#16
 2233              	.LCFI54:
 2234              	 .cfi_def_cfa_offset 24
 2235 0004 00AF     	 add r7,sp,#0
 2236              	.LCFI55:
 2237              	 .cfi_def_cfa_register 7
 2238 0006 7860     	 str r0,[r7,#4]
 267:../DeviceObject/pcs/pcs_operation.c **** 	PCS_MISC_PARAM_t param;
 268:../DeviceObject/pcs/pcs_operation.c **** 
 269:../DeviceObject/pcs/pcs_operation.c **** 	param.tempPCS 		= ((uint16_t)(can_m0_obj->can_data_byte[0])<<8) | can_m0_obj->can_data_byte[1];
 2239              	 .loc 3 269 0
 2240 0008 7B68     	 ldr r3,[r7,#4]
 2241 000a 1B7C     	 ldrb r3,[r3,#16]
 2242 000c 1B02     	 lsl r3,r3,#8
 2243 000e 9AB2     	 uxth r2,r3
 2244 0010 7B68     	 ldr r3,[r7,#4]
 2245 0012 5B7C     	 ldrb r3,[r3,#17]
 2246 0014 9BB2     	 uxth r3,r3
 2247 0016 1343     	 orr r3,r2
 2248 0018 9BB2     	 uxth r3,r3
 2249 001a 9AB2     	 uxth r2,r3
 2250 001c 0823     	 mov r3,#8
 2251 001e FB18     	 add r3,r7,r3
 2252 0020 1A80     	 strh r2,[r3]
 270:../DeviceObject/pcs/pcs_operation.c **** 	param.frequency  	= ((uint16_t)(can_m0_obj->can_data_byte[2])<<8) | can_m0_obj->can_data_byte[3];
 2253              	 .loc 3 270 0
 2254 0022 7B68     	 ldr r3,[r7,#4]
 2255 0024 9B7C     	 ldrb r3,[r3,#18]
 2256 0026 1B02     	 lsl r3,r3,#8
 2257 0028 9AB2     	 uxth r2,r3
 2258 002a 7B68     	 ldr r3,[r7,#4]
 2259 002c DB7C     	 ldrb r3,[r3,#19]
 2260 002e 9BB2     	 uxth r3,r3
 2261 0030 1343     	 orr r3,r2
 2262 0032 9BB2     	 uxth r3,r3
 2263 0034 9AB2     	 uxth r2,r3
 2264 0036 0823     	 mov r3,#8
 2265 0038 FB18     	 add r3,r7,r3
 2266 003a 5A80     	 strh r2,[r3,#2]
 271:../DeviceObject/pcs/pcs_operation.c **** 
 272:../DeviceObject/pcs/pcs_operation.c **** 	return param;
 2267              	 .loc 3 272 0
 2268 003c 0C23     	 mov r3,#12
 2269 003e FB18     	 add r3,r7,r3
 2270 0040 0822     	 mov r2,#8
 2271 0042 BA18     	 add r2,r7,r2
 2272 0044 1268     	 ldr r2,[r2]
 2273 0046 1A60     	 str r2,[r3]
 2274 0048 0C23     	 mov r3,#12
 2275 004a FA18     	 add r2,r7,r3
 2276 004c 0023     	 mov r3,#0
 2277 004e 1188     	 ldrh r1,[r2]
 2278 0050 0904     	 lsl r1,r1,#16
 2279 0052 090C     	 lsr r1,r1,#16
 2280 0054 1B0C     	 lsr r3,r3,#16
 2281 0056 1B04     	 lsl r3,r3,#16
 2282 0058 0B43     	 orr r3,r1
 2283 005a 5288     	 ldrh r2,[r2,#2]
 2284 005c 1204     	 lsl r2,r2,#16
 2285 005e 1B04     	 lsl r3,r3,#16
 2286 0060 1B0C     	 lsr r3,r3,#16
 2287 0062 1343     	 orr r3,r2
 273:../DeviceObject/pcs/pcs_operation.c **** }
 2288              	 .loc 3 273 0
 2289 0064 181C     	 mov r0,r3
 2290 0066 BD46     	 mov sp,r7
 2291 0068 04B0     	 add sp,sp,#16
 2292              	 
 2293 006a 80BD     	 pop {r7,pc}
 2294              	 .cfi_endproc
 2295              	.LFE372:
 2297              	 .text
 2298              	.Letext0:
 2299              	 .file 4 "d:\\software\\dave_4-4-2_64bit_2018-02-23\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2300              	 .file 5 "d:\\software\\dave_4-4-2_64bit_2018-02-23\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2301              	 .file 6 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Infineon/XMC1400_series/Include/XMC1400.h"
 2302              	 .file 7 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc/xmc1_scu.h"
 2303              	 .file 8 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc/xmc_gpio.h"
 2304              	 .file 9 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc/xmc1_gpio.h"
 2305              	 .file 10 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc/xmc_ccu4.h"
 2306              	 .file 11 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc/xmc_usic.h"
 2307              	 .file 12 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc/xmc_uart.h"
 2308              	 .file 13 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc/xmc_i2c.h"
 2309              	 .file 14 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc/xmc_eru.h"
 2310              	 .file 15 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/DeviceObject/miscellaneous/misc_operation.h"
 2311              	 .file 16 "../DeviceObject/pcs/pcs_operation.h"
 2312              	 .file 17 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/XMCLib/inc/xmc_vadc.h"
 2313              	 .file 18 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/DeviceObject/pdu/pdu_operation.h"
 2314              	 .file 19 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/DeviceObject/esp32/esp32_operation.h"
 2315              	 .file 20 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/DeviceObject/infotainment/info_operation.h"
 2316              	 .file 21 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/DeviceObject/geenix/geenix_operation.h"
 2317              	 .file 22 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/Libraries/CMSIS/Infineon/XMC1400_series/Include/system_XMC1400.h"
 2318              	 .file 23 "../DeviceObject/pcs/pcs_operation_conf.h"
 2319              	 .file 24 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/DeviceObject/miscellaneous/misc_operation_conf.h"
 2320              	 .file 25 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/DeviceObject/esp32/esp32_operation_conf.h"
 2321              	 .file 26 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/DeviceObject/pdu/pdu_operation_conf.h"
 2322              	 .file 27 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/DeviceObject/infotainment/info_operation_conf.h"
 2323              	 .file 28 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/DeviceObject/geenix/geenix_operation_conf.h"
 2324              	 .file 29 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/DeviceObject/rs232/rs232_operation_conf.h"
 2325              	 .file 30 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER/DeviceOperation/GlobalVariable/global_var.h"
DEFINED SYMBOLS
                            *ABS*:00000000 pcs_operation.c
    {standard input}:18     .text.__NVIC_EnableIRQ:00000000 $t
    {standard input}:22     .text.__NVIC_EnableIRQ:00000000 __NVIC_EnableIRQ
    {standard input}:66     .text.__NVIC_EnableIRQ:00000030 $d
    {standard input}:71     .text.__NVIC_SetPriority:00000000 $t
    {standard input}:75     .text.__NVIC_SetPriority:00000000 __NVIC_SetPriority
    {standard input}:204    .text.__NVIC_SetPriority:000000cc $d
    {standard input}:210    .text.XMC_CAN_NODE_SetReceiveInput:00000000 $t
    {standard input}:214    .text.XMC_CAN_NODE_SetReceiveInput:00000000 XMC_CAN_NODE_SetReceiveInput
    {standard input}:258    .text.XMC_CAN_NODE_EnableConfigurationChange:00000000 $t
    {standard input}:262    .text.XMC_CAN_NODE_EnableConfigurationChange:00000000 XMC_CAN_NODE_EnableConfigurationChange
    {standard input}:294    .text.XMC_CAN_NODE_DisableConfigurationChange:00000000 $t
    {standard input}:298    .text.XMC_CAN_NODE_DisableConfigurationChange:00000000 XMC_CAN_NODE_DisableConfigurationChange
    {standard input}:331    .text.XMC_CAN_NODE_ResetInitBit:00000000 $t
    {standard input}:335    .text.XMC_CAN_NODE_ResetInitBit:00000000 XMC_CAN_NODE_ResetInitBit
    {standard input}:368    .text.XMC_CAN_MO_SetEventNodePointer:00000000 $t
    {standard input}:372    .text.XMC_CAN_MO_SetEventNodePointer:00000000 XMC_CAN_MO_SetEventNodePointer
    {standard input}:426    .text.XMC_CAN_MO_EnableEvent:00000000 $t
    {standard input}:430    .text.XMC_CAN_MO_EnableEvent:00000000 XMC_CAN_MO_EnableEvent
                            *COM*:00000008 pcs_button_config
                            *COM*:00000008 CAN0_txd_config
                            *COM*:00000008 CAN0_rxd_config
                            *COM*:0000000c can_baud
                            *COM*:00000020 msgObjToPCS
                            *COM*:00000020 msgObjFromPCS
                            *COM*:00000008 SLICE0_config
                            *COM*:00000008 SLICE1_config
                            *COM*:00000006 sysTickHandle
                            *COM*:00000008 esp32_tx_config
                            *COM*:00000008 esp32_rx_config
                            *COM*:0000000c esp32_config
                            *COM*:00000018 g_global_handle
                            *COM*:00000014 g_group_handle
                            *COM*:0000000c g_queue_handle
                            *COM*:00000010 g_queue_entry
                            *COM*:00000040 g_channel_handle
                            *COM*:00000010 g_result_handle
                            *COM*:00000008 adc_io
                            *COM*:00000008 relay_KMP
                            *COM*:00000008 relay_KMF
                            *COM*:00000008 relay_KDSG
                            *COM*:00000008 relay_KBAT
                            *COM*:00000008 button_config
                            *COM*:00000008 led_config
                            *COM*:00000008 dipswitch_config
                            *COM*:00000008 gpio_config
                            *COM*:00000008 iic_config
                            *COM*:00000008 eru1_etl2_config
                            *COM*:00000004 eru1_ogu3_config
                            *COM*:00000008 eru0_etl2_config
                            *COM*:00000004 eru0_ogu2_config
                            *COM*:00000008 rtc_sda_config
                            *COM*:00000008 rtc_scl_config
                            *COM*:00000008 eru_io_config
                            *COM*:00000008 eru_mfp_config
                            *COM*:00000008 geenix_sel_config
                            *COM*:00000008 geenix_tx_config
                            *COM*:00000008 geenix_rx_config
                            *COM*:0000000c geenix_config
                            *COM*:00000008 rs232_tx_config
                            *COM*:00000008 rs232_rx_config
                            *COM*:0000000c rs232_config
                            *COM*:0000012c buffer
                            *COM*:00000001 ErrorBeingHandled
                            *COM*:00000001 flag_standby
                            *COM*:00000001 IsPerformingPrecharge
                            *COM*:00000001 recEspCommIsHalt
                            *COM*:00000001 esp32IsHandShake
                            *COM*:00000001 recbmsIsHandShake
                            *COM*:00000001 sysTickFlag
                            *COM*:00000001 system_start
                            *COM*:00000008 pvHShake
                            *COM*:00000008 esp32HShake
                            *COM*:00000008 buttonHShake
                            *COM*:00000006 controlFlag
                            *COM*:00000001 flag_pcs
                            *COM*:00000001 flag_pcsBlockIsStandby
                            *COM*:00000004 pcsBmsStatus
                            *COM*:00000008 bmsSensor
                            *COM*:00000008 pcsVoltages
                            *COM*:00000008 pcsCurrents
                            *COM*:00000008 pcsPowers
                            *COM*:00000004 pcsMiscs
                            *COM*:00000005 pcsSystemStatus
                            *COM*:00000004 pcsDCgridStatus
                            *COM*:00000004 pcsACinvStatus
                            *COM*:00000004 pcsPVconvStatus
                            *COM*:00000004 pcsBatconvStatus
                            *COM*:00000001 flag_pdu
                            *COM*:00000001 flag_pdu_adc
                            *COM*:00000008 pduSensorRaw
                            *COM*:00000014 pduSensorAvg
                            *COM*:00000010 pduSensor
                            *COM*:00000001 flag_button
                            *COM*:00000001 flag_error
                            *COM*:00000001 flag_misc
                            *COM*:00000001 flag_rs232
                            *COM*:00000004 rtcDate
                            *COM*:00000003 rtcTime
                            *COM*:00000001 flag_rtc
                            *COM*:00000001 flag_esp32
                            *COM*:00000001 enable_bt
                            *COM*:0000002c btData
                            *COM*:0000005c esp32DataPack
                            *COM*:00000008 batPackData
                            *COM*:00000001 temporaryStatus
                            *COM*:00000004 soc_f
                            *COM*:00000004 ocv
                            *COM*:00000001 genix_send
                            *COM*:00000001 isPeriphMode
                            *COM*:00000001 isStartHShake
                            *COM*:00000001 isHShakeValid
                            *COM*:000000c8 NTPdata
    {standard input}:559    .text.PCS_Connection_Init:00000000 $t
    {standard input}:564    .text.PCS_Connection_Init:00000000 PCS_Connection_Init
    {standard input}:681    .text.PCS_Connection_Init:000000cc $d
    {standard input}:695    .text.PCS_BMSTransmitToPCS:00000000 $t
    {standard input}:700    .text.PCS_BMSTransmitToPCS:00000000 PCS_BMSTransmitToPCS
    {standard input}:885    .text.PCS_BMSTransmitToPCS:0000011c $d
    {standard input}:890    .text.PCS_GetPCSStatus:00000000 $t
    {standard input}:895    .text.PCS_GetPCSStatus:00000000 PCS_GetPCSStatus
    {standard input}:1142   .text.PCS_GetDCGridStatus:00000000 $t
    {standard input}:1147   .text.PCS_GetDCGridStatus:00000000 PCS_GetDCGridStatus
    {standard input}:1326   .text.PCS_GetDCGridStatus:00000110 $d
    {standard input}:1332   .text.PCS_GetACInvStatus:00000000 $t
    {standard input}:1337   .text.PCS_GetACInvStatus:00000000 PCS_GetACInvStatus
    {standard input}:1553   .text.PCS_GetACInvStatus:0000014c $d
    {standard input}:1559   .text.PCS_GetPVConvStatus:00000000 $t
    {standard input}:1564   .text.PCS_GetPVConvStatus:00000000 PCS_GetPVConvStatus
    {standard input}:1710   .text.PCS_GetPVConvStatus:000000dc $d
    {standard input}:1716   .text.PCS_GetBatConvStatus:00000000 $t
    {standard input}:1721   .text.PCS_GetBatConvStatus:00000000 PCS_GetBatConvStatus
    {standard input}:1919   .text.PCS_GetBatConvStatus:00000130 $d
    {standard input}:1925   .text.PCS_GetVoltParam:00000000 $t
    {standard input}:1930   .text.PCS_GetVoltParam:00000000 PCS_GetVoltParam
    {standard input}:2024   .text.PCS_GetAmpParam:00000000 $t
    {standard input}:2029   .text.PCS_GetAmpParam:00000000 PCS_GetAmpParam
    {standard input}:2119   .text.PCS_GetPowerParam:00000000 $t
    {standard input}:2124   .text.PCS_GetPowerParam:00000000 PCS_GetPowerParam
    {standard input}:2218   .text.PCS_GetMiscParam:00000000 $t
    {standard input}:2223   .text.PCS_GetMiscParam:00000000 PCS_GetMiscParam
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_GPIO_Init
XMC_CAN_Init
XMC_CAN_NODE_NominalBitTimeConfigure
XMC_CAN_MO_Config
XMC_SCU_SetInterruptControl
XMC_CAN_AllocateMOtoNodeList
XMC_CAN_MO_Transmit
memcpy
