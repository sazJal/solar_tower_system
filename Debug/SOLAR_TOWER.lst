
SOLAR_TOWER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006e94  10001000  10001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .VENEER_Code  00000144  2000000c  10007e94  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 Stack         00000400  20000150  00000000  00000150  2**0
                  ALLOC
  3 .data         000001b8  20000550  10007fd8  00008550  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000006a8  20000708  000005b8  00008708  2**2
                  ALLOC
  5 .no_init      00000004  20003ffc  00003eac  00000150  2**2
                  ALLOC
  6 .debug_aranges 00001070  00000000  00000000  00008708  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0002648c  00000000  00000000  00009778  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000039a5  00000000  00000000  0002fc04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00009b59  00000000  00000000  000335a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000037dc  00000000  00000000  0003d104  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000cda9  00000000  00000000  000408e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005b24  00000000  00000000  0004d689  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e28  00000000  00000000  000531b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 0000073b  00000000  00000000  00053fd8  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	50 05 00 20 1d 10 00 10 00 00 00 00 9d 10 00 10     P.. ............
10001010:	00 18 04 00 00 01 00 00 00 00 00 80                 ............

1000101c <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
1000101c:	4911      	ldr	r1, [pc, #68]	; (10001064 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101e:	4a12      	ldr	r2, [pc, #72]	; (10001068 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
10001020:	4b12      	ldr	r3, [pc, #72]	; (1000106c <__copy_data+0x16>)
	bl  __copy_data
10001022:	f000 f818 	bl	10001056 <__copy_data>

    ldr  r0, =SystemInit
10001026:	4812      	ldr	r0, [pc, #72]	; (10001070 <__copy_data+0x1a>)
    blx  r0
10001028:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
1000102a:	4912      	ldr	r1, [pc, #72]	; (10001074 <__copy_data+0x1e>)
	ldr	r2, =__data_start
1000102c:	4a12      	ldr	r2, [pc, #72]	; (10001078 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102e:	4b13      	ldr	r3, [pc, #76]	; (1000107c <__copy_data+0x26>)
	bl  __copy_data
10001030:	f000 f811 	bl	10001056 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001034:	4912      	ldr	r1, [pc, #72]	; (10001080 <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001036:	4a13      	ldr	r2, [pc, #76]	; (10001084 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001038:	4b13      	ldr	r3, [pc, #76]	; (10001088 <__copy_data+0x32>)
	bl  __copy_data
1000103a:	f000 f80c 	bl	10001056 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103e:	4913      	ldr	r1, [pc, #76]	; (1000108c <__copy_data+0x36>)
	ldr	r2, =__bss_end
10001040:	4a13      	ldr	r2, [pc, #76]	; (10001090 <__copy_data+0x3a>)

	movs	r0, 0
10001042:	2000      	movs	r0, #0

	subs	r2, r1
10001044:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001046:	dd02      	ble.n	1000104e <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001048:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
1000104a:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
1000104c:	dcfc      	bgt.n	10001048 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x3e>)
    blx  r0
10001050:	4780      	blx	r0
#endif

    ldr  r0, =main
10001052:	4811      	ldr	r0, [pc, #68]	; (10001098 <__copy_data+0x42>)
    blx  r0
10001054:	4780      	blx	r0

10001056 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001056:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001058:	dd03      	ble.n	10001062 <__copy_data+0xc>

.L_loop:
	subs	r3, #4
1000105a:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
1000105c:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105e:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
10001060:	dcfb      	bgt.n	1000105a <__copy_data+0x4>

.L_loop_done:
	bx  lr
10001062:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001064:	10007e94 	.word	0x10007e94
	ldr	r2, =VeneerStart
10001068:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
1000106c:	20000150 	.word	0x20000150
	bl  __copy_data

    ldr  r0, =SystemInit
10001070:	100010a1 	.word	0x100010a1
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001074:	10007fd8 	.word	0x10007fd8
	ldr	r2, =__data_start
10001078:	20000550 	.word	0x20000550
	ldr	r3, =__data_end
1000107c:	20000708 	.word	0x20000708
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
10001080:	10008190 	.word	0x10008190
	ldr	r2, =__ram_code_start
10001084:	20000708 	.word	0x20000708
	ldr	r3, =__ram_code_end
10001088:	20000708 	.word	0x20000708
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000108c:	20000708 	.word	0x20000708
	ldr	r2, =__bss_end
10001090:	20000dac 	.word	0x20000dac
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001094:	10007d11 	.word	0x10007d11
    blx  r0
#endif

    ldr  r0, =main
10001098:	100078d1 	.word	0x100078d1

1000109c <HardFault_Handler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_Handler:
    b  .
1000109c:	e7fe      	b.n	1000109c <HardFault_Handler>
	...

100010a0 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
100010a0:	b580      	push	{r7, lr}
100010a2:	af00      	add	r7, sp, #0
  SystemCoreSetup();
100010a4:	f000 f804 	bl	100010b0 <SystemCoreSetup>
  SystemCoreClockSetup();
100010a8:	f000 f80e 	bl	100010c8 <SystemCoreClockSetup>
}
100010ac:	46bd      	mov	sp, r7
100010ae:	bd80      	pop	{r7, pc}

100010b0 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
100010b0:	b580      	push	{r7, lr}
100010b2:	af00      	add	r7, sp, #0
  /* Enable Prefetch unit */
  SCU_GENERAL->PFUCR &= ~SCU_GENERAL_PFUCR_PFUBYP_Msk;
100010b4:	4b03      	ldr	r3, [pc, #12]	; (100010c4 <SystemCoreSetup+0x14>)
100010b6:	4a03      	ldr	r2, [pc, #12]	; (100010c4 <SystemCoreSetup+0x14>)
100010b8:	6e92      	ldr	r2, [r2, #104]	; 0x68
100010ba:	2101      	movs	r1, #1
100010bc:	438a      	bics	r2, r1
100010be:	669a      	str	r2, [r3, #104]	; 0x68
}
100010c0:	46bd      	mov	sp, r7
100010c2:	bd80      	pop	{r7, pc}
100010c4:	40010000 	.word	0x40010000

100010c8 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
100010c8:	b580      	push	{r7, lr}
100010ca:	af00      	add	r7, sp, #0
  /* Clock setup done during SSW using the CLOCK_VAL1 and CLOCK_VAL2 defined in vector table */

  /* disable bit protection */
  SCU_GENERAL->PASSWD = 0x000000C0UL;
100010cc:	4b09      	ldr	r3, [pc, #36]	; (100010f4 <SystemCoreClockSetup+0x2c>)
100010ce:	22c0      	movs	r2, #192	; 0xc0
100010d0:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->CLKCR1 |= SCU_CLK_CLKCR1_DCLKSEL_Msk;
  
#else
    
  /* DCLK source using DCO1 */
  SCU_CLK->CLKCR1 &= ~SCU_CLK_CLKCR1_DCLKSEL_Msk;
100010d2:	4b09      	ldr	r3, [pc, #36]	; (100010f8 <SystemCoreClockSetup+0x30>)
100010d4:	4a08      	ldr	r2, [pc, #32]	; (100010f8 <SystemCoreClockSetup+0x30>)
100010d6:	69d2      	ldr	r2, [r2, #28]
100010d8:	4908      	ldr	r1, [pc, #32]	; (100010fc <SystemCoreClockSetup+0x34>)
100010da:	400a      	ands	r2, r1
100010dc:	61da      	str	r2, [r3, #28]
  SCU_ANALOG->ANAOSCLPCTRL &= ~SCU_ANALOG_ANAOSCLPCTRL_MODE_Msk;
#endif  

  /* Update PCLK selection mux. */
  /* Fractional divider enabled, MCLK frequency equal DCO1 frequency or external crystal frequency */
  SCU_CLK->CLKCR = (1023UL <<SCU_CLK_CLKCR_CNTADJ_Pos) |
100010de:	4b06      	ldr	r3, [pc, #24]	; (100010f8 <SystemCoreClockSetup+0x30>)
100010e0:	4a07      	ldr	r2, [pc, #28]	; (10001100 <SystemCoreClockSetup+0x38>)
100010e2:	601a      	str	r2, [r3, #0]
                    (RTC_CLOCK_SRC << SCU_CLK_CLKCR_RTCCLKSEL_Pos) |
                    (PCLK_CLOCK_SRC << SCU_CLK_CLKCR_PCLKSEL_Pos) |
                    0x100U; /* IDIV = 1 */

  /* enable bit protection */
  SCU_GENERAL->PASSWD = 0x000000C3UL;
100010e4:	4b03      	ldr	r3, [pc, #12]	; (100010f4 <SystemCoreClockSetup+0x2c>)
100010e6:	22c3      	movs	r2, #195	; 0xc3
100010e8:	625a      	str	r2, [r3, #36]	; 0x24

  SystemCoreClockUpdate();
100010ea:	f000 f80b 	bl	10001104 <SystemCoreClockUpdate>
}
100010ee:	46bd      	mov	sp, r7
100010f0:	bd80      	pop	{r7, pc}
100010f2:	46c0      	nop			; (mov r8, r8)
100010f4:	40010000 	.word	0x40010000
100010f8:	40010300 	.word	0x40010300
100010fc:	fffffdff 	.word	0xfffffdff
10001100:	3ff10100 	.word	0x3ff10100

10001104 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
10001104:	b580      	push	{r7, lr}
10001106:	af00      	add	r7, sp, #0
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10001108:	4b2a      	ldr	r3, [pc, #168]	; (100011b4 <SystemCoreClockUpdate+0xb0>)
1000110a:	681a      	ldr	r2, [r3, #0]
1000110c:	23ff      	movs	r3, #255	; 0xff
1000110e:	021b      	lsls	r3, r3, #8
10001110:	4013      	ands	r3, r2
10001112:	0a1a      	lsrs	r2, r3, #8
10001114:	4b28      	ldr	r3, [pc, #160]	; (100011b8 <SystemCoreClockUpdate+0xb4>)
10001116:	601a      	str	r2, [r3, #0]

  if (IDIV != 0)
10001118:	4b27      	ldr	r3, [pc, #156]	; (100011b8 <SystemCoreClockUpdate+0xb4>)
1000111a:	681b      	ldr	r3, [r3, #0]
1000111c:	2b00      	cmp	r3, #0
1000111e:	d037      	beq.n	10001190 <SystemCoreClockUpdate+0x8c>
  {
    FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
10001120:	4b24      	ldr	r3, [pc, #144]	; (100011b4 <SystemCoreClockUpdate+0xb0>)
10001122:	681b      	ldr	r3, [r3, #0]
10001124:	22ff      	movs	r2, #255	; 0xff
10001126:	401a      	ands	r2, r3
10001128:	4b24      	ldr	r3, [pc, #144]	; (100011bc <SystemCoreClockUpdate+0xb8>)
1000112a:	601a      	str	r2, [r3, #0]
    FDIV |= ((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_FDIV_Msk) << 8;
1000112c:	4b21      	ldr	r3, [pc, #132]	; (100011b4 <SystemCoreClockUpdate+0xb0>)
1000112e:	69db      	ldr	r3, [r3, #28]
10001130:	2203      	movs	r2, #3
10001132:	4013      	ands	r3, r2
10001134:	021a      	lsls	r2, r3, #8
10001136:	4b21      	ldr	r3, [pc, #132]	; (100011bc <SystemCoreClockUpdate+0xb8>)
10001138:	681b      	ldr	r3, [r3, #0]
1000113a:	431a      	orrs	r2, r3
1000113c:	4b1f      	ldr	r3, [pc, #124]	; (100011bc <SystemCoreClockUpdate+0xb8>)
1000113e:	601a      	str	r2, [r3, #0]
    
    /* Fractional divider is enabled and used */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
10001140:	4b1c      	ldr	r3, [pc, #112]	; (100011b4 <SystemCoreClockUpdate+0xb0>)
10001142:	69da      	ldr	r2, [r3, #28]
10001144:	2380      	movs	r3, #128	; 0x80
10001146:	009b      	lsls	r3, r3, #2
10001148:	4013      	ands	r3, r2
1000114a:	d10e      	bne.n	1000116a <SystemCoreClockUpdate+0x66>
    {
       SystemCoreClock = ((uint32_t)((DCO1_FREQUENCY << 6U) / ((IDIV << 10) + FDIV))) << 4U;
1000114c:	4b1a      	ldr	r3, [pc, #104]	; (100011b8 <SystemCoreClockUpdate+0xb4>)
1000114e:	681b      	ldr	r3, [r3, #0]
10001150:	029a      	lsls	r2, r3, #10
10001152:	4b1a      	ldr	r3, [pc, #104]	; (100011bc <SystemCoreClockUpdate+0xb8>)
10001154:	681b      	ldr	r3, [r3, #0]
10001156:	18d3      	adds	r3, r2, r3
10001158:	4819      	ldr	r0, [pc, #100]	; (100011c0 <SystemCoreClockUpdate+0xbc>)
1000115a:	1c19      	adds	r1, r3, #0
1000115c:	f001 f95e 	bl	1000241c <__aeabi_uidiv>
10001160:	1c03      	adds	r3, r0, #0
10001162:	011a      	lsls	r2, r3, #4
10001164:	4b17      	ldr	r3, [pc, #92]	; (100011c4 <SystemCoreClockUpdate+0xc0>)
10001166:	601a      	str	r2, [r3, #0]
10001168:	e021      	b.n	100011ae <SystemCoreClockUpdate+0xaa>
    }
    else
    {
       SystemCoreClock = ((uint32_t)((OSCHP_GetFrequency() << 6U) / ((IDIV << 10) + FDIV))) << 4U;
1000116a:	f000 f82f 	bl	100011cc <OSCHP_GetFrequency>
1000116e:	1c03      	adds	r3, r0, #0
10001170:	0199      	lsls	r1, r3, #6
10001172:	4b11      	ldr	r3, [pc, #68]	; (100011b8 <SystemCoreClockUpdate+0xb4>)
10001174:	681b      	ldr	r3, [r3, #0]
10001176:	029a      	lsls	r2, r3, #10
10001178:	4b10      	ldr	r3, [pc, #64]	; (100011bc <SystemCoreClockUpdate+0xb8>)
1000117a:	681b      	ldr	r3, [r3, #0]
1000117c:	18d3      	adds	r3, r2, r3
1000117e:	1c08      	adds	r0, r1, #0
10001180:	1c19      	adds	r1, r3, #0
10001182:	f001 f94b 	bl	1000241c <__aeabi_uidiv>
10001186:	1c03      	adds	r3, r0, #0
10001188:	011a      	lsls	r2, r3, #4
1000118a:	4b0e      	ldr	r3, [pc, #56]	; (100011c4 <SystemCoreClockUpdate+0xc0>)
1000118c:	601a      	str	r2, [r3, #0]
1000118e:	e00e      	b.n	100011ae <SystemCoreClockUpdate+0xaa>
    }
  }
  else
  {
    /* Fractional divider bypassed. */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
10001190:	4b08      	ldr	r3, [pc, #32]	; (100011b4 <SystemCoreClockUpdate+0xb0>)
10001192:	69da      	ldr	r2, [r3, #28]
10001194:	2380      	movs	r3, #128	; 0x80
10001196:	009b      	lsls	r3, r3, #2
10001198:	4013      	ands	r3, r2
1000119a:	d103      	bne.n	100011a4 <SystemCoreClockUpdate+0xa0>
    {
        SystemCoreClock = DCO1_FREQUENCY;
1000119c:	4b09      	ldr	r3, [pc, #36]	; (100011c4 <SystemCoreClockUpdate+0xc0>)
1000119e:	4a0a      	ldr	r2, [pc, #40]	; (100011c8 <SystemCoreClockUpdate+0xc4>)
100011a0:	601a      	str	r2, [r3, #0]
100011a2:	e004      	b.n	100011ae <SystemCoreClockUpdate+0xaa>
    }
    else
    {
        SystemCoreClock = OSCHP_GetFrequency();
100011a4:	f000 f812 	bl	100011cc <OSCHP_GetFrequency>
100011a8:	1c02      	adds	r2, r0, #0
100011aa:	4b06      	ldr	r3, [pc, #24]	; (100011c4 <SystemCoreClockUpdate+0xc0>)
100011ac:	601a      	str	r2, [r3, #0]
    }
  }
}
100011ae:	46bd      	mov	sp, r7
100011b0:	bd80      	pop	{r7, pc}
100011b2:	46c0      	nop			; (mov r8, r8)
100011b4:	40010300 	.word	0x40010300
100011b8:	20000708 	.word	0x20000708
100011bc:	2000070c 	.word	0x2000070c
100011c0:	b71b0000 	.word	0xb71b0000
100011c4:	20003ffc 	.word	0x20003ffc
100011c8:	02dc6c00 	.word	0x02dc6c00

100011cc <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
100011cc:	b580      	push	{r7, lr}
100011ce:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
100011d0:	4b01      	ldr	r3, [pc, #4]	; (100011d8 <OSCHP_GetFrequency+0xc>)
}
100011d2:	1c18      	adds	r0, r3, #0
100011d4:	46bd      	mov	sp, r7
100011d6:	bd80      	pop	{r7, pc}
100011d8:	01312d00 	.word	0x01312d00

100011dc <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
100011dc:	b580      	push	{r7, lr}
100011de:	b082      	sub	sp, #8
100011e0:	af00      	add	r7, sp, #0
100011e2:	6078      	str	r0, [r7, #4]
  XMC_UNUSED_ARG(eru);
}
100011e4:	46bd      	mov	sp, r7
100011e6:	b002      	add	sp, #8
100011e8:	bd80      	pop	{r7, pc}
100011ea:	46c0      	nop			; (mov r8, r8)

100011ec <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
100011ec:	b590      	push	{r4, r7, lr}
100011ee:	b085      	sub	sp, #20
100011f0:	af00      	add	r7, sp, #0
100011f2:	60f8      	str	r0, [r7, #12]
100011f4:	607a      	str	r2, [r7, #4]
100011f6:	230b      	movs	r3, #11
100011f8:	18fb      	adds	r3, r7, r3
100011fa:	1c0a      	adds	r2, r1, #0
100011fc:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
100011fe:	230b      	movs	r3, #11
10001200:	18fb      	adds	r3, r7, r3
10001202:	781b      	ldrb	r3, [r3, #0]
10001204:	089b      	lsrs	r3, r3, #2
10001206:	b2db      	uxtb	r3, r3
10001208:	1c18      	adds	r0, r3, #0
1000120a:	230b      	movs	r3, #11
1000120c:	18fb      	adds	r3, r7, r3
1000120e:	781b      	ldrb	r3, [r3, #0]
10001210:	089b      	lsrs	r3, r3, #2
10001212:	b2db      	uxtb	r3, r3
10001214:	1c1a      	adds	r2, r3, #0
10001216:	68fb      	ldr	r3, [r7, #12]
10001218:	3204      	adds	r2, #4
1000121a:	0092      	lsls	r2, r2, #2
1000121c:	58d3      	ldr	r3, [r2, r3]
1000121e:	220b      	movs	r2, #11
10001220:	18ba      	adds	r2, r7, r2
10001222:	7812      	ldrb	r2, [r2, #0]
10001224:	2103      	movs	r1, #3
10001226:	400a      	ands	r2, r1
10001228:	00d2      	lsls	r2, r2, #3
1000122a:	1c11      	adds	r1, r2, #0
1000122c:	22fc      	movs	r2, #252	; 0xfc
1000122e:	408a      	lsls	r2, r1
10001230:	43d2      	mvns	r2, r2
10001232:	401a      	ands	r2, r3
10001234:	1c11      	adds	r1, r2, #0
10001236:	68fb      	ldr	r3, [r7, #12]
10001238:	1d02      	adds	r2, r0, #4
1000123a:	0092      	lsls	r2, r2, #2
1000123c:	50d1      	str	r1, [r2, r3]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
1000123e:	68fb      	ldr	r3, [r7, #12]
10001240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10001242:	220b      	movs	r2, #11
10001244:	18ba      	adds	r2, r7, r2
10001246:	7812      	ldrb	r2, [r2, #0]
10001248:	0052      	lsls	r2, r2, #1
1000124a:	1c11      	adds	r1, r2, #0
1000124c:	2203      	movs	r2, #3
1000124e:	408a      	lsls	r2, r1
10001250:	43d2      	mvns	r2, r2
10001252:	401a      	ands	r2, r3
10001254:	68fb      	ldr	r3, [r7, #12]
10001256:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
10001258:	230b      	movs	r3, #11
1000125a:	18fb      	adds	r3, r7, r3
1000125c:	781b      	ldrb	r3, [r3, #0]
1000125e:	08db      	lsrs	r3, r3, #3
10001260:	b2db      	uxtb	r3, r3
10001262:	1c18      	adds	r0, r3, #0
10001264:	230b      	movs	r3, #11
10001266:	18fb      	adds	r3, r7, r3
10001268:	781b      	ldrb	r3, [r3, #0]
1000126a:	08db      	lsrs	r3, r3, #3
1000126c:	b2db      	uxtb	r3, r3
1000126e:	1c1a      	adds	r2, r3, #0
10001270:	68fb      	ldr	r3, [r7, #12]
10001272:	3210      	adds	r2, #16
10001274:	0092      	lsls	r2, r2, #2
10001276:	58d3      	ldr	r3, [r2, r3]
10001278:	220b      	movs	r2, #11
1000127a:	18ba      	adds	r2, r7, r2
1000127c:	7812      	ldrb	r2, [r2, #0]
1000127e:	2107      	movs	r1, #7
10001280:	400a      	ands	r2, r1
10001282:	0092      	lsls	r2, r2, #2
10001284:	1c11      	adds	r1, r2, #0
10001286:	2204      	movs	r2, #4
10001288:	408a      	lsls	r2, r1
1000128a:	43d2      	mvns	r2, r2
1000128c:	401a      	ands	r2, r3
1000128e:	1c11      	adds	r1, r2, #0
10001290:	68fb      	ldr	r3, [r7, #12]
10001292:	1c02      	adds	r2, r0, #0
10001294:	3210      	adds	r2, #16
10001296:	0092      	lsls	r2, r2, #2
10001298:	50d1      	str	r1, [r2, r3]
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
1000129a:	230b      	movs	r3, #11
1000129c:	18fb      	adds	r3, r7, r3
1000129e:	781b      	ldrb	r3, [r3, #0]
100012a0:	08db      	lsrs	r3, r3, #3
100012a2:	b2db      	uxtb	r3, r3
100012a4:	1c18      	adds	r0, r3, #0
100012a6:	230b      	movs	r3, #11
100012a8:	18fb      	adds	r3, r7, r3
100012aa:	781b      	ldrb	r3, [r3, #0]
100012ac:	08db      	lsrs	r3, r3, #3
100012ae:	b2db      	uxtb	r3, r3
100012b0:	1c1a      	adds	r2, r3, #0
100012b2:	68fb      	ldr	r3, [r7, #12]
100012b4:	3210      	adds	r2, #16
100012b6:	0092      	lsls	r2, r2, #2
100012b8:	58d2      	ldr	r2, [r2, r3]
100012ba:	687b      	ldr	r3, [r7, #4]
100012bc:	785b      	ldrb	r3, [r3, #1]
100012be:	1c1c      	adds	r4, r3, #0
100012c0:	230b      	movs	r3, #11
100012c2:	18fb      	adds	r3, r7, r3
100012c4:	781b      	ldrb	r3, [r3, #0]
100012c6:	2107      	movs	r1, #7
100012c8:	400b      	ands	r3, r1
100012ca:	009b      	lsls	r3, r3, #2
100012cc:	409c      	lsls	r4, r3
100012ce:	1c23      	adds	r3, r4, #0
100012d0:	431a      	orrs	r2, r3
100012d2:	1c11      	adds	r1, r2, #0
100012d4:	68fb      	ldr	r3, [r7, #12]
100012d6:	1c02      	adds	r2, r0, #0
100012d8:	3210      	adds	r2, #16
100012da:	0092      	lsls	r2, r2, #2
100012dc:	50d1      	str	r1, [r2, r3]
    
  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
100012de:	68fb      	ldr	r3, [r7, #12]
100012e0:	4a20      	ldr	r2, [pc, #128]	; (10001364 <XMC_GPIO_Init+0x178>)
100012e2:	4293      	cmp	r3, r2
100012e4:	d10c      	bne.n	10001300 <XMC_GPIO_Init+0x114>
  {    
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
100012e6:	68fb      	ldr	r3, [r7, #12]
100012e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
100012ea:	220b      	movs	r2, #11
100012ec:	18ba      	adds	r2, r7, r2
100012ee:	7812      	ldrb	r2, [r2, #0]
100012f0:	2101      	movs	r1, #1
100012f2:	4091      	lsls	r1, r2
100012f4:	1c0a      	adds	r2, r1, #0
100012f6:	43d2      	mvns	r2, r2
100012f8:	401a      	ands	r2, r3
100012fa:	68fb      	ldr	r3, [r7, #12]
100012fc:	661a      	str	r2, [r3, #96]	; 0x60
100012fe:	e00d      	b.n	1000131c <XMC_GPIO_Init+0x130>
  }
  else 
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
10001300:	687b      	ldr	r3, [r7, #4]
10001302:	781b      	ldrb	r3, [r3, #0]
10001304:	b2db      	uxtb	r3, r3
10001306:	b25b      	sxtb	r3, r3
10001308:	2b00      	cmp	r3, #0
1000130a:	da07      	bge.n	1000131c <XMC_GPIO_Init+0x130>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
1000130c:	687b      	ldr	r3, [r7, #4]
1000130e:	685a      	ldr	r2, [r3, #4]
10001310:	230b      	movs	r3, #11
10001312:	18fb      	adds	r3, r7, r3
10001314:	781b      	ldrb	r3, [r3, #0]
10001316:	409a      	lsls	r2, r3
10001318:	68fb      	ldr	r3, [r7, #12]
1000131a:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
1000131c:	230b      	movs	r3, #11
1000131e:	18fb      	adds	r3, r7, r3
10001320:	781b      	ldrb	r3, [r3, #0]
10001322:	089b      	lsrs	r3, r3, #2
10001324:	b2db      	uxtb	r3, r3
10001326:	1c18      	adds	r0, r3, #0
10001328:	230b      	movs	r3, #11
1000132a:	18fb      	adds	r3, r7, r3
1000132c:	781b      	ldrb	r3, [r3, #0]
1000132e:	089b      	lsrs	r3, r3, #2
10001330:	b2db      	uxtb	r3, r3
10001332:	1c1a      	adds	r2, r3, #0
10001334:	68fb      	ldr	r3, [r7, #12]
10001336:	3204      	adds	r2, #4
10001338:	0092      	lsls	r2, r2, #2
1000133a:	58d2      	ldr	r2, [r2, r3]
1000133c:	687b      	ldr	r3, [r7, #4]
1000133e:	781b      	ldrb	r3, [r3, #0]
10001340:	1c1c      	adds	r4, r3, #0
10001342:	230b      	movs	r3, #11
10001344:	18fb      	adds	r3, r7, r3
10001346:	781b      	ldrb	r3, [r3, #0]
10001348:	2103      	movs	r1, #3
1000134a:	400b      	ands	r3, r1
1000134c:	00db      	lsls	r3, r3, #3
1000134e:	409c      	lsls	r4, r3
10001350:	1c23      	adds	r3, r4, #0
10001352:	431a      	orrs	r2, r3
10001354:	1c11      	adds	r1, r2, #0
10001356:	68fb      	ldr	r3, [r7, #12]
10001358:	1d02      	adds	r2, r0, #4
1000135a:	0092      	lsls	r2, r2, #2
1000135c:	50d1      	str	r1, [r2, r3]
}
1000135e:	46bd      	mov	sp, r7
10001360:	b005      	add	sp, #20
10001362:	bd90      	pop	{r4, r7, pc}
10001364:	40040200 	.word	0x40040200

10001368 <XMC_SCU_LockProtectedBits>:
#endif
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
10001368:	b580      	push	{r7, lr}
1000136a:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
1000136c:	4b02      	ldr	r3, [pc, #8]	; (10001378 <XMC_SCU_LockProtectedBits+0x10>)
1000136e:	22c3      	movs	r2, #195	; 0xc3
10001370:	625a      	str	r2, [r3, #36]	; 0x24
}
10001372:	46bd      	mov	sp, r7
10001374:	bd80      	pop	{r7, pc}
10001376:	46c0      	nop			; (mov r8, r8)
10001378:	40010000 	.word	0x40010000

1000137c <XMC_SCU_UnlockProtectedBits>:

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
1000137c:	b580      	push	{r7, lr}
1000137e:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
10001380:	4b05      	ldr	r3, [pc, #20]	; (10001398 <XMC_SCU_UnlockProtectedBits+0x1c>)
10001382:	22c0      	movs	r2, #192	; 0xc0
10001384:	625a      	str	r2, [r3, #36]	; 0x24

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
10001386:	46c0      	nop			; (mov r8, r8)
10001388:	4b03      	ldr	r3, [pc, #12]	; (10001398 <XMC_SCU_UnlockProtectedBits+0x1c>)
1000138a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000138c:	2204      	movs	r2, #4
1000138e:	4013      	ands	r3, r2
10001390:	d1fa      	bne.n	10001388 <XMC_SCU_UnlockProtectedBits+0xc>
  {
    /* Loop until the lock is removed */
  }
}
10001392:	46bd      	mov	sp, r7
10001394:	bd80      	pop	{r7, pc}
10001396:	46c0      	nop			; (mov r8, r8)
10001398:	40010000 	.word	0x40010000

1000139c <XMC_SCU_CLOCK_UngatePeripheralClock>:
  XMC_SCU_LockProtectedBits();
}

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
1000139c:	b580      	push	{r7, lr}
1000139e:	b082      	sub	sp, #8
100013a0:	af00      	add	r7, sp, #0
100013a2:	6078      	str	r0, [r7, #4]
  XMC_SCU_UnlockProtectedBits();
100013a4:	f7ff ffea 	bl	1000137c <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
100013a8:	4b08      	ldr	r3, [pc, #32]	; (100013cc <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
100013aa:	4a08      	ldr	r2, [pc, #32]	; (100013cc <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
100013ac:	6911      	ldr	r1, [r2, #16]
100013ae:	687a      	ldr	r2, [r7, #4]
100013b0:	430a      	orrs	r2, r1
100013b2:	611a      	str	r2, [r3, #16]
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100013b4:	46c0      	nop			; (mov r8, r8)
100013b6:	4b05      	ldr	r3, [pc, #20]	; (100013cc <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
100013b8:	681a      	ldr	r2, [r3, #0]
100013ba:	2380      	movs	r3, #128	; 0x80
100013bc:	05db      	lsls	r3, r3, #23
100013be:	4013      	ands	r3, r2
100013c0:	d1f9      	bne.n	100013b6 <XMC_SCU_CLOCK_UngatePeripheralClock+0x1a>
  {
    /* Wait voltage suply stabilization */
  }
  XMC_SCU_LockProtectedBits();
100013c2:	f7ff ffd1 	bl	10001368 <XMC_SCU_LockProtectedBits>
}
100013c6:	46bd      	mov	sp, r7
100013c8:	b002      	add	sp, #8
100013ca:	bd80      	pop	{r7, pc}
100013cc:	40010300 	.word	0x40010300

100013d0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
100013d0:	b580      	push	{r7, lr}
100013d2:	af00      	add	r7, sp, #0
  return (SystemCoreClock);
100013d4:	4b02      	ldr	r3, [pc, #8]	; (100013e0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
100013d6:	681b      	ldr	r3, [r3, #0]
}
100013d8:	1c18      	adds	r0, r3, #0
100013da:	46bd      	mov	sp, r7
100013dc:	bd80      	pop	{r7, pc}
100013de:	46c0      	nop			; (mov r8, r8)
100013e0:	20003ffc 	.word	0x20003ffc

100013e4 <XMC_SCU_SetInterruptControl>:
  return (bool)((SCU_ANALOG->ANASYNC2 & SCU_ANALOG_ANASYNC2_SYNC_READY_Msk) != 0U);
}

/* This function selects service request source for a NVIC interrupt node */
void XMC_SCU_SetInterruptControl(uint8_t irq_number, XMC_SCU_IRQCTRL_t source)
{
100013e4:	b580      	push	{r7, lr}
100013e6:	b082      	sub	sp, #8
100013e8:	af00      	add	r7, sp, #0
100013ea:	1c02      	adds	r2, r0, #0
100013ec:	1dfb      	adds	r3, r7, #7
100013ee:	701a      	strb	r2, [r3, #0]
100013f0:	1d3b      	adds	r3, r7, #4
100013f2:	1c0a      	adds	r2, r1, #0
100013f4:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid irq_number", irq_number < 32);
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
100013f6:	1d3b      	adds	r3, r7, #4
100013f8:	1d3a      	adds	r2, r7, #4
100013fa:	8812      	ldrh	r2, [r2, #0]
100013fc:	2103      	movs	r1, #3
100013fe:	400a      	ands	r2, r1
10001400:	801a      	strh	r2, [r3, #0]
  if (irq_number < 16U)
10001402:	1dfb      	adds	r3, r7, #7
10001404:	781b      	ldrb	r3, [r3, #0]
10001406:	2b0f      	cmp	r3, #15
10001408:	d813      	bhi.n	10001432 <XMC_SCU_SetInterruptControl+0x4e>
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
1000140a:	4b18      	ldr	r3, [pc, #96]	; (1000146c <XMC_SCU_SetInterruptControl+0x88>)
1000140c:	4a17      	ldr	r2, [pc, #92]	; (1000146c <XMC_SCU_SetInterruptControl+0x88>)
1000140e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
10001410:	1df9      	adds	r1, r7, #7
10001412:	7809      	ldrb	r1, [r1, #0]
10001414:	0049      	lsls	r1, r1, #1
10001416:	1c08      	adds	r0, r1, #0
10001418:	2103      	movs	r1, #3
1000141a:	4081      	lsls	r1, r0
1000141c:	43c9      	mvns	r1, r1
1000141e:	400a      	ands	r2, r1
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
10001420:	1d39      	adds	r1, r7, #4
10001422:	8809      	ldrh	r1, [r1, #0]
10001424:	1df8      	adds	r0, r7, #7
10001426:	7800      	ldrb	r0, [r0, #0]
10001428:	0040      	lsls	r0, r0, #1
1000142a:	4081      	lsls	r1, r0
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
  if (irq_number < 16U)
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
1000142c:	430a      	orrs	r2, r1
1000142e:	66da      	str	r2, [r3, #108]	; 0x6c
10001430:	e018      	b.n	10001464 <XMC_SCU_SetInterruptControl+0x80>
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
10001432:	1dfb      	adds	r3, r7, #7
10001434:	1dfa      	adds	r2, r7, #7
10001436:	7812      	ldrb	r2, [r2, #0]
10001438:	210f      	movs	r1, #15
1000143a:	400a      	ands	r2, r1
1000143c:	701a      	strb	r2, [r3, #0]
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
1000143e:	4b0b      	ldr	r3, [pc, #44]	; (1000146c <XMC_SCU_SetInterruptControl+0x88>)
10001440:	4a0a      	ldr	r2, [pc, #40]	; (1000146c <XMC_SCU_SetInterruptControl+0x88>)
10001442:	6f12      	ldr	r2, [r2, #112]	; 0x70
10001444:	1df9      	adds	r1, r7, #7
10001446:	7809      	ldrb	r1, [r1, #0]
10001448:	0049      	lsls	r1, r1, #1
1000144a:	1c08      	adds	r0, r1, #0
1000144c:	2103      	movs	r1, #3
1000144e:	4081      	lsls	r1, r0
10001450:	43c9      	mvns	r1, r1
10001452:	400a      	ands	r2, r1
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
10001454:	1d39      	adds	r1, r7, #4
10001456:	8809      	ldrh	r1, [r1, #0]
10001458:	1df8      	adds	r0, r7, #7
1000145a:	7800      	ldrb	r0, [r0, #0]
1000145c:	0040      	lsls	r0, r0, #1
1000145e:	4081      	lsls	r1, r0
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
10001460:	430a      	orrs	r2, r1
10001462:	671a      	str	r2, [r3, #112]	; 0x70
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
  }
}
10001464:	46bd      	mov	sp, r7
10001466:	b002      	add	sp, #8
10001468:	bd80      	pop	{r7, pc}
1000146a:	46c0      	nop			; (mov r8, r8)
1000146c:	40010000 	.word	0x40010000

10001470 <XMC_CAN_IsPanelControlReady>:
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
10001470:	b580      	push	{r7, lr}
10001472:	b082      	sub	sp, #8
10001474:	af00      	add	r7, sp, #0
10001476:	6078      	str	r0, [r7, #4]
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
10001478:	687a      	ldr	r2, [r7, #4]
1000147a:	23e2      	movs	r3, #226	; 0xe2
1000147c:	005b      	lsls	r3, r3, #1
1000147e:	58d2      	ldr	r2, [r2, r3]
10001480:	23c0      	movs	r3, #192	; 0xc0
10001482:	009b      	lsls	r3, r3, #2
10001484:	4013      	ands	r3, r2
10001486:	425a      	negs	r2, r3
10001488:	4153      	adcs	r3, r2
1000148a:	b2db      	uxtb	r3, r3
}
1000148c:	1c18      	adds	r0, r3, #0
1000148e:	46bd      	mov	sp, r7
10001490:	b002      	add	sp, #8
10001492:	bd80      	pop	{r7, pc}

10001494 <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
10001494:	b590      	push	{r4, r7, lr}
10001496:	b083      	sub	sp, #12
10001498:	af00      	add	r7, sp, #0
1000149a:	6078      	str	r0, [r7, #4]
1000149c:	1c0c      	adds	r4, r1, #0
1000149e:	1c10      	adds	r0, r2, #0
100014a0:	1c19      	adds	r1, r3, #0
100014a2:	1cfb      	adds	r3, r7, #3
100014a4:	1c22      	adds	r2, r4, #0
100014a6:	701a      	strb	r2, [r3, #0]
100014a8:	1cbb      	adds	r3, r7, #2
100014aa:	1c02      	adds	r2, r0, #0
100014ac:	701a      	strb	r2, [r3, #0]
100014ae:	1c7b      	adds	r3, r7, #1
100014b0:	1c0a      	adds	r2, r1, #0
100014b2:	701a      	strb	r2, [r3, #0]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
100014b4:	1cfb      	adds	r3, r7, #3
100014b6:	781a      	ldrb	r2, [r3, #0]
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
100014b8:	1cbb      	adds	r3, r7, #2
100014ba:	781b      	ldrb	r3, [r3, #0]
100014bc:	0419      	lsls	r1, r3, #16
100014be:	23ff      	movs	r3, #255	; 0xff
100014c0:	041b      	lsls	r3, r3, #16
100014c2:	400b      	ands	r3, r1
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
100014c4:	431a      	orrs	r2, r3
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
100014c6:	1c7b      	adds	r3, r7, #1
100014c8:	781b      	ldrb	r3, [r3, #0]
100014ca:	061b      	lsls	r3, r3, #24
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
100014cc:	431a      	orrs	r2, r3
100014ce:	1c11      	adds	r1, r2, #0
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
100014d0:	687a      	ldr	r2, [r7, #4]
100014d2:	23e2      	movs	r3, #226	; 0xe2
100014d4:	005b      	lsls	r3, r3, #1
100014d6:	50d1      	str	r1, [r2, r3]
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
100014d8:	46bd      	mov	sp, r7
100014da:	b003      	add	sp, #12
100014dc:	bd90      	pop	{r4, r7, pc}
100014de:	46c0      	nop			; (mov r8, r8)

100014e0 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
100014e0:	b580      	push	{r7, lr}
100014e2:	b082      	sub	sp, #8
100014e4:	af00      	add	r7, sp, #0
100014e6:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
100014e8:	687b      	ldr	r3, [r7, #4]
100014ea:	681b      	ldr	r3, [r3, #0]
100014ec:	2240      	movs	r2, #64	; 0x40
100014ee:	431a      	orrs	r2, r3
100014f0:	687b      	ldr	r3, [r7, #4]
100014f2:	601a      	str	r2, [r3, #0]
}
100014f4:	46bd      	mov	sp, r7
100014f6:	b002      	add	sp, #8
100014f8:	bd80      	pop	{r7, pc}
100014fa:	46c0      	nop			; (mov r8, r8)

100014fc <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
100014fc:	b580      	push	{r7, lr}
100014fe:	b082      	sub	sp, #8
10001500:	af00      	add	r7, sp, #0
10001502:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
10001504:	687b      	ldr	r3, [r7, #4]
10001506:	681b      	ldr	r3, [r3, #0]
10001508:	2240      	movs	r2, #64	; 0x40
1000150a:	4393      	bics	r3, r2
1000150c:	1c1a      	adds	r2, r3, #0
1000150e:	687b      	ldr	r3, [r7, #4]
10001510:	601a      	str	r2, [r3, #0]
}
10001512:	46bd      	mov	sp, r7
10001514:	b002      	add	sp, #8
10001516:	bd80      	pop	{r7, pc}

10001518 <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
10001518:	b580      	push	{r7, lr}
1000151a:	b082      	sub	sp, #8
1000151c:	af00      	add	r7, sp, #0
1000151e:	6078      	str	r0, [r7, #4]
10001520:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
10001522:	687a      	ldr	r2, [r7, #4]
10001524:	683b      	ldr	r3, [r7, #0]
10001526:	4293      	cmp	r3, r2
10001528:	d200      	bcs.n	1000152c <max+0x14>
1000152a:	1c13      	adds	r3, r2, #0
}
1000152c:	1c18      	adds	r0, r3, #0
1000152e:	46bd      	mov	sp, r7
10001530:	b002      	add	sp, #8
10001532:	bd80      	pop	{r7, pc}

10001534 <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
10001534:	b580      	push	{r7, lr}
10001536:	b082      	sub	sp, #8
10001538:	af00      	add	r7, sp, #0
1000153a:	6078      	str	r0, [r7, #4]
1000153c:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
1000153e:	687a      	ldr	r2, [r7, #4]
10001540:	683b      	ldr	r3, [r7, #0]
10001542:	4293      	cmp	r3, r2
10001544:	d900      	bls.n	10001548 <min+0x14>
10001546:	1c13      	adds	r3, r2, #0
}
10001548:	1c18      	adds	r0, r3, #0
1000154a:	46bd      	mov	sp, r7
1000154c:	b002      	add	sp, #8
1000154e:	bd80      	pop	{r7, pc}

10001550 <XMC_CAN_NODE_NominalBitTimeConfigure>:
}

/* Baudrate Configuration */
void XMC_CAN_NODE_NominalBitTimeConfigure (XMC_CAN_NODE_t *const can_node,
                                           const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_bit_time)
{
10001550:	b580      	push	{r7, lr}
10001552:	b090      	sub	sp, #64	; 0x40
10001554:	af00      	add	r7, sp, #0
10001556:	6078      	str	r0, [r7, #4]
10001558:	6039      	str	r1, [r7, #0]
  uint32_t temp_brp = 12U ;
1000155a:	230c      	movs	r3, #12
1000155c:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t temp_tseg1 = 12U;
1000155e:	230c      	movs	r3, #12
10001560:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t best_brp = 0U;
10001562:	2300      	movs	r3, #0
10001564:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t best_tseg1 = 1U;
10001566:	2301      	movs	r3, #1
10001568:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t best_tseg2 = 0U;
1000156a:	2300      	movs	r3, #0
1000156c:	617b      	str	r3, [r7, #20]
  uint32_t best_tbaud = 0U;
1000156e:	2300      	movs	r3, #0
10001570:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t best_error = 10000U;
10001572:	4b6a      	ldr	r3, [pc, #424]	; (1000171c <XMC_CAN_NODE_NominalBitTimeConfigure+0x1cc>)
10001574:	62bb      	str	r3, [r7, #40]	; 0x28
   * Tsjw = (SJW + 1)*Tq
   * TSeg1 >= Tsjw + Tprop
   * TSeg2 >= Tsjw
   */
  /* search for best baudrate */
  for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
10001576:	2301      	movs	r3, #1
10001578:	63fb      	str	r3, [r7, #60]	; 0x3c
1000157a:	e06a      	b.n	10001652 <XMC_CAN_NODE_NominalBitTimeConfigure+0x102>
  {

    uint32_t f_quanta = (uint32_t)((can_bit_time->can_frequency * 10U) / temp_brp);
1000157c:	683b      	ldr	r3, [r7, #0]
1000157e:	681a      	ldr	r2, [r3, #0]
10001580:	1c13      	adds	r3, r2, #0
10001582:	009b      	lsls	r3, r3, #2
10001584:	189b      	adds	r3, r3, r2
10001586:	005b      	lsls	r3, r3, #1
10001588:	1c18      	adds	r0, r3, #0
1000158a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
1000158c:	f000 ff46 	bl	1000241c <__aeabi_uidiv>
10001590:	1c03      	adds	r3, r0, #0
10001592:	613b      	str	r3, [r7, #16]
    uint32_t temp_tbaud = (uint32_t)(f_quanta / (can_bit_time->baudrate));
10001594:	683b      	ldr	r3, [r7, #0]
10001596:	685b      	ldr	r3, [r3, #4]
10001598:	6938      	ldr	r0, [r7, #16]
1000159a:	1c19      	adds	r1, r3, #0
1000159c:	f000 ff3e 	bl	1000241c <__aeabi_uidiv>
100015a0:	1c03      	adds	r3, r0, #0
100015a2:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t temp_baudrate;
    uint32_t error;

  if((temp_tbaud % 10U) > 5U)
100015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100015a6:	1c18      	adds	r0, r3, #0
100015a8:	210a      	movs	r1, #10
100015aa:	f000 ff5f 	bl	1000246c <__aeabi_uidivmod>
100015ae:	1e0b      	subs	r3, r1, #0
100015b0:	2b05      	cmp	r3, #5
100015b2:	d90a      	bls.n	100015ca <XMC_CAN_NODE_NominalBitTimeConfigure+0x7a>
  {
  temp_tbaud = (uint32_t)(temp_tbaud / 10U);
100015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100015b6:	1c18      	adds	r0, r3, #0
100015b8:	210a      	movs	r1, #10
100015ba:	f000 ff2f 	bl	1000241c <__aeabi_uidiv>
100015be:	1c03      	adds	r3, r0, #0
100015c0:	627b      	str	r3, [r7, #36]	; 0x24
  temp_tbaud++;
100015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100015c4:	3301      	adds	r3, #1
100015c6:	627b      	str	r3, [r7, #36]	; 0x24
100015c8:	e006      	b.n	100015d8 <XMC_CAN_NODE_NominalBitTimeConfigure+0x88>
  }
  else
  {
  temp_tbaud = (uint32_t)(temp_tbaud / 10U);
100015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100015cc:	1c18      	adds	r0, r3, #0
100015ce:	210a      	movs	r1, #10
100015d0:	f000 ff24 	bl	1000241c <__aeabi_uidiv>
100015d4:	1c03      	adds	r3, r0, #0
100015d6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if(temp_tbaud > 0U)
100015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100015da:	2b00      	cmp	r3, #0
100015dc:	d00b      	beq.n	100015f6 <XMC_CAN_NODE_NominalBitTimeConfigure+0xa6>
  {
    temp_baudrate = (uint32_t) (f_quanta / (temp_tbaud * 10U));
100015de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100015e0:	1c13      	adds	r3, r2, #0
100015e2:	009b      	lsls	r3, r3, #2
100015e4:	189b      	adds	r3, r3, r2
100015e6:	005b      	lsls	r3, r3, #1
100015e8:	6938      	ldr	r0, [r7, #16]
100015ea:	1c19      	adds	r1, r3, #0
100015ec:	f000 ff16 	bl	1000241c <__aeabi_uidiv>
100015f0:	1c03      	adds	r3, r0, #0
100015f2:	623b      	str	r3, [r7, #32]
100015f4:	e008      	b.n	10001608 <XMC_CAN_NODE_NominalBitTimeConfigure+0xb8>
  }
  else
  {
    temp_baudrate = f_quanta / 10U;
100015f6:	693b      	ldr	r3, [r7, #16]
100015f8:	1c18      	adds	r0, r3, #0
100015fa:	210a      	movs	r1, #10
100015fc:	f000 ff0e 	bl	1000241c <__aeabi_uidiv>
10001600:	1c03      	adds	r3, r0, #0
10001602:	623b      	str	r3, [r7, #32]
  temp_tbaud = 1;
10001604:	2301      	movs	r3, #1
10001606:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if(temp_baudrate >= can_bit_time->baudrate)
10001608:	683b      	ldr	r3, [r7, #0]
1000160a:	685a      	ldr	r2, [r3, #4]
1000160c:	6a3b      	ldr	r3, [r7, #32]
1000160e:	429a      	cmp	r2, r3
10001610:	d805      	bhi.n	1000161e <XMC_CAN_NODE_NominalBitTimeConfigure+0xce>
  {
  error = temp_baudrate - can_bit_time->baudrate;
10001612:	683b      	ldr	r3, [r7, #0]
10001614:	685b      	ldr	r3, [r3, #4]
10001616:	6a3a      	ldr	r2, [r7, #32]
10001618:	1ad3      	subs	r3, r2, r3
1000161a:	61fb      	str	r3, [r7, #28]
1000161c:	e004      	b.n	10001628 <XMC_CAN_NODE_NominalBitTimeConfigure+0xd8>
  }
  else
  {
  error = can_bit_time->baudrate - temp_baudrate;
1000161e:	683b      	ldr	r3, [r7, #0]
10001620:	685a      	ldr	r2, [r3, #4]
10001622:	6a3b      	ldr	r3, [r7, #32]
10001624:	1ad3      	subs	r3, r2, r3
10001626:	61fb      	str	r3, [r7, #28]
  }

  if ((temp_tbaud <= 20U) && (best_error > error))
10001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000162a:	2b14      	cmp	r3, #20
1000162c:	d80e      	bhi.n	1000164c <XMC_CAN_NODE_NominalBitTimeConfigure+0xfc>
1000162e:	6aba      	ldr	r2, [r7, #40]	; 0x28
10001630:	69fb      	ldr	r3, [r7, #28]
10001632:	429a      	cmp	r2, r3
10001634:	d90a      	bls.n	1000164c <XMC_CAN_NODE_NominalBitTimeConfigure+0xfc>
  {
    best_brp = temp_brp;
10001636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10001638:	637b      	str	r3, [r7, #52]	; 0x34
    best_tbaud = temp_tbaud;
1000163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000163c:	62fb      	str	r3, [r7, #44]	; 0x2c
    best_error = (error);
1000163e:	69fb      	ldr	r3, [r7, #28]
10001640:	62bb      	str	r3, [r7, #40]	; 0x28

    if (error < 1000U)
10001642:	69fb      	ldr	r3, [r7, #28]
10001644:	4a36      	ldr	r2, [pc, #216]	; (10001720 <XMC_CAN_NODE_NominalBitTimeConfigure+0x1d0>)
10001646:	4293      	cmp	r3, r2
10001648:	d800      	bhi.n	1000164c <XMC_CAN_NODE_NominalBitTimeConfigure+0xfc>
    {
      break;
1000164a:	e005      	b.n	10001658 <XMC_CAN_NODE_NominalBitTimeConfigure+0x108>
   * Tsjw = (SJW + 1)*Tq
   * TSeg1 >= Tsjw + Tprop
   * TSeg2 >= Tsjw
   */
  /* search for best baudrate */
  for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
1000164c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
1000164e:	3301      	adds	r3, #1
10001650:	63fb      	str	r3, [r7, #60]	; 0x3c
10001652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10001654:	2b40      	cmp	r3, #64	; 0x40
10001656:	d991      	bls.n	1000157c <XMC_CAN_NODE_NominalBitTimeConfigure+0x2c>
      break;
    }
   }
  }
  /* search for best sample point */
  best_error = 10000U;
10001658:	4b30      	ldr	r3, [pc, #192]	; (1000171c <XMC_CAN_NODE_NominalBitTimeConfigure+0x1cc>)
1000165a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
1000165c:	2340      	movs	r3, #64	; 0x40
1000165e:	63bb      	str	r3, [r7, #56]	; 0x38
10001660:	e02e      	b.n	100016c0 <XMC_CAN_NODE_NominalBitTimeConfigure+0x170>
  {
    uint32_t tempSamplePoint = ((temp_tseg1 + 1U) * 10000U) / best_tbaud;
10001662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10001664:	3301      	adds	r3, #1
10001666:	4a2d      	ldr	r2, [pc, #180]	; (1000171c <XMC_CAN_NODE_NominalBitTimeConfigure+0x1cc>)
10001668:	4353      	muls	r3, r2
1000166a:	1c18      	adds	r0, r3, #0
1000166c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
1000166e:	f000 fed5 	bl	1000241c <__aeabi_uidiv>
10001672:	1c03      	adds	r3, r0, #0
10001674:	60fb      	str	r3, [r7, #12]
  uint32_t error;
  if (tempSamplePoint >= can_bit_time->sample_point)
10001676:	683b      	ldr	r3, [r7, #0]
10001678:	891b      	ldrh	r3, [r3, #8]
1000167a:	1e1a      	subs	r2, r3, #0
1000167c:	68fb      	ldr	r3, [r7, #12]
1000167e:	429a      	cmp	r2, r3
10001680:	d806      	bhi.n	10001690 <XMC_CAN_NODE_NominalBitTimeConfigure+0x140>
  {
      error = tempSamplePoint  - can_bit_time->sample_point;
10001682:	683b      	ldr	r3, [r7, #0]
10001684:	891b      	ldrh	r3, [r3, #8]
10001686:	1c1a      	adds	r2, r3, #0
10001688:	68fb      	ldr	r3, [r7, #12]
1000168a:	1a9b      	subs	r3, r3, r2
1000168c:	61bb      	str	r3, [r7, #24]
1000168e:	e005      	b.n	1000169c <XMC_CAN_NODE_NominalBitTimeConfigure+0x14c>
  }
  else
  {
    error = can_bit_time->sample_point  - tempSamplePoint;
10001690:	683b      	ldr	r3, [r7, #0]
10001692:	891b      	ldrh	r3, [r3, #8]
10001694:	1c1a      	adds	r2, r3, #0
10001696:	68fb      	ldr	r3, [r7, #12]
10001698:	1ad3      	subs	r3, r2, r3
1000169a:	61bb      	str	r3, [r7, #24]
  }
    if (best_error > error)
1000169c:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000169e:	69bb      	ldr	r3, [r7, #24]
100016a0:	429a      	cmp	r2, r3
100016a2:	d903      	bls.n	100016ac <XMC_CAN_NODE_NominalBitTimeConfigure+0x15c>
    {
      best_tseg1 = temp_tseg1;
100016a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
100016a6:	633b      	str	r3, [r7, #48]	; 0x30
      best_error = error;
100016a8:	69bb      	ldr	r3, [r7, #24]
100016aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if (tempSamplePoint < (can_bit_time->sample_point))
100016ac:	683b      	ldr	r3, [r7, #0]
100016ae:	891b      	ldrh	r3, [r3, #8]
100016b0:	1e1a      	subs	r2, r3, #0
100016b2:	68fb      	ldr	r3, [r7, #12]
100016b4:	429a      	cmp	r2, r3
100016b6:	d900      	bls.n	100016ba <XMC_CAN_NODE_NominalBitTimeConfigure+0x16a>
    {
      break;
100016b8:	e005      	b.n	100016c6 <XMC_CAN_NODE_NominalBitTimeConfigure+0x176>
   }
  }
  /* search for best sample point */
  best_error = 10000U;

  for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
100016ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
100016bc:	3b01      	subs	r3, #1
100016be:	63bb      	str	r3, [r7, #56]	; 0x38
100016c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
100016c2:	2b02      	cmp	r3, #2
100016c4:	d8cd      	bhi.n	10001662 <XMC_CAN_NODE_NominalBitTimeConfigure+0x112>
    {
      break;
    }
  }

  best_tseg2 = best_tbaud - best_tseg1 - 1U;
100016c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
100016c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100016ca:	1ad3      	subs	r3, r2, r3
100016cc:	3b01      	subs	r3, #1
100016ce:	617b      	str	r3, [r7, #20]

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
100016d0:	687b      	ldr	r3, [r7, #4]
100016d2:	1c18      	adds	r0, r3, #0
100016d4:	f7ff ff04 	bl	100014e0 <XMC_CAN_NODE_EnableConfigurationChange>
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
100016d8:	697b      	ldr	r3, [r7, #20]
100016da:	3b01      	subs	r3, #1
100016dc:	031a      	lsls	r2, r3, #12
100016de:	23e0      	movs	r3, #224	; 0xe0
100016e0:	01db      	lsls	r3, r3, #7
100016e2:	401a      	ands	r2, r3
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
100016e4:	683b      	ldr	r3, [r7, #0]
100016e6:	895b      	ldrh	r3, [r3, #10]
100016e8:	3b01      	subs	r3, #1
100016ea:	019b      	lsls	r3, r3, #6
100016ec:	21ff      	movs	r1, #255	; 0xff
100016ee:	400b      	ands	r3, r1

  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
100016f0:	431a      	orrs	r2, r3
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
                   (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk)|
100016f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100016f4:	3b01      	subs	r3, #1
100016f6:	0219      	lsls	r1, r3, #8
100016f8:	23f0      	movs	r3, #240	; 0xf0
100016fa:	011b      	lsls	r3, r3, #4
100016fc:	400b      	ands	r3, r1
  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
100016fe:	431a      	orrs	r2, r3
                   (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk)|
                   (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk)|
10001700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10001702:	3b01      	subs	r3, #1
10001704:	213f      	movs	r1, #63	; 0x3f
10001706:	400b      	ands	r3, r1
10001708:	431a      	orrs	r2, r3

  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
1000170a:	687b      	ldr	r3, [r7, #4]
1000170c:	611a      	str	r2, [r3, #16]
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
                   (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk)|
                   (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk)|
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
1000170e:	687b      	ldr	r3, [r7, #4]
10001710:	1c18      	adds	r0, r3, #0
10001712:	f7ff fef3 	bl	100014fc <XMC_CAN_NODE_DisableConfigurationChange>
}
10001716:	46bd      	mov	sp, r7
10001718:	b010      	add	sp, #64	; 0x40
1000171a:	bd80      	pop	{r7, pc}
1000171c:	00002710 	.word	0x00002710
10001720:	000003e7 	.word	0x000003e7

10001724 <XMC_CAN_AllocateMOtoNodeList>:
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
10001724:	b590      	push	{r4, r7, lr}
10001726:	b083      	sub	sp, #12
10001728:	af00      	add	r7, sp, #0
1000172a:	6078      	str	r0, [r7, #4]
1000172c:	1c08      	adds	r0, r1, #0
1000172e:	1c11      	adds	r1, r2, #0
10001730:	1cfb      	adds	r3, r7, #3
10001732:	1c02      	adds	r2, r0, #0
10001734:	701a      	strb	r2, [r3, #0]
10001736:	1cbb      	adds	r3, r7, #2
10001738:	1c0a      	adds	r2, r1, #0
1000173a:	701a      	strb	r2, [r3, #0]
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
1000173c:	46c0      	nop			; (mov r8, r8)
1000173e:	687b      	ldr	r3, [r7, #4]
10001740:	1c18      	adds	r0, r3, #0
10001742:	f7ff fe95 	bl	10001470 <XMC_CAN_IsPanelControlReady>
10001746:	1c03      	adds	r3, r0, #0
10001748:	1c1a      	adds	r2, r3, #0
1000174a:	2301      	movs	r3, #1
1000174c:	4053      	eors	r3, r2
1000174e:	b2db      	uxtb	r3, r3
10001750:	2b00      	cmp	r3, #0
10001752:	d1f4      	bne.n	1000173e <XMC_CAN_AllocateMOtoNodeList+0x1a>
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE,mo_num,(node_num + 1U));
10001754:	1cfb      	adds	r3, r7, #3
10001756:	781b      	ldrb	r3, [r3, #0]
10001758:	3301      	adds	r3, #1
1000175a:	b2dc      	uxtb	r4, r3
1000175c:	687a      	ldr	r2, [r7, #4]
1000175e:	1cbb      	adds	r3, r7, #2
10001760:	781b      	ldrb	r3, [r3, #0]
10001762:	1c10      	adds	r0, r2, #0
10001764:	2102      	movs	r1, #2
10001766:	1c1a      	adds	r2, r3, #0
10001768:	1c23      	adds	r3, r4, #0
1000176a:	f7ff fe93 	bl	10001494 <XMC_CAN_PanelControl>
}
1000176e:	46bd      	mov	sp, r7
10001770:	b003      	add	sp, #12
10001772:	bd90      	pop	{r4, r7, pc}

10001774 <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
10001774:	b580      	push	{r7, lr}
10001776:	b082      	sub	sp, #8
10001778:	af00      	add	r7, sp, #0
1000177a:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
1000177c:	2380      	movs	r3, #128	; 0x80
1000177e:	039b      	lsls	r3, r3, #14
10001780:	1c18      	adds	r0, r3, #0
10001782:	f7ff fe0b 	bl	1000139c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
10001786:	687b      	ldr	r3, [r7, #4]
10001788:	681b      	ldr	r3, [r3, #0]
1000178a:	2201      	movs	r2, #1
1000178c:	4393      	bics	r3, r2
1000178e:	1c1a      	adds	r2, r3, #0
10001790:	687b      	ldr	r3, [r7, #4]
10001792:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
10001794:	46c0      	nop			; (mov r8, r8)
10001796:	687b      	ldr	r3, [r7, #4]
10001798:	681b      	ldr	r3, [r3, #0]
1000179a:	2202      	movs	r2, #2
1000179c:	4013      	ands	r3, r2
1000179e:	d1fa      	bne.n	10001796 <XMC_CAN_Enable+0x22>
  {
    /*Do nothing*/
  };
}
100017a0:	46bd      	mov	sp, r7
100017a2:	b002      	add	sp, #8
100017a4:	bd80      	pop	{r7, pc}
100017a6:	46c0      	nop			; (mov r8, r8)

100017a8 <XMC_CAN_Init>:

#if defined(MULTICAN_PLUS)
void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
{
100017a8:	b580      	push	{r7, lr}
100017aa:	b08e      	sub	sp, #56	; 0x38
100017ac:	af00      	add	r7, sp, #0
100017ae:	60f8      	str	r0, [r7, #12]
100017b0:	607a      	str	r2, [r7, #4]
100017b2:	230b      	movs	r3, #11
100017b4:	18fb      	adds	r3, r7, r3
100017b6:	1c0a      	adds	r2, r1, #0
100017b8:	701a      	strb	r2, [r3, #0]
  uint32_t peripheral_frequency_khz;
  XMC_CAN_DM_t can_divider_mode;

  uint32_t peripheral_frequency;
  /*Enabling the module*/
  XMC_CAN_Enable(obj);
100017ba:	68fb      	ldr	r3, [r7, #12]
100017bc:	1c18      	adds	r0, r3, #0
100017be:	f7ff ffd9 	bl	10001774 <XMC_CAN_Enable>

  XMC_CAN_SetBaudrateClockSource(obj, clksrc);
100017c2:	68fa      	ldr	r2, [r7, #12]
100017c4:	230b      	movs	r3, #11
100017c6:	18fb      	adds	r3, r7, r3
100017c8:	781b      	ldrb	r3, [r3, #0]
100017ca:	1c10      	adds	r0, r2, #0
100017cc:	1c19      	adds	r1, r3, #0
100017ce:	f000 f87b 	bl	100018c8 <XMC_CAN_SetBaudrateClockSource>

  peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
100017d2:	68fb      	ldr	r3, [r7, #12]
100017d4:	1c18      	adds	r0, r3, #0
100017d6:	f000 f8a1 	bl	1000191c <XMC_CAN_GetBaudrateClockFrequency>
100017da:	1c03      	adds	r3, r0, #0
100017dc:	637b      	str	r3, [r7, #52]	; 0x34

  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
100017de:	6b78      	ldr	r0, [r7, #52]	; 0x34
100017e0:	6879      	ldr	r1, [r7, #4]
100017e2:	f000 fe1b 	bl	1000241c <__aeabi_uidiv>
100017e6:	1c03      	adds	r3, r0, #0
100017e8:	1c1a      	adds	r2, r3, #0
100017ea:	2380      	movs	r3, #128	; 0x80
100017ec:	00db      	lsls	r3, r3, #3
100017ee:	1a9b      	subs	r3, r3, r2
100017f0:	2000      	movs	r0, #0
100017f2:	1c19      	adds	r1, r3, #0
100017f4:	f7ff fe90 	bl	10001518 <max>
100017f8:	1c02      	adds	r2, r0, #0
100017fa:	4b31      	ldr	r3, [pc, #196]	; (100018c0 <XMC_CAN_Init+0x118>)
100017fc:	1c10      	adds	r0, r2, #0
100017fe:	1c19      	adds	r1, r3, #0
10001800:	f7ff fe98 	bl	10001534 <min>
10001804:	1c03      	adds	r3, r0, #0
10001806:	633b      	str	r3, [r7, #48]	; 0x30
  freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
10001808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000180a:	2280      	movs	r2, #128	; 0x80
1000180c:	00d2      	lsls	r2, r2, #3
1000180e:	1ad3      	subs	r3, r2, r3
10001810:	6b78      	ldr	r0, [r7, #52]	; 0x34
10001812:	1c19      	adds	r1, r3, #0
10001814:	f000 fe02 	bl	1000241c <__aeabi_uidiv>
10001818:	1c03      	adds	r3, r0, #0
1000181a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Fractional divider mode */
  can_frequency_khz = (uint32_t) (can_frequency >> 6);
1000181c:	687b      	ldr	r3, [r7, #4]
1000181e:	099b      	lsrs	r3, r3, #6
10001820:	62bb      	str	r3, [r7, #40]	; 0x28
  peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
10001822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10001824:	099b      	lsrs	r3, r3, #6
10001826:	627b      	str	r3, [r7, #36]	; 0x24

  step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
10001828:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000182a:	029b      	lsls	r3, r3, #10
1000182c:	1c18      	adds	r0, r3, #0
1000182e:	6a79      	ldr	r1, [r7, #36]	; 0x24
10001830:	f000 fdf4 	bl	1000241c <__aeabi_uidiv>
10001834:	1c03      	adds	r3, r0, #0
10001836:	1c1a      	adds	r2, r3, #0
10001838:	4b21      	ldr	r3, [pc, #132]	; (100018c0 <XMC_CAN_Init+0x118>)
1000183a:	1c10      	adds	r0, r2, #0
1000183c:	1c19      	adds	r1, r3, #0
1000183e:	f7ff fe79 	bl	10001534 <min>
10001842:	1c03      	adds	r3, r0, #0
10001844:	623b      	str	r3, [r7, #32]
  freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
10001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10001848:	6a3a      	ldr	r2, [r7, #32]
1000184a:	4353      	muls	r3, r2
1000184c:	0a9b      	lsrs	r3, r3, #10
1000184e:	61fb      	str	r3, [r7, #28]
  freq_f = freq_f << 6;
10001850:	69fb      	ldr	r3, [r7, #28]
10001852:	019b      	lsls	r3, r3, #6
10001854:	61fb      	str	r3, [r7, #28]

  normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
10001856:	687a      	ldr	r2, [r7, #4]
10001858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000185a:	1ad1      	subs	r1, r2, r3
1000185c:	687a      	ldr	r2, [r7, #4]
1000185e:	69fb      	ldr	r3, [r7, #28]
10001860:	1ad0      	subs	r0, r2, r3
10001862:	231b      	movs	r3, #27
10001864:	18fa      	adds	r2, r7, r3
10001866:	2300      	movs	r3, #0
10001868:	4288      	cmp	r0, r1
1000186a:	415b      	adcs	r3, r3
1000186c:	7013      	strb	r3, [r2, #0]

  step   = (normal_divider != 0U) ? step_n : step_f;
1000186e:	231b      	movs	r3, #27
10001870:	18fb      	adds	r3, r7, r3
10001872:	781b      	ldrb	r3, [r3, #0]
10001874:	2b00      	cmp	r3, #0
10001876:	d001      	beq.n	1000187c <XMC_CAN_Init+0xd4>
10001878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000187a:	e000      	b.n	1000187e <XMC_CAN_Init+0xd6>
1000187c:	6a3b      	ldr	r3, [r7, #32]
1000187e:	617b      	str	r3, [r7, #20]
  can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
10001880:	231b      	movs	r3, #27
10001882:	18fb      	adds	r3, r7, r3
10001884:	781b      	ldrb	r3, [r3, #0]
10001886:	2b00      	cmp	r3, #0
10001888:	d001      	beq.n	1000188e <XMC_CAN_Init+0xe6>
1000188a:	2201      	movs	r2, #1
1000188c:	e000      	b.n	10001890 <XMC_CAN_Init+0xe8>
1000188e:	2202      	movs	r2, #2
10001890:	2313      	movs	r3, #19
10001892:	18fb      	adds	r3, r7, r3
10001894:	701a      	strb	r2, [r3, #0]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
10001896:	68fb      	ldr	r3, [r7, #12]
10001898:	68db      	ldr	r3, [r3, #12]
1000189a:	4a0a      	ldr	r2, [pc, #40]	; (100018c4 <XMC_CAN_Init+0x11c>)
1000189c:	401a      	ands	r2, r3
1000189e:	68fb      	ldr	r3, [r7, #12]
100018a0:	60da      	str	r2, [r3, #12]
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
100018a2:	68fb      	ldr	r3, [r7, #12]
100018a4:	68da      	ldr	r2, [r3, #12]
100018a6:	2313      	movs	r3, #19
100018a8:	18fb      	adds	r3, r7, r3
100018aa:	781b      	ldrb	r3, [r3, #0]
100018ac:	0399      	lsls	r1, r3, #14
100018ae:	697b      	ldr	r3, [r7, #20]
100018b0:	430b      	orrs	r3, r1
100018b2:	431a      	orrs	r2, r3
100018b4:	68fb      	ldr	r3, [r7, #12]
100018b6:	60da      	str	r2, [r3, #12]

}
100018b8:	46bd      	mov	sp, r7
100018ba:	b00e      	add	sp, #56	; 0x38
100018bc:	bd80      	pop	{r7, pc}
100018be:	46c0      	nop			; (mov r8, r8)
100018c0:	000003ff 	.word	0x000003ff
100018c4:	ffff3c00 	.word	0xffff3c00

100018c8 <XMC_CAN_SetBaudrateClockSource>:
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
}
#endif

void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source)
{
100018c8:	b580      	push	{r7, lr}
100018ca:	b082      	sub	sp, #8
100018cc:	af00      	add	r7, sp, #0
100018ce:	6078      	str	r0, [r7, #4]
100018d0:	1c0a      	adds	r2, r1, #0
100018d2:	1cfb      	adds	r3, r7, #3
100018d4:	701a      	strb	r2, [r3, #0]
#if defined(MULTICAN_PLUS)
  obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
100018d6:	687a      	ldr	r2, [r7, #4]
100018d8:	23e4      	movs	r3, #228	; 0xe4
100018da:	005b      	lsls	r3, r3, #1
100018dc:	58d3      	ldr	r3, [r2, r3]
100018de:	220f      	movs	r2, #15
100018e0:	4393      	bics	r3, r2
100018e2:	1c1a      	adds	r2, r3, #0
100018e4:	1cfb      	adds	r3, r7, #3
100018e6:	781b      	ldrb	r3, [r3, #0]
100018e8:	431a      	orrs	r2, r3
100018ea:	1c11      	adds	r1, r2, #0
100018ec:	687a      	ldr	r2, [r7, #4]
100018ee:	23e4      	movs	r3, #228	; 0xe4
100018f0:	005b      	lsls	r3, r3, #1
100018f2:	50d1      	str	r1, [r2, r3]
#endif  
}
100018f4:	46bd      	mov	sp, r7
100018f6:	b002      	add	sp, #8
100018f8:	bd80      	pop	{r7, pc}
100018fa:	46c0      	nop			; (mov r8, r8)

100018fc <XMC_CAN_GetBaudrateClockSource>:

XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
{
100018fc:	b580      	push	{r7, lr}
100018fe:	b082      	sub	sp, #8
10001900:	af00      	add	r7, sp, #0
10001902:	6078      	str	r0, [r7, #4]
#if defined(MULTICAN_PLUS)
  return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
10001904:	687a      	ldr	r2, [r7, #4]
10001906:	23e4      	movs	r3, #228	; 0xe4
10001908:	005b      	lsls	r3, r3, #1
1000190a:	58d3      	ldr	r3, [r2, r3]
1000190c:	b2db      	uxtb	r3, r3
1000190e:	220f      	movs	r2, #15
10001910:	4013      	ands	r3, r2
10001912:	b2db      	uxtb	r3, r3
#elif (UC_FAMILY == XMC4) 
  return XMC_CAN_CANCLKSRC_FPERI;
#endif    
}
10001914:	1c18      	adds	r0, r3, #0
10001916:	46bd      	mov	sp, r7
10001918:	b002      	add	sp, #8
1000191a:	bd80      	pop	{r7, pc}

1000191c <XMC_CAN_GetBaudrateClockFrequency>:

uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
{
1000191c:	b580      	push	{r7, lr}
1000191e:	b084      	sub	sp, #16
10001920:	af00      	add	r7, sp, #0
10001922:	6078      	str	r0, [r7, #4]
  uint32_t frequency;

#if defined(MULTICAN_PLUS)
  switch(XMC_CAN_GetBaudrateClockSource(obj))
10001924:	687b      	ldr	r3, [r7, #4]
10001926:	1c18      	adds	r0, r3, #0
10001928:	f7ff ffe8 	bl	100018fc <XMC_CAN_GetBaudrateClockSource>
1000192c:	1e03      	subs	r3, r0, #0
1000192e:	2b01      	cmp	r3, #1
10001930:	d002      	beq.n	10001938 <XMC_CAN_GetBaudrateClockFrequency+0x1c>
10001932:	2b02      	cmp	r3, #2
10001934:	d005      	beq.n	10001942 <XMC_CAN_GetBaudrateClockFrequency+0x26>
10001936:	e009      	b.n	1000194c <XMC_CAN_GetBaudrateClockFrequency+0x30>
    case XMC_CAN_CANCLKSRC_FPERI:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
      break;
#else
    case XMC_CAN_CANCLKSRC_MCLK:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
10001938:	f7ff fd4a 	bl	100013d0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
1000193c:	1c03      	adds	r3, r0, #0
1000193e:	60fb      	str	r3, [r7, #12]
      break;
10001940:	e007      	b.n	10001952 <XMC_CAN_GetBaudrateClockFrequency+0x36>
#endif
    case XMC_CAN_CANCLKSRC_FOHP:
      frequency = OSCHP_GetFrequency();
10001942:	f7ff fc43 	bl	100011cc <OSCHP_GetFrequency>
10001946:	1c03      	adds	r3, r0, #0
10001948:	60fb      	str	r3, [r7, #12]
      break;
1000194a:	e002      	b.n	10001952 <XMC_CAN_GetBaudrateClockFrequency+0x36>

    default:
      frequency = 0;
1000194c:	2300      	movs	r3, #0
1000194e:	60fb      	str	r3, [r7, #12]
      break;
10001950:	46c0      	nop			; (mov r8, r8)
  }
#else
  frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
#endif  

  return frequency;
10001952:	68fb      	ldr	r3, [r7, #12]
}
10001954:	1c18      	adds	r0, r3, #0
10001956:	46bd      	mov	sp, r7
10001958:	b004      	add	sp, #16
1000195a:	bd80      	pop	{r7, pc}

1000195c <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
1000195c:	b580      	push	{r7, lr}
1000195e:	b086      	sub	sp, #24
10001960:	af00      	add	r7, sp, #0
10001962:	6078      	str	r0, [r7, #4]
  uint32_t reg;
  
  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
10001964:	687b      	ldr	r3, [r7, #4]
10001966:	681b      	ldr	r3, [r3, #0]
10001968:	4a48      	ldr	r2, [pc, #288]	; (10001a8c <XMC_CAN_MO_Config+0x130>)
1000196a:	4694      	mov	ip, r2
1000196c:	4463      	add	r3, ip
1000196e:	095b      	lsrs	r3, r3, #5
10001970:	617b      	str	r3, [r7, #20]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
10001972:	697b      	ldr	r3, [r7, #20]
10001974:	095b      	lsrs	r3, r3, #5
10001976:	035a      	lsls	r2, r3, #13
10001978:	697b      	ldr	r3, [r7, #20]
1000197a:	211f      	movs	r1, #31
1000197c:	400b      	ands	r3, r1
1000197e:	021b      	lsls	r3, r3, #8
10001980:	4313      	orrs	r3, r2
10001982:	613b      	str	r3, [r7, #16]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
10001984:	687b      	ldr	r3, [r7, #4]
10001986:	681b      	ldr	r3, [r3, #0]
10001988:	687a      	ldr	r2, [r7, #4]
1000198a:	6812      	ldr	r2, [r2, #0]
1000198c:	6892      	ldr	r2, [r2, #8]
1000198e:	4940      	ldr	r1, [pc, #256]	; (10001a90 <XMC_CAN_MO_Config+0x134>)
10001990:	400a      	ands	r2, r1
10001992:	609a      	str	r2, [r3, #8]
  can_mo->can_mo_ptr->MOIPR |= set;
10001994:	687b      	ldr	r3, [r7, #4]
10001996:	681b      	ldr	r3, [r3, #0]
10001998:	687a      	ldr	r2, [r7, #4]
1000199a:	6812      	ldr	r2, [r2, #0]
1000199c:	6891      	ldr	r1, [r2, #8]
1000199e:	693a      	ldr	r2, [r7, #16]
100019a0:	430a      	orrs	r2, r1
100019a2:	609a      	str	r2, [r3, #8]
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
100019a4:	687b      	ldr	r3, [r7, #4]
100019a6:	79db      	ldrb	r3, [r3, #7]
100019a8:	2220      	movs	r2, #32
100019aa:	4013      	ands	r3, r2
100019ac:	b2db      	uxtb	r3, r3
100019ae:	2b00      	cmp	r3, #0
100019b0:	d007      	beq.n	100019c2 <XMC_CAN_MO_Config+0x66>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
100019b2:	687b      	ldr	r3, [r7, #4]
100019b4:	79db      	ldrb	r3, [r3, #7]
100019b6:	2220      	movs	r2, #32
100019b8:	4013      	ands	r3, r2
100019ba:	b2db      	uxtb	r3, r3
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
100019bc:	2b00      	cmp	r3, #0
100019be:	d100      	bne.n	100019c2 <XMC_CAN_MO_Config+0x66>
100019c0:	e061      	b.n	10001a86 <XMC_CAN_MO_Config+0x12a>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
100019c2:	687b      	ldr	r3, [r7, #4]
100019c4:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
100019c6:	2b00      	cmp	r3, #0
100019c8:	d004      	beq.n	100019d4 <XMC_CAN_MO_Config+0x78>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
100019ca:	687b      	ldr	r3, [r7, #4]
100019cc:	7e1b      	ldrb	r3, [r3, #24]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
100019ce:	2b01      	cmp	r3, #1
100019d0:	d000      	beq.n	100019d4 <XMC_CAN_MO_Config+0x78>
100019d2:	e058      	b.n	10001a86 <XMC_CAN_MO_Config+0x12a>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
100019d4:	687b      	ldr	r3, [r7, #4]
100019d6:	681b      	ldr	r3, [r3, #0]
100019d8:	2220      	movs	r2, #32
100019da:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
100019dc:	687b      	ldr	r3, [r7, #4]
100019de:	79db      	ldrb	r3, [r3, #7]
100019e0:	2220      	movs	r2, #32
100019e2:	4013      	ands	r3, r2
100019e4:	b2db      	uxtb	r3, r3
100019e6:	2b00      	cmp	r3, #0
100019e8:	d128      	bne.n	10001a3c <XMC_CAN_MO_Config+0xe0>
    {
      reg = can_mo->mo_ar;
100019ea:	687b      	ldr	r3, [r7, #4]
100019ec:	685b      	ldr	r3, [r3, #4]
100019ee:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
100019f0:	68fb      	ldr	r3, [r7, #12]
100019f2:	0f5b      	lsrs	r3, r3, #29
100019f4:	075b      	lsls	r3, r3, #29
100019f6:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
100019f8:	687b      	ldr	r3, [r7, #4]
100019fa:	685b      	ldr	r3, [r3, #4]
100019fc:	00db      	lsls	r3, r3, #3
100019fe:	08db      	lsrs	r3, r3, #3
10001a00:	049b      	lsls	r3, r3, #18
10001a02:	1c1a      	adds	r2, r3, #0
10001a04:	68fb      	ldr	r3, [r7, #12]
10001a06:	4313      	orrs	r3, r2
10001a08:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAR = reg;
10001a0a:	687b      	ldr	r3, [r7, #4]
10001a0c:	681b      	ldr	r3, [r3, #0]
10001a0e:	68fa      	ldr	r2, [r7, #12]
10001a10:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
10001a12:	687b      	ldr	r3, [r7, #4]
10001a14:	689b      	ldr	r3, [r3, #8]
10001a16:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
10001a18:	68fb      	ldr	r3, [r7, #12]
10001a1a:	0f5b      	lsrs	r3, r3, #29
10001a1c:	075b      	lsls	r3, r3, #29
10001a1e:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
10001a20:	687b      	ldr	r3, [r7, #4]
10001a22:	689b      	ldr	r3, [r3, #8]
10001a24:	00db      	lsls	r3, r3, #3
10001a26:	08db      	lsrs	r3, r3, #3
10001a28:	049b      	lsls	r3, r3, #18
10001a2a:	1c1a      	adds	r2, r3, #0
10001a2c:	68fb      	ldr	r3, [r7, #12]
10001a2e:	4313      	orrs	r3, r2
10001a30:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAMR = reg;
10001a32:	687b      	ldr	r3, [r7, #4]
10001a34:	681b      	ldr	r3, [r3, #0]
10001a36:	68fa      	ldr	r2, [r7, #12]
10001a38:	60da      	str	r2, [r3, #12]
10001a3a:	e009      	b.n	10001a50 <XMC_CAN_MO_Config+0xf4>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
10001a3c:	687b      	ldr	r3, [r7, #4]
10001a3e:	681b      	ldr	r3, [r3, #0]
10001a40:	687a      	ldr	r2, [r7, #4]
10001a42:	6852      	ldr	r2, [r2, #4]
10001a44:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
10001a46:	687b      	ldr	r3, [r7, #4]
10001a48:	681b      	ldr	r3, [r3, #0]
10001a4a:	687a      	ldr	r2, [r7, #4]
10001a4c:	6892      	ldr	r2, [r2, #8]
10001a4e:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
10001a50:	687b      	ldr	r3, [r7, #4]
10001a52:	7e1b      	ldrb	r3, [r3, #24]
10001a54:	2b01      	cmp	r3, #1
10001a56:	d10d      	bne.n	10001a74 <XMC_CAN_MO_Config+0x118>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
10001a58:	687b      	ldr	r3, [r7, #4]
10001a5a:	1c18      	adds	r0, r3, #0
10001a5c:	f000 f81e 	bl	10001a9c <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
10001a60:	687b      	ldr	r3, [r7, #4]
10001a62:	681b      	ldr	r3, [r3, #0]
10001a64:	2280      	movs	r2, #128	; 0x80
10001a66:	0512      	lsls	r2, r2, #20
10001a68:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
10001a6a:	687b      	ldr	r3, [r7, #4]
10001a6c:	681b      	ldr	r3, [r3, #0]
10001a6e:	4a09      	ldr	r2, [pc, #36]	; (10001a94 <XMC_CAN_MO_Config+0x138>)
10001a70:	61da      	str	r2, [r3, #28]
10001a72:	e008      	b.n	10001a86 <XMC_CAN_MO_Config+0x12a>
                                   CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
10001a74:	687b      	ldr	r3, [r7, #4]
10001a76:	681b      	ldr	r3, [r3, #0]
10001a78:	2280      	movs	r2, #128	; 0x80
10001a7a:	0112      	lsls	r2, r2, #4
10001a7c:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
10001a7e:	687b      	ldr	r3, [r7, #4]
10001a80:	681b      	ldr	r3, [r3, #0]
10001a82:	4a05      	ldr	r2, [pc, #20]	; (10001a98 <XMC_CAN_MO_Config+0x13c>)
10001a84:	61da      	str	r2, [r3, #28]
                                   CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
    }

  }
}
10001a86:	46bd      	mov	sp, r7
10001a88:	b006      	add	sp, #24
10001a8a:	bd80      	pop	{r7, pc}
10001a8c:	affbf000 	.word	0xaffbf000
10001a90:	ffff00ff 	.word	0xffff00ff
10001a94:	062000c0 	.word	0x062000c0
10001a98:	00a00640 	.word	0x00a00640

10001a9c <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
10001a9c:	b580      	push	{r7, lr}
10001a9e:	b084      	sub	sp, #16
10001aa0:	af00      	add	r7, sp, #0
10001aa2:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
10001aa4:	230f      	movs	r3, #15
10001aa6:	18fb      	adds	r3, r7, r3
10001aa8:	2203      	movs	r2, #3
10001aaa:	701a      	strb	r2, [r3, #0]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
10001aac:	687b      	ldr	r3, [r7, #4]
10001aae:	7e1b      	ldrb	r3, [r3, #24]
10001ab0:	2b01      	cmp	r3, #1
10001ab2:	d125      	bne.n	10001b00 <XMC_CAN_MO_UpdateData+0x64>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
10001ab4:	687b      	ldr	r3, [r7, #4]
10001ab6:	681b      	ldr	r3, [r3, #0]
10001ab8:	2220      	movs	r2, #32
10001aba:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
10001abc:	687b      	ldr	r3, [r7, #4]
10001abe:	681b      	ldr	r3, [r3, #0]
10001ac0:	687a      	ldr	r2, [r7, #4]
10001ac2:	6812      	ldr	r2, [r2, #0]
10001ac4:	6812      	ldr	r2, [r2, #0]
10001ac6:	4914      	ldr	r1, [pc, #80]	; (10001b18 <XMC_CAN_MO_UpdateData+0x7c>)
10001ac8:	4011      	ands	r1, r2
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
10001aca:	687a      	ldr	r2, [r7, #4]
10001acc:	7b12      	ldrb	r2, [r2, #12]
10001ace:	0610      	lsls	r0, r2, #24
10001ad0:	22f0      	movs	r2, #240	; 0xf0
10001ad2:	0512      	lsls	r2, r2, #20
10001ad4:	4002      	ands	r2, r0
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
10001ad6:	430a      	orrs	r2, r1
10001ad8:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
10001ada:	687b      	ldr	r3, [r7, #4]
10001adc:	681b      	ldr	r3, [r3, #0]
10001ade:	687a      	ldr	r2, [r7, #4]
10001ae0:	6912      	ldr	r2, [r2, #16]
10001ae2:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
10001ae4:	687b      	ldr	r3, [r7, #4]
10001ae6:	681b      	ldr	r3, [r3, #0]
10001ae8:	687a      	ldr	r2, [r7, #4]
10001aea:	6952      	ldr	r2, [r2, #20]
10001aec:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk| CAN_MO_MOCTR_SETMSGVAL_Msk |CAN_MO_MOCTR_RESRTSEL_Msk);
10001aee:	687b      	ldr	r3, [r7, #4]
10001af0:	681b      	ldr	r3, [r3, #0]
10001af2:	4a0a      	ldr	r2, [pc, #40]	; (10001b1c <XMC_CAN_MO_UpdateData+0x80>)
10001af4:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
10001af6:	230f      	movs	r3, #15
10001af8:	18fb      	adds	r3, r7, r3
10001afa:	2200      	movs	r2, #0
10001afc:	701a      	strb	r2, [r3, #0]
10001afe:	e003      	b.n	10001b08 <XMC_CAN_MO_UpdateData+0x6c>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
10001b00:	230f      	movs	r3, #15
10001b02:	18fb      	adds	r3, r7, r3
10001b04:	2203      	movs	r2, #3
10001b06:	701a      	strb	r2, [r3, #0]
  }
  return error;
10001b08:	230f      	movs	r3, #15
10001b0a:	18fb      	adds	r3, r7, r3
10001b0c:	781b      	ldrb	r3, [r3, #0]
}
10001b0e:	1c18      	adds	r0, r3, #0
10001b10:	46bd      	mov	sp, r7
10001b12:	b004      	add	sp, #16
10001b14:	bd80      	pop	{r7, pc}
10001b16:	46c0      	nop			; (mov r8, r8)
10001b18:	f0ffffff 	.word	0xf0ffffff
10001b1c:	00280040 	.word	0x00280040

10001b20 <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
10001b20:	b580      	push	{r7, lr}
10001b22:	b086      	sub	sp, #24
10001b24:	af00      	add	r7, sp, #0
10001b26:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
10001b28:	2317      	movs	r3, #23
10001b2a:	18fb      	adds	r3, r7, r3
10001b2c:	2201      	movs	r2, #1
10001b2e:	701a      	strb	r2, [r3, #0]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
10001b30:	687b      	ldr	r3, [r7, #4]
10001b32:	681b      	ldr	r3, [r3, #0]
10001b34:	69db      	ldr	r3, [r3, #28]
10001b36:	2220      	movs	r2, #32
10001b38:	4013      	ands	r3, r2
10001b3a:	095b      	lsrs	r3, r3, #5
10001b3c:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
10001b3e:	687b      	ldr	r3, [r7, #4]
10001b40:	681b      	ldr	r3, [r3, #0]
10001b42:	69da      	ldr	r2, [r3, #28]
10001b44:	2380      	movs	r3, #128	; 0x80
10001b46:	005b      	lsls	r3, r3, #1
10001b48:	4013      	ands	r3, r2
10001b4a:	0a1b      	lsrs	r3, r3, #8
10001b4c:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
10001b4e:	693b      	ldr	r3, [r7, #16]
10001b50:	2b00      	cmp	r3, #0
10001b52:	d104      	bne.n	10001b5e <XMC_CAN_MO_Transmit+0x3e>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
10001b54:	2317      	movs	r3, #23
10001b56:	18fb      	adds	r3, r7, r3
10001b58:	2204      	movs	r2, #4
10001b5a:	701a      	strb	r2, [r3, #0]
10001b5c:	e010      	b.n	10001b80 <XMC_CAN_MO_Transmit+0x60>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
10001b5e:	68fb      	ldr	r3, [r7, #12]
10001b60:	2b01      	cmp	r3, #1
10001b62:	d104      	bne.n	10001b6e <XMC_CAN_MO_Transmit+0x4e>
  {
    error = XMC_CAN_STATUS_BUSY;
10001b64:	2317      	movs	r3, #23
10001b66:	18fb      	adds	r3, r7, r3
10001b68:	2202      	movs	r2, #2
10001b6a:	701a      	strb	r2, [r3, #0]
10001b6c:	e008      	b.n	10001b80 <XMC_CAN_MO_Transmit+0x60>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
10001b6e:	687b      	ldr	r3, [r7, #4]
10001b70:	681b      	ldr	r3, [r3, #0]
10001b72:	22e0      	movs	r2, #224	; 0xe0
10001b74:	04d2      	lsls	r2, r2, #19
10001b76:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
10001b78:	2317      	movs	r3, #23
10001b7a:	18fb      	adds	r3, r7, r3
10001b7c:	2200      	movs	r2, #0
10001b7e:	701a      	strb	r2, [r3, #0]
  }
  return error;
10001b80:	2317      	movs	r3, #23
10001b82:	18fb      	adds	r3, r7, r3
10001b84:	781b      	ldrb	r3, [r3, #0]
}
10001b86:	1c18      	adds	r0, r3, #0
10001b88:	46bd      	mov	sp, r7
10001b8a:	b006      	add	sp, #24
10001b8c:	bd80      	pop	{r7, pc}
10001b8e:	46c0      	nop			; (mov r8, r8)

10001b90 <XMC_CAN_MO_Receive>:
}


/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
{
10001b90:	b580      	push	{r7, lr}
10001b92:	b086      	sub	sp, #24
10001b94:	af00      	add	r7, sp, #0
10001b96:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
10001b98:	2317      	movs	r3, #23
10001b9a:	18fb      	adds	r3, r7, r3
10001b9c:	2201      	movs	r2, #1
10001b9e:	701a      	strb	r2, [r3, #0]
  uint8_t rx_pnd = 0U;
10001ba0:	2316      	movs	r3, #22
10001ba2:	18fb      	adds	r3, r7, r3
10001ba4:	2200      	movs	r2, #0
10001ba6:	701a      	strb	r2, [r3, #0]
  uint8_t new_data = 0U;
10001ba8:	2315      	movs	r3, #21
10001baa:	18fb      	adds	r3, r7, r3
10001bac:	2200      	movs	r2, #0
10001bae:	701a      	strb	r2, [r3, #0]
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
10001bb0:	687b      	ldr	r3, [r7, #4]
10001bb2:	681b      	ldr	r3, [r3, #0]
10001bb4:	69da      	ldr	r2, [r3, #28]
10001bb6:	2380      	movs	r3, #128	; 0x80
10001bb8:	011b      	lsls	r3, r3, #4
10001bba:	4013      	ands	r3, r2
10001bbc:	0adb      	lsrs	r3, r3, #11
10001bbe:	613b      	str	r3, [r7, #16]
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
10001bc0:	687b      	ldr	r3, [r7, #4]
10001bc2:	681b      	ldr	r3, [r3, #0]
10001bc4:	69db      	ldr	r3, [r3, #28]
10001bc6:	2204      	movs	r2, #4
10001bc8:	4013      	ands	r3, r2
10001bca:	089b      	lsrs	r3, r3, #2
10001bcc:	60fb      	str	r3, [r7, #12]
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
10001bce:	693b      	ldr	r3, [r7, #16]
10001bd0:	2b00      	cmp	r3, #0
10001bd2:	d004      	beq.n	10001bde <XMC_CAN_MO_Receive+0x4e>
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
10001bd4:	2317      	movs	r3, #23
10001bd6:	18fb      	adds	r3, r7, r3
10001bd8:	2203      	movs	r2, #3
10001bda:	701a      	strb	r2, [r3, #0]
10001bdc:	e0d3      	b.n	10001d86 <XMC_CAN_MO_Receive+0x1f6>
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
10001bde:	68fb      	ldr	r3, [r7, #12]
10001be0:	2b01      	cmp	r3, #1
10001be2:	d104      	bne.n	10001bee <XMC_CAN_MO_Receive+0x5e>
  {
    error = XMC_CAN_STATUS_BUSY;
10001be4:	2317      	movs	r3, #23
10001be6:	18fb      	adds	r3, r7, r3
10001be8:	2202      	movs	r2, #2
10001bea:	701a      	strb	r2, [r3, #0]
10001bec:	e0cb      	b.n	10001d86 <XMC_CAN_MO_Receive+0x1f6>
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
10001bee:	687b      	ldr	r3, [r7, #4]
10001bf0:	681b      	ldr	r3, [r3, #0]
10001bf2:	2208      	movs	r2, #8
10001bf4:	61da      	str	r2, [r3, #28]
      if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
10001bf6:	687b      	ldr	r3, [r7, #4]
10001bf8:	681b      	ldr	r3, [r3, #0]
10001bfa:	699a      	ldr	r2, [r3, #24]
10001bfc:	2380      	movs	r3, #128	; 0x80
10001bfe:	059b      	lsls	r3, r3, #22
10001c00:	4013      	ands	r3, r2
10001c02:	0f5b      	lsrs	r3, r3, #29
10001c04:	d151      	bne.n	10001caa <XMC_CAN_MO_Receive+0x11a>
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
10001c06:	687b      	ldr	r3, [r7, #4]
10001c08:	79da      	ldrb	r2, [r3, #7]
10001c0a:	2120      	movs	r1, #32
10001c0c:	438a      	bics	r2, r1
10001c0e:	71da      	strb	r2, [r3, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
10001c10:	687b      	ldr	r3, [r7, #4]
10001c12:	681b      	ldr	r3, [r3, #0]
10001c14:	699b      	ldr	r3, [r3, #24]
10001c16:	4a5f      	ldr	r2, [pc, #380]	; (10001d94 <XMC_CAN_MO_Receive+0x204>)
10001c18:	4013      	ands	r3, r2
10001c1a:	0c9b      	lsrs	r3, r3, #18
10001c1c:	00db      	lsls	r3, r3, #3
10001c1e:	08da      	lsrs	r2, r3, #3
10001c20:	687b      	ldr	r3, [r7, #4]
10001c22:	00d2      	lsls	r2, r2, #3
10001c24:	08d2      	lsrs	r2, r2, #3
10001c26:	6859      	ldr	r1, [r3, #4]
10001c28:	0f49      	lsrs	r1, r1, #29
10001c2a:	0749      	lsls	r1, r1, #29
10001c2c:	430a      	orrs	r2, r1
10001c2e:	605a      	str	r2, [r3, #4]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
10001c30:	687b      	ldr	r3, [r7, #4]
10001c32:	681b      	ldr	r3, [r3, #0]
10001c34:	68da      	ldr	r2, [r3, #12]
10001c36:	2380      	movs	r3, #128	; 0x80
10001c38:	059b      	lsls	r3, r3, #22
10001c3a:	4013      	ands	r3, r2
10001c3c:	0f5b      	lsrs	r3, r3, #29
10001c3e:	b2db      	uxtb	r3, r3
10001c40:	1c1a      	adds	r2, r3, #0
10001c42:	2301      	movs	r3, #1
10001c44:	4013      	ands	r3, r2
10001c46:	b2da      	uxtb	r2, r3
10001c48:	687b      	ldr	r3, [r7, #4]
10001c4a:	2101      	movs	r1, #1
10001c4c:	400a      	ands	r2, r1
10001c4e:	0150      	lsls	r0, r2, #5
10001c50:	7ada      	ldrb	r2, [r3, #11]
10001c52:	2120      	movs	r1, #32
10001c54:	438a      	bics	r2, r1
10001c56:	1c11      	adds	r1, r2, #0
10001c58:	1c02      	adds	r2, r0, #0
10001c5a:	430a      	orrs	r2, r1
10001c5c:	72da      	strb	r2, [r3, #11]
        if(can_mo->can_ide_mask == 1U)
10001c5e:	687b      	ldr	r3, [r7, #4]
10001c60:	7adb      	ldrb	r3, [r3, #11]
10001c62:	2220      	movs	r2, #32
10001c64:	4013      	ands	r3, r2
10001c66:	b2db      	uxtb	r3, r3
10001c68:	2b00      	cmp	r3, #0
10001c6a:	d010      	beq.n	10001c8e <XMC_CAN_MO_Receive+0xfe>
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
10001c6c:	687b      	ldr	r3, [r7, #4]
10001c6e:	681b      	ldr	r3, [r3, #0]
10001c70:	68db      	ldr	r3, [r3, #12]
10001c72:	4a48      	ldr	r2, [pc, #288]	; (10001d94 <XMC_CAN_MO_Receive+0x204>)
10001c74:	4013      	ands	r3, r2
10001c76:	0c9b      	lsrs	r3, r3, #18
10001c78:	00db      	lsls	r3, r3, #3
10001c7a:	08da      	lsrs	r2, r3, #3
10001c7c:	687b      	ldr	r3, [r7, #4]
10001c7e:	00d2      	lsls	r2, r2, #3
10001c80:	08d2      	lsrs	r2, r2, #3
10001c82:	6899      	ldr	r1, [r3, #8]
10001c84:	0f49      	lsrs	r1, r1, #29
10001c86:	0749      	lsls	r1, r1, #29
10001c88:	430a      	orrs	r2, r1
10001c8a:	609a      	str	r2, [r3, #8]
10001c8c:	e043      	b.n	10001d16 <XMC_CAN_MO_Receive+0x186>
        }
        else
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
10001c8e:	687b      	ldr	r3, [r7, #4]
10001c90:	681b      	ldr	r3, [r3, #0]
10001c92:	68db      	ldr	r3, [r3, #12]
10001c94:	00db      	lsls	r3, r3, #3
10001c96:	08da      	lsrs	r2, r3, #3
10001c98:	687b      	ldr	r3, [r7, #4]
10001c9a:	00d2      	lsls	r2, r2, #3
10001c9c:	08d2      	lsrs	r2, r2, #3
10001c9e:	6899      	ldr	r1, [r3, #8]
10001ca0:	0f49      	lsrs	r1, r1, #29
10001ca2:	0749      	lsls	r1, r1, #29
10001ca4:	430a      	orrs	r2, r1
10001ca6:	609a      	str	r2, [r3, #8]
10001ca8:	e035      	b.n	10001d16 <XMC_CAN_MO_Receive+0x186>
        }
      }
      else
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
10001caa:	687b      	ldr	r3, [r7, #4]
10001cac:	79da      	ldrb	r2, [r3, #7]
10001cae:	2120      	movs	r1, #32
10001cb0:	430a      	orrs	r2, r1
10001cb2:	71da      	strb	r2, [r3, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
10001cb4:	687b      	ldr	r3, [r7, #4]
10001cb6:	681b      	ldr	r3, [r3, #0]
10001cb8:	699b      	ldr	r3, [r3, #24]
10001cba:	00db      	lsls	r3, r3, #3
10001cbc:	08da      	lsrs	r2, r3, #3
10001cbe:	687b      	ldr	r3, [r7, #4]
10001cc0:	00d2      	lsls	r2, r2, #3
10001cc2:	08d2      	lsrs	r2, r2, #3
10001cc4:	6859      	ldr	r1, [r3, #4]
10001cc6:	0f49      	lsrs	r1, r1, #29
10001cc8:	0749      	lsls	r1, r1, #29
10001cca:	430a      	orrs	r2, r1
10001ccc:	605a      	str	r2, [r3, #4]
        can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
10001cce:	687b      	ldr	r3, [r7, #4]
10001cd0:	681b      	ldr	r3, [r3, #0]
10001cd2:	68db      	ldr	r3, [r3, #12]
10001cd4:	00db      	lsls	r3, r3, #3
10001cd6:	08da      	lsrs	r2, r3, #3
10001cd8:	687b      	ldr	r3, [r7, #4]
10001cda:	00d2      	lsls	r2, r2, #3
10001cdc:	08d2      	lsrs	r2, r2, #3
10001cde:	6899      	ldr	r1, [r3, #8]
10001ce0:	0f49      	lsrs	r1, r1, #29
10001ce2:	0749      	lsls	r1, r1, #29
10001ce4:	430a      	orrs	r2, r1
10001ce6:	609a      	str	r2, [r3, #8]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
10001ce8:	687b      	ldr	r3, [r7, #4]
10001cea:	681b      	ldr	r3, [r3, #0]
10001cec:	68da      	ldr	r2, [r3, #12]
10001cee:	2380      	movs	r3, #128	; 0x80
10001cf0:	059b      	lsls	r3, r3, #22
10001cf2:	4013      	ands	r3, r2
10001cf4:	0f5b      	lsrs	r3, r3, #29
10001cf6:	b2db      	uxtb	r3, r3
10001cf8:	1c1a      	adds	r2, r3, #0
10001cfa:	2301      	movs	r3, #1
10001cfc:	4013      	ands	r3, r2
10001cfe:	b2da      	uxtb	r2, r3
10001d00:	687b      	ldr	r3, [r7, #4]
10001d02:	2101      	movs	r1, #1
10001d04:	400a      	ands	r2, r1
10001d06:	0150      	lsls	r0, r2, #5
10001d08:	7ada      	ldrb	r2, [r3, #11]
10001d0a:	2120      	movs	r1, #32
10001d0c:	438a      	bics	r2, r1
10001d0e:	1c11      	adds	r1, r2, #0
10001d10:	1c02      	adds	r2, r0, #0
10001d12:	430a      	orrs	r2, r1
10001d14:	72da      	strb	r2, [r3, #11]
      }
      can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC_Msk) >> CAN_MO_MOFCR_DLC_Pos);
10001d16:	687b      	ldr	r3, [r7, #4]
10001d18:	681b      	ldr	r3, [r3, #0]
10001d1a:	681a      	ldr	r2, [r3, #0]
10001d1c:	23f0      	movs	r3, #240	; 0xf0
10001d1e:	051b      	lsls	r3, r3, #20
10001d20:	4013      	ands	r3, r2
10001d22:	0e1b      	lsrs	r3, r3, #24
10001d24:	b2da      	uxtb	r2, r3
10001d26:	687b      	ldr	r3, [r7, #4]
10001d28:	731a      	strb	r2, [r3, #12]

      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
10001d2a:	687b      	ldr	r3, [r7, #4]
10001d2c:	681b      	ldr	r3, [r3, #0]
10001d2e:	691a      	ldr	r2, [r3, #16]
10001d30:	687b      	ldr	r3, [r7, #4]
10001d32:	611a      	str	r2, [r3, #16]
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
10001d34:	687b      	ldr	r3, [r7, #4]
10001d36:	681b      	ldr	r3, [r3, #0]
10001d38:	695a      	ldr	r2, [r3, #20]
10001d3a:	687b      	ldr	r3, [r7, #4]
10001d3c:	615a      	str	r2, [r3, #20]

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
10001d3e:	687b      	ldr	r3, [r7, #4]
10001d40:	681b      	ldr	r3, [r3, #0]
10001d42:	69db      	ldr	r3, [r3, #28]
10001d44:	2204      	movs	r2, #4
10001d46:	4013      	ands	r3, r2
10001d48:	089a      	lsrs	r2, r3, #2
10001d4a:	2316      	movs	r3, #22
10001d4c:	18fb      	adds	r3, r7, r3
10001d4e:	701a      	strb	r2, [r3, #0]
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
10001d50:	687b      	ldr	r3, [r7, #4]
10001d52:	681b      	ldr	r3, [r3, #0]
10001d54:	69db      	ldr	r3, [r3, #28]
10001d56:	2208      	movs	r2, #8
10001d58:	4013      	ands	r3, r2
10001d5a:	08da      	lsrs	r2, r3, #3
10001d5c:	2315      	movs	r3, #21
10001d5e:	18fb      	adds	r3, r7, r3
10001d60:	701a      	strb	r2, [r3, #0]
    } while ((rx_pnd != 0U) && (new_data != 0U));
10001d62:	2316      	movs	r3, #22
10001d64:	18fb      	adds	r3, r7, r3
10001d66:	781b      	ldrb	r3, [r3, #0]
10001d68:	2b00      	cmp	r3, #0
10001d6a:	d005      	beq.n	10001d78 <XMC_CAN_MO_Receive+0x1e8>
10001d6c:	2315      	movs	r3, #21
10001d6e:	18fb      	adds	r3, r7, r3
10001d70:	781b      	ldrb	r3, [r3, #0]
10001d72:	2b00      	cmp	r3, #0
10001d74:	d000      	beq.n	10001d78 <XMC_CAN_MO_Receive+0x1e8>
10001d76:	e73a      	b.n	10001bee <XMC_CAN_MO_Receive+0x5e>

    can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
10001d78:	687b      	ldr	r3, [r7, #4]
10001d7a:	2200      	movs	r2, #0
10001d7c:	761a      	strb	r2, [r3, #24]
    error = XMC_CAN_STATUS_SUCCESS;
10001d7e:	2317      	movs	r3, #23
10001d80:	18fb      	adds	r3, r7, r3
10001d82:	2200      	movs	r2, #0
10001d84:	701a      	strb	r2, [r3, #0]
  }
  return error;
10001d86:	2317      	movs	r3, #23
10001d88:	18fb      	adds	r3, r7, r3
10001d8a:	781b      	ldrb	r3, [r3, #0]
}
10001d8c:	1c18      	adds	r0, r3, #0
10001d8e:	46bd      	mov	sp, r7
10001d90:	b006      	add	sp, #24
10001d92:	bd80      	pop	{r7, pc}
10001d94:	1ffc0000 	.word	0x1ffc0000

10001d98 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
10001d98:	b580      	push	{r7, lr}
10001d9a:	b082      	sub	sp, #8
10001d9c:	af00      	add	r7, sp, #0
10001d9e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
10001da0:	687b      	ldr	r3, [r7, #4]
10001da2:	68db      	ldr	r3, [r3, #12]
10001da4:	2280      	movs	r2, #128	; 0x80
10001da6:	0052      	lsls	r2, r2, #1
10001da8:	431a      	orrs	r2, r3
10001daa:	687b      	ldr	r3, [r7, #4]
10001dac:	60da      	str	r2, [r3, #12]
}
10001dae:	46bd      	mov	sp, r7
10001db0:	b002      	add	sp, #8
10001db2:	bd80      	pop	{r7, pc}

10001db4 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
10001db4:	b580      	push	{r7, lr}
10001db6:	b082      	sub	sp, #8
10001db8:	af00      	add	r7, sp, #0
10001dba:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
10001dbc:	687b      	ldr	r3, [r7, #4]
10001dbe:	4a09      	ldr	r2, [pc, #36]	; (10001de4 <XMC_CCU4_lUngateClock+0x30>)
10001dc0:	4293      	cmp	r3, r2
10001dc2:	d103      	bne.n	10001dcc <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
10001dc4:	2004      	movs	r0, #4
10001dc6:	f7ff fae9 	bl	1000139c <XMC_SCU_CLOCK_UngatePeripheralClock>
10001dca:	e008      	b.n	10001dde <XMC_CCU4_lUngateClock+0x2a>
  }
#if defined(CCU41)
  else if (module == CCU41)
10001dcc:	687b      	ldr	r3, [r7, #4]
10001dce:	4a06      	ldr	r2, [pc, #24]	; (10001de8 <XMC_CCU4_lUngateClock+0x34>)
10001dd0:	4293      	cmp	r3, r2
10001dd2:	d104      	bne.n	10001dde <XMC_CCU4_lUngateClock+0x2a>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
10001dd4:	2380      	movs	r3, #128	; 0x80
10001dd6:	029b      	lsls	r3, r3, #10
10001dd8:	1c18      	adds	r0, r3, #0
10001dda:	f7ff fadf 	bl	1000139c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
10001dde:	46bd      	mov	sp, r7
10001de0:	b002      	add	sp, #8
10001de2:	bd80      	pop	{r7, pc}
10001de4:	48040000 	.word	0x48040000
10001de8:	48044000 	.word	0x48044000

10001dec <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
10001dec:	b580      	push	{r7, lr}
10001dee:	b082      	sub	sp, #8
10001df0:	af00      	add	r7, sp, #0
10001df2:	6078      	str	r0, [r7, #4]
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
10001df4:	687b      	ldr	r3, [r7, #4]
10001df6:	1c18      	adds	r0, r3, #0
10001df8:	f7ff ffdc 	bl	10001db4 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
#endif
}
10001dfc:	46bd      	mov	sp, r7
10001dfe:	b002      	add	sp, #8
10001e00:	bd80      	pop	{r7, pc}
10001e02:	46c0      	nop			; (mov r8, r8)

10001e04 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
10001e04:	b580      	push	{r7, lr}
10001e06:	b084      	sub	sp, #16
10001e08:	af00      	add	r7, sp, #0
10001e0a:	6078      	str	r0, [r7, #4]
10001e0c:	1c0a      	adds	r2, r1, #0
10001e0e:	1cfb      	adds	r3, r7, #3
10001e10:	701a      	strb	r2, [r3, #0]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
10001e12:	687b      	ldr	r3, [r7, #4]
10001e14:	1c18      	adds	r0, r3, #0
10001e16:	f7ff ffe9 	bl	10001dec <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
10001e1a:	687b      	ldr	r3, [r7, #4]
10001e1c:	1c18      	adds	r0, r3, #0
10001e1e:	f7ff ffbb 	bl	10001d98 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
10001e22:	687b      	ldr	r3, [r7, #4]
10001e24:	681b      	ldr	r3, [r3, #0]
10001e26:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
10001e28:	68fb      	ldr	r3, [r7, #12]
10001e2a:	4a07      	ldr	r2, [pc, #28]	; (10001e48 <XMC_CCU4_Init+0x44>)
10001e2c:	4013      	ands	r3, r2
10001e2e:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
10001e30:	1cfb      	adds	r3, r7, #3
10001e32:	781b      	ldrb	r3, [r3, #0]
10001e34:	039b      	lsls	r3, r3, #14
10001e36:	68fa      	ldr	r2, [r7, #12]
10001e38:	4313      	orrs	r3, r2
10001e3a:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
10001e3c:	687b      	ldr	r3, [r7, #4]
10001e3e:	68fa      	ldr	r2, [r7, #12]
10001e40:	601a      	str	r2, [r3, #0]
}
10001e42:	46bd      	mov	sp, r7
10001e44:	b004      	add	sp, #16
10001e46:	bd80      	pop	{r7, pc}
10001e48:	ffff3fff 	.word	0xffff3fff

10001e4c <XMC_CCU4_SetModuleClock>:

/* API to select CCU4 module clock */
void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock)
{
10001e4c:	b580      	push	{r7, lr}
10001e4e:	b084      	sub	sp, #16
10001e50:	af00      	add	r7, sp, #0
10001e52:	6078      	str	r0, [r7, #4]
10001e54:	1c0a      	adds	r2, r1, #0
10001e56:	1cfb      	adds	r3, r7, #3
10001e58:	701a      	strb	r2, [r3, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Clock", XMC_CCU4_SLICE_CHECK_CLOCK(clock));

  gctrl = module->GCTRL;
10001e5a:	687b      	ldr	r3, [r7, #4]
10001e5c:	681b      	ldr	r3, [r3, #0]
10001e5e:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_PCIS_Msk);
10001e60:	68fb      	ldr	r3, [r7, #12]
10001e62:	2230      	movs	r2, #48	; 0x30
10001e64:	4393      	bics	r3, r2
10001e66:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) clock) << CCU4_GCTRL_PCIS_Pos;
10001e68:	1cfb      	adds	r3, r7, #3
10001e6a:	781b      	ldrb	r3, [r3, #0]
10001e6c:	011b      	lsls	r3, r3, #4
10001e6e:	68fa      	ldr	r2, [r7, #12]
10001e70:	4313      	orrs	r3, r2
10001e72:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
10001e74:	687b      	ldr	r3, [r7, #4]
10001e76:	68fa      	ldr	r2, [r7, #12]
10001e78:	601a      	str	r2, [r3, #0]
}
10001e7a:	46bd      	mov	sp, r7
10001e7c:	b004      	add	sp, #16
10001e7e:	bd80      	pop	{r7, pc}

10001e80 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
10001e80:	b580      	push	{r7, lr}
10001e82:	b082      	sub	sp, #8
10001e84:	af00      	add	r7, sp, #0
10001e86:	6078      	str	r0, [r7, #4]
10001e88:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
10001e8a:	683b      	ldr	r3, [r7, #0]
10001e8c:	681a      	ldr	r2, [r3, #0]
10001e8e:	687b      	ldr	r3, [r7, #4]
10001e90:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
10001e92:	683b      	ldr	r3, [r7, #0]
10001e94:	795b      	ldrb	r3, [r3, #5]
10001e96:	069b      	lsls	r3, r3, #26
10001e98:	0fdb      	lsrs	r3, r3, #31
10001e9a:	b2db      	uxtb	r3, r3
10001e9c:	051a      	lsls	r2, r3, #20
10001e9e:	687b      	ldr	r3, [r7, #4]
10001ea0:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
10001ea2:	683b      	ldr	r3, [r7, #0]
10001ea4:	791b      	ldrb	r3, [r3, #4]
10001ea6:	071b      	lsls	r3, r3, #28
10001ea8:	0f1b      	lsrs	r3, r3, #28
10001eaa:	b2db      	uxtb	r3, r3
10001eac:	1c1a      	adds	r2, r3, #0
10001eae:	687b      	ldr	r3, [r7, #4]
10001eb0:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
10001eb2:	683b      	ldr	r3, [r7, #0]
10001eb4:	795b      	ldrb	r3, [r3, #5]
10001eb6:	071b      	lsls	r3, r3, #28
10001eb8:	0f1b      	lsrs	r3, r3, #28
10001eba:	b2db      	uxtb	r3, r3
10001ebc:	1c1a      	adds	r2, r3, #0
10001ebe:	687b      	ldr	r3, [r7, #4]
10001ec0:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
10001ec2:	683b      	ldr	r3, [r7, #0]
10001ec4:	795b      	ldrb	r3, [r3, #5]
10001ec6:	06db      	lsls	r3, r3, #27
10001ec8:	0fdb      	lsrs	r3, r3, #31
10001eca:	b2db      	uxtb	r3, r3
10001ecc:	1c1a      	adds	r2, r3, #0
10001ece:	687b      	ldr	r3, [r7, #4]
10001ed0:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
10001ed2:	683b      	ldr	r3, [r7, #0]
10001ed4:	791b      	ldrb	r3, [r3, #4]
10001ed6:	061b      	lsls	r3, r3, #24
10001ed8:	0f1b      	lsrs	r3, r3, #28
10001eda:	b2db      	uxtb	r3, r3
10001edc:	1c1a      	adds	r2, r3, #0
10001ede:	687b      	ldr	r3, [r7, #4]
10001ee0:	62da      	str	r2, [r3, #44]	; 0x2c
}
10001ee2:	46bd      	mov	sp, r7
10001ee4:	b002      	add	sp, #8
10001ee6:	bd80      	pop	{r7, pc}

10001ee8 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
10001ee8:	b580      	push	{r7, lr}
10001eea:	b086      	sub	sp, #24
10001eec:	af00      	add	r7, sp, #0
10001eee:	6078      	str	r0, [r7, #4]
10001ef0:	1c08      	adds	r0, r1, #0
10001ef2:	1c11      	adds	r1, r2, #0
10001ef4:	1cfb      	adds	r3, r7, #3
10001ef6:	1c02      	adds	r2, r0, #0
10001ef8:	701a      	strb	r2, [r3, #0]
10001efa:	1cbb      	adds	r3, r7, #2
10001efc:	1c0a      	adds	r2, r1, #0
10001efe:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
10001f00:	687b      	ldr	r3, [r7, #4]
10001f02:	22a8      	movs	r2, #168	; 0xa8
10001f04:	589b      	ldr	r3, [r3, r2]
10001f06:	60fb      	str	r3, [r7, #12]
  
  switch(event)
10001f08:	1cfb      	adds	r3, r7, #3
10001f0a:	781b      	ldrb	r3, [r3, #0]
10001f0c:	2b09      	cmp	r3, #9
10001f0e:	d81a      	bhi.n	10001f46 <XMC_CCU4_SLICE_SetInterruptNode+0x5e>
10001f10:	009a      	lsls	r2, r3, #2
10001f12:	4b1a      	ldr	r3, [pc, #104]	; (10001f7c <XMC_CCU4_SLICE_SetInterruptNode+0x94>)
10001f14:	18d3      	adds	r3, r2, r3
10001f16:	681b      	ldr	r3, [r3, #0]
10001f18:	469f      	mov	pc, r3
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
10001f1a:	2303      	movs	r3, #3
10001f1c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
10001f1e:	2300      	movs	r3, #0
10001f20:	617b      	str	r3, [r7, #20]
      break;
10001f22:	e016      	b.n	10001f52 <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
10001f24:	230c      	movs	r3, #12
10001f26:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
10001f28:	2302      	movs	r3, #2
10001f2a:	617b      	str	r3, [r7, #20]
      break;
10001f2c:	e011      	b.n	10001f52 <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
10001f2e:	23c0      	movs	r3, #192	; 0xc0
10001f30:	009b      	lsls	r3, r3, #2
10001f32:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
10001f34:	2308      	movs	r3, #8
10001f36:	617b      	str	r3, [r7, #20]
      break;
10001f38:	e00b      	b.n	10001f52 <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
10001f3a:	23c0      	movs	r3, #192	; 0xc0
10001f3c:	011b      	lsls	r3, r3, #4
10001f3e:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
10001f40:	230a      	movs	r3, #10
10001f42:	617b      	str	r3, [r7, #20]
      break;
10001f44:	e005      	b.n	10001f52 <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
10001f46:	23c0      	movs	r3, #192	; 0xc0
10001f48:	019b      	lsls	r3, r3, #6
10001f4a:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
10001f4c:	230c      	movs	r3, #12
10001f4e:	617b      	str	r3, [r7, #20]
      break;
10001f50:	46c0      	nop			; (mov r8, r8)
  }
  
  srs &= ~mask; 
10001f52:	693b      	ldr	r3, [r7, #16]
10001f54:	43da      	mvns	r2, r3
10001f56:	68fb      	ldr	r3, [r7, #12]
10001f58:	4013      	ands	r3, r2
10001f5a:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
10001f5c:	1cbb      	adds	r3, r7, #2
10001f5e:	781a      	ldrb	r2, [r3, #0]
10001f60:	697b      	ldr	r3, [r7, #20]
10001f62:	409a      	lsls	r2, r3
10001f64:	1c13      	adds	r3, r2, #0
10001f66:	68fa      	ldr	r2, [r7, #12]
10001f68:	4313      	orrs	r3, r2
10001f6a:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
10001f6c:	687b      	ldr	r3, [r7, #4]
10001f6e:	21a8      	movs	r1, #168	; 0xa8
10001f70:	68fa      	ldr	r2, [r7, #12]
10001f72:	505a      	str	r2, [r3, r1]
}
10001f74:	46bd      	mov	sp, r7
10001f76:	b006      	add	sp, #24
10001f78:	bd80      	pop	{r7, pc}
10001f7a:	46c0      	nop			; (mov r8, r8)
10001f7c:	10007d70 	.word	0x10007d70

10001f80 <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{ 
10001f80:	b580      	push	{r7, lr}
10001f82:	b084      	sub	sp, #16
10001f84:	af00      	add	r7, sp, #0
10001f86:	60f8      	str	r0, [r7, #12]
10001f88:	607a      	str	r2, [r7, #4]
10001f8a:	230b      	movs	r3, #11
10001f8c:	18fb      	adds	r3, r7, r3
10001f8e:	1c0a      	adds	r2, r1, #0
10001f90:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
10001f92:	68fb      	ldr	r3, [r7, #12]
10001f94:	1c18      	adds	r0, r3, #0
10001f96:	f7ff f921 	bl	100011dc <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL & 
10001f9a:	68fb      	ldr	r3, [r7, #12]
10001f9c:	681b      	ldr	r3, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
10001f9e:	220b      	movs	r2, #11
10001fa0:	18ba      	adds	r2, r7, r2
10001fa2:	7812      	ldrb	r2, [r2, #0]
10001fa4:	0092      	lsls	r2, r2, #2
10001fa6:	1c11      	adds	r1, r2, #0
10001fa8:	220f      	movs	r2, #15
10001faa:	408a      	lsls	r2, r1
10001fac:	43d2      	mvns	r2, r2
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
10001fae:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
10001fb0:	687b      	ldr	r3, [r7, #4]
10001fb2:	681b      	ldr	r3, [r3, #0]
10001fb4:	210b      	movs	r1, #11
10001fb6:	1879      	adds	r1, r7, r1
10001fb8:	7809      	ldrb	r1, [r1, #0]
10001fba:	0089      	lsls	r1, r1, #2
10001fbc:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
10001fbe:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
10001fc0:	68fb      	ldr	r3, [r7, #12]
10001fc2:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  
  eru->EXICON[channel] = config->raw;
10001fc4:	230b      	movs	r3, #11
10001fc6:	18fb      	adds	r3, r7, r3
10001fc8:	781a      	ldrb	r2, [r3, #0]
10001fca:	687b      	ldr	r3, [r7, #4]
10001fcc:	6859      	ldr	r1, [r3, #4]
10001fce:	68fb      	ldr	r3, [r7, #12]
10001fd0:	3204      	adds	r2, #4
10001fd2:	0092      	lsls	r2, r2, #2
10001fd4:	50d1      	str	r1, [r2, r3]
}
10001fd6:	46bd      	mov	sp, r7
10001fd8:	b004      	add	sp, #16
10001fda:	bd80      	pop	{r7, pc}

10001fdc <XMC_ERU_OGU_Init>:

/* Initializes the selected ERU_OGUy channel with the config structure.  */
void XMC_ERU_OGU_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_OGU_CONFIG_t *const config)
{
10001fdc:	b580      	push	{r7, lr}
10001fde:	b084      	sub	sp, #16
10001fe0:	af00      	add	r7, sp, #0
10001fe2:	60f8      	str	r0, [r7, #12]
10001fe4:	607a      	str	r2, [r7, #4]
10001fe6:	230b      	movs	r3, #11
10001fe8:	18fb      	adds	r3, r7, r3
10001fea:	1c0a      	adds	r2, r1, #0
10001fec:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
10001fee:	68fb      	ldr	r3, [r7, #12]
10001ff0:	1c18      	adds	r0, r3, #0
10001ff2:	f7ff f8f3 	bl	100011dc <XMC_ERU_Enable>

  eru->EXOCON[channel] = config->raw;
10001ff6:	230b      	movs	r3, #11
10001ff8:	18fb      	adds	r3, r7, r3
10001ffa:	781a      	ldrb	r2, [r3, #0]
10001ffc:	687b      	ldr	r3, [r7, #4]
10001ffe:	6819      	ldr	r1, [r3, #0]
10002000:	68fb      	ldr	r3, [r7, #12]
10002002:	3208      	adds	r2, #8
10002004:	0092      	lsls	r2, r2, #2
10002006:	50d1      	str	r1, [r2, r3]
}
10002008:	46bd      	mov	sp, r7
1000200a:	b004      	add	sp, #16
1000200c:	bd80      	pop	{r7, pc}
1000200e:	46c0      	nop			; (mov r8, r8)

10002010 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
10002010:	b580      	push	{r7, lr}
10002012:	b082      	sub	sp, #8
10002014:	af00      	add	r7, sp, #0
10002016:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
10002018:	687b      	ldr	r3, [r7, #4]
1000201a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000201c:	b2db      	uxtb	r3, r3
1000201e:	227f      	movs	r2, #127	; 0x7f
10002020:	4393      	bics	r3, r2
10002022:	b2db      	uxtb	r3, r3
}
10002024:	1c18      	adds	r0, r3, #0
10002026:	46bd      	mov	sp, r7
10002028:	b002      	add	sp, #8
1000202a:	bd80      	pop	{r7, pc}

1000202c <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
1000202c:	b580      	push	{r7, lr}
1000202e:	b082      	sub	sp, #8
10002030:	af00      	add	r7, sp, #0
10002032:	6078      	str	r0, [r7, #4]
10002034:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
10002036:	687b      	ldr	r3, [r7, #4]
10002038:	6cda      	ldr	r2, [r3, #76]	; 0x4c
1000203a:	683b      	ldr	r3, [r7, #0]
1000203c:	431a      	orrs	r2, r3
1000203e:	687b      	ldr	r3, [r7, #4]
10002040:	64da      	str	r2, [r3, #76]	; 0x4c
}
10002042:	46bd      	mov	sp, r7
10002044:	b002      	add	sp, #8
10002046:	bd80      	pop	{r7, pc}

10002048 <XMC_I2C_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
10002048:	b580      	push	{r7, lr}
1000204a:	b082      	sub	sp, #8
1000204c:	af00      	add	r7, sp, #0
1000204e:	6078      	str	r0, [r7, #4]
10002050:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
10002052:	687b      	ldr	r3, [r7, #4]
10002054:	1c18      	adds	r0, r3, #0
10002056:	f000 fb1f 	bl	10002698 <XMC_USIC_CH_Enable>
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
1000205a:	687b      	ldr	r3, [r7, #4]
1000205c:	4a0e      	ldr	r2, [pc, #56]	; (10002098 <XMC_I2C_CH_Init+0x50>)
1000205e:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
10002060:	683b      	ldr	r3, [r7, #0]
10002062:	889b      	ldrh	r3, [r3, #4]
10002064:	687a      	ldr	r2, [r7, #4]
10002066:	1c10      	adds	r0, r2, #0
10002068:	1c19      	adds	r1, r3, #0
1000206a:	f000 f817 	bl	1000209c <XMC_I2C_CH_SetSlaveAddress>
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
1000206e:	683b      	ldr	r3, [r7, #0]
10002070:	681b      	ldr	r3, [r3, #0]
10002072:	687a      	ldr	r2, [r7, #4]
10002074:	1c10      	adds	r0, r2, #0
10002076:	1c19      	adds	r1, r3, #0
10002078:	f000 f838 	bl	100020ec <XMC_I2C_CH_SetBaudrate>
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
1000207c:	687b      	ldr	r3, [r7, #4]
1000207e:	22a0      	movs	r2, #160	; 0xa0
10002080:	00d2      	lsls	r2, r2, #3
10002082:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
10002084:	687b      	ldr	r3, [r7, #4]
10002086:	2201      	movs	r2, #1
10002088:	4252      	negs	r2, r2
1000208a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
1000208c:	687b      	ldr	r3, [r7, #4]
1000208e:	2200      	movs	r2, #0
10002090:	641a      	str	r2, [r3, #64]	; 0x40
}
10002092:	46bd      	mov	sp, r7
10002094:	b002      	add	sp, #8
10002096:	bd80      	pop	{r7, pc}
10002098:	073f0303 	.word	0x073f0303

1000209c <XMC_I2C_CH_SetSlaveAddress>:
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
1000209c:	b580      	push	{r7, lr}
1000209e:	b082      	sub	sp, #8
100020a0:	af00      	add	r7, sp, #0
100020a2:	6078      	str	r0, [r7, #4]
100020a4:	1c0a      	adds	r2, r1, #0
100020a6:	1cbb      	adds	r3, r7, #2
100020a8:	801a      	strh	r2, [r3, #0]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
100020aa:	1cbb      	adds	r3, r7, #2
100020ac:	881a      	ldrh	r2, [r3, #0]
100020ae:	23f8      	movs	r3, #248	; 0xf8
100020b0:	01db      	lsls	r3, r3, #7
100020b2:	401a      	ands	r2, r3
100020b4:	23f0      	movs	r3, #240	; 0xf0
100020b6:	01db      	lsls	r3, r3, #7
100020b8:	429a      	cmp	r2, r3
100020ba:	d10e      	bne.n	100020da <XMC_I2C_CH_SetSlaveAddress+0x3e>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
100020bc:	1cbb      	adds	r3, r7, #2
100020be:	881b      	ldrh	r3, [r3, #0]
100020c0:	22ff      	movs	r2, #255	; 0xff
100020c2:	401a      	ands	r2, r3
100020c4:	1cbb      	adds	r3, r7, #2
100020c6:	881b      	ldrh	r3, [r3, #0]
100020c8:	005b      	lsls	r3, r3, #1
100020ca:	1c19      	adds	r1, r3, #0
100020cc:	23fe      	movs	r3, #254	; 0xfe
100020ce:	021b      	lsls	r3, r3, #8
100020d0:	400b      	ands	r3, r1
100020d2:	431a      	orrs	r2, r3
100020d4:	687b      	ldr	r3, [r7, #4]
100020d6:	63da      	str	r2, [r3, #60]	; 0x3c
100020d8:	e004      	b.n	100020e4 <XMC_I2C_CH_SetSlaveAddress+0x48>
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
100020da:	1cbb      	adds	r3, r7, #2
100020dc:	881b      	ldrh	r3, [r3, #0]
100020de:	021a      	lsls	r2, r3, #8
100020e0:	687b      	ldr	r3, [r7, #4]
100020e2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
100020e4:	46bd      	mov	sp, r7
100020e6:	b002      	add	sp, #8
100020e8:	bd80      	pop	{r7, pc}
100020ea:	46c0      	nop			; (mov r8, r8)

100020ec <XMC_I2C_CH_SetBaudrate>:
  
  return (uint16_t)address;
}
/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
{
100020ec:	b580      	push	{r7, lr}
100020ee:	b084      	sub	sp, #16
100020f0:	af00      	add	r7, sp, #0
100020f2:	6078      	str	r0, [r7, #4]
100020f4:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
100020f6:	230f      	movs	r3, #15
100020f8:	18fb      	adds	r3, r7, r3
100020fa:	2201      	movs	r2, #1
100020fc:	701a      	strb	r2, [r3, #0]
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
100020fe:	683b      	ldr	r3, [r7, #0]
10002100:	4a1d      	ldr	r2, [pc, #116]	; (10002178 <XMC_I2C_CH_SetBaudrate+0x8c>)
10002102:	4293      	cmp	r3, r2
10002104:	d813      	bhi.n	1000212e <XMC_I2C_CH_SetBaudrate+0x42>
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
10002106:	687b      	ldr	r3, [r7, #4]
10002108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000210a:	4a1c      	ldr	r2, [pc, #112]	; (1000217c <XMC_I2C_CH_SetBaudrate+0x90>)
1000210c:	401a      	ands	r2, r3
1000210e:	687b      	ldr	r3, [r7, #4]
10002110:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
10002112:	687a      	ldr	r2, [r7, #4]
10002114:	683b      	ldr	r3, [r7, #0]
10002116:	1c10      	adds	r0, r2, #0
10002118:	1c19      	adds	r1, r3, #0
1000211a:	220a      	movs	r2, #10
1000211c:	f000 faf8 	bl	10002710 <XMC_USIC_CH_SetBaudrate>
10002120:	1e03      	subs	r3, r0, #0
10002122:	d121      	bne.n	10002168 <XMC_I2C_CH_SetBaudrate+0x7c>
    {
      status = XMC_I2C_CH_STATUS_OK;
10002124:	230f      	movs	r3, #15
10002126:	18fb      	adds	r3, r7, r3
10002128:	2200      	movs	r2, #0
1000212a:	701a      	strb	r2, [r3, #0]
1000212c:	e01c      	b.n	10002168 <XMC_I2C_CH_SetBaudrate+0x7c>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
1000212e:	683b      	ldr	r3, [r7, #0]
10002130:	4a13      	ldr	r2, [pc, #76]	; (10002180 <XMC_I2C_CH_SetBaudrate+0x94>)
10002132:	4293      	cmp	r3, r2
10002134:	d814      	bhi.n	10002160 <XMC_I2C_CH_SetBaudrate+0x74>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
10002136:	687b      	ldr	r3, [r7, #4]
10002138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000213a:	2280      	movs	r2, #128	; 0x80
1000213c:	0292      	lsls	r2, r2, #10
1000213e:	431a      	orrs	r2, r3
10002140:	687b      	ldr	r3, [r7, #4]
10002142:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
10002144:	687a      	ldr	r2, [r7, #4]
10002146:	683b      	ldr	r3, [r7, #0]
10002148:	1c10      	adds	r0, r2, #0
1000214a:	1c19      	adds	r1, r3, #0
1000214c:	2219      	movs	r2, #25
1000214e:	f000 fadf 	bl	10002710 <XMC_USIC_CH_SetBaudrate>
10002152:	1e03      	subs	r3, r0, #0
10002154:	d108      	bne.n	10002168 <XMC_I2C_CH_SetBaudrate+0x7c>
    {
      status = XMC_I2C_CH_STATUS_OK;
10002156:	230f      	movs	r3, #15
10002158:	18fb      	adds	r3, r7, r3
1000215a:	2200      	movs	r2, #0
1000215c:	701a      	strb	r2, [r3, #0]
1000215e:	e003      	b.n	10002168 <XMC_I2C_CH_SetBaudrate+0x7c>
    }
  }
  else 
  {
    status = XMC_I2C_CH_STATUS_ERROR;
10002160:	230f      	movs	r3, #15
10002162:	18fb      	adds	r3, r7, r3
10002164:	2201      	movs	r2, #1
10002166:	701a      	strb	r2, [r3, #0]
  }
  
  return status;
10002168:	230f      	movs	r3, #15
1000216a:	18fb      	adds	r3, r7, r3
1000216c:	781b      	ldrb	r3, [r3, #0]
}
1000216e:	1c18      	adds	r0, r3, #0
10002170:	46bd      	mov	sp, r7
10002172:	b004      	add	sp, #16
10002174:	bd80      	pop	{r7, pc}
10002176:	46c0      	nop			; (mov r8, r8)
10002178:	000186a0 	.word	0x000186a0
1000217c:	fffdffff 	.word	0xfffdffff
10002180:	00061a80 	.word	0x00061a80

10002184 <XMC_I2C_CH_MasterStart>:
/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
10002184:	b580      	push	{r7, lr}
10002186:	b084      	sub	sp, #16
10002188:	af00      	add	r7, sp, #0
1000218a:	6078      	str	r0, [r7, #4]
1000218c:	1c08      	adds	r0, r1, #0
1000218e:	1c11      	adds	r1, r2, #0
10002190:	1cbb      	adds	r3, r7, #2
10002192:	1c02      	adds	r2, r0, #0
10002194:	801a      	strh	r2, [r3, #0]
10002196:	1c7b      	adds	r3, r7, #1
10002198:	1c0a      	adds	r2, r1, #0
1000219a:	701a      	strb	r2, [r3, #0]
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
1000219c:	1cbb      	adds	r3, r7, #2
1000219e:	881b      	ldrh	r3, [r3, #0]
100021a0:	2280      	movs	r2, #128	; 0x80
100021a2:	00d2      	lsls	r2, r2, #3
100021a4:	4313      	orrs	r3, r2
100021a6:	b29b      	uxth	r3, r3
100021a8:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
100021aa:	1c7b      	adds	r3, r7, #1
100021ac:	781b      	ldrb	r3, [r3, #0]
100021ae:	2b01      	cmp	r3, #1
100021b0:	d103      	bne.n	100021ba <XMC_I2C_CH_MasterStart+0x36>
  {
    temp |= 0x1U;
100021b2:	68fb      	ldr	r3, [r7, #12]
100021b4:	2201      	movs	r2, #1
100021b6:	4313      	orrs	r3, r2
100021b8:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
100021ba:	687a      	ldr	r2, [r7, #4]
100021bc:	2384      	movs	r3, #132	; 0x84
100021be:	005b      	lsls	r3, r3, #1
100021c0:	58d2      	ldr	r2, [r2, r3]
100021c2:	23e0      	movs	r3, #224	; 0xe0
100021c4:	04db      	lsls	r3, r3, #19
100021c6:	4013      	ands	r3, r2
100021c8:	d113      	bne.n	100021f2 <XMC_I2C_CH_MasterStart+0x6e>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
100021ca:	46c0      	nop			; (mov r8, r8)
100021cc:	687b      	ldr	r3, [r7, #4]
100021ce:	1c18      	adds	r0, r3, #0
100021d0:	f7ff ff1e 	bl	10002010 <XMC_USIC_CH_GetTransmitBufferStatus>
100021d4:	1e03      	subs	r3, r0, #0
100021d6:	2b80      	cmp	r3, #128	; 0x80
100021d8:	d0f8      	beq.n	100021cc <XMC_I2C_CH_MasterStart+0x48>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
100021da:	687a      	ldr	r2, [r7, #4]
100021dc:	2380      	movs	r3, #128	; 0x80
100021de:	019b      	lsls	r3, r3, #6
100021e0:	1c10      	adds	r0, r2, #0
100021e2:	1c19      	adds	r1, r3, #0
100021e4:	f7ff ff22 	bl	1000202c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
100021e8:	687b      	ldr	r3, [r7, #4]
100021ea:	2180      	movs	r1, #128	; 0x80
100021ec:	68fa      	ldr	r2, [r7, #12]
100021ee:	505a      	str	r2, [r3, r1]
100021f0:	e004      	b.n	100021fc <XMC_I2C_CH_MasterStart+0x78>
  }
  else
  {
    channel->IN[0U] = temp;
100021f2:	687a      	ldr	r2, [r7, #4]
100021f4:	23c0      	movs	r3, #192	; 0xc0
100021f6:	005b      	lsls	r3, r3, #1
100021f8:	68f9      	ldr	r1, [r7, #12]
100021fa:	50d1      	str	r1, [r2, r3]
  }
}
100021fc:	46bd      	mov	sp, r7
100021fe:	b004      	add	sp, #16
10002200:	bd80      	pop	{r7, pc}
10002202:	46c0      	nop			; (mov r8, r8)

10002204 <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
10002204:	b580      	push	{r7, lr}
10002206:	b084      	sub	sp, #16
10002208:	af00      	add	r7, sp, #0
1000220a:	6078      	str	r0, [r7, #4]
1000220c:	1c08      	adds	r0, r1, #0
1000220e:	1c11      	adds	r1, r2, #0
10002210:	1cbb      	adds	r3, r7, #2
10002212:	1c02      	adds	r2, r0, #0
10002214:	801a      	strh	r2, [r3, #0]
10002216:	1c7b      	adds	r3, r7, #1
10002218:	1c0a      	adds	r2, r1, #0
1000221a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
1000221c:	1cbb      	adds	r3, r7, #2
1000221e:	881b      	ldrh	r3, [r3, #0]
10002220:	22a0      	movs	r2, #160	; 0xa0
10002222:	00d2      	lsls	r2, r2, #3
10002224:	4313      	orrs	r3, r2
10002226:	b29b      	uxth	r3, r3
10002228:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
1000222a:	1c7b      	adds	r3, r7, #1
1000222c:	781b      	ldrb	r3, [r3, #0]
1000222e:	2b01      	cmp	r3, #1
10002230:	d103      	bne.n	1000223a <XMC_I2C_CH_MasterRepeatedStart+0x36>
  {
    tmp |= 0x1U;
10002232:	68fb      	ldr	r3, [r7, #12]
10002234:	2201      	movs	r2, #1
10002236:	4313      	orrs	r3, r2
10002238:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
1000223a:	687a      	ldr	r2, [r7, #4]
1000223c:	2384      	movs	r3, #132	; 0x84
1000223e:	005b      	lsls	r3, r3, #1
10002240:	58d2      	ldr	r2, [r2, r3]
10002242:	23e0      	movs	r3, #224	; 0xe0
10002244:	04db      	lsls	r3, r3, #19
10002246:	4013      	ands	r3, r2
10002248:	d113      	bne.n	10002272 <XMC_I2C_CH_MasterRepeatedStart+0x6e>
  {  
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
1000224a:	46c0      	nop			; (mov r8, r8)
1000224c:	687b      	ldr	r3, [r7, #4]
1000224e:	1c18      	adds	r0, r3, #0
10002250:	f7ff fede 	bl	10002010 <XMC_USIC_CH_GetTransmitBufferStatus>
10002254:	1e03      	subs	r3, r0, #0
10002256:	2b80      	cmp	r3, #128	; 0x80
10002258:	d0f8      	beq.n	1000224c <XMC_I2C_CH_MasterRepeatedStart+0x48>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
1000225a:	687a      	ldr	r2, [r7, #4]
1000225c:	2380      	movs	r3, #128	; 0x80
1000225e:	019b      	lsls	r3, r3, #6
10002260:	1c10      	adds	r0, r2, #0
10002262:	1c19      	adds	r1, r3, #0
10002264:	f7ff fee2 	bl	1000202c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
10002268:	687b      	ldr	r3, [r7, #4]
1000226a:	2180      	movs	r1, #128	; 0x80
1000226c:	68fa      	ldr	r2, [r7, #12]
1000226e:	505a      	str	r2, [r3, r1]
10002270:	e004      	b.n	1000227c <XMC_I2C_CH_MasterRepeatedStart+0x78>
  }
  else
  {
    channel->IN[0U] = tmp;
10002272:	687a      	ldr	r2, [r7, #4]
10002274:	23c0      	movs	r3, #192	; 0xc0
10002276:	005b      	lsls	r3, r3, #1
10002278:	68f9      	ldr	r1, [r7, #12]
1000227a:	50d1      	str	r1, [r2, r3]
  }
}
1000227c:	46bd      	mov	sp, r7
1000227e:	b004      	add	sp, #16
10002280:	bd80      	pop	{r7, pc}
10002282:	46c0      	nop			; (mov r8, r8)

10002284 <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
10002284:	b580      	push	{r7, lr}
10002286:	b082      	sub	sp, #8
10002288:	af00      	add	r7, sp, #0
1000228a:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
1000228c:	687a      	ldr	r2, [r7, #4]
1000228e:	2384      	movs	r3, #132	; 0x84
10002290:	005b      	lsls	r3, r3, #1
10002292:	58d2      	ldr	r2, [r2, r3]
10002294:	23e0      	movs	r3, #224	; 0xe0
10002296:	04db      	lsls	r3, r3, #19
10002298:	4013      	ands	r3, r2
1000229a:	d114      	bne.n	100022c6 <XMC_I2C_CH_MasterStop+0x42>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
1000229c:	46c0      	nop			; (mov r8, r8)
1000229e:	687b      	ldr	r3, [r7, #4]
100022a0:	1c18      	adds	r0, r3, #0
100022a2:	f7ff feb5 	bl	10002010 <XMC_USIC_CH_GetTransmitBufferStatus>
100022a6:	1e03      	subs	r3, r0, #0
100022a8:	2b80      	cmp	r3, #128	; 0x80
100022aa:	d0f8      	beq.n	1000229e <XMC_I2C_CH_MasterStop+0x1a>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
100022ac:	687a      	ldr	r2, [r7, #4]
100022ae:	2380      	movs	r3, #128	; 0x80
100022b0:	019b      	lsls	r3, r3, #6
100022b2:	1c10      	adds	r0, r2, #0
100022b4:	1c19      	adds	r1, r3, #0
100022b6:	f7ff feb9 	bl	1000202c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
100022ba:	687b      	ldr	r3, [r7, #4]
100022bc:	2180      	movs	r1, #128	; 0x80
100022be:	22c0      	movs	r2, #192	; 0xc0
100022c0:	00d2      	lsls	r2, r2, #3
100022c2:	505a      	str	r2, [r3, r1]
100022c4:	e005      	b.n	100022d2 <XMC_I2C_CH_MasterStop+0x4e>
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
100022c6:	687a      	ldr	r2, [r7, #4]
100022c8:	23c0      	movs	r3, #192	; 0xc0
100022ca:	005b      	lsls	r3, r3, #1
100022cc:	21c0      	movs	r1, #192	; 0xc0
100022ce:	00c9      	lsls	r1, r1, #3
100022d0:	50d1      	str	r1, [r2, r3]
  }
}
100022d2:	46bd      	mov	sp, r7
100022d4:	b002      	add	sp, #8
100022d6:	bd80      	pop	{r7, pc}

100022d8 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
100022d8:	b580      	push	{r7, lr}
100022da:	b082      	sub	sp, #8
100022dc:	af00      	add	r7, sp, #0
100022de:	6078      	str	r0, [r7, #4]
100022e0:	1c0a      	adds	r2, r1, #0
100022e2:	1cfb      	adds	r3, r7, #3
100022e4:	701a      	strb	r2, [r3, #0]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
100022e6:	687a      	ldr	r2, [r7, #4]
100022e8:	2384      	movs	r3, #132	; 0x84
100022ea:	005b      	lsls	r3, r3, #1
100022ec:	58d2      	ldr	r2, [r2, r3]
100022ee:	23e0      	movs	r3, #224	; 0xe0
100022f0:	04db      	lsls	r3, r3, #19
100022f2:	4013      	ands	r3, r2
100022f4:	d114      	bne.n	10002320 <XMC_I2C_CH_MasterTransmit+0x48>
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
100022f6:	46c0      	nop			; (mov r8, r8)
100022f8:	687b      	ldr	r3, [r7, #4]
100022fa:	1c18      	adds	r0, r3, #0
100022fc:	f7ff fe88 	bl	10002010 <XMC_USIC_CH_GetTransmitBufferStatus>
10002300:	1e03      	subs	r3, r0, #0
10002302:	2b80      	cmp	r3, #128	; 0x80
10002304:	d0f8      	beq.n	100022f8 <XMC_I2C_CH_MasterTransmit+0x20>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
10002306:	687a      	ldr	r2, [r7, #4]
10002308:	2380      	movs	r3, #128	; 0x80
1000230a:	019b      	lsls	r3, r3, #6
1000230c:	1c10      	adds	r0, r2, #0
1000230e:	1c19      	adds	r1, r3, #0
10002310:	f7ff fe8c 	bl	1000202c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
10002314:	1cfb      	adds	r3, r7, #3
10002316:	781a      	ldrb	r2, [r3, #0]
10002318:	687b      	ldr	r3, [r7, #4]
1000231a:	2180      	movs	r1, #128	; 0x80
1000231c:	505a      	str	r2, [r3, r1]
1000231e:	e005      	b.n	1000232c <XMC_I2C_CH_MasterTransmit+0x54>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
10002320:	1cfb      	adds	r3, r7, #3
10002322:	7819      	ldrb	r1, [r3, #0]
10002324:	687a      	ldr	r2, [r7, #4]
10002326:	23c0      	movs	r3, #192	; 0xc0
10002328:	005b      	lsls	r3, r3, #1
1000232a:	50d1      	str	r1, [r2, r3]
  }
}
1000232c:	46bd      	mov	sp, r7
1000232e:	b002      	add	sp, #8
10002330:	bd80      	pop	{r7, pc}
10002332:	46c0      	nop			; (mov r8, r8)

10002334 <XMC_I2C_CH_MasterReceiveAck>:
  }
}

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
10002334:	b580      	push	{r7, lr}
10002336:	b082      	sub	sp, #8
10002338:	af00      	add	r7, sp, #0
1000233a:	6078      	str	r0, [r7, #4]
/* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
1000233c:	687a      	ldr	r2, [r7, #4]
1000233e:	2384      	movs	r3, #132	; 0x84
10002340:	005b      	lsls	r3, r3, #1
10002342:	58d2      	ldr	r2, [r2, r3]
10002344:	23e0      	movs	r3, #224	; 0xe0
10002346:	04db      	lsls	r3, r3, #19
10002348:	4013      	ands	r3, r2
1000234a:	d114      	bne.n	10002376 <XMC_I2C_CH_MasterReceiveAck+0x42>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
1000234c:	46c0      	nop			; (mov r8, r8)
1000234e:	687b      	ldr	r3, [r7, #4]
10002350:	1c18      	adds	r0, r3, #0
10002352:	f7ff fe5d 	bl	10002010 <XMC_USIC_CH_GetTransmitBufferStatus>
10002356:	1e03      	subs	r3, r0, #0
10002358:	2b80      	cmp	r3, #128	; 0x80
1000235a:	d0f8      	beq.n	1000234e <XMC_I2C_CH_MasterReceiveAck+0x1a>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
1000235c:	687a      	ldr	r2, [r7, #4]
1000235e:	2380      	movs	r3, #128	; 0x80
10002360:	019b      	lsls	r3, r3, #6
10002362:	1c10      	adds	r0, r2, #0
10002364:	1c19      	adds	r1, r3, #0
10002366:	f7ff fe61 	bl	1000202c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
1000236a:	687b      	ldr	r3, [r7, #4]
1000236c:	2180      	movs	r1, #128	; 0x80
1000236e:	2280      	movs	r2, #128	; 0x80
10002370:	0092      	lsls	r2, r2, #2
10002372:	505a      	str	r2, [r3, r1]
10002374:	e005      	b.n	10002382 <XMC_I2C_CH_MasterReceiveAck+0x4e>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
10002376:	687a      	ldr	r2, [r7, #4]
10002378:	23c0      	movs	r3, #192	; 0xc0
1000237a:	005b      	lsls	r3, r3, #1
1000237c:	2180      	movs	r1, #128	; 0x80
1000237e:	0089      	lsls	r1, r1, #2
10002380:	50d1      	str	r1, [r2, r3]
  }
}
10002382:	46bd      	mov	sp, r7
10002384:	b002      	add	sp, #8
10002386:	bd80      	pop	{r7, pc}

10002388 <XMC_I2C_CH_MasterReceiveNack>:

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
10002388:	b580      	push	{r7, lr}
1000238a:	b082      	sub	sp, #8
1000238c:	af00      	add	r7, sp, #0
1000238e:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
10002390:	687a      	ldr	r2, [r7, #4]
10002392:	2384      	movs	r3, #132	; 0x84
10002394:	005b      	lsls	r3, r3, #1
10002396:	58d2      	ldr	r2, [r2, r3]
10002398:	23e0      	movs	r3, #224	; 0xe0
1000239a:	04db      	lsls	r3, r3, #19
1000239c:	4013      	ands	r3, r2
1000239e:	d114      	bne.n	100023ca <XMC_I2C_CH_MasterReceiveNack+0x42>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
100023a0:	46c0      	nop			; (mov r8, r8)
100023a2:	687b      	ldr	r3, [r7, #4]
100023a4:	1c18      	adds	r0, r3, #0
100023a6:	f7ff fe33 	bl	10002010 <XMC_USIC_CH_GetTransmitBufferStatus>
100023aa:	1e03      	subs	r3, r0, #0
100023ac:	2b80      	cmp	r3, #128	; 0x80
100023ae:	d0f8      	beq.n	100023a2 <XMC_I2C_CH_MasterReceiveNack+0x1a>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
100023b0:	687a      	ldr	r2, [r7, #4]
100023b2:	2380      	movs	r3, #128	; 0x80
100023b4:	019b      	lsls	r3, r3, #6
100023b6:	1c10      	adds	r0, r2, #0
100023b8:	1c19      	adds	r1, r3, #0
100023ba:	f7ff fe37 	bl	1000202c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
100023be:	687b      	ldr	r3, [r7, #4]
100023c0:	2180      	movs	r1, #128	; 0x80
100023c2:	22c0      	movs	r2, #192	; 0xc0
100023c4:	0092      	lsls	r2, r2, #2
100023c6:	505a      	str	r2, [r3, r1]
100023c8:	e005      	b.n	100023d6 <XMC_I2C_CH_MasterReceiveNack+0x4e>
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
100023ca:	687a      	ldr	r2, [r7, #4]
100023cc:	23c0      	movs	r3, #192	; 0xc0
100023ce:	005b      	lsls	r3, r3, #1
100023d0:	21c0      	movs	r1, #192	; 0xc0
100023d2:	0089      	lsls	r1, r1, #2
100023d4:	50d1      	str	r1, [r2, r3]
  }
}
100023d6:	46bd      	mov	sp, r7
100023d8:	b002      	add	sp, #8
100023da:	bd80      	pop	{r7, pc}

100023dc <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
100023dc:	b580      	push	{r7, lr}
100023de:	b084      	sub	sp, #16
100023e0:	af00      	add	r7, sp, #0
100023e2:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
100023e4:	687a      	ldr	r2, [r7, #4]
100023e6:	2386      	movs	r3, #134	; 0x86
100023e8:	005b      	lsls	r3, r3, #1
100023ea:	58d2      	ldr	r2, [r2, r3]
100023ec:	23e0      	movs	r3, #224	; 0xe0
100023ee:	04db      	lsls	r3, r3, #19
100023f0:	4013      	ands	r3, r2
100023f2:	d105      	bne.n	10002400 <XMC_I2C_CH_GetReceivedData+0x24>
  {
    retval = (uint8_t)channel->RBUF;
100023f4:	687b      	ldr	r3, [r7, #4]
100023f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
100023f8:	230f      	movs	r3, #15
100023fa:	18fb      	adds	r3, r7, r3
100023fc:	701a      	strb	r2, [r3, #0]
100023fe:	e006      	b.n	1000240e <XMC_I2C_CH_GetReceivedData+0x32>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
10002400:	687a      	ldr	r2, [r7, #4]
10002402:	238e      	movs	r3, #142	; 0x8e
10002404:	005b      	lsls	r3, r3, #1
10002406:	58d2      	ldr	r2, [r2, r3]
10002408:	230f      	movs	r3, #15
1000240a:	18fb      	adds	r3, r7, r3
1000240c:	701a      	strb	r2, [r3, #0]
  }

  return retval;
1000240e:	230f      	movs	r3, #15
10002410:	18fb      	adds	r3, r7, r3
10002412:	781b      	ldrb	r3, [r3, #0]
}
10002414:	1c18      	adds	r0, r3, #0
10002416:	46bd      	mov	sp, r7
10002418:	b004      	add	sp, #16
1000241a:	bd80      	pop	{r7, pc}

1000241c <__aeabi_uidiv>:
/***********************************************************************************************************************
 * API IMPLEMENTATION - aeabi routines
 **********************************************************************************************************************/
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
1000241c:	b580      	push	{r7, lr}
1000241e:	b088      	sub	sp, #32
10002420:	af00      	add	r7, sp, #0
10002422:	6078      	str	r0, [r7, #4]
10002424:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
10002426:	f3ef 8310 	mrs	r3, PRIMASK
1000242a:	617b      	str	r3, [r7, #20]
  return(result);
1000242c:	697b      	ldr	r3, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
1000242e:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10002430:	b672      	cpsid	i
  __disable_irq ();
  return status;
10002432:	693b      	ldr	r3, [r7, #16]
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
  uint32_t result;
  uint32_t ics;
  ics = critical_section_enter();
10002434:	61fb      	str	r3, [r7, #28]

  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
10002436:	4b0c      	ldr	r3, [pc, #48]	; (10002468 <__aeabi_uidiv+0x4c>)
10002438:	2204      	movs	r2, #4
1000243a:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
1000243c:	4b0a      	ldr	r3, [pc, #40]	; (10002468 <__aeabi_uidiv+0x4c>)
1000243e:	687a      	ldr	r2, [r7, #4]
10002440:	621a      	str	r2, [r3, #32]
  MATH->DVS     = divisor;
10002442:	4b09      	ldr	r3, [pc, #36]	; (10002468 <__aeabi_uidiv+0x4c>)
10002444:	683a      	ldr	r2, [r7, #0]
10002446:	625a      	str	r2, [r3, #36]	; 0x24

  result = MATH->QUOT;
10002448:	4b07      	ldr	r3, [pc, #28]	; (10002468 <__aeabi_uidiv+0x4c>)
1000244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000244c:	61bb      	str	r3, [r7, #24]
1000244e:	69fb      	ldr	r3, [r7, #28]
10002450:	60fb      	str	r3, [r7, #12]
10002452:	68fb      	ldr	r3, [r7, #12]
10002454:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10002456:	68bb      	ldr	r3, [r7, #8]
10002458:	f383 8810 	msr	PRIMASK, r3

  critical_section_exit(ics);

  return result;
1000245c:	69bb      	ldr	r3, [r7, #24]
}
1000245e:	1c18      	adds	r0, r3, #0
10002460:	46bd      	mov	sp, r7
10002462:	b008      	add	sp, #32
10002464:	bd80      	pop	{r7, pc}
10002466:	46c0      	nop			; (mov r8, r8)
10002468:	40030000 	.word	0x40030000

1000246c <__aeabi_uidivmod>:
  return result;
}

/* This function performs unsigned integer division modulo */
uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor)
{
1000246c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000246e:	b08d      	sub	sp, #52	; 0x34
10002470:	af00      	add	r7, sp, #0
10002472:	6078      	str	r0, [r7, #4]
10002474:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
10002476:	f3ef 8210 	mrs	r2, PRIMASK
1000247a:	617a      	str	r2, [r7, #20]
  return(result);
1000247c:	697a      	ldr	r2, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
1000247e:	613a      	str	r2, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10002480:	b672      	cpsid	i
  __disable_irq ();
  return status;
10002482:	693a      	ldr	r2, [r7, #16]
uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor)
{
  uint64_t remainder;
  uint64_t quot;
  uint32_t ics;
  ics = critical_section_enter();
10002484:	62fa      	str	r2, [r7, #44]	; 0x2c
  
  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
10002486:	4a15      	ldr	r2, [pc, #84]	; (100024dc <__aeabi_uidivmod+0x70>)
10002488:	2104      	movs	r1, #4
1000248a:	6351      	str	r1, [r2, #52]	; 0x34
  MATH->DVD     = dividend;
1000248c:	4a13      	ldr	r2, [pc, #76]	; (100024dc <__aeabi_uidivmod+0x70>)
1000248e:	6879      	ldr	r1, [r7, #4]
10002490:	6211      	str	r1, [r2, #32]
  MATH->DVS     = divisor;
10002492:	4a12      	ldr	r2, [pc, #72]	; (100024dc <__aeabi_uidivmod+0x70>)
10002494:	6839      	ldr	r1, [r7, #0]
10002496:	6251      	str	r1, [r2, #36]	; 0x24

  remainder = (uint64_t)MATH->RMD;
10002498:	4a10      	ldr	r2, [pc, #64]	; (100024dc <__aeabi_uidivmod+0x70>)
1000249a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1000249c:	623a      	str	r2, [r7, #32]
1000249e:	2200      	movs	r2, #0
100024a0:	627a      	str	r2, [r7, #36]	; 0x24
  quot = (uint64_t)MATH->QUOT;
100024a2:	4a0e      	ldr	r2, [pc, #56]	; (100024dc <__aeabi_uidivmod+0x70>)
100024a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
100024a6:	61ba      	str	r2, [r7, #24]
100024a8:	2200      	movs	r2, #0
100024aa:	61fa      	str	r2, [r7, #28]
100024ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
100024ae:	60fa      	str	r2, [r7, #12]
100024b0:	68fa      	ldr	r2, [r7, #12]
100024b2:	60ba      	str	r2, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100024b4:	68ba      	ldr	r2, [r7, #8]
100024b6:	f382 8810 	msr	PRIMASK, r2

  critical_section_exit(ics);

  return ((remainder << 32) | quot);
100024ba:	6a3a      	ldr	r2, [r7, #32]
100024bc:	0014      	movs	r4, r2
100024be:	2200      	movs	r2, #0
100024c0:	1c13      	adds	r3, r2, #0
100024c2:	69ba      	ldr	r2, [r7, #24]
100024c4:	431a      	orrs	r2, r3
100024c6:	1c15      	adds	r5, r2, #0
100024c8:	69fa      	ldr	r2, [r7, #28]
100024ca:	4322      	orrs	r2, r4
100024cc:	1c16      	adds	r6, r2, #0
100024ce:	1c2b      	adds	r3, r5, #0
100024d0:	1c34      	adds	r4, r6, #0
}
100024d2:	1c18      	adds	r0, r3, #0
100024d4:	1c21      	adds	r1, r4, #0
100024d6:	46bd      	mov	sp, r7
100024d8:	b00d      	add	sp, #52	; 0x34
100024da:	bdf0      	pop	{r4, r5, r6, r7, pc}
100024dc:	40030000 	.word	0x40030000

100024e0 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
100024e0:	b580      	push	{r7, lr}
100024e2:	b082      	sub	sp, #8
100024e4:	af00      	add	r7, sp, #0
100024e6:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
100024e8:	687b      	ldr	r3, [r7, #4]
100024ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100024ec:	b2db      	uxtb	r3, r3
100024ee:	227f      	movs	r2, #127	; 0x7f
100024f0:	4393      	bics	r3, r2
100024f2:	b2db      	uxtb	r3, r3
}
100024f4:	1c18      	adds	r0, r3, #0
100024f6:	46bd      	mov	sp, r7
100024f8:	b002      	add	sp, #8
100024fa:	bd80      	pop	{r7, pc}

100024fc <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
100024fc:	b580      	push	{r7, lr}
100024fe:	b082      	sub	sp, #8
10002500:	af00      	add	r7, sp, #0
10002502:	6078      	str	r0, [r7, #4]
10002504:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
10002506:	687b      	ldr	r3, [r7, #4]
10002508:	683a      	ldr	r2, [r7, #0]
1000250a:	64da      	str	r2, [r3, #76]	; 0x4c
}
1000250c:	46bd      	mov	sp, r7
1000250e:	b002      	add	sp, #8
10002510:	bd80      	pop	{r7, pc}
10002512:	46c0      	nop			; (mov r8, r8)

10002514 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
10002514:	b580      	push	{r7, lr}
10002516:	b084      	sub	sp, #16
10002518:	af00      	add	r7, sp, #0
1000251a:	6078      	str	r0, [r7, #4]
1000251c:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
1000251e:	2310      	movs	r3, #16
10002520:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
10002522:	687b      	ldr	r3, [r7, #4]
10002524:	1c18      	adds	r0, r3, #0
10002526:	f000 f8b7 	bl	10002698 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
1000252a:	683b      	ldr	r3, [r7, #0]
1000252c:	79db      	ldrb	r3, [r3, #7]
1000252e:	2b00      	cmp	r3, #0
10002530:	d002      	beq.n	10002538 <XMC_UART_CH_Init+0x24>
  {
    oversampling = (uint32_t)config->oversampling;
10002532:	683b      	ldr	r3, [r7, #0]
10002534:	79db      	ldrb	r3, [r3, #7]
10002536:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
10002538:	683b      	ldr	r3, [r7, #0]
1000253a:	681a      	ldr	r2, [r3, #0]
1000253c:	6879      	ldr	r1, [r7, #4]
1000253e:	68fb      	ldr	r3, [r7, #12]
10002540:	1c08      	adds	r0, r1, #0
10002542:	1c11      	adds	r1, r2, #0
10002544:	1c1a      	adds	r2, r3, #0
10002546:	f000 f8e3 	bl	10002710 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
1000254a:	683b      	ldr	r3, [r7, #0]
1000254c:	799b      	ldrb	r3, [r3, #6]
1000254e:	3b01      	subs	r3, #1
10002550:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
10002552:	68fb      	ldr	r3, [r7, #12]
10002554:	085b      	lsrs	r3, r3, #1
10002556:	3301      	adds	r3, #1
10002558:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
1000255a:	4313      	orrs	r3, r2
1000255c:	4a19      	ldr	r2, [pc, #100]	; (100025c4 <XMC_UART_CH_Init+0xb0>)
1000255e:	431a      	orrs	r2, r3
10002560:	687b      	ldr	r3, [r7, #4]
10002562:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
10002564:	683b      	ldr	r3, [r7, #0]
10002566:	791b      	ldrb	r3, [r3, #4]
10002568:	3b01      	subs	r3, #1
1000256a:	061b      	lsls	r3, r3, #24
1000256c:	2281      	movs	r2, #129	; 0x81
1000256e:	0052      	lsls	r2, r2, #1
10002570:	431a      	orrs	r2, r3
10002572:	687b      	ldr	r3, [r7, #4]
10002574:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
10002576:	683b      	ldr	r3, [r7, #0]
10002578:	795b      	ldrb	r3, [r3, #5]
1000257a:	2b00      	cmp	r3, #0
1000257c:	d009      	beq.n	10002592 <XMC_UART_CH_Init+0x7e>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
1000257e:	687b      	ldr	r3, [r7, #4]
10002580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10002582:	683b      	ldr	r3, [r7, #0]
10002584:	795b      	ldrb	r3, [r3, #5]
10002586:	3b01      	subs	r3, #1
10002588:	041b      	lsls	r3, r3, #16
1000258a:	431a      	orrs	r2, r3
1000258c:	687b      	ldr	r3, [r7, #4]
1000258e:	635a      	str	r2, [r3, #52]	; 0x34
10002590:	e008      	b.n	100025a4 <XMC_UART_CH_Init+0x90>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
10002592:	687b      	ldr	r3, [r7, #4]
10002594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10002596:	683b      	ldr	r3, [r7, #0]
10002598:	791b      	ldrb	r3, [r3, #4]
1000259a:	3b01      	subs	r3, #1
1000259c:	041b      	lsls	r3, r3, #16
1000259e:	431a      	orrs	r2, r3
100025a0:	687b      	ldr	r3, [r7, #4]
100025a2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
100025a4:	687b      	ldr	r3, [r7, #4]
100025a6:	22a0      	movs	r2, #160	; 0xa0
100025a8:	00d2      	lsls	r2, r2, #3
100025aa:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
100025ac:	687b      	ldr	r3, [r7, #4]
100025ae:	2201      	movs	r2, #1
100025b0:	4252      	negs	r2, r2
100025b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
100025b4:	683b      	ldr	r3, [r7, #0]
100025b6:	891b      	ldrh	r3, [r3, #8]
100025b8:	1c1a      	adds	r2, r3, #0
100025ba:	687b      	ldr	r3, [r7, #4]
100025bc:	641a      	str	r2, [r3, #64]	; 0x40
}
100025be:	46bd      	mov	sp, r7
100025c0:	b004      	add	sp, #16
100025c2:	bd80      	pop	{r7, pc}
100025c4:	00030001 	.word	0x00030001

100025c8 <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
100025c8:	b580      	push	{r7, lr}
100025ca:	b082      	sub	sp, #8
100025cc:	af00      	add	r7, sp, #0
100025ce:	6078      	str	r0, [r7, #4]
100025d0:	1c0a      	adds	r2, r1, #0
100025d2:	1cbb      	adds	r3, r7, #2
100025d4:	801a      	strh	r2, [r3, #0]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
100025d6:	687a      	ldr	r2, [r7, #4]
100025d8:	2384      	movs	r3, #132	; 0x84
100025da:	005b      	lsls	r3, r3, #1
100025dc:	58d2      	ldr	r2, [r2, r3]
100025de:	23e0      	movs	r3, #224	; 0xe0
100025e0:	04db      	lsls	r3, r3, #19
100025e2:	4013      	ands	r3, r2
100025e4:	d114      	bne.n	10002610 <XMC_UART_CH_Transmit+0x48>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
100025e6:	46c0      	nop			; (mov r8, r8)
100025e8:	687b      	ldr	r3, [r7, #4]
100025ea:	1c18      	adds	r0, r3, #0
100025ec:	f7ff ff78 	bl	100024e0 <XMC_USIC_CH_GetTransmitBufferStatus>
100025f0:	1e03      	subs	r3, r0, #0
100025f2:	2b80      	cmp	r3, #128	; 0x80
100025f4:	d0f8      	beq.n	100025e8 <XMC_UART_CH_Transmit+0x20>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
100025f6:	687a      	ldr	r2, [r7, #4]
100025f8:	2380      	movs	r3, #128	; 0x80
100025fa:	019b      	lsls	r3, r3, #6
100025fc:	1c10      	adds	r0, r2, #0
100025fe:	1c19      	adds	r1, r3, #0
10002600:	f7ff ff7c 	bl	100024fc <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
10002604:	1cbb      	adds	r3, r7, #2
10002606:	881a      	ldrh	r2, [r3, #0]
10002608:	687b      	ldr	r3, [r7, #4]
1000260a:	2180      	movs	r1, #128	; 0x80
1000260c:	505a      	str	r2, [r3, r1]
1000260e:	e005      	b.n	1000261c <XMC_UART_CH_Transmit+0x54>
  }
  else
  {
    channel->IN[0U] = data;
10002610:	1cbb      	adds	r3, r7, #2
10002612:	8819      	ldrh	r1, [r3, #0]
10002614:	687a      	ldr	r2, [r7, #4]
10002616:	23c0      	movs	r3, #192	; 0xc0
10002618:	005b      	lsls	r3, r3, #1
1000261a:	50d1      	str	r1, [r2, r3]
  }
}
1000261c:	46bd      	mov	sp, r7
1000261e:	b002      	add	sp, #8
10002620:	bd80      	pop	{r7, pc}
10002622:	46c0      	nop			; (mov r8, r8)

10002624 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
10002624:	b580      	push	{r7, lr}
10002626:	b084      	sub	sp, #16
10002628:	af00      	add	r7, sp, #0
1000262a:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
1000262c:	687a      	ldr	r2, [r7, #4]
1000262e:	2386      	movs	r3, #134	; 0x86
10002630:	005b      	lsls	r3, r3, #1
10002632:	58d2      	ldr	r2, [r2, r3]
10002634:	23e0      	movs	r3, #224	; 0xe0
10002636:	04db      	lsls	r3, r3, #19
10002638:	4013      	ands	r3, r2
1000263a:	d105      	bne.n	10002648 <XMC_UART_CH_GetReceivedData+0x24>
  {
    retval = (uint16_t)channel->RBUF;
1000263c:	687b      	ldr	r3, [r7, #4]
1000263e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
10002640:	230e      	movs	r3, #14
10002642:	18fb      	adds	r3, r7, r3
10002644:	801a      	strh	r2, [r3, #0]
10002646:	e006      	b.n	10002656 <XMC_UART_CH_GetReceivedData+0x32>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
10002648:	687a      	ldr	r2, [r7, #4]
1000264a:	238e      	movs	r3, #142	; 0x8e
1000264c:	005b      	lsls	r3, r3, #1
1000264e:	58d2      	ldr	r2, [r2, r3]
10002650:	230e      	movs	r3, #14
10002652:	18fb      	adds	r3, r7, r3
10002654:	801a      	strh	r2, [r3, #0]
  }

  return retval;
10002656:	230e      	movs	r3, #14
10002658:	18fb      	adds	r3, r7, r3
1000265a:	881b      	ldrh	r3, [r3, #0]
}
1000265c:	1c18      	adds	r0, r3, #0
1000265e:	46bd      	mov	sp, r7
10002660:	b004      	add	sp, #16
10002662:	bd80      	pop	{r7, pc}

10002664 <XMC_UART_CH_EnableEvent>:
  }
  return status;
}

void XMC_UART_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10002664:	b580      	push	{r7, lr}
10002666:	b082      	sub	sp, #8
10002668:	af00      	add	r7, sp, #0
1000266a:	6078      	str	r0, [r7, #4]
1000266c:	6039      	str	r1, [r7, #0]
  channel->CCR |= (event&0x1fc00U);
1000266e:	687b      	ldr	r3, [r7, #4]
10002670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
10002672:	6839      	ldr	r1, [r7, #0]
10002674:	23fe      	movs	r3, #254	; 0xfe
10002676:	025b      	lsls	r3, r3, #9
10002678:	400b      	ands	r3, r1
1000267a:	431a      	orrs	r2, r3
1000267c:	687b      	ldr	r3, [r7, #4]
1000267e:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_ASCMode |= (event&0xf8U);
10002680:	687b      	ldr	r3, [r7, #4]
10002682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10002684:	683b      	ldr	r3, [r7, #0]
10002686:	21f8      	movs	r1, #248	; 0xf8
10002688:	400b      	ands	r3, r1
1000268a:	431a      	orrs	r2, r3
1000268c:	687b      	ldr	r3, [r7, #4]
1000268e:	63da      	str	r2, [r3, #60]	; 0x3c
}
10002690:	46bd      	mov	sp, r7
10002692:	b002      	add	sp, #8
10002694:	bd80      	pop	{r7, pc}
10002696:	46c0      	nop			; (mov r8, r8)

10002698 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
10002698:	b580      	push	{r7, lr}
1000269a:	b082      	sub	sp, #8
1000269c:	af00      	add	r7, sp, #0
1000269e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
100026a0:	687a      	ldr	r2, [r7, #4]
100026a2:	2390      	movs	r3, #144	; 0x90
100026a4:	05db      	lsls	r3, r3, #23
100026a6:	429a      	cmp	r2, r3
100026a8:	d003      	beq.n	100026b2 <XMC_USIC_CH_Enable+0x1a>
100026aa:	687b      	ldr	r3, [r7, #4]
100026ac:	4a13      	ldr	r2, [pc, #76]	; (100026fc <XMC_USIC_CH_Enable+0x64>)
100026ae:	4293      	cmp	r3, r2
100026b0:	d104      	bne.n	100026bc <XMC_USIC_CH_Enable+0x24>
  {
    XMC_USIC_Enable(XMC_USIC0);
100026b2:	4b13      	ldr	r3, [pc, #76]	; (10002700 <XMC_USIC_CH_Enable+0x68>)
100026b4:	1c18      	adds	r0, r3, #0
100026b6:	f000 f8c1 	bl	1000283c <XMC_USIC_Enable>
100026ba:	e00b      	b.n	100026d4 <XMC_USIC_CH_Enable+0x3c>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
100026bc:	687b      	ldr	r3, [r7, #4]
100026be:	4a11      	ldr	r2, [pc, #68]	; (10002704 <XMC_USIC_CH_Enable+0x6c>)
100026c0:	4293      	cmp	r3, r2
100026c2:	d003      	beq.n	100026cc <XMC_USIC_CH_Enable+0x34>
100026c4:	687b      	ldr	r3, [r7, #4]
100026c6:	4a10      	ldr	r2, [pc, #64]	; (10002708 <XMC_USIC_CH_Enable+0x70>)
100026c8:	4293      	cmp	r3, r2
100026ca:	d103      	bne.n	100026d4 <XMC_USIC_CH_Enable+0x3c>
  {
    XMC_USIC_Enable(XMC_USIC1);
100026cc:	4b0f      	ldr	r3, [pc, #60]	; (1000270c <XMC_USIC_CH_Enable+0x74>)
100026ce:	1c18      	adds	r0, r3, #0
100026d0:	f000 f8b4 	bl	1000283c <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
100026d4:	687b      	ldr	r3, [r7, #4]
100026d6:	2203      	movs	r2, #3
100026d8:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
100026da:	46c0      	nop			; (mov r8, r8)
100026dc:	687b      	ldr	r3, [r7, #4]
100026de:	68db      	ldr	r3, [r3, #12]
100026e0:	2201      	movs	r2, #1
100026e2:	4013      	ands	r3, r2
100026e4:	d0fa      	beq.n	100026dc <XMC_USIC_CH_Enable+0x44>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
100026e6:	687b      	ldr	r3, [r7, #4]
100026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100026ea:	220f      	movs	r2, #15
100026ec:	4393      	bics	r3, r2
100026ee:	1c1a      	adds	r2, r3, #0
100026f0:	687b      	ldr	r3, [r7, #4]
100026f2:	641a      	str	r2, [r3, #64]	; 0x40
}
100026f4:	46bd      	mov	sp, r7
100026f6:	b002      	add	sp, #8
100026f8:	bd80      	pop	{r7, pc}
100026fa:	46c0      	nop			; (mov r8, r8)
100026fc:	48000200 	.word	0x48000200
10002700:	48000008 	.word	0x48000008
10002704:	48004000 	.word	0x48004000
10002708:	48004200 	.word	0x48004200
1000270c:	48004008 	.word	0x48004008

10002710 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
10002710:	b580      	push	{r7, lr}
10002712:	b08e      	sub	sp, #56	; 0x38
10002714:	af00      	add	r7, sp, #0
10002716:	60f8      	str	r0, [r7, #12]
10002718:	60b9      	str	r1, [r7, #8]
1000271a:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
1000271c:	68bb      	ldr	r3, [r7, #8]
1000271e:	2b63      	cmp	r3, #99	; 0x63
10002720:	d95c      	bls.n	100027dc <XMC_USIC_CH_SetBaudrate+0xcc>
10002722:	687b      	ldr	r3, [r7, #4]
10002724:	2b00      	cmp	r3, #0
10002726:	d059      	beq.n	100027dc <XMC_USIC_CH_SetBaudrate+0xcc>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
10002728:	f7fe fe52 	bl	100013d0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
1000272c:	1c03      	adds	r3, r0, #0
1000272e:	1c18      	adds	r0, r3, #0
10002730:	2164      	movs	r1, #100	; 0x64
10002732:	f7ff fe73 	bl	1000241c <__aeabi_uidiv>
10002736:	1c03      	adds	r3, r0, #0
10002738:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
1000273a:	68bb      	ldr	r3, [r7, #8]
1000273c:	1c18      	adds	r0, r3, #0
1000273e:	2164      	movs	r1, #100	; 0x64
10002740:	f7ff fe6c 	bl	1000241c <__aeabi_uidiv>
10002744:	1c03      	adds	r3, r0, #0
10002746:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
10002748:	2301      	movs	r3, #1
1000274a:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
1000274c:	2301      	movs	r3, #1
1000274e:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
10002750:	4b28      	ldr	r3, [pc, #160]	; (100027f4 <XMC_USIC_CH_SetBaudrate+0xe4>)
10002752:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
10002754:	4b27      	ldr	r3, [pc, #156]	; (100027f4 <XMC_USIC_CH_SetBaudrate+0xe4>)
10002756:	633b      	str	r3, [r7, #48]	; 0x30
10002758:	e024      	b.n	100027a4 <XMC_USIC_CH_SetBaudrate+0x94>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
1000275a:	6a3b      	ldr	r3, [r7, #32]
1000275c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1000275e:	435a      	muls	r2, r3
10002760:	1c11      	adds	r1, r2, #0
10002762:	68bb      	ldr	r3, [r7, #8]
10002764:	687a      	ldr	r2, [r7, #4]
10002766:	4353      	muls	r3, r2
10002768:	1c08      	adds	r0, r1, #0
1000276a:	1c19      	adds	r1, r3, #0
1000276c:	f7ff fe56 	bl	1000241c <__aeabi_uidiv>
10002770:	1c03      	adds	r3, r0, #0
10002772:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
10002774:	69fb      	ldr	r3, [r7, #28]
10002776:	0a9b      	lsrs	r3, r3, #10
10002778:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
1000277a:	69fb      	ldr	r3, [r7, #28]
1000277c:	059b      	lsls	r3, r3, #22
1000277e:	0d9b      	lsrs	r3, r3, #22
10002780:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
10002782:	69bb      	ldr	r3, [r7, #24]
10002784:	4a1b      	ldr	r2, [pc, #108]	; (100027f4 <XMC_USIC_CH_SetBaudrate+0xe4>)
10002786:	4293      	cmp	r3, r2
10002788:	d809      	bhi.n	1000279e <XMC_USIC_CH_SetBaudrate+0x8e>
1000278a:	697a      	ldr	r2, [r7, #20]
1000278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000278e:	429a      	cmp	r2, r3
10002790:	d205      	bcs.n	1000279e <XMC_USIC_CH_SetBaudrate+0x8e>
      {
        pdiv_frac_min = pdiv_frac;
10002792:	697b      	ldr	r3, [r7, #20]
10002794:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
10002796:	69bb      	ldr	r3, [r7, #24]
10002798:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
1000279a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000279c:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
1000279e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100027a0:	3b01      	subs	r3, #1
100027a2:	633b      	str	r3, [r7, #48]	; 0x30
100027a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100027a6:	2b00      	cmp	r3, #0
100027a8:	d1d7      	bne.n	1000275a <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
100027aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100027ac:	2280      	movs	r2, #128	; 0x80
100027ae:	0212      	lsls	r2, r2, #8
100027b0:	431a      	orrs	r2, r3
100027b2:	68fb      	ldr	r3, [r7, #12]
100027b4:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
100027b6:	68fb      	ldr	r3, [r7, #12]
100027b8:	695b      	ldr	r3, [r3, #20]
100027ba:	4a0f      	ldr	r2, [pc, #60]	; (100027f8 <XMC_USIC_CH_SetBaudrate+0xe8>)
100027bc:	401a      	ands	r2, r3
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
100027be:	687b      	ldr	r3, [r7, #4]
100027c0:	3b01      	subs	r3, #1
100027c2:	029b      	lsls	r3, r3, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
100027c4:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
100027c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
100027c8:	3b01      	subs	r3, #1
100027ca:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
100027cc:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
100027ce:	68fb      	ldr	r3, [r7, #12]
100027d0:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
100027d2:	2337      	movs	r3, #55	; 0x37
100027d4:	18fb      	adds	r3, r7, r3
100027d6:	2200      	movs	r2, #0
100027d8:	701a      	strb	r2, [r3, #0]
100027da:	e003      	b.n	100027e4 <XMC_USIC_CH_SetBaudrate+0xd4>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
100027dc:	2337      	movs	r3, #55	; 0x37
100027de:	18fb      	adds	r3, r7, r3
100027e0:	2201      	movs	r2, #1
100027e2:	701a      	strb	r2, [r3, #0]
  }
  
  return status;
100027e4:	2337      	movs	r3, #55	; 0x37
100027e6:	18fb      	adds	r3, r7, r3
100027e8:	781b      	ldrb	r3, [r3, #0]
}
100027ea:	1c18      	adds	r0, r3, #0
100027ec:	46bd      	mov	sp, r7
100027ee:	b00e      	add	sp, #56	; 0x38
100027f0:	bd80      	pop	{r7, pc}
100027f2:	46c0      	nop			; (mov r8, r8)
100027f4:	000003ff 	.word	0x000003ff
100027f8:	fc0080ef 	.word	0xfc0080ef

100027fc <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
100027fc:	b580      	push	{r7, lr}
100027fe:	b084      	sub	sp, #16
10002800:	af00      	add	r7, sp, #0
10002802:	60f8      	str	r0, [r7, #12]
10002804:	607a      	str	r2, [r7, #4]
10002806:	230b      	movs	r3, #11
10002808:	18fb      	adds	r3, r7, r3
1000280a:	1c0a      	adds	r2, r1, #0
1000280c:	701a      	strb	r2, [r3, #0]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
1000280e:	68fb      	ldr	r3, [r7, #12]
10002810:	699b      	ldr	r3, [r3, #24]
10002812:	220b      	movs	r2, #11
10002814:	18ba      	adds	r2, r7, r2
10002816:	7812      	ldrb	r2, [r2, #0]
10002818:	2107      	movs	r1, #7
1000281a:	4091      	lsls	r1, r2
1000281c:	1c0a      	adds	r2, r1, #0
1000281e:	43d2      	mvns	r2, r2
10002820:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
10002822:	230b      	movs	r3, #11
10002824:	18fb      	adds	r3, r7, r3
10002826:	781b      	ldrb	r3, [r3, #0]
10002828:	6879      	ldr	r1, [r7, #4]
1000282a:	4099      	lsls	r1, r3
1000282c:	1c0b      	adds	r3, r1, #0

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
1000282e:	431a      	orrs	r2, r3
10002830:	68fb      	ldr	r3, [r7, #12]
10002832:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
10002834:	46bd      	mov	sp, r7
10002836:	b004      	add	sp, #16
10002838:	bd80      	pop	{r7, pc}
1000283a:	46c0      	nop			; (mov r8, r8)

1000283c <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                   (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
1000283c:	b580      	push	{r7, lr}
1000283e:	b082      	sub	sp, #8
10002840:	af00      	add	r7, sp, #0
10002842:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
10002844:	687b      	ldr	r3, [r7, #4]
10002846:	4a09      	ldr	r2, [pc, #36]	; (1000286c <XMC_USIC_Enable+0x30>)
10002848:	4293      	cmp	r3, r2
1000284a:	d103      	bne.n	10002854 <XMC_USIC_Enable+0x18>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
1000284c:	2008      	movs	r0, #8
1000284e:	f7fe fda5 	bl	1000139c <XMC_SCU_CLOCK_UngatePeripheralClock>
10002852:	e008      	b.n	10002866 <XMC_USIC_Enable+0x2a>
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
10002854:	687b      	ldr	r3, [r7, #4]
10002856:	4a06      	ldr	r2, [pc, #24]	; (10002870 <XMC_USIC_Enable+0x34>)
10002858:	4293      	cmp	r3, r2
1000285a:	d104      	bne.n	10002866 <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
1000285c:	2380      	movs	r3, #128	; 0x80
1000285e:	02db      	lsls	r3, r3, #11
10002860:	1c18      	adds	r0, r3, #0
10002862:	f7fe fd9b 	bl	1000139c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
10002866:	46bd      	mov	sp, r7
10002868:	b002      	add	sp, #8
1000286a:	bd80      	pop	{r7, pc}
1000286c:	48000008 	.word	0x48000008
10002870:	48004008 	.word	0x48004008

10002874 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
10002874:	b580      	push	{r7, lr}
10002876:	b084      	sub	sp, #16
10002878:	af00      	add	r7, sp, #0
1000287a:	6078      	str	r0, [r7, #4]
1000287c:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
1000287e:	1c3b      	adds	r3, r7, #0
10002880:	781b      	ldrb	r3, [r3, #0]
10002882:	075b      	lsls	r3, r3, #29
10002884:	0f5b      	lsrs	r3, r3, #29
10002886:	b2db      	uxtb	r3, r3
10002888:	1c1a      	adds	r2, r3, #0
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
1000288a:	1cbb      	adds	r3, r7, #2
1000288c:	881b      	ldrh	r3, [r3, #0]
1000288e:	059b      	lsls	r3, r3, #22
10002890:	0d9b      	lsrs	r3, r3, #22
10002892:	b29b      	uxth	r3, r3
10002894:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
10002896:	4313      	orrs	r3, r2
10002898:	60fb      	str	r3, [r7, #12]
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
1000289a:	687a      	ldr	r2, [r7, #4]
1000289c:	23f8      	movs	r3, #248	; 0xf8
1000289e:	005b      	lsls	r3, r3, #1
100028a0:	68f9      	ldr	r1, [r7, #12]
100028a2:	50d1      	str	r1, [r2, r3]
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
100028a4:	1cfb      	adds	r3, r7, #3
100028a6:	781b      	ldrb	r3, [r3, #0]
100028a8:	06db      	lsls	r3, r3, #27
100028aa:	0fdb      	lsrs	r3, r3, #31
100028ac:	b2db      	uxtb	r3, r3
100028ae:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
100028b0:	1cfb      	adds	r3, r7, #3
100028b2:	781b      	ldrb	r3, [r3, #0]
100028b4:	071b      	lsls	r3, r3, #28
100028b6:	0f9b      	lsrs	r3, r3, #30
100028b8:	b2db      	uxtb	r3, r3
100028ba:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
100028bc:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
100028be:	1cfb      	adds	r3, r7, #3
100028c0:	781b      	ldrb	r3, [r3, #0]
100028c2:	069b      	lsls	r3, r3, #26
100028c4:	0fdb      	lsrs	r3, r3, #31
100028c6:	b2db      	uxtb	r3, r3
100028c8:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
100028ca:	4313      	orrs	r3, r2
100028cc:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
100028ce:	1cfb      	adds	r3, r7, #3
100028d0:	781b      	ldrb	r3, [r3, #0]
100028d2:	065b      	lsls	r3, r3, #25
100028d4:	0fdb      	lsrs	r3, r3, #31
100028d6:	b2db      	uxtb	r3, r3
100028d8:	079b      	lsls	r3, r3, #30
100028da:	68fa      	ldr	r2, [r7, #12]
100028dc:	4313      	orrs	r3, r2
100028de:	60fb      	str	r3, [r7, #12]
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
100028e0:	687a      	ldr	r2, [r7, #4]
100028e2:	23f8      	movs	r3, #248	; 0xf8
100028e4:	005b      	lsls	r3, r3, #1
100028e6:	58d2      	ldr	r2, [r2, r3]
100028e8:	68fb      	ldr	r3, [r7, #12]
100028ea:	4313      	orrs	r3, r2
100028ec:	2280      	movs	r2, #128	; 0x80
100028ee:	0612      	lsls	r2, r2, #24
100028f0:	431a      	orrs	r2, r3
100028f2:	1c11      	adds	r1, r2, #0
100028f4:	687a      	ldr	r2, [r7, #4]
100028f6:	23f8      	movs	r3, #248	; 0xf8
100028f8:	005b      	lsls	r3, r3, #1
100028fa:	50d1      	str	r1, [r2, r3]
}
100028fc:	46bd      	mov	sp, r7
100028fe:	b004      	add	sp, #16
10002900:	bd80      	pop	{r7, pc}
10002902:	46c0      	nop			; (mov r8, r8)

10002904 <XMC_VADC_GROUP_QueueEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
10002904:	b580      	push	{r7, lr}
10002906:	b082      	sub	sp, #8
10002908:	af00      	add	r7, sp, #0
1000290a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
1000290c:	687b      	ldr	r3, [r7, #4]
1000290e:	2284      	movs	r2, #132	; 0x84
10002910:	589b      	ldr	r3, [r3, r2]
10002912:	2280      	movs	r2, #128	; 0x80
10002914:	0452      	lsls	r2, r2, #17
10002916:	431a      	orrs	r2, r3
10002918:	687b      	ldr	r3, [r7, #4]
1000291a:	2184      	movs	r1, #132	; 0x84
1000291c:	505a      	str	r2, [r3, r1]
}
1000291e:	46bd      	mov	sp, r7
10002920:	b002      	add	sp, #8
10002922:	bd80      	pop	{r7, pc}

10002924 <XMC_VADC_GROUP_QueueDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
10002924:	b580      	push	{r7, lr}
10002926:	b082      	sub	sp, #8
10002928:	af00      	add	r7, sp, #0
1000292a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
1000292c:	687b      	ldr	r3, [r7, #4]
1000292e:	2284      	movs	r2, #132	; 0x84
10002930:	589b      	ldr	r3, [r3, r2]
10002932:	4a04      	ldr	r2, [pc, #16]	; (10002944 <XMC_VADC_GROUP_QueueDisableArbitrationSlot+0x20>)
10002934:	401a      	ands	r2, r3
10002936:	687b      	ldr	r3, [r7, #4]
10002938:	2184      	movs	r1, #132	; 0x84
1000293a:	505a      	str	r2, [r3, r1]
}
1000293c:	46bd      	mov	sp, r7
1000293e:	b002      	add	sp, #8
10002940:	bd80      	pop	{r7, pc}
10002942:	46c0      	nop			; (mov r8, r8)
10002944:	feffffff 	.word	0xfeffffff

10002948 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
10002948:	b580      	push	{r7, lr}
1000294a:	af00      	add	r7, sp, #0
   * Please refer to the XMC1000 Errata sheet V1.4 released 2014-06 Errata ID : ADC_AI.003 Additonal bit to enable ADC
   * function
   */

#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
1000294c:	4b03      	ldr	r3, [pc, #12]	; (1000295c <XMC_VADC_GLOBAL_EnableModule+0x14>)
1000294e:	22ff      	movs	r2, #255	; 0xff
10002950:	601a      	str	r2, [r3, #0]
#endif

#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
10002952:	2001      	movs	r0, #1
10002954:	f7fe fd22 	bl	1000139c <XMC_SCU_CLOCK_UngatePeripheralClock>

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
#endif
}
10002958:	46bd      	mov	sp, r7
1000295a:	bd80      	pop	{r7, pc}
1000295c:	40010500 	.word	0x40010500

10002960 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
10002960:	b580      	push	{r7, lr}
10002962:	b082      	sub	sp, #8
10002964:	af00      	add	r7, sp, #0
10002966:	6078      	str	r0, [r7, #4]
10002968:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
1000296a:	f7ff ffed 	bl	10002948 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
1000296e:	683b      	ldr	r3, [r7, #0]
10002970:	695a      	ldr	r2, [r3, #20]
10002972:	687b      	ldr	r3, [r7, #4]
10002974:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
10002976:	683b      	ldr	r3, [r7, #0]
10002978:	685b      	ldr	r3, [r3, #4]
1000297a:	2280      	movs	r2, #128	; 0x80
1000297c:	0212      	lsls	r2, r2, #8
1000297e:	431a      	orrs	r2, r3
10002980:	687b      	ldr	r3, [r7, #4]
10002982:	2180      	movs	r1, #128	; 0x80
10002984:	505a      	str	r2, [r3, r1]
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
10002986:	683b      	ldr	r3, [r7, #0]
10002988:	689a      	ldr	r2, [r3, #8]
1000298a:	687b      	ldr	r3, [r7, #4]
1000298c:	21a0      	movs	r1, #160	; 0xa0
1000298e:	505a      	str	r2, [r3, r1]

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
10002990:	683b      	ldr	r3, [r7, #0]
10002992:	68da      	ldr	r2, [r3, #12]
10002994:	687b      	ldr	r3, [r7, #4]
10002996:	21a4      	movs	r1, #164	; 0xa4
10002998:	505a      	str	r2, [r3, r1]


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
1000299a:	683b      	ldr	r3, [r7, #0]
1000299c:	6919      	ldr	r1, [r3, #16]
1000299e:	687a      	ldr	r2, [r7, #4]
100029a0:	23a0      	movs	r3, #160	; 0xa0
100029a2:	009b      	lsls	r3, r3, #2
100029a4:	50d1      	str	r1, [r2, r3]

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
100029a6:	683b      	ldr	r3, [r7, #0]
100029a8:	681a      	ldr	r2, [r3, #0]
100029aa:	687b      	ldr	r3, [r7, #4]
100029ac:	21b8      	movs	r1, #184	; 0xb8
100029ae:	505a      	str	r2, [r3, r1]

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
100029b0:	46bd      	mov	sp, r7
100029b2:	b002      	add	sp, #8
100029b4:	bd80      	pop	{r7, pc}
100029b6:	46c0      	nop			; (mov r8, r8)

100029b8 <XMC_VADC_GLOBAL_StartupCalibration>:
#endif
}

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
100029b8:	b580      	push	{r7, lr}
100029ba:	b084      	sub	sp, #16
100029bc:	af00      	add	r7, sp, #0
100029be:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
100029c0:	687b      	ldr	r3, [r7, #4]
100029c2:	2280      	movs	r2, #128	; 0x80
100029c4:	589b      	ldr	r3, [r3, r2]
100029c6:	2280      	movs	r2, #128	; 0x80
100029c8:	0612      	lsls	r2, r2, #24
100029ca:	431a      	orrs	r2, r3
100029cc:	687b      	ldr	r3, [r7, #4]
100029ce:	2180      	movs	r1, #128	; 0x80
100029d0:	505a      	str	r2, [r3, r1]

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
100029d2:	230f      	movs	r3, #15
100029d4:	18fb      	adds	r3, r7, r3
100029d6:	2200      	movs	r2, #0
100029d8:	701a      	strb	r2, [r3, #0]
100029da:	e01c      	b.n	10002a16 <XMC_VADC_GLOBAL_StartupCalibration+0x5e>
  {
    group_ptr = g_xmc_vadc_group_array[i];
100029dc:	230f      	movs	r3, #15
100029de:	18fb      	adds	r3, r7, r3
100029e0:	781a      	ldrb	r2, [r3, #0]
100029e2:	4b11      	ldr	r3, [pc, #68]	; (10002a28 <XMC_VADC_GLOBAL_StartupCalibration+0x70>)
100029e4:	0092      	lsls	r2, r2, #2
100029e6:	58d3      	ldr	r3, [r2, r3]
100029e8:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
100029ea:	68bb      	ldr	r3, [r7, #8]
100029ec:	2280      	movs	r2, #128	; 0x80
100029ee:	589a      	ldr	r2, [r3, r2]
100029f0:	23c0      	movs	r3, #192	; 0xc0
100029f2:	029b      	lsls	r3, r3, #10
100029f4:	4013      	ands	r3, r2
100029f6:	d007      	beq.n	10002a08 <XMC_VADC_GLOBAL_StartupCalibration+0x50>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
100029f8:	46c0      	nop			; (mov r8, r8)
100029fa:	68bb      	ldr	r3, [r7, #8]
100029fc:	2280      	movs	r2, #128	; 0x80
100029fe:	589a      	ldr	r2, [r3, r2]
10002a00:	2380      	movs	r3, #128	; 0x80
10002a02:	055b      	lsls	r3, r3, #21
10002a04:	4013      	ands	r3, r2
10002a06:	d1f8      	bne.n	100029fa <XMC_VADC_GLOBAL_StartupCalibration+0x42>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
10002a08:	230f      	movs	r3, #15
10002a0a:	18fb      	adds	r3, r7, r3
10002a0c:	781a      	ldrb	r2, [r3, #0]
10002a0e:	230f      	movs	r3, #15
10002a10:	18fb      	adds	r3, r7, r3
10002a12:	3201      	adds	r2, #1
10002a14:	701a      	strb	r2, [r3, #0]
10002a16:	230f      	movs	r3, #15
10002a18:	18fb      	adds	r3, r7, r3
10002a1a:	781b      	ldrb	r3, [r3, #0]
10002a1c:	2b01      	cmp	r3, #1
10002a1e:	d9dd      	bls.n	100029dc <XMC_VADC_GLOBAL_StartupCalibration+0x24>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    /* NOP */
  }
#endif
}
10002a20:	46bd      	mov	sp, r7
10002a22:	b004      	add	sp, #16
10002a24:	bd80      	pop	{r7, pc}
10002a26:	46c0      	nop			; (mov r8, r8)
10002a28:	10007d98 	.word	0x10007d98

10002a2c <XMC_VADC_GROUP_Init>:
}

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
10002a2c:	b580      	push	{r7, lr}
10002a2e:	b082      	sub	sp, #8
10002a30:	af00      	add	r7, sp, #0
10002a32:	6078      	str	r0, [r7, #4]
10002a34:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
10002a36:	687a      	ldr	r2, [r7, #4]
10002a38:	683b      	ldr	r3, [r7, #0]
10002a3a:	685b      	ldr	r3, [r3, #4]
10002a3c:	1c10      	adds	r0, r2, #0
10002a3e:	1c19      	adds	r1, r3, #0
10002a40:	2200      	movs	r2, #0
10002a42:	2300      	movs	r3, #0
10002a44:	f000 f830 	bl	10002aa8 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
10002a48:	687a      	ldr	r2, [r7, #4]
10002a4a:	683b      	ldr	r3, [r7, #0]
10002a4c:	685b      	ldr	r3, [r3, #4]
10002a4e:	1c10      	adds	r0, r2, #0
10002a50:	1c19      	adds	r1, r3, #0
10002a52:	2201      	movs	r2, #1
10002a54:	2300      	movs	r3, #0
10002a56:	f000 f827 	bl	10002aa8 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
10002a5a:	687a      	ldr	r2, [r7, #4]
10002a5c:	683b      	ldr	r3, [r7, #0]
10002a5e:	689b      	ldr	r3, [r3, #8]
10002a60:	1c10      	adds	r0, r2, #0
10002a62:	1c19      	adds	r1, r3, #0
10002a64:	2200      	movs	r2, #0
10002a66:	2301      	movs	r3, #1
10002a68:	f000 f81e 	bl	10002aa8 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
10002a6c:	687a      	ldr	r2, [r7, #4]
10002a6e:	683b      	ldr	r3, [r7, #0]
10002a70:	689b      	ldr	r3, [r3, #8]
10002a72:	1c10      	adds	r0, r2, #0
10002a74:	1c19      	adds	r1, r3, #0
10002a76:	2201      	movs	r2, #1
10002a78:	2301      	movs	r3, #1
10002a7a:	f000 f815 	bl	10002aa8 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
10002a7e:	683b      	ldr	r3, [r7, #0]
10002a80:	691a      	ldr	r2, [r3, #16]
10002a82:	687b      	ldr	r3, [r7, #4]
10002a84:	2180      	movs	r1, #128	; 0x80
10002a86:	505a      	str	r2, [r3, r1]

  group_ptr->BOUND = config->g_bound;
10002a88:	683b      	ldr	r3, [r7, #0]
10002a8a:	68da      	ldr	r2, [r3, #12]
10002a8c:	687b      	ldr	r3, [r7, #4]
10002a8e:	21b8      	movs	r1, #184	; 0xb8
10002a90:	505a      	str	r2, [r3, r1]

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
10002a92:	687a      	ldr	r2, [r7, #4]
10002a94:	683b      	ldr	r3, [r7, #0]
10002a96:	681b      	ldr	r3, [r3, #0]
10002a98:	1c10      	adds	r0, r2, #0
10002a9a:	1c19      	adds	r1, r3, #0
10002a9c:	f7ff feea 	bl	10002874 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
10002aa0:	46bd      	mov	sp, r7
10002aa2:	b002      	add	sp, #8
10002aa4:	bd80      	pop	{r7, pc}
10002aa6:	46c0      	nop			; (mov r8, r8)

10002aa8 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
10002aa8:	b580      	push	{r7, lr}
10002aaa:	b08c      	sub	sp, #48	; 0x30
10002aac:	af00      	add	r7, sp, #0
10002aae:	60f8      	str	r0, [r7, #12]
10002ab0:	60b9      	str	r1, [r7, #8]
10002ab2:	603b      	str	r3, [r7, #0]
10002ab4:	1dfb      	adds	r3, r7, #7
10002ab6:	701a      	strb	r2, [r3, #0]

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
10002ab8:	1dfb      	adds	r3, r7, #7
10002aba:	781b      	ldrb	r3, [r3, #0]
10002abc:	2b00      	cmp	r3, #0
10002abe:	d119      	bne.n	10002af4 <XMC_VADC_GROUP_InputClassInit+0x4c>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
10002ac0:	2308      	movs	r3, #8
10002ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
10002ac4:	23e0      	movs	r3, #224	; 0xe0
10002ac6:	00db      	lsls	r3, r3, #3
10002ac8:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
10002aca:	2300      	movs	r3, #0
10002acc:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
10002ace:	231f      	movs	r3, #31
10002ad0:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
10002ad2:	2308      	movs	r3, #8
10002ad4:	18fb      	adds	r3, r7, r3
10002ad6:	781b      	ldrb	r3, [r3, #0]
10002ad8:	06db      	lsls	r3, r3, #27
10002ada:	0edb      	lsrs	r3, r3, #27
10002adc:	b2db      	uxtb	r3, r3
10002ade:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
10002ae0:	2309      	movs	r3, #9
10002ae2:	18fb      	adds	r3, r7, r3
10002ae4:	781b      	ldrb	r3, [r3, #0]
10002ae6:	075b      	lsls	r3, r3, #29
10002ae8:	0f5b      	lsrs	r3, r3, #29
10002aea:	b2da      	uxtb	r2, r3
10002aec:	231b      	movs	r3, #27
10002aee:	18fb      	adds	r3, r7, r3
10002af0:	701a      	strb	r2, [r3, #0]
10002af2:	e019      	b.n	10002b28 <XMC_VADC_GROUP_InputClassInit+0x80>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
10002af4:	2318      	movs	r3, #24
10002af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
10002af8:	23e0      	movs	r3, #224	; 0xe0
10002afa:	04db      	lsls	r3, r3, #19
10002afc:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
10002afe:	2310      	movs	r3, #16
10002b00:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
10002b02:	23f8      	movs	r3, #248	; 0xf8
10002b04:	035b      	lsls	r3, r3, #13
10002b06:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
10002b08:	230a      	movs	r3, #10
10002b0a:	18fb      	adds	r3, r7, r3
10002b0c:	781b      	ldrb	r3, [r3, #0]
10002b0e:	06db      	lsls	r3, r3, #27
10002b10:	0edb      	lsrs	r3, r3, #27
10002b12:	b2db      	uxtb	r3, r3
10002b14:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
10002b16:	230b      	movs	r3, #11
10002b18:	18fb      	adds	r3, r7, r3
10002b1a:	781b      	ldrb	r3, [r3, #0]
10002b1c:	075b      	lsls	r3, r3, #29
10002b1e:	0f5b      	lsrs	r3, r3, #29
10002b20:	b2da      	uxtb	r2, r3
10002b22:	231b      	movs	r3, #27
10002b24:	18fb      	adds	r3, r7, r3
10002b26:	701a      	strb	r2, [r3, #0]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
10002b28:	68fb      	ldr	r3, [r7, #12]
10002b2a:	683a      	ldr	r2, [r7, #0]
10002b2c:	3228      	adds	r2, #40	; 0x28
10002b2e:	0092      	lsls	r2, r2, #2
10002b30:	58d3      	ldr	r3, [r2, r3]
10002b32:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
10002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10002b36:	43da      	mvns	r2, r3
10002b38:	697b      	ldr	r3, [r7, #20]
10002b3a:	4013      	ands	r3, r2
10002b3c:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
10002b3e:	231b      	movs	r3, #27
10002b40:	18fb      	adds	r3, r7, r3
10002b42:	781a      	ldrb	r2, [r3, #0]
10002b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10002b46:	409a      	lsls	r2, r3
10002b48:	1c13      	adds	r3, r2, #0
10002b4a:	697a      	ldr	r2, [r7, #20]
10002b4c:	4313      	orrs	r3, r2
10002b4e:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
10002b50:	6a3b      	ldr	r3, [r7, #32]
10002b52:	43da      	mvns	r2, r3
10002b54:	697b      	ldr	r3, [r7, #20]
10002b56:	4013      	ands	r3, r2
10002b58:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
10002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002b5c:	69fa      	ldr	r2, [r7, #28]
10002b5e:	409a      	lsls	r2, r3
10002b60:	1c13      	adds	r3, r2, #0
10002b62:	697a      	ldr	r2, [r7, #20]
10002b64:	4313      	orrs	r3, r2
10002b66:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
10002b68:	68fb      	ldr	r3, [r7, #12]
10002b6a:	683a      	ldr	r2, [r7, #0]
10002b6c:	3228      	adds	r2, #40	; 0x28
10002b6e:	0092      	lsls	r2, r2, #2
10002b70:	6979      	ldr	r1, [r7, #20]
10002b72:	50d1      	str	r1, [r2, r3]
}
10002b74:	46bd      	mov	sp, r7
10002b76:	b00c      	add	sp, #48	; 0x30
10002b78:	bd80      	pop	{r7, pc}
10002b7a:	46c0      	nop			; (mov r8, r8)

10002b7c <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
10002b7c:	b580      	push	{r7, lr}
10002b7e:	b084      	sub	sp, #16
10002b80:	af00      	add	r7, sp, #0
10002b82:	6078      	str	r0, [r7, #4]
10002b84:	1c0a      	adds	r2, r1, #0
10002b86:	1cfb      	adds	r3, r7, #3
10002b88:	701a      	strb	r2, [r3, #0]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
10002b8a:	687b      	ldr	r3, [r7, #4]
10002b8c:	2280      	movs	r2, #128	; 0x80
10002b8e:	589b      	ldr	r3, [r3, r2]
10002b90:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
10002b92:	68fb      	ldr	r3, [r7, #12]
10002b94:	2203      	movs	r2, #3
10002b96:	4393      	bics	r3, r2
10002b98:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
10002b9a:	1cfb      	adds	r3, r7, #3
10002b9c:	781b      	ldrb	r3, [r3, #0]
10002b9e:	68fa      	ldr	r2, [r7, #12]
10002ba0:	4313      	orrs	r3, r2
10002ba2:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
10002ba4:	687b      	ldr	r3, [r7, #4]
10002ba6:	2180      	movs	r1, #128	; 0x80
10002ba8:	68fa      	ldr	r2, [r7, #12]
10002baa:	505a      	str	r2, [r3, r1]
}
10002bac:	46bd      	mov	sp, r7
10002bae:	b004      	add	sp, #16
10002bb0:	bd80      	pop	{r7, pc}
10002bb2:	46c0      	nop			; (mov r8, r8)

10002bb4 <XMC_VADC_GROUP_QueueInit>:
}

#if (XMC_VADC_QUEUE_AVAILABLE == 1U)  
/* API to initialize queue request source */
void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *config)
{
10002bb4:	b580      	push	{r7, lr}
10002bb6:	b084      	sub	sp, #16
10002bb8:	af00      	add	r7, sp, #0
10002bba:	6078      	str	r0, [r7, #4]
10002bbc:	6039      	str	r1, [r7, #0]
  uint32_t          reg;

  XMC_ASSERT("XMC_VADC_GROUP_QueueInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Disable arbitration slot of the queue request source */
  XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
10002bbe:	687b      	ldr	r3, [r7, #4]
10002bc0:	1c18      	adds	r0, r3, #0
10002bc2:	f7ff feaf 	bl	10002924 <XMC_VADC_GROUP_QueueDisableArbitrationSlot>
  
  reg = group_ptr->ARBPR;
10002bc6:	687b      	ldr	r3, [r7, #4]
10002bc8:	2284      	movs	r2, #132	; 0x84
10002bca:	589b      	ldr	r3, [r3, r2]
10002bcc:	60fb      	str	r3, [r7, #12]

  /* Request Source priority */
  reg &= ~((uint32_t)VADC_G_ARBPR_PRIO0_Msk);
10002bce:	68fb      	ldr	r3, [r7, #12]
10002bd0:	2203      	movs	r2, #3
10002bd2:	4393      	bics	r3, r2
10002bd4:	60fb      	str	r3, [r7, #12]
  reg |= (uint32_t) ((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO0_Pos);
10002bd6:	683b      	ldr	r3, [r7, #0]
10002bd8:	781b      	ldrb	r3, [r3, #0]
10002bda:	071b      	lsls	r3, r3, #28
10002bdc:	0f9b      	lsrs	r3, r3, #30
10002bde:	b2db      	uxtb	r3, r3
10002be0:	1c1a      	adds	r2, r3, #0
10002be2:	68fb      	ldr	r3, [r7, #12]
10002be4:	4313      	orrs	r3, r2
10002be6:	60fb      	str	r3, [r7, #12]

  /* Conversion Start mode */
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
10002be8:	683b      	ldr	r3, [r7, #0]
10002bea:	781b      	ldrb	r3, [r3, #0]
10002bec:	2203      	movs	r2, #3
10002bee:	4013      	ands	r3, r2
10002bf0:	b2db      	uxtb	r3, r3
10002bf2:	2b00      	cmp	r3, #0
10002bf4:	d003      	beq.n	10002bfe <XMC_VADC_GROUP_QueueInit+0x4a>
  {
    reg |= (uint32_t)(VADC_G_ARBPR_CSM0_Msk);
10002bf6:	68fb      	ldr	r3, [r7, #12]
10002bf8:	2208      	movs	r2, #8
10002bfa:	4313      	orrs	r3, r2
10002bfc:	60fb      	str	r3, [r7, #12]
  }

  group_ptr->ARBPR = reg;
10002bfe:	687b      	ldr	r3, [r7, #4]
10002c00:	2184      	movs	r1, #132	; 0x84
10002c02:	68fa      	ldr	r2, [r7, #12]
10002c04:	505a      	str	r2, [r3, r1]


  group_ptr->QCTRL0 = (uint32_t)((config->qctrl0)|(uint32_t)(VADC_G_QCTRL0_XTWC_Msk)|
10002c06:	683b      	ldr	r3, [r7, #0]
10002c08:	685b      	ldr	r3, [r3, #4]
10002c0a:	4a15      	ldr	r2, [pc, #84]	; (10002c60 <XMC_VADC_GROUP_QueueInit+0xac>)
10002c0c:	431a      	orrs	r2, r3
10002c0e:	1c11      	adds	r1, r2, #0
10002c10:	687a      	ldr	r2, [r7, #4]
10002c12:	2380      	movs	r3, #128	; 0x80
10002c14:	005b      	lsls	r3, r3, #1
10002c16:	50d1      	str	r1, [r2, r3]
                                                    (uint32_t)(VADC_G_QCTRL0_TMWC_Msk)|
                                                    (uint32_t)(VADC_G_QCTRL0_GTWC_Msk));

  /* Gating mode */
  group_ptr->QMR0 = ((uint32_t)(config->qmr0) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_G_QMR0_ENGT_Pos));
10002c18:	683b      	ldr	r3, [r7, #0]
10002c1a:	689b      	ldr	r3, [r3, #8]
10002c1c:	2201      	movs	r2, #1
10002c1e:	431a      	orrs	r2, r3
10002c20:	1c11      	adds	r1, r2, #0
10002c22:	687a      	ldr	r2, [r7, #4]
10002c24:	2382      	movs	r3, #130	; 0x82
10002c26:	005b      	lsls	r3, r3, #1
10002c28:	50d1      	str	r1, [r2, r3]

  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode) )
10002c2a:	683b      	ldr	r3, [r7, #0]
10002c2c:	781b      	ldrb	r3, [r3, #0]
10002c2e:	2203      	movs	r2, #3
10002c30:	4013      	ands	r3, r2
10002c32:	b2db      	uxtb	r3, r3
10002c34:	2b02      	cmp	r3, #2
10002c36:	d10b      	bne.n	10002c50 <XMC_VADC_GROUP_QueueInit+0x9c>
  {
    group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_RPTDIS_Pos);
10002c38:	687a      	ldr	r2, [r7, #4]
10002c3a:	2382      	movs	r3, #130	; 0x82
10002c3c:	005b      	lsls	r3, r3, #1
10002c3e:	58d3      	ldr	r3, [r2, r3]
10002c40:	2280      	movs	r2, #128	; 0x80
10002c42:	0252      	lsls	r2, r2, #9
10002c44:	431a      	orrs	r2, r3
10002c46:	1c11      	adds	r1, r2, #0
10002c48:	687a      	ldr	r2, [r7, #4]
10002c4a:	2382      	movs	r3, #130	; 0x82
10002c4c:	005b      	lsls	r3, r3, #1
10002c4e:	50d1      	str	r1, [r2, r3]
  }
  /* Enable arbitration slot for the queue request source */
  XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptr);
10002c50:	687b      	ldr	r3, [r7, #4]
10002c52:	1c18      	adds	r0, r3, #0
10002c54:	f7ff fe56 	bl	10002904 <XMC_VADC_GROUP_QueueEnableArbitrationSlot>

}
10002c58:	46bd      	mov	sp, r7
10002c5a:	b004      	add	sp, #16
10002c5c:	bd80      	pop	{r7, pc}
10002c5e:	46c0      	nop			; (mov r8, r8)
10002c60:	80808000 	.word	0x80808000

10002c64 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
10002c64:	b580      	push	{r7, lr}
10002c66:	b088      	sub	sp, #32
10002c68:	af00      	add	r7, sp, #0
10002c6a:	60f8      	str	r0, [r7, #12]
10002c6c:	60b9      	str	r1, [r7, #8]
10002c6e:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
10002c70:	687b      	ldr	r3, [r7, #4]
10002c72:	7b1b      	ldrb	r3, [r3, #12]
10002c74:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
10002c76:	68fb      	ldr	r3, [r7, #12]
10002c78:	2288      	movs	r2, #136	; 0x88
10002c7a:	589b      	ldr	r3, [r3, r2]
10002c7c:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
10002c7e:	68bb      	ldr	r3, [r7, #8]
10002c80:	2201      	movs	r2, #1
10002c82:	409a      	lsls	r2, r3
10002c84:	1c13      	adds	r3, r2, #0
10002c86:	43da      	mvns	r2, r3
10002c88:	697b      	ldr	r3, [r7, #20]
10002c8a:	4013      	ands	r3, r2
10002c8c:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
10002c8e:	68bb      	ldr	r3, [r7, #8]
10002c90:	69ba      	ldr	r2, [r7, #24]
10002c92:	409a      	lsls	r2, r3
10002c94:	1c13      	adds	r3, r2, #0
10002c96:	697a      	ldr	r2, [r7, #20]
10002c98:	4313      	orrs	r3, r2
10002c9a:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
10002c9c:	68fb      	ldr	r3, [r7, #12]
10002c9e:	2188      	movs	r1, #136	; 0x88
10002ca0:	697a      	ldr	r2, [r7, #20]
10002ca2:	505a      	str	r2, [r3, r1]

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
10002ca4:	687b      	ldr	r3, [r7, #4]
10002ca6:	7b5b      	ldrb	r3, [r3, #13]
10002ca8:	b25b      	sxtb	r3, r3
10002caa:	2b00      	cmp	r3, #0
10002cac:	db2a      	blt.n	10002d04 <XMC_VADC_GROUP_ChannelInit+0xa0>
  {
    mask = (uint32_t)0;
10002cae:	2300      	movs	r3, #0
10002cb0:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
10002cb2:	68bb      	ldr	r3, [r7, #8]
10002cb4:	2b01      	cmp	r3, #1
10002cb6:	d10a      	bne.n	10002cce <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
10002cb8:	2308      	movs	r3, #8
10002cba:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
10002cbc:	68fb      	ldr	r3, [r7, #12]
10002cbe:	22b0      	movs	r2, #176	; 0xb0
10002cc0:	589b      	ldr	r3, [r3, r2]
10002cc2:	4a1e      	ldr	r2, [pc, #120]	; (10002d3c <XMC_VADC_GROUP_ChannelInit+0xd8>)
10002cc4:	401a      	ands	r2, r3
10002cc6:	68fb      	ldr	r3, [r7, #12]
10002cc8:	21b0      	movs	r1, #176	; 0xb0
10002cca:	505a      	str	r2, [r3, r1]
10002ccc:	e00d      	b.n	10002cea <XMC_VADC_GROUP_ChannelInit+0x86>
    }
    else if ((uint32_t)0 == ch_num)
10002cce:	68bb      	ldr	r3, [r7, #8]
10002cd0:	2b00      	cmp	r3, #0
10002cd2:	d10a      	bne.n	10002cea <XMC_VADC_GROUP_ChannelInit+0x86>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
10002cd4:	2300      	movs	r3, #0
10002cd6:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
10002cd8:	68fb      	ldr	r3, [r7, #12]
10002cda:	22b0      	movs	r2, #176	; 0xb0
10002cdc:	589b      	ldr	r3, [r3, r2]
10002cde:	221f      	movs	r2, #31
10002ce0:	4393      	bics	r3, r2
10002ce2:	1c1a      	adds	r2, r3, #0
10002ce4:	68fb      	ldr	r3, [r7, #12]
10002ce6:	21b0      	movs	r1, #176	; 0xb0
10002ce8:	505a      	str	r2, [r3, r1]
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
10002cea:	68fb      	ldr	r3, [r7, #12]
10002cec:	22b0      	movs	r2, #176	; 0xb0
10002cee:	589b      	ldr	r3, [r3, r2]
10002cf0:	687a      	ldr	r2, [r7, #4]
10002cf2:	7b52      	ldrb	r2, [r2, #13]
10002cf4:	b251      	sxtb	r1, r2
10002cf6:	69fa      	ldr	r2, [r7, #28]
10002cf8:	4091      	lsls	r1, r2
10002cfa:	1c0a      	adds	r2, r1, #0
10002cfc:	431a      	orrs	r2, r3
10002cfe:	68fb      	ldr	r3, [r7, #12]
10002d00:	21b0      	movs	r1, #176	; 0xb0
10002d02:	505a      	str	r2, [r3, r1]
  }

  group_ptr->BFL |= config->bfl;
10002d04:	68fb      	ldr	r3, [r7, #12]
10002d06:	22c8      	movs	r2, #200	; 0xc8
10002d08:	589a      	ldr	r2, [r3, r2]
10002d0a:	687b      	ldr	r3, [r7, #4]
10002d0c:	685b      	ldr	r3, [r3, #4]
10002d0e:	431a      	orrs	r2, r3
10002d10:	68fb      	ldr	r3, [r7, #12]
10002d12:	21c8      	movs	r1, #200	; 0xc8
10002d14:	505a      	str	r2, [r3, r1]

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
10002d16:	68fb      	ldr	r3, [r7, #12]
10002d18:	22d0      	movs	r2, #208	; 0xd0
10002d1a:	589a      	ldr	r2, [r3, r2]
10002d1c:	687b      	ldr	r3, [r7, #4]
10002d1e:	689b      	ldr	r3, [r3, #8]
10002d20:	431a      	orrs	r2, r3
10002d22:	68fb      	ldr	r3, [r7, #12]
10002d24:	21d0      	movs	r1, #208	; 0xd0
10002d26:	505a      	str	r2, [r3, r1]
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
10002d28:	687b      	ldr	r3, [r7, #4]
10002d2a:	6819      	ldr	r1, [r3, #0]
10002d2c:	68fb      	ldr	r3, [r7, #12]
10002d2e:	68ba      	ldr	r2, [r7, #8]
10002d30:	3280      	adds	r2, #128	; 0x80
10002d32:	0092      	lsls	r2, r2, #2
10002d34:	50d1      	str	r1, [r2, r3]

}
10002d36:	46bd      	mov	sp, r7
10002d38:	b008      	add	sp, #32
10002d3a:	bd80      	pop	{r7, pc}
10002d3c:	ffffe0ff 	.word	0xffffe0ff

10002d40 <XMC_VADC_GROUP_SetResultInterruptNode>:

/* API to select a service request line (NVIC Node) for result event of specified unit of result hardware */
void XMC_VADC_GROUP_SetResultInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
                                           const uint32_t res_reg,
                                           const XMC_VADC_SR_t sr)
{
10002d40:	b580      	push	{r7, lr}
10002d42:	b086      	sub	sp, #24
10002d44:	af00      	add	r7, sp, #0
10002d46:	60f8      	str	r0, [r7, #12]
10002d48:	60b9      	str	r1, [r7, #8]
10002d4a:	1dfb      	adds	r3, r7, #7
10002d4c:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  if (res_reg <= 7U)
10002d4e:	68bb      	ldr	r3, [r7, #8]
10002d50:	2b07      	cmp	r3, #7
10002d52:	d81b      	bhi.n	10002d8c <XMC_VADC_GROUP_SetResultInterruptNode+0x4c>
  {
    route_mask  = group_ptr->REVNP0;
10002d54:	68fa      	ldr	r2, [r7, #12]
10002d56:	23d8      	movs	r3, #216	; 0xd8
10002d58:	005b      	lsls	r3, r3, #1
10002d5a:	58d3      	ldr	r3, [r2, r3]
10002d5c:	617b      	str	r3, [r7, #20]
    route_mask &= ~((uint32_t)((uint32_t)15 << (res_reg * (uint32_t)4) ));
10002d5e:	68bb      	ldr	r3, [r7, #8]
10002d60:	009b      	lsls	r3, r3, #2
10002d62:	1c1a      	adds	r2, r3, #0
10002d64:	230f      	movs	r3, #15
10002d66:	4093      	lsls	r3, r2
10002d68:	43da      	mvns	r2, r3
10002d6a:	697b      	ldr	r3, [r7, #20]
10002d6c:	4013      	ands	r3, r2
10002d6e:	617b      	str	r3, [r7, #20]
    route_mask |= (uint32_t)((uint32_t)sr << (res_reg * (uint32_t)4));
10002d70:	1dfb      	adds	r3, r7, #7
10002d72:	781b      	ldrb	r3, [r3, #0]
10002d74:	68ba      	ldr	r2, [r7, #8]
10002d76:	0092      	lsls	r2, r2, #2
10002d78:	4093      	lsls	r3, r2
10002d7a:	697a      	ldr	r2, [r7, #20]
10002d7c:	4313      	orrs	r3, r2
10002d7e:	617b      	str	r3, [r7, #20]
    group_ptr->REVNP0 = route_mask;
10002d80:	68fa      	ldr	r2, [r7, #12]
10002d82:	23d8      	movs	r3, #216	; 0xd8
10002d84:	005b      	lsls	r3, r3, #1
10002d86:	6979      	ldr	r1, [r7, #20]
10002d88:	50d1      	str	r1, [r2, r3]
10002d8a:	e020      	b.n	10002dce <XMC_VADC_GROUP_SetResultInterruptNode+0x8e>
  }
  else
  {
    route_mask = group_ptr->REVNP1;
10002d8c:	68fa      	ldr	r2, [r7, #12]
10002d8e:	23da      	movs	r3, #218	; 0xda
10002d90:	005b      	lsls	r3, r3, #1
10002d92:	58d3      	ldr	r3, [r2, r3]
10002d94:	617b      	str	r3, [r7, #20]
    route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
10002d96:	68bb      	ldr	r3, [r7, #8]
10002d98:	4a0e      	ldr	r2, [pc, #56]	; (10002dd4 <XMC_VADC_GROUP_SetResultInterruptNode+0x94>)
10002d9a:	4694      	mov	ip, r2
10002d9c:	4463      	add	r3, ip
10002d9e:	009b      	lsls	r3, r3, #2
10002da0:	1c1a      	adds	r2, r3, #0
10002da2:	230f      	movs	r3, #15
10002da4:	4093      	lsls	r3, r2
10002da6:	43da      	mvns	r2, r3
10002da8:	697b      	ldr	r3, [r7, #20]
10002daa:	4013      	ands	r3, r2
10002dac:	617b      	str	r3, [r7, #20]
    route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
10002dae:	1dfb      	adds	r3, r7, #7
10002db0:	781b      	ldrb	r3, [r3, #0]
10002db2:	68ba      	ldr	r2, [r7, #8]
10002db4:	4907      	ldr	r1, [pc, #28]	; (10002dd4 <XMC_VADC_GROUP_SetResultInterruptNode+0x94>)
10002db6:	468c      	mov	ip, r1
10002db8:	4462      	add	r2, ip
10002dba:	0092      	lsls	r2, r2, #2
10002dbc:	4093      	lsls	r3, r2
10002dbe:	697a      	ldr	r2, [r7, #20]
10002dc0:	4313      	orrs	r3, r2
10002dc2:	617b      	str	r3, [r7, #20]
    group_ptr->REVNP1 = route_mask;
10002dc4:	68fa      	ldr	r2, [r7, #12]
10002dc6:	23da      	movs	r3, #218	; 0xda
10002dc8:	005b      	lsls	r3, r3, #1
10002dca:	6979      	ldr	r1, [r7, #20]
10002dcc:	50d1      	str	r1, [r2, r3]
  }
}
10002dce:	46bd      	mov	sp, r7
10002dd0:	b006      	add	sp, #24
10002dd2:	bd80      	pop	{r7, pc}
10002dd4:	3ffffff8 	.word	0x3ffffff8

10002dd8 <_init>:
  }
}

/* Init */
void _init(void)
{}
10002dd8:	b580      	push	{r7, lr}
10002dda:	af00      	add	r7, sp, #0
10002ddc:	46bd      	mov	sp, r7
10002dde:	bd80      	pop	{r7, pc}

10002de0 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10002de0:	b580      	push	{r7, lr}
10002de2:	b082      	sub	sp, #8
10002de4:	af00      	add	r7, sp, #0
10002de6:	6078      	str	r0, [r7, #4]
10002de8:	1c0a      	adds	r2, r1, #0
10002dea:	1cfb      	adds	r3, r7, #3
10002dec:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
10002dee:	687b      	ldr	r3, [r7, #4]
10002df0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10002df2:	1cfb      	adds	r3, r7, #3
10002df4:	781b      	ldrb	r3, [r3, #0]
10002df6:	40da      	lsrs	r2, r3
10002df8:	1c13      	adds	r3, r2, #0
10002dfa:	2201      	movs	r2, #1
10002dfc:	4013      	ands	r3, r2
}
10002dfe:	1c18      	adds	r0, r3, #0
10002e00:	46bd      	mov	sp, r7
10002e02:	b002      	add	sp, #8
10002e04:	bd80      	pop	{r7, pc}
10002e06:	46c0      	nop			; (mov r8, r8)

10002e08 <OP_SetupConnection>:
void OP_SetupConnection(OP_STATE_t *state, MISC_HANDSHAKE_PARAM_t *espHandShake,
						MISC_HANDSHAKE_PARAM_t *pvHandShake,
						MISC_CTRL_FLAG_t *ctrlFlag, float pvVoltage,
						PCS_BMS_STATUS_t *pcsBmsStatus, PCS_STATUS_t *pcsStatus,
						RTC_TIME_PARAM_t *rtcTime, RTC_DATE_PARAM_t *rtcDate)
{
10002e08:	b580      	push	{r7, lr}
10002e0a:	b084      	sub	sp, #16
10002e0c:	af00      	add	r7, sp, #0
10002e0e:	60f8      	str	r0, [r7, #12]
10002e10:	60b9      	str	r1, [r7, #8]
10002e12:	607a      	str	r2, [r7, #4]
10002e14:	603b      	str	r3, [r7, #0]
	/* 1. Handshaking for ESP32 */
	if(espHandShake->isExecuted)
10002e16:	68bb      	ldr	r3, [r7, #8]
10002e18:	791b      	ldrb	r3, [r3, #4]
10002e1a:	2b00      	cmp	r3, #0
10002e1c:	d02d      	beq.n	10002e7a <OP_SetupConnection+0x72>
	{
		/* Activate Time Out Parameter */
		espHandShake->isTimeOut = false;
10002e1e:	68bb      	ldr	r3, [r7, #8]
10002e20:	2200      	movs	r2, #0
10002e22:	70da      	strb	r2, [r3, #3]
		espHandShake->cycle		= 7000;
10002e24:	68bb      	ldr	r3, [r7, #8]
10002e26:	4a54      	ldr	r2, [pc, #336]	; (10002f78 <OP_SetupConnection+0x170>)
10002e28:	801a      	strh	r2, [r3, #0]
		espHandShake->isEnabled = true;
10002e2a:	68bb      	ldr	r3, [r7, #8]
10002e2c:	2201      	movs	r2, #1
10002e2e:	709a      	strb	r2, [r3, #2]

		/* Activate Handshaking Process */
		espHandShake->isStarted	= true;
10002e30:	68bb      	ldr	r3, [r7, #8]
10002e32:	2201      	movs	r2, #1
10002e34:	715a      	strb	r2, [r3, #5]
		espHandShake->isValid	= true;
10002e36:	68bb      	ldr	r3, [r7, #8]
10002e38:	2201      	movs	r2, #1
10002e3a:	719a      	strb	r2, [r3, #6]

		/* 2. Ensure all relay at initial state */
		/* Initiate relay status */
		PDU_Switch_Relay(PDU_RELAY_KBAT, PDU_RELAY_OPEN);
10002e3c:	2000      	movs	r0, #0
10002e3e:	2100      	movs	r1, #0
10002e40:	f001 fbf2 	bl	10004628 <PDU_Switch_Relay>
		PDU_Switch_Relay(PDU_RELAY_KDSG, PDU_RELAY_OPEN);
10002e44:	2003      	movs	r0, #3
10002e46:	2100      	movs	r1, #0
10002e48:	f001 fbee 	bl	10004628 <PDU_Switch_Relay>
		PDU_Switch_Relay(PDU_RELAY_KMP,  PDU_RELAY_OPEN);
10002e4c:	2001      	movs	r0, #1
10002e4e:	2100      	movs	r1, #0
10002e50:	f001 fbea 	bl	10004628 <PDU_Switch_Relay>
		PDU_Switch_Relay(PDU_RELAY_KMF,  PDU_RELAY_OPEN);
10002e54:	2002      	movs	r0, #2
10002e56:	2100      	movs	r1, #0
10002e58:	f001 fbe6 	bl	10004628 <PDU_Switch_Relay>

		/* CAN Status Setup */
		pcsBmsStatus->bms_main_relay		= RELAY_OPEN;
10002e5c:	69fb      	ldr	r3, [r7, #28]
10002e5e:	2200      	movs	r2, #0
10002e60:	709a      	strb	r2, [r3, #2]
		pcsBmsStatus->bms_precharge_relay	= RELAY_OPEN;
10002e62:	69fb      	ldr	r3, [r7, #28]
10002e64:	2200      	movs	r2, #0
10002e66:	70da      	strb	r2, [r3, #3]
		pcsBmsStatus->bms_status			= BMU_PRECHARGE;
10002e68:	69fb      	ldr	r3, [r7, #28]
10002e6a:	2201      	movs	r2, #1
10002e6c:	701a      	strb	r2, [r3, #0]
		pcsBmsStatus->bms_pcs_command		= BMU_PCS_STOP;
10002e6e:	69fb      	ldr	r3, [r7, #28]
10002e70:	2200      	movs	r2, #0
10002e72:	705a      	strb	r2, [r3, #1]

		/* Notify conditional state */
		espHandShake->isExecuted	= true;
10002e74:	68bb      	ldr	r3, [r7, #8]
10002e76:	2201      	movs	r2, #1
10002e78:	711a      	strb	r2, [r3, #4]
	}

	/* 2. Checking PV Condition */
	if(!pvHandShake->isExecuted)
10002e7a:	687b      	ldr	r3, [r7, #4]
10002e7c:	791b      	ldrb	r3, [r3, #4]
10002e7e:	2201      	movs	r2, #1
10002e80:	4053      	eors	r3, r2
10002e82:	b2db      	uxtb	r3, r3
10002e84:	2b00      	cmp	r3, #0
10002e86:	d015      	beq.n	10002eb4 <OP_SetupConnection+0xac>
	{
		if(pvVoltage > 150.0 || ctrlFlag->isBypass_power_mode)
10002e88:	69b8      	ldr	r0, [r7, #24]
10002e8a:	493c      	ldr	r1, [pc, #240]	; (10002f7c <OP_SetupConnection+0x174>)
10002e8c:	f004 fe72 	bl	10007b74 <__aeabi_fcmpgt>
10002e90:	1e03      	subs	r3, r0, #0
10002e92:	d103      	bne.n	10002e9c <OP_SetupConnection+0x94>
10002e94:	683b      	ldr	r3, [r7, #0]
10002e96:	78db      	ldrb	r3, [r3, #3]
10002e98:	2b00      	cmp	r3, #0
10002e9a:	d00b      	beq.n	10002eb4 <OP_SetupConnection+0xac>
		{
			pvHandShake->isTimeOut	= false;
10002e9c:	687b      	ldr	r3, [r7, #4]
10002e9e:	2200      	movs	r2, #0
10002ea0:	70da      	strb	r2, [r3, #3]
			pvHandShake->isEnabled	= true;
10002ea2:	687b      	ldr	r3, [r7, #4]
10002ea4:	2201      	movs	r2, #1
10002ea6:	709a      	strb	r2, [r3, #2]
			pvHandShake->cycle		= 10000;
10002ea8:	687b      	ldr	r3, [r7, #4]
10002eaa:	4a35      	ldr	r2, [pc, #212]	; (10002f80 <OP_SetupConnection+0x178>)
10002eac:	801a      	strh	r2, [r3, #0]
			pvHandShake->isExecuted	= true;
10002eae:	687b      	ldr	r3, [r7, #4]
10002eb0:	2201      	movs	r2, #1
10002eb2:	711a      	strb	r2, [r3, #4]
		}
	}

	/* Evaluate 1) and 2) status */
	if((pvVoltage > 150.0 || ctrlFlag->isBypass_power_mode)
10002eb4:	69b8      	ldr	r0, [r7, #24]
10002eb6:	4931      	ldr	r1, [pc, #196]	; (10002f7c <OP_SetupConnection+0x174>)
10002eb8:	f004 fe5c 	bl	10007b74 <__aeabi_fcmpgt>
10002ebc:	1e03      	subs	r3, r0, #0
10002ebe:	d103      	bne.n	10002ec8 <OP_SetupConnection+0xc0>
10002ec0:	683b      	ldr	r3, [r7, #0]
10002ec2:	78db      	ldrb	r3, [r3, #3]
10002ec4:	2b00      	cmp	r3, #0
10002ec6:	d050      	beq.n	10002f6a <OP_SetupConnection+0x162>
		&& (pcsStatus->pcs_system_status == PCS_STAT_STANDBY))
10002ec8:	6a3b      	ldr	r3, [r7, #32]
10002eca:	781b      	ldrb	r3, [r3, #0]
10002ecc:	2b04      	cmp	r3, #4
10002ece:	d14c      	bne.n	10002f6a <OP_SetupConnection+0x162>
	{
		if(pvHandShake->isTimeOut)
10002ed0:	687b      	ldr	r3, [r7, #4]
10002ed2:	78db      	ldrb	r3, [r3, #3]
10002ed4:	2b00      	cmp	r3, #0
10002ed6:	d047      	beq.n	10002f68 <OP_SetupConnection+0x160>
		{
			if(espHandShake->isValid)
10002ed8:	68bb      	ldr	r3, [r7, #8]
10002eda:	799b      	ldrb	r3, [r3, #6]
10002edc:	2b00      	cmp	r3, #0
10002ede:	d028      	beq.n	10002f32 <OP_SetupConnection+0x12a>
			{
				rtcDate->year = rtcDate->year - 2000;
10002ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002ee2:	881b      	ldrh	r3, [r3, #0]
10002ee4:	4a27      	ldr	r2, [pc, #156]	; (10002f84 <OP_SetupConnection+0x17c>)
10002ee6:	4694      	mov	ip, r2
10002ee8:	4463      	add	r3, ip
10002eea:	b29a      	uxth	r2, r3
10002eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002eee:	801a      	strh	r2, [r3, #0]
				INFO_RTCDateInit(*rtcDate);
10002ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002ef2:	881a      	ldrh	r2, [r3, #0]
10002ef4:	885b      	ldrh	r3, [r3, #2]
10002ef6:	041b      	lsls	r3, r3, #16
10002ef8:	4313      	orrs	r3, r2
10002efa:	2200      	movs	r2, #0
10002efc:	1c1a      	adds	r2, r3, #0
10002efe:	1c10      	adds	r0, r2, #0
10002f00:	f003 f954 	bl	100061ac <INFO_RTCDateInit>
				INFO_RTCTimeInit(*rtcTime);
10002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10002f06:	781a      	ldrb	r2, [r3, #0]
10002f08:	7859      	ldrb	r1, [r3, #1]
10002f0a:	0209      	lsls	r1, r1, #8
10002f0c:	430a      	orrs	r2, r1
10002f0e:	789b      	ldrb	r3, [r3, #2]
10002f10:	041b      	lsls	r3, r3, #16
10002f12:	431a      	orrs	r2, r3
10002f14:	2300      	movs	r3, #0
10002f16:	0212      	lsls	r2, r2, #8
10002f18:	0a12      	lsrs	r2, r2, #8
10002f1a:	0e1b      	lsrs	r3, r3, #24
10002f1c:	061b      	lsls	r3, r3, #24
10002f1e:	4313      	orrs	r3, r2
10002f20:	1c18      	adds	r0, r3, #0
10002f22:	f003 f811 	bl	10005f48 <INFO_RTCTimeInit>
				espHandShake->isValid 	= false;
10002f26:	68bb      	ldr	r3, [r7, #8]
10002f28:	2200      	movs	r2, #0
10002f2a:	719a      	strb	r2, [r3, #6]
				espHandShake->isStarted = false;
10002f2c:	68bb      	ldr	r3, [r7, #8]
10002f2e:	2200      	movs	r2, #0
10002f30:	715a      	strb	r2, [r3, #5]
			}

			PDU_Switch_Relay(PDU_RELAY_KMF,  PDU_RELAY_CLOSE);
10002f32:	2002      	movs	r0, #2
10002f34:	2101      	movs	r1, #1
10002f36:	f001 fb77 	bl	10004628 <PDU_Switch_Relay>
			PDU_Switch_Relay(PDU_RELAY_KDSG, PDU_RELAY_CLOSE);
10002f3a:	2003      	movs	r0, #3
10002f3c:	2101      	movs	r1, #1
10002f3e:	f001 fb73 	bl	10004628 <PDU_Switch_Relay>
			pcsBmsStatus->bms_precharge_relay = RELAY_CLOSE;
10002f42:	69fb      	ldr	r3, [r7, #28]
10002f44:	2201      	movs	r2, #1
10002f46:	70da      	strb	r2, [r3, #3]
			*state	= OP_TURN_ON;
10002f48:	68fb      	ldr	r3, [r7, #12]
10002f4a:	2201      	movs	r2, #1
10002f4c:	701a      	strb	r2, [r3, #0]

			/* restart handshaking variable */
			espHandShake->isEnabled		= false;
10002f4e:	68bb      	ldr	r3, [r7, #8]
10002f50:	2200      	movs	r2, #0
10002f52:	709a      	strb	r2, [r3, #2]
			espHandShake->isExecuted	= false;
10002f54:	68bb      	ldr	r3, [r7, #8]
10002f56:	2200      	movs	r2, #0
10002f58:	711a      	strb	r2, [r3, #4]
			pvHandShake->isEnabled		= false;
10002f5a:	687b      	ldr	r3, [r7, #4]
10002f5c:	2200      	movs	r2, #0
10002f5e:	709a      	strb	r2, [r3, #2]
			pvHandShake->isExecuted		= false;
10002f60:	687b      	ldr	r3, [r7, #4]
10002f62:	2200      	movs	r2, #0
10002f64:	711a      	strb	r2, [r3, #4]

	/* Evaluate 1) and 2) status */
	if((pvVoltage > 150.0 || ctrlFlag->isBypass_power_mode)
		&& (pcsStatus->pcs_system_status == PCS_STAT_STANDBY))
	{
		if(pvHandShake->isTimeOut)
10002f66:	e003      	b.n	10002f70 <OP_SetupConnection+0x168>
10002f68:	e002      	b.n	10002f70 <OP_SetupConnection+0x168>
			pvHandShake->isExecuted		= false;
		}
	}
	else
	{
		pvHandShake->isExecuted	= false;
10002f6a:	687b      	ldr	r3, [r7, #4]
10002f6c:	2200      	movs	r2, #0
10002f6e:	711a      	strb	r2, [r3, #4]
	}
}
10002f70:	46bd      	mov	sp, r7
10002f72:	b004      	add	sp, #16
10002f74:	bd80      	pop	{r7, pc}
10002f76:	46c0      	nop			; (mov r8, r8)
10002f78:	00001b58 	.word	0x00001b58
10002f7c:	43160000 	.word	0x43160000
10002f80:	00002710 	.word	0x00002710
10002f84:	fffff830 	.word	0xfffff830

10002f88 <OP_TurnOnPCS>:

void OP_TurnOnPCS(OP_STATE_t *state, MISC_HANDSHAKE_PARAM_t *CtrlButton,
				  MISC_CTRL_FLAG_t *ctrlFlag, PCS_BMS_STATUS_t *pcsBmsStatus)
{
10002f88:	b580      	push	{r7, lr}
10002f8a:	b084      	sub	sp, #16
10002f8c:	af00      	add	r7, sp, #0
10002f8e:	60f8      	str	r0, [r7, #12]
10002f90:	60b9      	str	r1, [r7, #8]
10002f92:	607a      	str	r2, [r7, #4]
10002f94:	603b      	str	r3, [r7, #0]
	static bool isPrechargeExecuted = false;

	if(!CtrlButton->isExecuted)
10002f96:	68bb      	ldr	r3, [r7, #8]
10002f98:	791b      	ldrb	r3, [r3, #4]
10002f9a:	2201      	movs	r2, #1
10002f9c:	4053      	eors	r3, r2
10002f9e:	b2db      	uxtb	r3, r3
10002fa0:	2b00      	cmp	r3, #0
10002fa2:	d013      	beq.n	10002fcc <OP_TurnOnPCS+0x44>
	{
		/* Turning on Timer if button pressed */
		if(!XMC_GPIO_GetInput(P2_2))
10002fa4:	4b3a      	ldr	r3, [pc, #232]	; (10003090 <OP_TurnOnPCS+0x108>)
10002fa6:	1c18      	adds	r0, r3, #0
10002fa8:	2102      	movs	r1, #2
10002faa:	f7ff ff19 	bl	10002de0 <XMC_GPIO_GetInput>
10002fae:	1e03      	subs	r3, r0, #0
10002fb0:	d10c      	bne.n	10002fcc <OP_TurnOnPCS+0x44>
		{
			CtrlButton->isTimeOut 	= false;
10002fb2:	68bb      	ldr	r3, [r7, #8]
10002fb4:	2200      	movs	r2, #0
10002fb6:	70da      	strb	r2, [r3, #3]
			CtrlButton->isEnabled	= true;
10002fb8:	68bb      	ldr	r3, [r7, #8]
10002fba:	2201      	movs	r2, #1
10002fbc:	709a      	strb	r2, [r3, #2]
			CtrlButton->cycle		= 2000;
10002fbe:	68bb      	ldr	r3, [r7, #8]
10002fc0:	22fa      	movs	r2, #250	; 0xfa
10002fc2:	00d2      	lsls	r2, r2, #3
10002fc4:	801a      	strh	r2, [r3, #0]
			CtrlButton->isExecuted	= true;
10002fc6:	68bb      	ldr	r3, [r7, #8]
10002fc8:	2201      	movs	r2, #1
10002fca:	711a      	strb	r2, [r3, #4]
		}
	}

	/* Check if it is still being pressed */
	if(!XMC_GPIO_GetInput(P2_2))
10002fcc:	4b30      	ldr	r3, [pc, #192]	; (10003090 <OP_TurnOnPCS+0x108>)
10002fce:	1c18      	adds	r0, r3, #0
10002fd0:	2102      	movs	r1, #2
10002fd2:	f7ff ff05 	bl	10002de0 <XMC_GPIO_GetInput>
10002fd6:	1e03      	subs	r3, r0, #0
10002fd8:	d10a      	bne.n	10002ff0 <OP_TurnOnPCS+0x68>
	{
		if(CtrlButton->isTimeOut)
10002fda:	68bb      	ldr	r3, [r7, #8]
10002fdc:	78db      	ldrb	r3, [r3, #3]
10002fde:	2b00      	cmp	r3, #0
10002fe0:	d00c      	beq.n	10002ffc <OP_TurnOnPCS+0x74>
		{
			CtrlButton->isTimeOut = false;
10002fe2:	68bb      	ldr	r3, [r7, #8]
10002fe4:	2200      	movs	r2, #0
10002fe6:	70da      	strb	r2, [r3, #3]
			ctrlFlag->isPerforming_Precharge = true;
10002fe8:	687b      	ldr	r3, [r7, #4]
10002fea:	2201      	movs	r2, #1
10002fec:	701a      	strb	r2, [r3, #0]
10002fee:	e005      	b.n	10002ffc <OP_TurnOnPCS+0x74>
		}
	}
	else
	{
		/* Clear status if button is released */
		CtrlButton->isExecuted	= false;
10002ff0:	68bb      	ldr	r3, [r7, #8]
10002ff2:	2200      	movs	r2, #0
10002ff4:	711a      	strb	r2, [r3, #4]
		CtrlButton->isEnabled	= false;
10002ff6:	68bb      	ldr	r3, [r7, #8]
10002ff8:	2200      	movs	r2, #0
10002ffa:	709a      	strb	r2, [r3, #2]
	}

	if(ctrlFlag->isPerforming_Precharge)
10002ffc:	687b      	ldr	r3, [r7, #4]
10002ffe:	781b      	ldrb	r3, [r3, #0]
10003000:	2b00      	cmp	r3, #0
10003002:	d041      	beq.n	10003088 <OP_TurnOnPCS+0x100>
	{
		if(!isPrechargeExecuted)
10003004:	4b23      	ldr	r3, [pc, #140]	; (10003094 <OP_TurnOnPCS+0x10c>)
10003006:	781b      	ldrb	r3, [r3, #0]
10003008:	2201      	movs	r2, #1
1000300a:	4053      	eors	r3, r2
1000300c:	b2db      	uxtb	r3, r3
1000300e:	2b00      	cmp	r3, #0
10003010:	d00e      	beq.n	10003030 <OP_TurnOnPCS+0xa8>
		{
			pcsBmsStatus->bms_main_relay 		= RELAY_OPEN;
10003012:	683b      	ldr	r3, [r7, #0]
10003014:	2200      	movs	r2, #0
10003016:	709a      	strb	r2, [r3, #2]
			pcsBmsStatus->bms_precharge_relay	= RELAY_CLOSE;
10003018:	683b      	ldr	r3, [r7, #0]
1000301a:	2201      	movs	r2, #1
1000301c:	70da      	strb	r2, [r3, #3]
			pcsBmsStatus->bms_status			= BMU_PRECHARGE;
1000301e:	683b      	ldr	r3, [r7, #0]
10003020:	2201      	movs	r2, #1
10003022:	701a      	strb	r2, [r3, #0]
			pcsBmsStatus->bms_pcs_command		= BMU_PCS_STOP;
10003024:	683b      	ldr	r3, [r7, #0]
10003026:	2200      	movs	r2, #0
10003028:	705a      	strb	r2, [r3, #1]
			isPrechargeExecuted					= true;
1000302a:	4b1a      	ldr	r3, [pc, #104]	; (10003094 <OP_TurnOnPCS+0x10c>)
1000302c:	2201      	movs	r2, #1
1000302e:	701a      	strb	r2, [r3, #0]
		}

		if(pcsSystemStatus.pcs_precharge_IsComplete)
10003030:	4b19      	ldr	r3, [pc, #100]	; (10003098 <OP_TurnOnPCS+0x110>)
10003032:	785b      	ldrb	r3, [r3, #1]
10003034:	2b00      	cmp	r3, #0
10003036:	d027      	beq.n	10003088 <OP_TurnOnPCS+0x100>
		{
			/* CLose Main Relay */
			PDU_Switch_Relay(PDU_RELAY_KMP, PDU_RELAY_CLOSE);
10003038:	2001      	movs	r0, #1
1000303a:	2101      	movs	r1, #1
1000303c:	f001 faf4 	bl	10004628 <PDU_Switch_Relay>

			/* Create 10 us Delay */
			sysTickFlag = true;
10003040:	4b16      	ldr	r3, [pc, #88]	; (1000309c <OP_TurnOnPCS+0x114>)
10003042:	2201      	movs	r2, #1
10003044:	701a      	strb	r2, [r3, #0]
			while(sysTickFlag){}
10003046:	4b15      	ldr	r3, [pc, #84]	; (1000309c <OP_TurnOnPCS+0x114>)
10003048:	781b      	ldrb	r3, [r3, #0]
1000304a:	2b00      	cmp	r3, #0
1000304c:	d1fb      	bne.n	10003046 <OP_TurnOnPCS+0xbe>

			/* Open Predischarge Relay */
			PDU_Switch_Relay(PDU_RELAY_KDSG, PDU_RELAY_OPEN);
1000304e:	2003      	movs	r0, #3
10003050:	2100      	movs	r1, #0
10003052:	f001 fae9 	bl	10004628 <PDU_Switch_Relay>

			pcsBmsStatus->bms_main_relay		= RELAY_CLOSE;
10003056:	683b      	ldr	r3, [r7, #0]
10003058:	2201      	movs	r2, #1
1000305a:	709a      	strb	r2, [r3, #2]
			pcsBmsStatus->bms_precharge_relay	= RELAY_OPEN;
1000305c:	683b      	ldr	r3, [r7, #0]
1000305e:	2200      	movs	r2, #0
10003060:	70da      	strb	r2, [r3, #3]
			pcsBmsStatus->bms_status			= BMU_RUNNING;
10003062:	683b      	ldr	r3, [r7, #0]
10003064:	2202      	movs	r2, #2
10003066:	701a      	strb	r2, [r3, #0]
			pcsBmsStatus->bms_pcs_command		= BMU_PCS_START;
10003068:	683b      	ldr	r3, [r7, #0]
1000306a:	2201      	movs	r2, #1
1000306c:	705a      	strb	r2, [r3, #1]

			*state = OP_RUNNING;
1000306e:	68fb      	ldr	r3, [r7, #12]
10003070:	2202      	movs	r2, #2
10003072:	701a      	strb	r2, [r3, #0]

			/* close battery relay */
			PDU_Switch_Relay(PDU_RELAY_KBAT, PDU_RELAY_CLOSE);
10003074:	2000      	movs	r0, #0
10003076:	2101      	movs	r1, #1
10003078:	f001 fad6 	bl	10004628 <PDU_Switch_Relay>
			isPrechargeExecuted					= false;
1000307c:	4b05      	ldr	r3, [pc, #20]	; (10003094 <OP_TurnOnPCS+0x10c>)
1000307e:	2200      	movs	r2, #0
10003080:	701a      	strb	r2, [r3, #0]
			ctrlFlag->isPerforming_Precharge	= false;
10003082:	687b      	ldr	r3, [r7, #4]
10003084:	2200      	movs	r2, #0
10003086:	701a      	strb	r2, [r3, #0]
		}
	}
}
10003088:	46bd      	mov	sp, r7
1000308a:	b004      	add	sp, #16
1000308c:	bd80      	pop	{r7, pc}
1000308e:	46c0      	nop			; (mov r8, r8)
10003090:	40040200 	.word	0x40040200
10003094:	20000710 	.word	0x20000710
10003098:	20000d80 	.word	0x20000d80
1000309c:	20000a74 	.word	0x20000a74

100030a0 <OP_CheckingPCSStatus>:

void OP_CheckingPCSStatus(OP_STATE_t *state, PCS_STATUS_t *pcsStatus,
						  MISC_HANDSHAKE_PARAM_t *CtrlButton,
						  MISC_CTRL_FLAG_t *ctrlFlag)
{
100030a0:	b580      	push	{r7, lr}
100030a2:	b084      	sub	sp, #16
100030a4:	af00      	add	r7, sp, #0
100030a6:	60f8      	str	r0, [r7, #12]
100030a8:	60b9      	str	r1, [r7, #8]
100030aa:	607a      	str	r2, [r7, #4]
100030ac:	603b      	str	r3, [r7, #0]
	static bool isPutToStandbyExecuted = false;

	/* 1. Check PCS Warning Status */
	if(pcsStatus->pcs_system_status == PCS_STAT_STANDBY)
100030ae:	68bb      	ldr	r3, [r7, #8]
100030b0:	781b      	ldrb	r3, [r3, #0]
100030b2:	2b04      	cmp	r3, #4
100030b4:	d102      	bne.n	100030bc <OP_CheckingPCSStatus+0x1c>
	{
		*state = OP_ERROR;
100030b6:	68fb      	ldr	r3, [r7, #12]
100030b8:	2204      	movs	r2, #4
100030ba:	701a      	strb	r2, [r3, #0]
	}

	/* 2. Check Standby Button */
	if(!CtrlButton->isExecuted && (!ctrlFlag->isAuto_mode))
100030bc:	687b      	ldr	r3, [r7, #4]
100030be:	791b      	ldrb	r3, [r3, #4]
100030c0:	2201      	movs	r2, #1
100030c2:	4053      	eors	r3, r2
100030c4:	b2db      	uxtb	r3, r3
100030c6:	2b00      	cmp	r3, #0
100030c8:	d019      	beq.n	100030fe <OP_CheckingPCSStatus+0x5e>
100030ca:	683b      	ldr	r3, [r7, #0]
100030cc:	789b      	ldrb	r3, [r3, #2]
100030ce:	2201      	movs	r2, #1
100030d0:	4053      	eors	r3, r2
100030d2:	b2db      	uxtb	r3, r3
100030d4:	2b00      	cmp	r3, #0
100030d6:	d012      	beq.n	100030fe <OP_CheckingPCSStatus+0x5e>
	{
		if(!XMC_GPIO_GetInput(P2_2))
100030d8:	4b26      	ldr	r3, [pc, #152]	; (10003174 <OP_CheckingPCSStatus+0xd4>)
100030da:	1c18      	adds	r0, r3, #0
100030dc:	2102      	movs	r1, #2
100030de:	f7ff fe7f 	bl	10002de0 <XMC_GPIO_GetInput>
100030e2:	1e03      	subs	r3, r0, #0
100030e4:	d10b      	bne.n	100030fe <OP_CheckingPCSStatus+0x5e>
		{
			CtrlButton->isTimeOut	= false;
100030e6:	687b      	ldr	r3, [r7, #4]
100030e8:	2200      	movs	r2, #0
100030ea:	70da      	strb	r2, [r3, #3]
			CtrlButton->isEnabled	= true;
100030ec:	687b      	ldr	r3, [r7, #4]
100030ee:	2201      	movs	r2, #1
100030f0:	709a      	strb	r2, [r3, #2]
			CtrlButton->cycle		= 3000;
100030f2:	687b      	ldr	r3, [r7, #4]
100030f4:	4a20      	ldr	r2, [pc, #128]	; (10003178 <OP_CheckingPCSStatus+0xd8>)
100030f6:	801a      	strh	r2, [r3, #0]
			CtrlButton->isExecuted	= true;
100030f8:	687b      	ldr	r3, [r7, #4]
100030fa:	2201      	movs	r2, #1
100030fc:	711a      	strb	r2, [r3, #4]
		}
	}

	/* Check if it is still being pressed */
	if(!XMC_GPIO_GetInput(P2_2) && (!isPutToStandbyExecuted))
100030fe:	4b1d      	ldr	r3, [pc, #116]	; (10003174 <OP_CheckingPCSStatus+0xd4>)
10003100:	1c18      	adds	r0, r3, #0
10003102:	2102      	movs	r1, #2
10003104:	f7ff fe6c 	bl	10002de0 <XMC_GPIO_GetInput>
10003108:	1e03      	subs	r3, r0, #0
1000310a:	d112      	bne.n	10003132 <OP_CheckingPCSStatus+0x92>
1000310c:	4b1b      	ldr	r3, [pc, #108]	; (1000317c <OP_CheckingPCSStatus+0xdc>)
1000310e:	781b      	ldrb	r3, [r3, #0]
10003110:	2201      	movs	r2, #1
10003112:	4053      	eors	r3, r2
10003114:	b2db      	uxtb	r3, r3
10003116:	2b00      	cmp	r3, #0
10003118:	d00b      	beq.n	10003132 <OP_CheckingPCSStatus+0x92>
	{
		if(CtrlButton->isTimeOut)
1000311a:	687b      	ldr	r3, [r7, #4]
1000311c:	78db      	ldrb	r3, [r3, #3]
1000311e:	2b00      	cmp	r3, #0
10003120:	d006      	beq.n	10003130 <OP_CheckingPCSStatus+0x90>
		{
			isPutToStandbyExecuted	= true;
10003122:	4b16      	ldr	r3, [pc, #88]	; (1000317c <OP_CheckingPCSStatus+0xdc>)
10003124:	2201      	movs	r2, #1
10003126:	701a      	strb	r2, [r3, #0]
			CtrlButton->isTimeOut	= false;
10003128:	687b      	ldr	r3, [r7, #4]
1000312a:	2200      	movs	r2, #0
1000312c:	70da      	strb	r2, [r3, #3]
	}

	/* Check if it is still being pressed */
	if(!XMC_GPIO_GetInput(P2_2) && (!isPutToStandbyExecuted))
	{
		if(CtrlButton->isTimeOut)
1000312e:	e006      	b.n	1000313e <OP_CheckingPCSStatus+0x9e>
10003130:	e005      	b.n	1000313e <OP_CheckingPCSStatus+0x9e>
		}
	}
	else
	{
		/* Clear status if button is released */
		CtrlButton->isExecuted	= false;
10003132:	687b      	ldr	r3, [r7, #4]
10003134:	2200      	movs	r2, #0
10003136:	711a      	strb	r2, [r3, #4]
		CtrlButton->isEnabled	= false;
10003138:	687b      	ldr	r3, [r7, #4]
1000313a:	2200      	movs	r2, #0
1000313c:	709a      	strb	r2, [r3, #2]
	}

	/* Change to STANDBY upon the timer's time-out and button is released */
	if(isPutToStandbyExecuted)
1000313e:	4b0f      	ldr	r3, [pc, #60]	; (1000317c <OP_CheckingPCSStatus+0xdc>)
10003140:	781b      	ldrb	r3, [r3, #0]
10003142:	2b00      	cmp	r3, #0
10003144:	d012      	beq.n	1000316c <OP_CheckingPCSStatus+0xcc>
	{
		if(XMC_GPIO_GetInput(P2_2))
10003146:	4b0b      	ldr	r3, [pc, #44]	; (10003174 <OP_CheckingPCSStatus+0xd4>)
10003148:	1c18      	adds	r0, r3, #0
1000314a:	2102      	movs	r1, #2
1000314c:	f7ff fe48 	bl	10002de0 <XMC_GPIO_GetInput>
10003150:	1e03      	subs	r3, r0, #0
10003152:	d00b      	beq.n	1000316c <OP_CheckingPCSStatus+0xcc>
		{
			isPutToStandbyExecuted	= false;
10003154:	4b09      	ldr	r3, [pc, #36]	; (1000317c <OP_CheckingPCSStatus+0xdc>)
10003156:	2200      	movs	r2, #0
10003158:	701a      	strb	r2, [r3, #0]
			*state					= OP_STANDBY;
1000315a:	68fb      	ldr	r3, [r7, #12]
1000315c:	2203      	movs	r2, #3
1000315e:	701a      	strb	r2, [r3, #0]
			CtrlButton->isEnabled	= false;
10003160:	687b      	ldr	r3, [r7, #4]
10003162:	2200      	movs	r2, #0
10003164:	709a      	strb	r2, [r3, #2]
			CtrlButton->isExecuted	= false;
10003166:	687b      	ldr	r3, [r7, #4]
10003168:	2200      	movs	r2, #0
1000316a:	711a      	strb	r2, [r3, #4]
		}
	}
}
1000316c:	46bd      	mov	sp, r7
1000316e:	b004      	add	sp, #16
10003170:	bd80      	pop	{r7, pc}
10003172:	46c0      	nop			; (mov r8, r8)
10003174:	40040200 	.word	0x40040200
10003178:	00000bb8 	.word	0x00000bb8
1000317c:	20000711 	.word	0x20000711

10003180 <OP_PutSystemStandby>:

void OP_PutSystemStandby(OP_STATE_t *state, PCS_STATUS_t *pcsStatus,
						 MISC_HANDSHAKE_PARAM_t *CtrlButton,
						 MISC_CTRL_FLAG_t *ctrlFlag,
						 PCS_BMS_STATUS_t *pcsBmsStatus)
{
10003180:	b580      	push	{r7, lr}
10003182:	b084      	sub	sp, #16
10003184:	af00      	add	r7, sp, #0
10003186:	60f8      	str	r0, [r7, #12]
10003188:	60b9      	str	r1, [r7, #8]
1000318a:	607a      	str	r2, [r7, #4]
1000318c:	603b      	str	r3, [r7, #0]
	static bool isStandbyExecuted = false;
	if(pcsStatus->pcs_system_status == PCS_STAT_RUNNING)
1000318e:	68bb      	ldr	r3, [r7, #8]
10003190:	781b      	ldrb	r3, [r3, #0]
10003192:	2b06      	cmp	r3, #6
10003194:	d10c      	bne.n	100031b0 <OP_PutSystemStandby+0x30>
	{
		if(!isStandbyExecuted)
10003196:	4b19      	ldr	r3, [pc, #100]	; (100031fc <OP_PutSystemStandby+0x7c>)
10003198:	781b      	ldrb	r3, [r3, #0]
1000319a:	2201      	movs	r2, #1
1000319c:	4053      	eors	r3, r2
1000319e:	b2db      	uxtb	r3, r3
100031a0:	2b00      	cmp	r3, #0
100031a2:	d005      	beq.n	100031b0 <OP_PutSystemStandby+0x30>
		{
			pcsBmsStatus->bms_pcs_command = BMU_PCS_STOP;
100031a4:	69bb      	ldr	r3, [r7, #24]
100031a6:	2200      	movs	r2, #0
100031a8:	705a      	strb	r2, [r3, #1]
			isStandbyExecuted = true;
100031aa:	4b14      	ldr	r3, [pc, #80]	; (100031fc <OP_PutSystemStandby+0x7c>)
100031ac:	2201      	movs	r2, #1
100031ae:	701a      	strb	r2, [r3, #0]
		}
	}

	if(pcsStatus->pcs_system_status == PCS_STAT_STANDBY)
100031b0:	68bb      	ldr	r3, [r7, #8]
100031b2:	781b      	ldrb	r3, [r3, #0]
100031b4:	2b04      	cmp	r3, #4
100031b6:	d11d      	bne.n	100031f4 <OP_PutSystemStandby+0x74>
	{
		/* Open Pre Discharge Relay */
		PDU_Switch_Relay(PDU_RELAY_KDSG, PDU_RELAY_OPEN);
100031b8:	2003      	movs	r0, #3
100031ba:	2100      	movs	r1, #0
100031bc:	f001 fa34 	bl	10004628 <PDU_Switch_Relay>

		/* Create 10 us Delay */
		sysTickFlag = true;
100031c0:	4b0f      	ldr	r3, [pc, #60]	; (10003200 <OP_PutSystemStandby+0x80>)
100031c2:	2201      	movs	r2, #1
100031c4:	701a      	strb	r2, [r3, #0]
		while(sysTickFlag){}
100031c6:	4b0e      	ldr	r3, [pc, #56]	; (10003200 <OP_PutSystemStandby+0x80>)
100031c8:	781b      	ldrb	r3, [r3, #0]
100031ca:	2b00      	cmp	r3, #0
100031cc:	d1fb      	bne.n	100031c6 <OP_PutSystemStandby+0x46>

		/* Open Main Relay */
		PDU_Switch_Relay(PDU_RELAY_KMP, PDU_RELAY_OPEN);
100031ce:	2001      	movs	r0, #1
100031d0:	2100      	movs	r1, #0
100031d2:	f001 fa29 	bl	10004628 <PDU_Switch_Relay>

		pcsBmsStatus->bms_main_relay		= RELAY_OPEN;
100031d6:	69bb      	ldr	r3, [r7, #24]
100031d8:	2200      	movs	r2, #0
100031da:	709a      	strb	r2, [r3, #2]
		pcsBmsStatus->bms_precharge_relay	= RELAY_OPEN;
100031dc:	69bb      	ldr	r3, [r7, #24]
100031de:	2200      	movs	r2, #0
100031e0:	70da      	strb	r2, [r3, #3]
		pcsBmsStatus->bms_status			= BMU_PRECHARGE;
100031e2:	69bb      	ldr	r3, [r7, #24]
100031e4:	2201      	movs	r2, #1
100031e6:	701a      	strb	r2, [r3, #0]

		*state = OP_TURN_ON;
100031e8:	68fb      	ldr	r3, [r7, #12]
100031ea:	2201      	movs	r2, #1
100031ec:	701a      	strb	r2, [r3, #0]
		isStandbyExecuted = false;
100031ee:	4b03      	ldr	r3, [pc, #12]	; (100031fc <OP_PutSystemStandby+0x7c>)
100031f0:	2200      	movs	r2, #0
100031f2:	701a      	strb	r2, [r3, #0]
	}
}
100031f4:	46bd      	mov	sp, r7
100031f6:	b004      	add	sp, #16
100031f8:	bd80      	pop	{r7, pc}
100031fa:	46c0      	nop			; (mov r8, r8)
100031fc:	20000712 	.word	0x20000712
10003200:	20000a74 	.word	0x20000a74

10003204 <OP_HandlingPCSWarning>:

void OP_HandlingPCSWarning(OP_STATE_t *state, PCS_STATUS_t *pcsStatus,
						   MISC_HANDSHAKE_PARAM_t *CtrlButton,
						   MISC_CTRL_FLAG_t *ctrlFlag, BMS_PARAMETER_t *bmsParam,
						   PCS_BMS_STATUS_t *pcsBmsStatus)
{
10003204:	b580      	push	{r7, lr}
10003206:	b084      	sub	sp, #16
10003208:	af00      	add	r7, sp, #0
1000320a:	60f8      	str	r0, [r7, #12]
1000320c:	60b9      	str	r1, [r7, #8]
1000320e:	607a      	str	r2, [r7, #4]
10003210:	603b      	str	r3, [r7, #0]

	/* 1. if error elapsed, attempt for change PCS to RUN state */
	if(!ctrlFlag->isStandby)
10003212:	683b      	ldr	r3, [r7, #0]
10003214:	785b      	ldrb	r3, [r3, #1]
10003216:	2201      	movs	r2, #1
10003218:	4053      	eors	r3, r2
1000321a:	b2db      	uxtb	r3, r3
1000321c:	2b00      	cmp	r3, #0
1000321e:	d002      	beq.n	10003226 <OP_HandlingPCSWarning+0x22>
	{
		pcsBmsStatus->bms_pcs_command = BMU_PCS_START;
10003220:	69fb      	ldr	r3, [r7, #28]
10003222:	2201      	movs	r2, #1
10003224:	705a      	strb	r2, [r3, #1]
	}

	/* 1. if PCS acknowledged that already change to RUN, return the state to RUNNING */
	if(pcsStatus->pcs_system_status == PCS_STAT_RUNNING)
10003226:	68bb      	ldr	r3, [r7, #8]
10003228:	781b      	ldrb	r3, [r3, #0]
1000322a:	2b06      	cmp	r3, #6
1000322c:	d102      	bne.n	10003234 <OP_HandlingPCSWarning+0x30>
	{
		*state = OP_RUNNING;
1000322e:	68fb      	ldr	r3, [r7, #12]
10003230:	2202      	movs	r2, #2
10003232:	701a      	strb	r2, [r3, #0]
	}

	/* 2. Check SoC Level */
	/* force shutdown */
	//if(ctrlFlag->isForced_shut_down){bmsParam->soc = 2;}
	if((bmsParam->soc <= 50) && (!ctrlFlag->isBypass_power_mode))
10003234:	69bb      	ldr	r3, [r7, #24]
10003236:	881b      	ldrh	r3, [r3, #0]
10003238:	2b32      	cmp	r3, #50	; 0x32
1000323a:	d809      	bhi.n	10003250 <OP_HandlingPCSWarning+0x4c>
1000323c:	683b      	ldr	r3, [r7, #0]
1000323e:	78db      	ldrb	r3, [r3, #3]
10003240:	2201      	movs	r2, #1
10003242:	4053      	eors	r3, r2
10003244:	b2db      	uxtb	r3, r3
10003246:	2b00      	cmp	r3, #0
10003248:	d002      	beq.n	10003250 <OP_HandlingPCSWarning+0x4c>
	{
		*state = OP_SHUTDOWN;
1000324a:	68fb      	ldr	r3, [r7, #12]
1000324c:	2205      	movs	r2, #5
1000324e:	701a      	strb	r2, [r3, #0]
	}
}
10003250:	46bd      	mov	sp, r7
10003252:	b004      	add	sp, #16
10003254:	bd80      	pop	{r7, pc}
10003256:	46c0      	nop			; (mov r8, r8)

10003258 <OP_PutSystemShutDown>:

void OP_PutSystemShutDown(OP_STATE_t *state, MISC_HANDSHAKE_PARAM_t *CtrlButton)
{
10003258:	b580      	push	{r7, lr}
1000325a:	b082      	sub	sp, #8
1000325c:	af00      	add	r7, sp, #0
1000325e:	6078      	str	r0, [r7, #4]
10003260:	6039      	str	r1, [r7, #0]
	if(!CtrlButton->isExecuted)
10003262:	683b      	ldr	r3, [r7, #0]
10003264:	791b      	ldrb	r3, [r3, #4]
10003266:	2201      	movs	r2, #1
10003268:	4053      	eors	r3, r2
1000326a:	b2db      	uxtb	r3, r3
1000326c:	2b00      	cmp	r3, #0
1000326e:	d00c      	beq.n	1000328a <OP_PutSystemShutDown+0x32>
	{
		CtrlButton->isEnabled	= true;
10003270:	683b      	ldr	r3, [r7, #0]
10003272:	2201      	movs	r2, #1
10003274:	709a      	strb	r2, [r3, #2]
		CtrlButton->cycle		= 1000;
10003276:	683b      	ldr	r3, [r7, #0]
10003278:	22fa      	movs	r2, #250	; 0xfa
1000327a:	0092      	lsls	r2, r2, #2
1000327c:	801a      	strh	r2, [r3, #0]
		CtrlButton->isExecuted	= true;
1000327e:	683b      	ldr	r3, [r7, #0]
10003280:	2201      	movs	r2, #1
10003282:	711a      	strb	r2, [r3, #4]
		CtrlButton->isTimeOut	= false;
10003284:	683b      	ldr	r3, [r7, #0]
10003286:	2200      	movs	r2, #0
10003288:	70da      	strb	r2, [r3, #3]
	}

	if(CtrlButton->isTimeOut)
1000328a:	683b      	ldr	r3, [r7, #0]
1000328c:	78db      	ldrb	r3, [r3, #3]
1000328e:	2b00      	cmp	r3, #0
10003290:	d009      	beq.n	100032a6 <OP_PutSystemShutDown+0x4e>
	{
		PDU_Switch_Relay(PDU_RELAY_KBAT, PDU_RELAY_OPEN);
10003292:	2000      	movs	r0, #0
10003294:	2100      	movs	r1, #0
10003296:	f001 f9c7 	bl	10004628 <PDU_Switch_Relay>
		CtrlButton->isExecuted = false;
1000329a:	683b      	ldr	r3, [r7, #0]
1000329c:	2200      	movs	r2, #0
1000329e:	711a      	strb	r2, [r3, #4]
		*state = OP_SETUP;
100032a0:	687b      	ldr	r3, [r7, #4]
100032a2:	2200      	movs	r2, #0
100032a4:	701a      	strb	r2, [r3, #0]
	}
}
100032a6:	46bd      	mov	sp, r7
100032a8:	b002      	add	sp, #8
100032aa:	bd80      	pop	{r7, pc}

100032ac <OP_CheckingMode>:
void OP_CheckingMode(MISC_CTRL_FLAG_t *ctrlFlag)
{
100032ac:	b580      	push	{r7, lr}
100032ae:	b082      	sub	sp, #8
100032b0:	af00      	add	r7, sp, #0
100032b2:	6078      	str	r0, [r7, #4]
	/* Read Dip Switch */
	(XMC_GPIO_GetInput(P4_2) == 1)?(ctrlFlag->isBypass_power_mode = true):
100032b4:	4b1f      	ldr	r3, [pc, #124]	; (10003334 <OP_CheckingMode+0x88>)
100032b6:	1c18      	adds	r0, r3, #0
100032b8:	2102      	movs	r1, #2
100032ba:	f7ff fd91 	bl	10002de0 <XMC_GPIO_GetInput>
100032be:	1e03      	subs	r3, r0, #0
100032c0:	2b01      	cmp	r3, #1
100032c2:	d103      	bne.n	100032cc <OP_CheckingMode+0x20>
100032c4:	687b      	ldr	r3, [r7, #4]
100032c6:	2201      	movs	r2, #1
100032c8:	70da      	strb	r2, [r3, #3]
100032ca:	e002      	b.n	100032d2 <OP_CheckingMode+0x26>
								   (ctrlFlag->isBypass_power_mode = false);
100032cc:	687b      	ldr	r3, [r7, #4]
100032ce:	2200      	movs	r2, #0
100032d0:	70da      	strb	r2, [r3, #3]
	(XMC_GPIO_GetInput(P4_3) == 1)?(ctrlFlag->isAuto_mode = true):
100032d2:	4b18      	ldr	r3, [pc, #96]	; (10003334 <OP_CheckingMode+0x88>)
100032d4:	1c18      	adds	r0, r3, #0
100032d6:	2103      	movs	r1, #3
100032d8:	f7ff fd82 	bl	10002de0 <XMC_GPIO_GetInput>
100032dc:	1e03      	subs	r3, r0, #0
100032de:	2b01      	cmp	r3, #1
100032e0:	d103      	bne.n	100032ea <OP_CheckingMode+0x3e>
100032e2:	687b      	ldr	r3, [r7, #4]
100032e4:	2201      	movs	r2, #1
100032e6:	709a      	strb	r2, [r3, #2]
100032e8:	e002      	b.n	100032f0 <OP_CheckingMode+0x44>
								   (ctrlFlag->isAuto_mode = false);
100032ea:	687b      	ldr	r3, [r7, #4]
100032ec:	2200      	movs	r2, #0
100032ee:	709a      	strb	r2, [r3, #2]
	(XMC_GPIO_GetInput(P4_4) == 1)?(ctrlFlag->isChecking_peripheral = true):
100032f0:	4b10      	ldr	r3, [pc, #64]	; (10003334 <OP_CheckingMode+0x88>)
100032f2:	1c18      	adds	r0, r3, #0
100032f4:	2104      	movs	r1, #4
100032f6:	f7ff fd73 	bl	10002de0 <XMC_GPIO_GetInput>
100032fa:	1e03      	subs	r3, r0, #0
100032fc:	2b01      	cmp	r3, #1
100032fe:	d103      	bne.n	10003308 <OP_CheckingMode+0x5c>
10003300:	687b      	ldr	r3, [r7, #4]
10003302:	2201      	movs	r2, #1
10003304:	715a      	strb	r2, [r3, #5]
10003306:	e002      	b.n	1000330e <OP_CheckingMode+0x62>
								   (ctrlFlag->isChecking_peripheral = false);
10003308:	687b      	ldr	r3, [r7, #4]
1000330a:	2200      	movs	r2, #0
1000330c:	715a      	strb	r2, [r3, #5]
	(XMC_GPIO_GetInput(P4_5) == 1)?(ctrlFlag->isForced_shutting_down = true):
1000330e:	4b09      	ldr	r3, [pc, #36]	; (10003334 <OP_CheckingMode+0x88>)
10003310:	1c18      	adds	r0, r3, #0
10003312:	2105      	movs	r1, #5
10003314:	f7ff fd64 	bl	10002de0 <XMC_GPIO_GetInput>
10003318:	1e03      	subs	r3, r0, #0
1000331a:	2b01      	cmp	r3, #1
1000331c:	d103      	bne.n	10003326 <OP_CheckingMode+0x7a>
1000331e:	687b      	ldr	r3, [r7, #4]
10003320:	2201      	movs	r2, #1
10003322:	711a      	strb	r2, [r3, #4]
10003324:	e002      	b.n	1000332c <OP_CheckingMode+0x80>
								   (ctrlFlag->isForced_shutting_down = false);
10003326:	687b      	ldr	r3, [r7, #4]
10003328:	2200      	movs	r2, #0
1000332a:	711a      	strb	r2, [r3, #4]
}
1000332c:	46bd      	mov	sp, r7
1000332e:	b002      	add	sp, #8
10003330:	bd80      	pop	{r7, pc}
10003332:	46c0      	nop			; (mov r8, r8)
10003334:	40040400 	.word	0x40040400

10003338 <OP_CheckingError>:


void OP_CheckingError(MISC_CTRL_FLAG_t *ctrlFlag, PCS_STATUS_t *pcsStatus,
					  DCGRID_STATUS_t *gridStatus, ACINV_STATUS_t *invStatus,
					  PVCONV_STATUS_t *pvStatus, BATCONV_STATUS_t *BatStatus)
{
10003338:	b580      	push	{r7, lr}
1000333a:	b084      	sub	sp, #16
1000333c:	af00      	add	r7, sp, #0
1000333e:	60f8      	str	r0, [r7, #12]
10003340:	60b9      	str	r1, [r7, #8]
10003342:	607a      	str	r2, [r7, #4]
10003344:	603b      	str	r3, [r7, #0]
	  /* Check if any system in Standby mode */
	ctrlFlag->isStandby = pcsStatus->pcs_system_pcsIsStandBy 	 |\
10003346:	68bb      	ldr	r3, [r7, #8]
10003348:	791b      	ldrb	r3, [r3, #4]
1000334a:	1c1a      	adds	r2, r3, #0
						  gridStatus->dcgrid_system_pcsIsStandBy |\
1000334c:	687b      	ldr	r3, [r7, #4]
1000334e:	78db      	ldrb	r3, [r3, #3]
void OP_CheckingError(MISC_CTRL_FLAG_t *ctrlFlag, PCS_STATUS_t *pcsStatus,
					  DCGRID_STATUS_t *gridStatus, ACINV_STATUS_t *invStatus,
					  PVCONV_STATUS_t *pvStatus, BATCONV_STATUS_t *BatStatus)
{
	  /* Check if any system in Standby mode */
	ctrlFlag->isStandby = pcsStatus->pcs_system_pcsIsStandBy 	 |\
10003350:	4313      	orrs	r3, r2
						  gridStatus->dcgrid_system_pcsIsStandBy |\
						  invStatus->acinv_system_pcsIsStandBy	 |\
10003352:	683a      	ldr	r2, [r7, #0]
10003354:	78d2      	ldrb	r2, [r2, #3]
					  DCGRID_STATUS_t *gridStatus, ACINV_STATUS_t *invStatus,
					  PVCONV_STATUS_t *pvStatus, BATCONV_STATUS_t *BatStatus)
{
	  /* Check if any system in Standby mode */
	ctrlFlag->isStandby = pcsStatus->pcs_system_pcsIsStandBy 	 |\
						  gridStatus->dcgrid_system_pcsIsStandBy |\
10003356:	4313      	orrs	r3, r2
						  invStatus->acinv_system_pcsIsStandBy	 |\
						  pvStatus->pvconv_system_pcsIsStandBy   |\
10003358:	69ba      	ldr	r2, [r7, #24]
1000335a:	78d2      	ldrb	r2, [r2, #3]
					  PVCONV_STATUS_t *pvStatus, BATCONV_STATUS_t *BatStatus)
{
	  /* Check if any system in Standby mode */
	ctrlFlag->isStandby = pcsStatus->pcs_system_pcsIsStandBy 	 |\
						  gridStatus->dcgrid_system_pcsIsStandBy |\
						  invStatus->acinv_system_pcsIsStandBy	 |\
1000335c:	4313      	orrs	r3, r2
						  pvStatus->pvconv_system_pcsIsStandBy   |\
						  BatStatus->batconv_system_pcsIsStandBy;
1000335e:	69fa      	ldr	r2, [r7, #28]
10003360:	78d2      	ldrb	r2, [r2, #3]
{
	  /* Check if any system in Standby mode */
	ctrlFlag->isStandby = pcsStatus->pcs_system_pcsIsStandBy 	 |\
						  gridStatus->dcgrid_system_pcsIsStandBy |\
						  invStatus->acinv_system_pcsIsStandBy	 |\
						  pvStatus->pvconv_system_pcsIsStandBy   |\
10003362:	4313      	orrs	r3, r2
10003364:	1e5a      	subs	r2, r3, #1
10003366:	4193      	sbcs	r3, r2
10003368:	b2da      	uxtb	r2, r3
void OP_CheckingError(MISC_CTRL_FLAG_t *ctrlFlag, PCS_STATUS_t *pcsStatus,
					  DCGRID_STATUS_t *gridStatus, ACINV_STATUS_t *invStatus,
					  PVCONV_STATUS_t *pvStatus, BATCONV_STATUS_t *BatStatus)
{
	  /* Check if any system in Standby mode */
	ctrlFlag->isStandby = pcsStatus->pcs_system_pcsIsStandBy 	 |\
1000336a:	68fb      	ldr	r3, [r7, #12]
1000336c:	705a      	strb	r2, [r3, #1]
						  gridStatus->dcgrid_system_pcsIsStandBy |\
						  invStatus->acinv_system_pcsIsStandBy	 |\
						  pvStatus->pvconv_system_pcsIsStandBy   |\
						  BatStatus->batconv_system_pcsIsStandBy;
}
1000336e:	46bd      	mov	sp, r7
10003370:	b004      	add	sp, #16
10003372:	bd80      	pop	{r7, pc}

10003374 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
10003374:	b580      	push	{r7, lr}
10003376:	b082      	sub	sp, #8
10003378:	af00      	add	r7, sp, #0
1000337a:	1c02      	adds	r2, r0, #0
1000337c:	1dfb      	adds	r3, r7, #7
1000337e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10003380:	1dfb      	adds	r3, r7, #7
10003382:	781b      	ldrb	r3, [r3, #0]
10003384:	2b7f      	cmp	r3, #127	; 0x7f
10003386:	d80a      	bhi.n	1000339e <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
10003388:	4906      	ldr	r1, [pc, #24]	; (100033a4 <__NVIC_ClearPendingIRQ+0x30>)
1000338a:	1dfb      	adds	r3, r7, #7
1000338c:	781b      	ldrb	r3, [r3, #0]
1000338e:	1c1a      	adds	r2, r3, #0
10003390:	231f      	movs	r3, #31
10003392:	4013      	ands	r3, r2
10003394:	2201      	movs	r2, #1
10003396:	409a      	lsls	r2, r3
10003398:	23c0      	movs	r3, #192	; 0xc0
1000339a:	005b      	lsls	r3, r3, #1
1000339c:	50ca      	str	r2, [r1, r3]
  }
}
1000339e:	46bd      	mov	sp, r7
100033a0:	b002      	add	sp, #8
100033a2:	bd80      	pop	{r7, pc}
100033a4:	e000e100 	.word	0xe000e100

100033a8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void __NVIC_SystemReset(void)
{
100033a8:	b580      	push	{r7, lr}
100033aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
100033ac:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
100033b0:	4b03      	ldr	r3, [pc, #12]	; (100033c0 <__NVIC_SystemReset+0x18>)
100033b2:	4a04      	ldr	r2, [pc, #16]	; (100033c4 <__NVIC_SystemReset+0x1c>)
100033b4:	60da      	str	r2, [r3, #12]
100033b6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
100033ba:	46c0      	nop			; (mov r8, r8)
  }
100033bc:	e7fd      	b.n	100033ba <__NVIC_SystemReset+0x12>
100033be:	46c0      	nop			; (mov r8, r8)
100033c0:	e000ed00 	.word	0xe000ed00
100033c4:	05fa0004 	.word	0x05fa0004

100033c8 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
100033c8:	b580      	push	{r7, lr}
100033ca:	b082      	sub	sp, #8
100033cc:	af00      	add	r7, sp, #0
100033ce:	6078      	str	r0, [r7, #4]
100033d0:	1c0a      	adds	r2, r1, #0
100033d2:	1cfb      	adds	r3, r7, #3
100033d4:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
100033d6:	1cfb      	adds	r3, r7, #3
100033d8:	781b      	ldrb	r3, [r3, #0]
100033da:	4a03      	ldr	r2, [pc, #12]	; (100033e8 <XMC_GPIO_ToggleOutput+0x20>)
100033dc:	409a      	lsls	r2, r3
100033de:	687b      	ldr	r3, [r7, #4]
100033e0:	605a      	str	r2, [r3, #4]
}
100033e2:	46bd      	mov	sp, r7
100033e4:	b002      	add	sp, #8
100033e6:	bd80      	pop	{r7, pc}
100033e8:	00010001 	.word	0x00010001

100033ec <XMC_CCU4_SLICE_ClearEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent()<BR> XMC_CCU4_SLICE_GetEvent().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
100033ec:	b580      	push	{r7, lr}
100033ee:	b082      	sub	sp, #8
100033f0:	af00      	add	r7, sp, #0
100033f2:	6078      	str	r0, [r7, #4]
100033f4:	1c0a      	adds	r2, r1, #0
100033f6:	1cfb      	adds	r3, r7, #3
100033f8:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->SWR |= ((uint32_t) 1) << ((uint32_t) event);
100033fa:	687b      	ldr	r3, [r7, #4]
100033fc:	22b0      	movs	r2, #176	; 0xb0
100033fe:	589a      	ldr	r2, [r3, r2]
10003400:	1cfb      	adds	r3, r7, #3
10003402:	781b      	ldrb	r3, [r3, #0]
10003404:	2101      	movs	r1, #1
10003406:	4099      	lsls	r1, r3
10003408:	1c0b      	adds	r3, r1, #0
1000340a:	431a      	orrs	r2, r3
1000340c:	687b      	ldr	r3, [r7, #4]
1000340e:	21b0      	movs	r1, #176	; 0xb0
10003410:	505a      	str	r2, [r3, r1]
}
10003412:	46bd      	mov	sp, r7
10003414:	b002      	add	sp, #8
10003416:	bd80      	pop	{r7, pc}

10003418 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
10003418:	b580      	push	{r7, lr}
1000341a:	b082      	sub	sp, #8
1000341c:	af00      	add	r7, sp, #0
1000341e:	6078      	str	r0, [r7, #4]
10003420:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
10003422:	687b      	ldr	r3, [r7, #4]
10003424:	683a      	ldr	r2, [r7, #0]
10003426:	64da      	str	r2, [r3, #76]	; 0x4c
}
10003428:	46bd      	mov	sp, r7
1000342a:	b002      	add	sp, #8
1000342c:	bd80      	pop	{r7, pc}
1000342e:	46c0      	nop			; (mov r8, r8)

10003430 <XMC_ERU_ETL_ClearStatusFlag>:
 * the Flag. SO that next event is considered as new event.
 * \par<b>Related APIs:</b><BR>
 * XMC_ERU_ETL_SetStatusFlag(), XMC_ERU_ETL_GetStatusFlag()
 */
__STATIC_INLINE void XMC_ERU_ETL_ClearStatusFlag(XMC_ERU_t *const eru, const uint8_t channel)
{
10003430:	b580      	push	{r7, lr}
10003432:	b082      	sub	sp, #8
10003434:	af00      	add	r7, sp, #0
10003436:	6078      	str	r0, [r7, #4]
10003438:	1c0a      	adds	r2, r1, #0
1000343a:	1cfb      	adds	r3, r7, #3
1000343c:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_ERU_ETL_ClearStatusFlag:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_ClearStatusFlag:Invalid Channel Number", (channel < 4U));

  eru->EXICON_b[channel].FL = false;
1000343e:	1cfb      	adds	r3, r7, #3
10003440:	781a      	ldrb	r2, [r3, #0]
10003442:	687b      	ldr	r3, [r7, #4]
10003444:	3204      	adds	r2, #4
10003446:	0092      	lsls	r2, r2, #2
10003448:	58d1      	ldr	r1, [r2, r3]
1000344a:	2080      	movs	r0, #128	; 0x80
1000344c:	4381      	bics	r1, r0
1000344e:	50d1      	str	r1, [r2, r3]
}
10003450:	46bd      	mov	sp, r7
10003452:	b002      	add	sp, #8
10003454:	bd80      	pop	{r7, pc}
10003456:	46c0      	nop			; (mov r8, r8)

10003458 <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr, 
                                                                const uint32_t res_reg)
{
10003458:	b580      	push	{r7, lr}
1000345a:	b082      	sub	sp, #8
1000345c:	af00      	add	r7, sp, #0
1000345e:	6078      	str	r0, [r7, #4]
10003460:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
10003462:	687b      	ldr	r3, [r7, #4]
10003464:	683a      	ldr	r2, [r7, #0]
10003466:	32c0      	adds	r2, #192	; 0xc0
10003468:	0092      	lsls	r2, r2, #2
1000346a:	58d3      	ldr	r3, [r2, r3]
1000346c:	b29b      	uxth	r3, r3
}
1000346e:	1c18      	adds	r0, r3, #0
10003470:	46bd      	mov	sp, r7
10003472:	b002      	add	sp, #8
10003474:	bd80      	pop	{r7, pc}
10003476:	46c0      	nop			; (mov r8, r8)

10003478 <XMC_VADC_GROUP_ClearResultEvent>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_ChannelTriggerEvent().
 */
__STATIC_INLINE void XMC_VADC_GROUP_ClearResultEvent(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)
{
10003478:	b580      	push	{r7, lr}
1000347a:	b082      	sub	sp, #8
1000347c:	af00      	add	r7, sp, #0
1000347e:	6078      	str	r0, [r7, #4]
10003480:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_ClearResultEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ClearResultEvent:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
  group_ptr->REFCLR = (uint32_t)((uint32_t)1 << res_reg);
10003482:	683b      	ldr	r3, [r7, #0]
10003484:	2201      	movs	r2, #1
10003486:	409a      	lsls	r2, r3
10003488:	1c11      	adds	r1, r2, #0
1000348a:	687a      	ldr	r2, [r7, #4]
1000348c:	23ca      	movs	r3, #202	; 0xca
1000348e:	005b      	lsls	r3, r3, #1
10003490:	50d1      	str	r1, [r2, r3]
}
10003492:	46bd      	mov	sp, r7
10003494:	b002      	add	sp, #8
10003496:	bd80      	pop	{r7, pc}

10003498 <IRQ25_Handler>:

#include "global_var.h"
#include "interrupt_handler.h"

void rs232_intrpt_handler(void)
{
10003498:	b580      	push	{r7, lr}
1000349a:	b082      	sub	sp, #8
1000349c:	af00      	add	r7, sp, #0
    uint8_t cmd;
    cmd = XMC_UART_CH_GetReceivedData(XMC_USIC0_CH1);
1000349e:	4b2d      	ldr	r3, [pc, #180]	; (10003554 <IRQ25_Handler+0xbc>)
100034a0:	1c18      	adds	r0, r3, #0
100034a2:	f7ff f8bf 	bl	10002624 <XMC_UART_CH_GetReceivedData>
100034a6:	1c03      	adds	r3, r0, #0
100034a8:	1c1a      	adds	r2, r3, #0
100034aa:	1dfb      	adds	r3, r7, #7
100034ac:	701a      	strb	r2, [r3, #0]
    XMC_UART_CH_Transmit(XMC_USIC0_CH1, cmd);
100034ae:	1dfb      	adds	r3, r7, #7
100034b0:	781b      	ldrb	r3, [r3, #0]
100034b2:	b29b      	uxth	r3, r3
100034b4:	4a27      	ldr	r2, [pc, #156]	; (10003554 <IRQ25_Handler+0xbc>)
100034b6:	1c10      	adds	r0, r2, #0
100034b8:	1c19      	adds	r1, r3, #0
100034ba:	f7ff f885 	bl	100025c8 <XMC_UART_CH_Transmit>

    /* if it is not if checking peripheral, this command can't be accessed */
//    if(!isPeriphMode){cmd = ')';}

    switch(cmd)
100034be:	1dfb      	adds	r3, r7, #7
100034c0:	781b      	ldrb	r3, [r3, #0]
100034c2:	3b41      	subs	r3, #65	; 0x41
100034c4:	2b2c      	cmp	r3, #44	; 0x2c
100034c6:	d83a      	bhi.n	1000353e <IRQ25_Handler+0xa6>
100034c8:	009a      	lsls	r2, r3, #2
100034ca:	4b23      	ldr	r3, [pc, #140]	; (10003558 <IRQ25_Handler+0xc0>)
100034cc:	18d3      	adds	r3, r2, r3
100034ce:	681b      	ldr	r3, [r3, #0]
100034d0:	469f      	mov	pc, r3
    {
    	case 'A' : GEENIX_Sel_Mode(GEENIX_SEL_HIGH);
100034d2:	2001      	movs	r0, #1
100034d4:	f003 fdd0 	bl	10007078 <GEENIX_Sel_Mode>
    			   GEENIX_AskData(0x02);
100034d8:	2002      	movs	r0, #2
100034da:	f003 fdeb 	bl	100070b4 <GEENIX_AskData>
    			   GEENIX_Sel_Mode(GEENIX_SEL_LOW);
100034de:	2000      	movs	r0, #0
100034e0:	f003 fdca 	bl	10007078 <GEENIX_Sel_Mode>
    			   XMC_GPIO_ToggleOutput(P2_11);
100034e4:	4b1d      	ldr	r3, [pc, #116]	; (1000355c <IRQ25_Handler+0xc4>)
100034e6:	1c18      	adds	r0, r3, #0
100034e8:	210b      	movs	r1, #11
100034ea:	f7ff ff6d 	bl	100033c8 <XMC_GPIO_ToggleOutput>
    			   break;
100034ee:	e027      	b.n	10003540 <IRQ25_Handler+0xa8>
    	case 'C' : break;
    	case 'c' : break;
    	case 'D' : break;
    	case 'd' : break;
    	case 'E' : break;
    	case 'e' : PDU_Switch_Relay(PDU_RELAY_KBAT, PDU_RELAY_OPEN);
100034f0:	2000      	movs	r0, #0
100034f2:	2100      	movs	r1, #0
100034f4:	f001 f898 	bl	10004628 <PDU_Switch_Relay>
    			   break;
100034f8:	e022      	b.n	10003540 <IRQ25_Handler+0xa8>
    	case 'F' : PDU_Switch_Relay(PDU_RELAY_KMP, PDU_RELAY_CLOSE);
100034fa:	2001      	movs	r0, #1
100034fc:	2101      	movs	r1, #1
100034fe:	f001 f893 	bl	10004628 <PDU_Switch_Relay>
    			   break;
10003502:	e01d      	b.n	10003540 <IRQ25_Handler+0xa8>
    	case 'f' : PDU_Switch_Relay(PDU_RELAY_KMP, PDU_RELAY_OPEN);
10003504:	2001      	movs	r0, #1
10003506:	2100      	movs	r1, #0
10003508:	f001 f88e 	bl	10004628 <PDU_Switch_Relay>
    			   break;
1000350c:	e018      	b.n	10003540 <IRQ25_Handler+0xa8>
    	case 'G' : PDU_Switch_Relay(PDU_RELAY_KMF, PDU_RELAY_CLOSE);
1000350e:	2002      	movs	r0, #2
10003510:	2101      	movs	r1, #1
10003512:	f001 f889 	bl	10004628 <PDU_Switch_Relay>
    			   break;
10003516:	e013      	b.n	10003540 <IRQ25_Handler+0xa8>
    	case 'g' : PDU_Switch_Relay(PDU_RELAY_KMF, PDU_RELAY_OPEN);
10003518:	2002      	movs	r0, #2
1000351a:	2100      	movs	r1, #0
1000351c:	f001 f884 	bl	10004628 <PDU_Switch_Relay>
    			   break;
10003520:	e00e      	b.n	10003540 <IRQ25_Handler+0xa8>
    	case 'H' : PDU_Switch_Relay(PDU_RELAY_KDSG, PDU_RELAY_CLOSE);
10003522:	2003      	movs	r0, #3
10003524:	2101      	movs	r1, #1
10003526:	f001 f87f 	bl	10004628 <PDU_Switch_Relay>
    			   break;
1000352a:	e009      	b.n	10003540 <IRQ25_Handler+0xa8>
    	case 'h' : PDU_Switch_Relay(PDU_RELAY_KDSG, PDU_RELAY_OPEN);
1000352c:	2003      	movs	r0, #3
1000352e:	2100      	movs	r1, #0
10003530:	f001 f87a 	bl	10004628 <PDU_Switch_Relay>
    			   break;
10003534:	e004      	b.n	10003540 <IRQ25_Handler+0xa8>
    	case 'I' : break;
    	case 'J' : genix_send = true;
10003536:	4b0a      	ldr	r3, [pc, #40]	; (10003560 <IRQ25_Handler+0xc8>)
10003538:	2201      	movs	r2, #1
1000353a:	701a      	strb	r2, [r3, #0]
    			   break;
1000353c:	e000      	b.n	10003540 <IRQ25_Handler+0xa8>
    	case 'M' : break;
    	case 'm' : break;
    	default  : break;
1000353e:	46c0      	nop			; (mov r8, r8)
    }

	XMC_UART_CH_ClearStatusFlag(XMC_USIC0_CH1,XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION);
10003540:	4a04      	ldr	r2, [pc, #16]	; (10003554 <IRQ25_Handler+0xbc>)
10003542:	2380      	movs	r3, #128	; 0x80
10003544:	01db      	lsls	r3, r3, #7
10003546:	1c10      	adds	r0, r2, #0
10003548:	1c19      	adds	r1, r3, #0
1000354a:	f7ff ff65 	bl	10003418 <XMC_UART_CH_ClearStatusFlag>
}
1000354e:	46bd      	mov	sp, r7
10003550:	b002      	add	sp, #8
10003552:	bd80      	pop	{r7, pc}
10003554:	48000200 	.word	0x48000200
10003558:	10007da0 	.word	0x10007da0
1000355c:	40040200 	.word	0x40040200
10003560:	20000815 	.word	0x20000815

10003564 <IRQ6_Handler>:

void one_sec_intrpt_handler(void)
{
10003564:	b580      	push	{r7, lr}
10003566:	af00      	add	r7, sp, #0
	rtcDate	= INFO_RTCGetDate();
10003568:	f002 ff4e 	bl	10006408 <INFO_RTCGetDate>
1000356c:	1c03      	adds	r3, r0, #0
1000356e:	1c1a      	adds	r2, r3, #0
10003570:	4b1d      	ldr	r3, [pc, #116]	; (100035e8 <IRQ6_Handler+0x84>)
10003572:	1c11      	adds	r1, r2, #0
10003574:	8019      	strh	r1, [r3, #0]
10003576:	0c12      	lsrs	r2, r2, #16
10003578:	805a      	strh	r2, [r3, #2]
	rtcTime = INFO_RTCGetTime();
1000357a:	f003 f89b 	bl	100066b4 <INFO_RTCGetTime>
1000357e:	1c03      	adds	r3, r0, #0
10003580:	1c1a      	adds	r2, r3, #0
10003582:	4b1a      	ldr	r3, [pc, #104]	; (100035ec <IRQ6_Handler+0x88>)
10003584:	1c11      	adds	r1, r2, #0
10003586:	7019      	strb	r1, [r3, #0]
10003588:	0411      	lsls	r1, r2, #16
1000358a:	0e09      	lsrs	r1, r1, #24
1000358c:	7059      	strb	r1, [r3, #1]
1000358e:	0212      	lsls	r2, r2, #8
10003590:	0e12      	lsrs	r2, r2, #24
10003592:	709a      	strb	r2, [r3, #2]
	esp32DataPack.year  = rtcDate.year + 2000;
10003594:	4b14      	ldr	r3, [pc, #80]	; (100035e8 <IRQ6_Handler+0x84>)
10003596:	881b      	ldrh	r3, [r3, #0]
10003598:	22fa      	movs	r2, #250	; 0xfa
1000359a:	00d2      	lsls	r2, r2, #3
1000359c:	4694      	mov	ip, r2
1000359e:	4463      	add	r3, ip
100035a0:	b299      	uxth	r1, r3
100035a2:	4b13      	ldr	r3, [pc, #76]	; (100035f0 <IRQ6_Handler+0x8c>)
100035a4:	2254      	movs	r2, #84	; 0x54
100035a6:	5299      	strh	r1, [r3, r2]
	esp32DataPack.month = rtcDate.month;
100035a8:	4b0f      	ldr	r3, [pc, #60]	; (100035e8 <IRQ6_Handler+0x84>)
100035aa:	7899      	ldrb	r1, [r3, #2]
100035ac:	4b10      	ldr	r3, [pc, #64]	; (100035f0 <IRQ6_Handler+0x8c>)
100035ae:	2256      	movs	r2, #86	; 0x56
100035b0:	5499      	strb	r1, [r3, r2]
	esp32DataPack.date  = rtcDate.date;
100035b2:	4b0d      	ldr	r3, [pc, #52]	; (100035e8 <IRQ6_Handler+0x84>)
100035b4:	78d9      	ldrb	r1, [r3, #3]
100035b6:	4b0e      	ldr	r3, [pc, #56]	; (100035f0 <IRQ6_Handler+0x8c>)
100035b8:	2257      	movs	r2, #87	; 0x57
100035ba:	5499      	strb	r1, [r3, r2]

	esp32DataPack.hour  	= rtcTime.hour;
100035bc:	4b0b      	ldr	r3, [pc, #44]	; (100035ec <IRQ6_Handler+0x88>)
100035be:	7819      	ldrb	r1, [r3, #0]
100035c0:	4b0b      	ldr	r3, [pc, #44]	; (100035f0 <IRQ6_Handler+0x8c>)
100035c2:	2258      	movs	r2, #88	; 0x58
100035c4:	5499      	strb	r1, [r3, r2]
	esp32DataPack.minutes	= rtcTime.minute;
100035c6:	4b09      	ldr	r3, [pc, #36]	; (100035ec <IRQ6_Handler+0x88>)
100035c8:	7859      	ldrb	r1, [r3, #1]
100035ca:	4b09      	ldr	r3, [pc, #36]	; (100035f0 <IRQ6_Handler+0x8c>)
100035cc:	2259      	movs	r2, #89	; 0x59
100035ce:	5499      	strb	r1, [r3, r2]
	esp32DataPack.seconds  = rtcTime.second;
100035d0:	4b06      	ldr	r3, [pc, #24]	; (100035ec <IRQ6_Handler+0x88>)
100035d2:	7899      	ldrb	r1, [r3, #2]
100035d4:	4b06      	ldr	r3, [pc, #24]	; (100035f0 <IRQ6_Handler+0x8c>)
100035d6:	225a      	movs	r2, #90	; 0x5a
100035d8:	5499      	strb	r1, [r3, r2]

	XMC_ERU_ETL_ClearStatusFlag(ERU1_ETL3);
100035da:	4b06      	ldr	r3, [pc, #24]	; (100035f4 <IRQ6_Handler+0x90>)
100035dc:	1c18      	adds	r0, r3, #0
100035de:	2103      	movs	r1, #3
100035e0:	f7ff ff26 	bl	10003430 <XMC_ERU_ETL_ClearStatusFlag>
}
100035e4:	46bd      	mov	sp, r7
100035e6:	bd80      	pop	{r7, pc}
100035e8:	20000a8c 	.word	0x20000a8c
100035ec:	20000d2c 	.word	0x20000d2c
100035f0:	20000ab8 	.word	0x20000ab8
100035f4:	40010630 	.word	0x40010630

100035f8 <IRQ19_Handler>:

void adc_intrpt_handler(void)
{
100035f8:	b580      	push	{r7, lr}
100035fa:	af00      	add	r7, sp, #0
	XMC_VADC_GROUP_ClearResultEvent(VADC_G1,2); // Clear Result 2 event flag
100035fc:	4b18      	ldr	r3, [pc, #96]	; (10003660 <IRQ19_Handler+0x68>)
100035fe:	1c18      	adds	r0, r3, #0
10003600:	2102      	movs	r1, #2
10003602:	f7ff ff39 	bl	10003478 <XMC_VADC_GROUP_ClearResultEvent>
	pduSensorRaw.rawPVPT = (XMC_VADC_GROUP_GetResult(VADC_G1,0));
10003606:	4b16      	ldr	r3, [pc, #88]	; (10003660 <IRQ19_Handler+0x68>)
10003608:	1c18      	adds	r0, r3, #0
1000360a:	2100      	movs	r1, #0
1000360c:	f7ff ff24 	bl	10003458 <XMC_VADC_GROUP_GetResult>
10003610:	1c03      	adds	r3, r0, #0
10003612:	1c1a      	adds	r2, r3, #0
10003614:	4b13      	ldr	r3, [pc, #76]	; (10003664 <IRQ19_Handler+0x6c>)
10003616:	801a      	strh	r2, [r3, #0]
	pduSensorRaw.rawBTPT = (XMC_VADC_GROUP_GetResult(VADC_G1,1));
10003618:	4b11      	ldr	r3, [pc, #68]	; (10003660 <IRQ19_Handler+0x68>)
1000361a:	1c18      	adds	r0, r3, #0
1000361c:	2101      	movs	r1, #1
1000361e:	f7ff ff1b 	bl	10003458 <XMC_VADC_GROUP_GetResult>
10003622:	1c03      	adds	r3, r0, #0
10003624:	1c1a      	adds	r2, r3, #0
10003626:	4b0f      	ldr	r3, [pc, #60]	; (10003664 <IRQ19_Handler+0x6c>)
10003628:	805a      	strh	r2, [r3, #2]
	pduSensorRaw.rawDCCT = (XMC_VADC_GROUP_GetResult(VADC_G1,2));
1000362a:	4b0d      	ldr	r3, [pc, #52]	; (10003660 <IRQ19_Handler+0x68>)
1000362c:	1c18      	adds	r0, r3, #0
1000362e:	2102      	movs	r1, #2
10003630:	f7ff ff12 	bl	10003458 <XMC_VADC_GROUP_GetResult>
10003634:	1c03      	adds	r3, r0, #0
10003636:	1c1a      	adds	r2, r3, #0
10003638:	4b0a      	ldr	r3, [pc, #40]	; (10003664 <IRQ19_Handler+0x6c>)
1000363a:	80da      	strh	r2, [r3, #6]
	pduSensorRaw.rawHVPT = (XMC_VADC_GROUP_GetResult(VADC_G1,3));
1000363c:	4b08      	ldr	r3, [pc, #32]	; (10003660 <IRQ19_Handler+0x68>)
1000363e:	1c18      	adds	r0, r3, #0
10003640:	2103      	movs	r1, #3
10003642:	f7ff ff09 	bl	10003458 <XMC_VADC_GROUP_GetResult>
10003646:	1c03      	adds	r3, r0, #0
10003648:	1c1a      	adds	r2, r3, #0
1000364a:	4b06      	ldr	r3, [pc, #24]	; (10003664 <IRQ19_Handler+0x6c>)
1000364c:	809a      	strh	r2, [r3, #4]

	/* Do moving Average Filter */
	MF_MovingAverage(&pduSensorAvg, &pduSensorRaw);
1000364e:	4a06      	ldr	r2, [pc, #24]	; (10003668 <IRQ19_Handler+0x70>)
10003650:	4b04      	ldr	r3, [pc, #16]	; (10003664 <IRQ19_Handler+0x6c>)
10003652:	1c10      	adds	r0, r2, #0
10003654:	1c19      	adds	r1, r3, #0
10003656:	f002 f889 	bl	1000576c <MF_MovingAverage>
}
1000365a:	46bd      	mov	sp, r7
1000365c:	bd80      	pop	{r7, pc}
1000365e:	46c0      	nop			; (mov r8, r8)
10003660:	48030800 	.word	0x48030800
10003664:	20000aac 	.word	0x20000aac
10003668:	20000b18 	.word	0x20000b18

1000366c <IRQ7_Handler>:

void pcsCAN_intrpt_handler(void)
{
1000366c:	b590      	push	{r4, r7, lr}
1000366e:	b083      	sub	sp, #12
10003670:	af00      	add	r7, sp, #0
	// takes 30 us
	XMC_CAN_MO_Receive(&msgObjFromPCS);
10003672:	4bcc      	ldr	r3, [pc, #816]	; (100039a4 <IRQ7_Handler+0x338>)
10003674:	1c18      	adds	r0, r3, #0
10003676:	f7fe fa8b 	bl	10001b90 <XMC_CAN_MO_Receive>

	switch(msgObjFromPCS.can_identifier)
1000367a:	4bca      	ldr	r3, [pc, #808]	; (100039a4 <IRQ7_Handler+0x338>)
1000367c:	685b      	ldr	r3, [r3, #4]
1000367e:	00db      	lsls	r3, r3, #3
10003680:	08db      	lsrs	r3, r3, #3
10003682:	4ac9      	ldr	r2, [pc, #804]	; (100039a8 <IRQ7_Handler+0x33c>)
10003684:	4694      	mov	ip, r2
10003686:	4463      	add	r3, ip
10003688:	2b08      	cmp	r3, #8
1000368a:	d900      	bls.n	1000368e <IRQ7_Handler+0x22>
1000368c:	e17f      	b.n	1000398e <IRQ7_Handler+0x322>
1000368e:	009a      	lsls	r2, r3, #2
10003690:	4bc6      	ldr	r3, [pc, #792]	; (100039ac <IRQ7_Handler+0x340>)
10003692:	18d3      	adds	r3, r2, r3
10003694:	681b      	ldr	r3, [r3, #0]
10003696:	469f      	mov	pc, r3
	{
		case 0x200 : // PCS System Properties
			pcsSystemStatus = PCS_GetPCSStatus(&msgObjFromPCS);
10003698:	4cc5      	ldr	r4, [pc, #788]	; (100039b0 <IRQ7_Handler+0x344>)
1000369a:	1c3a      	adds	r2, r7, #0
1000369c:	4bc1      	ldr	r3, [pc, #772]	; (100039a4 <IRQ7_Handler+0x338>)
1000369e:	1c10      	adds	r0, r2, #0
100036a0:	1c19      	adds	r1, r3, #0
100036a2:	f001 fa37 	bl	10004b14 <PCS_GetPCSStatus>
100036a6:	1c3b      	adds	r3, r7, #0
100036a8:	1c21      	adds	r1, r4, #0
100036aa:	1c1a      	adds	r2, r3, #0
100036ac:	2305      	movs	r3, #5
100036ae:	1c08      	adds	r0, r1, #0
100036b0:	1c11      	adds	r1, r2, #0
100036b2:	1c1a      	adds	r2, r3, #0
100036b4:	f004 fb52 	bl	10007d5c <memcpy>

			btData.bt_pcs_version 	= 0;
100036b8:	4bbe      	ldr	r3, [pc, #760]	; (100039b4 <IRQ7_Handler+0x348>)
100036ba:	2200      	movs	r2, #0
100036bc:	801a      	strh	r2, [r3, #0]
			temporaryStatus			= pcsSystemStatus.pcs_system_status;
100036be:	4bbc      	ldr	r3, [pc, #752]	; (100039b0 <IRQ7_Handler+0x344>)
100036c0:	781a      	ldrb	r2, [r3, #0]
100036c2:	4bbd      	ldr	r3, [pc, #756]	; (100039b8 <IRQ7_Handler+0x34c>)
100036c4:	701a      	strb	r2, [r3, #0]
			temporaryStatus			= (temporaryStatus << 2) | pcsSystemStatus.pcs_system_warning;
100036c6:	4bbc      	ldr	r3, [pc, #752]	; (100039b8 <IRQ7_Handler+0x34c>)
100036c8:	781b      	ldrb	r3, [r3, #0]
100036ca:	009b      	lsls	r3, r3, #2
100036cc:	b2da      	uxtb	r2, r3
100036ce:	4bb8      	ldr	r3, [pc, #736]	; (100039b0 <IRQ7_Handler+0x344>)
100036d0:	789b      	ldrb	r3, [r3, #2]
100036d2:	b2db      	uxtb	r3, r3
100036d4:	4313      	orrs	r3, r2
100036d6:	b2db      	uxtb	r3, r3
100036d8:	b2da      	uxtb	r2, r3
100036da:	4bb7      	ldr	r3, [pc, #732]	; (100039b8 <IRQ7_Handler+0x34c>)
100036dc:	701a      	strb	r2, [r3, #0]
			temporaryStatus			= (temporaryStatus << 3) | pcsSystemStatus.pcs_system_fault;
100036de:	4bb6      	ldr	r3, [pc, #728]	; (100039b8 <IRQ7_Handler+0x34c>)
100036e0:	781b      	ldrb	r3, [r3, #0]
100036e2:	00db      	lsls	r3, r3, #3
100036e4:	b2da      	uxtb	r2, r3
100036e6:	4bb2      	ldr	r3, [pc, #712]	; (100039b0 <IRQ7_Handler+0x344>)
100036e8:	78db      	ldrb	r3, [r3, #3]
100036ea:	b2db      	uxtb	r3, r3
100036ec:	4313      	orrs	r3, r2
100036ee:	b2db      	uxtb	r3, r3
100036f0:	b2da      	uxtb	r2, r3
100036f2:	4bb1      	ldr	r3, [pc, #708]	; (100039b8 <IRQ7_Handler+0x34c>)
100036f4:	701a      	strb	r2, [r3, #0]
			btData.bt_pcs_status	= temporaryStatus;
100036f6:	4bb0      	ldr	r3, [pc, #704]	; (100039b8 <IRQ7_Handler+0x34c>)
100036f8:	781a      	ldrb	r2, [r3, #0]
100036fa:	4bae      	ldr	r3, [pc, #696]	; (100039b4 <IRQ7_Handler+0x348>)
100036fc:	711a      	strb	r2, [r3, #4]
			break;
100036fe:	e147      	b.n	10003990 <IRQ7_Handler+0x324>

		case 0x201 : // DC Grid Converter Properties
			pcsDCgridStatus = PCS_GetDCGridStatus(&msgObjFromPCS);
10003700:	4ba8      	ldr	r3, [pc, #672]	; (100039a4 <IRQ7_Handler+0x338>)
10003702:	1c18      	adds	r0, r3, #0
10003704:	f001 fac0 	bl	10004c88 <PCS_GetDCGridStatus>
10003708:	1c03      	adds	r3, r0, #0
1000370a:	1c1a      	adds	r2, r3, #0
1000370c:	4bab      	ldr	r3, [pc, #684]	; (100039bc <IRQ7_Handler+0x350>)
1000370e:	1c11      	adds	r1, r2, #0
10003710:	7019      	strb	r1, [r3, #0]
10003712:	0411      	lsls	r1, r2, #16
10003714:	0e09      	lsrs	r1, r1, #24
10003716:	7059      	strb	r1, [r3, #1]
10003718:	0211      	lsls	r1, r2, #8
1000371a:	0e09      	lsrs	r1, r1, #24
1000371c:	7099      	strb	r1, [r3, #2]
1000371e:	0e12      	lsrs	r2, r2, #24
10003720:	70da      	strb	r2, [r3, #3]

			temporaryStatus = pcsDCgridStatus.dcgrid_system_status;
10003722:	4ba6      	ldr	r3, [pc, #664]	; (100039bc <IRQ7_Handler+0x350>)
10003724:	781a      	ldrb	r2, [r3, #0]
10003726:	4ba4      	ldr	r3, [pc, #656]	; (100039b8 <IRQ7_Handler+0x34c>)
10003728:	701a      	strb	r2, [r3, #0]
			temporaryStatus = (temporaryStatus << 2) | pcsDCgridStatus.dcgrid_system_warning;
1000372a:	4ba3      	ldr	r3, [pc, #652]	; (100039b8 <IRQ7_Handler+0x34c>)
1000372c:	781b      	ldrb	r3, [r3, #0]
1000372e:	009b      	lsls	r3, r3, #2
10003730:	b2da      	uxtb	r2, r3
10003732:	4ba2      	ldr	r3, [pc, #648]	; (100039bc <IRQ7_Handler+0x350>)
10003734:	785b      	ldrb	r3, [r3, #1]
10003736:	b2db      	uxtb	r3, r3
10003738:	4313      	orrs	r3, r2
1000373a:	b2db      	uxtb	r3, r3
1000373c:	b2da      	uxtb	r2, r3
1000373e:	4b9e      	ldr	r3, [pc, #632]	; (100039b8 <IRQ7_Handler+0x34c>)
10003740:	701a      	strb	r2, [r3, #0]
			temporaryStatus = (temporaryStatus << 3) | pcsDCgridStatus.dcgrid_system_fault;
10003742:	4b9d      	ldr	r3, [pc, #628]	; (100039b8 <IRQ7_Handler+0x34c>)
10003744:	781b      	ldrb	r3, [r3, #0]
10003746:	00db      	lsls	r3, r3, #3
10003748:	b2da      	uxtb	r2, r3
1000374a:	4b9c      	ldr	r3, [pc, #624]	; (100039bc <IRQ7_Handler+0x350>)
1000374c:	789b      	ldrb	r3, [r3, #2]
1000374e:	b2db      	uxtb	r3, r3
10003750:	4313      	orrs	r3, r2
10003752:	b2db      	uxtb	r3, r3
10003754:	b2da      	uxtb	r2, r3
10003756:	4b98      	ldr	r3, [pc, #608]	; (100039b8 <IRQ7_Handler+0x34c>)
10003758:	701a      	strb	r2, [r3, #0]
			btData.bt_grid_status	= temporaryStatus;
1000375a:	4b97      	ldr	r3, [pc, #604]	; (100039b8 <IRQ7_Handler+0x34c>)
1000375c:	7819      	ldrb	r1, [r3, #0]
1000375e:	4b95      	ldr	r3, [pc, #596]	; (100039b4 <IRQ7_Handler+0x348>)
10003760:	2220      	movs	r2, #32
10003762:	5499      	strb	r1, [r3, r2]
			break;
10003764:	e114      	b.n	10003990 <IRQ7_Handler+0x324>

		case 0x202 : // AC Inverter Properties
			pcsACinvStatus = PCS_GetACInvStatus(&msgObjFromPCS);
10003766:	4b8f      	ldr	r3, [pc, #572]	; (100039a4 <IRQ7_Handler+0x338>)
10003768:	1c18      	adds	r0, r3, #0
1000376a:	f001 fb19 	bl	10004da0 <PCS_GetACInvStatus>
1000376e:	1c03      	adds	r3, r0, #0
10003770:	1c1a      	adds	r2, r3, #0
10003772:	4b93      	ldr	r3, [pc, #588]	; (100039c0 <IRQ7_Handler+0x354>)
10003774:	1c11      	adds	r1, r2, #0
10003776:	7019      	strb	r1, [r3, #0]
10003778:	0411      	lsls	r1, r2, #16
1000377a:	0e09      	lsrs	r1, r1, #24
1000377c:	7059      	strb	r1, [r3, #1]
1000377e:	0211      	lsls	r1, r2, #8
10003780:	0e09      	lsrs	r1, r1, #24
10003782:	7099      	strb	r1, [r3, #2]
10003784:	0e12      	lsrs	r2, r2, #24
10003786:	70da      	strb	r2, [r3, #3]

			temporaryStatus = pcsACinvStatus.acinv_system_status;
10003788:	4b8d      	ldr	r3, [pc, #564]	; (100039c0 <IRQ7_Handler+0x354>)
1000378a:	781a      	ldrb	r2, [r3, #0]
1000378c:	4b8a      	ldr	r3, [pc, #552]	; (100039b8 <IRQ7_Handler+0x34c>)
1000378e:	701a      	strb	r2, [r3, #0]
			temporaryStatus = (temporaryStatus << 2) | pcsACinvStatus.acinv_system_warning;
10003790:	4b89      	ldr	r3, [pc, #548]	; (100039b8 <IRQ7_Handler+0x34c>)
10003792:	781b      	ldrb	r3, [r3, #0]
10003794:	009b      	lsls	r3, r3, #2
10003796:	b2da      	uxtb	r2, r3
10003798:	4b89      	ldr	r3, [pc, #548]	; (100039c0 <IRQ7_Handler+0x354>)
1000379a:	785b      	ldrb	r3, [r3, #1]
1000379c:	b2db      	uxtb	r3, r3
1000379e:	4313      	orrs	r3, r2
100037a0:	b2db      	uxtb	r3, r3
100037a2:	b2da      	uxtb	r2, r3
100037a4:	4b84      	ldr	r3, [pc, #528]	; (100039b8 <IRQ7_Handler+0x34c>)
100037a6:	701a      	strb	r2, [r3, #0]
			temporaryStatus = (temporaryStatus << 3) | pcsACinvStatus.acinv_system_fault;
100037a8:	4b83      	ldr	r3, [pc, #524]	; (100039b8 <IRQ7_Handler+0x34c>)
100037aa:	781b      	ldrb	r3, [r3, #0]
100037ac:	00db      	lsls	r3, r3, #3
100037ae:	b2da      	uxtb	r2, r3
100037b0:	4b83      	ldr	r3, [pc, #524]	; (100039c0 <IRQ7_Handler+0x354>)
100037b2:	789b      	ldrb	r3, [r3, #2]
100037b4:	b2db      	uxtb	r3, r3
100037b6:	4313      	orrs	r3, r2
100037b8:	b2db      	uxtb	r3, r3
100037ba:	b2da      	uxtb	r2, r3
100037bc:	4b7e      	ldr	r3, [pc, #504]	; (100039b8 <IRQ7_Handler+0x34c>)
100037be:	701a      	strb	r2, [r3, #0]
			btData.bt_inv_status	= temporaryStatus;
100037c0:	4b7d      	ldr	r3, [pc, #500]	; (100039b8 <IRQ7_Handler+0x34c>)
100037c2:	7819      	ldrb	r1, [r3, #0]
100037c4:	4b7b      	ldr	r3, [pc, #492]	; (100039b4 <IRQ7_Handler+0x348>)
100037c6:	2221      	movs	r2, #33	; 0x21
100037c8:	5499      	strb	r1, [r3, r2]
			break;
100037ca:	e0e1      	b.n	10003990 <IRQ7_Handler+0x324>

		case 0x203 : // PV Converter Properties
			pcsPVconvStatus = PCS_GetPVConvStatus(&msgObjFromPCS);
100037cc:	4b75      	ldr	r3, [pc, #468]	; (100039a4 <IRQ7_Handler+0x338>)
100037ce:	1c18      	adds	r0, r3, #0
100037d0:	f001 fb90 	bl	10004ef4 <PCS_GetPVConvStatus>
100037d4:	1c03      	adds	r3, r0, #0
100037d6:	1c1a      	adds	r2, r3, #0
100037d8:	4b7a      	ldr	r3, [pc, #488]	; (100039c4 <IRQ7_Handler+0x358>)
100037da:	1c11      	adds	r1, r2, #0
100037dc:	7019      	strb	r1, [r3, #0]
100037de:	0411      	lsls	r1, r2, #16
100037e0:	0e09      	lsrs	r1, r1, #24
100037e2:	7059      	strb	r1, [r3, #1]
100037e4:	0211      	lsls	r1, r2, #8
100037e6:	0e09      	lsrs	r1, r1, #24
100037e8:	7099      	strb	r1, [r3, #2]
100037ea:	0e12      	lsrs	r2, r2, #24
100037ec:	70da      	strb	r2, [r3, #3]

			temporaryStatus = pcsPVconvStatus.pvconv_system_status;
100037ee:	4b75      	ldr	r3, [pc, #468]	; (100039c4 <IRQ7_Handler+0x358>)
100037f0:	781a      	ldrb	r2, [r3, #0]
100037f2:	4b71      	ldr	r3, [pc, #452]	; (100039b8 <IRQ7_Handler+0x34c>)
100037f4:	701a      	strb	r2, [r3, #0]
			temporaryStatus = (temporaryStatus << 2) | pcsPVconvStatus.pvconv_system_warning;
100037f6:	4b70      	ldr	r3, [pc, #448]	; (100039b8 <IRQ7_Handler+0x34c>)
100037f8:	781b      	ldrb	r3, [r3, #0]
100037fa:	009b      	lsls	r3, r3, #2
100037fc:	b2da      	uxtb	r2, r3
100037fe:	4b71      	ldr	r3, [pc, #452]	; (100039c4 <IRQ7_Handler+0x358>)
10003800:	785b      	ldrb	r3, [r3, #1]
10003802:	b2db      	uxtb	r3, r3
10003804:	4313      	orrs	r3, r2
10003806:	b2db      	uxtb	r3, r3
10003808:	b2da      	uxtb	r2, r3
1000380a:	4b6b      	ldr	r3, [pc, #428]	; (100039b8 <IRQ7_Handler+0x34c>)
1000380c:	701a      	strb	r2, [r3, #0]
			temporaryStatus = (temporaryStatus << 3) | pcsPVconvStatus.pvconv_system_fault;
1000380e:	4b6a      	ldr	r3, [pc, #424]	; (100039b8 <IRQ7_Handler+0x34c>)
10003810:	781b      	ldrb	r3, [r3, #0]
10003812:	00db      	lsls	r3, r3, #3
10003814:	b2da      	uxtb	r2, r3
10003816:	4b6b      	ldr	r3, [pc, #428]	; (100039c4 <IRQ7_Handler+0x358>)
10003818:	789b      	ldrb	r3, [r3, #2]
1000381a:	b2db      	uxtb	r3, r3
1000381c:	4313      	orrs	r3, r2
1000381e:	b2db      	uxtb	r3, r3
10003820:	b2da      	uxtb	r2, r3
10003822:	4b65      	ldr	r3, [pc, #404]	; (100039b8 <IRQ7_Handler+0x34c>)
10003824:	701a      	strb	r2, [r3, #0]
			btData.bt_pv_status	= temporaryStatus;
10003826:	4b64      	ldr	r3, [pc, #400]	; (100039b8 <IRQ7_Handler+0x34c>)
10003828:	7819      	ldrb	r1, [r3, #0]
1000382a:	4b62      	ldr	r3, [pc, #392]	; (100039b4 <IRQ7_Handler+0x348>)
1000382c:	2222      	movs	r2, #34	; 0x22
1000382e:	5499      	strb	r1, [r3, r2]
			break;
10003830:	e0ae      	b.n	10003990 <IRQ7_Handler+0x324>

		case 0x204 : // Battery Converter Properties
			pcsBatconvStatus = PCS_GetBatConvStatus(&msgObjFromPCS);
10003832:	4b5c      	ldr	r3, [pc, #368]	; (100039a4 <IRQ7_Handler+0x338>)
10003834:	1c18      	adds	r0, r3, #0
10003836:	f001 fbcf 	bl	10004fd8 <PCS_GetBatConvStatus>
1000383a:	1c03      	adds	r3, r0, #0
1000383c:	1c1a      	adds	r2, r3, #0
1000383e:	4b62      	ldr	r3, [pc, #392]	; (100039c8 <IRQ7_Handler+0x35c>)
10003840:	1c11      	adds	r1, r2, #0
10003842:	7019      	strb	r1, [r3, #0]
10003844:	0411      	lsls	r1, r2, #16
10003846:	0e09      	lsrs	r1, r1, #24
10003848:	7059      	strb	r1, [r3, #1]
1000384a:	0211      	lsls	r1, r2, #8
1000384c:	0e09      	lsrs	r1, r1, #24
1000384e:	7099      	strb	r1, [r3, #2]
10003850:	0e12      	lsrs	r2, r2, #24
10003852:	70da      	strb	r2, [r3, #3]

			temporaryStatus = pcsBatconvStatus.batconv_system_status;
10003854:	4b5c      	ldr	r3, [pc, #368]	; (100039c8 <IRQ7_Handler+0x35c>)
10003856:	781a      	ldrb	r2, [r3, #0]
10003858:	4b57      	ldr	r3, [pc, #348]	; (100039b8 <IRQ7_Handler+0x34c>)
1000385a:	701a      	strb	r2, [r3, #0]
			temporaryStatus = (temporaryStatus << 2) | pcsBatconvStatus.batconv_system_warning;
1000385c:	4b56      	ldr	r3, [pc, #344]	; (100039b8 <IRQ7_Handler+0x34c>)
1000385e:	781b      	ldrb	r3, [r3, #0]
10003860:	009b      	lsls	r3, r3, #2
10003862:	b2da      	uxtb	r2, r3
10003864:	4b58      	ldr	r3, [pc, #352]	; (100039c8 <IRQ7_Handler+0x35c>)
10003866:	785b      	ldrb	r3, [r3, #1]
10003868:	b2db      	uxtb	r3, r3
1000386a:	4313      	orrs	r3, r2
1000386c:	b2db      	uxtb	r3, r3
1000386e:	b2da      	uxtb	r2, r3
10003870:	4b51      	ldr	r3, [pc, #324]	; (100039b8 <IRQ7_Handler+0x34c>)
10003872:	701a      	strb	r2, [r3, #0]
			temporaryStatus = (temporaryStatus << 3) | pcsBatconvStatus.batconv_system_fault;
10003874:	4b50      	ldr	r3, [pc, #320]	; (100039b8 <IRQ7_Handler+0x34c>)
10003876:	781b      	ldrb	r3, [r3, #0]
10003878:	00db      	lsls	r3, r3, #3
1000387a:	b2da      	uxtb	r2, r3
1000387c:	4b52      	ldr	r3, [pc, #328]	; (100039c8 <IRQ7_Handler+0x35c>)
1000387e:	789b      	ldrb	r3, [r3, #2]
10003880:	b2db      	uxtb	r3, r3
10003882:	4313      	orrs	r3, r2
10003884:	b2db      	uxtb	r3, r3
10003886:	b2da      	uxtb	r2, r3
10003888:	4b4b      	ldr	r3, [pc, #300]	; (100039b8 <IRQ7_Handler+0x34c>)
1000388a:	701a      	strb	r2, [r3, #0]
			btData.bt_batt_status	= temporaryStatus;
1000388c:	4b4a      	ldr	r3, [pc, #296]	; (100039b8 <IRQ7_Handler+0x34c>)
1000388e:	7819      	ldrb	r1, [r3, #0]
10003890:	4b48      	ldr	r3, [pc, #288]	; (100039b4 <IRQ7_Handler+0x348>)
10003892:	2223      	movs	r2, #35	; 0x23
10003894:	5499      	strb	r1, [r3, r2]
			break;
10003896:	e07b      	b.n	10003990 <IRQ7_Handler+0x324>

		case 0x205 : // Voltage Properties
			pcsVoltages = PCS_GetVoltParam(&msgObjFromPCS);
10003898:	4c4c      	ldr	r4, [pc, #304]	; (100039cc <IRQ7_Handler+0x360>)
1000389a:	1c3a      	adds	r2, r7, #0
1000389c:	4b41      	ldr	r3, [pc, #260]	; (100039a4 <IRQ7_Handler+0x338>)
1000389e:	1c10      	adds	r0, r2, #0
100038a0:	1c19      	adds	r1, r3, #0
100038a2:	f001 fc35 	bl	10005110 <PCS_GetVoltParam>
100038a6:	1c3b      	adds	r3, r7, #0
100038a8:	1c21      	adds	r1, r4, #0
100038aa:	1c1a      	adds	r2, r3, #0
100038ac:	2308      	movs	r3, #8
100038ae:	1c08      	adds	r0, r1, #0
100038b0:	1c11      	adds	r1, r2, #0
100038b2:	1c1a      	adds	r2, r3, #0
100038b4:	f004 fa52 	bl	10007d5c <memcpy>

			btData.bt_voltage_batt	 = pcsVoltages.vbat;
100038b8:	4b44      	ldr	r3, [pc, #272]	; (100039cc <IRQ7_Handler+0x360>)
100038ba:	88da      	ldrh	r2, [r3, #6]
100038bc:	4b3d      	ldr	r3, [pc, #244]	; (100039b4 <IRQ7_Handler+0x348>)
100038be:	80da      	strh	r2, [r3, #6]
			btData.bt_voltage_pv	 = pcsVoltages.vPV;
100038c0:	4b42      	ldr	r3, [pc, #264]	; (100039cc <IRQ7_Handler+0x360>)
100038c2:	889a      	ldrh	r2, [r3, #4]
100038c4:	4b3b      	ldr	r3, [pc, #236]	; (100039b4 <IRQ7_Handler+0x348>)
100038c6:	811a      	strh	r2, [r3, #8]
			btData.bt_voltage_grid	 = pcsVoltages.vdcGrid;
100038c8:	4b40      	ldr	r3, [pc, #256]	; (100039cc <IRQ7_Handler+0x360>)
100038ca:	881a      	ldrh	r2, [r3, #0]
100038cc:	4b39      	ldr	r3, [pc, #228]	; (100039b4 <IRQ7_Handler+0x348>)
100038ce:	815a      	strh	r2, [r3, #10]
			btData.bt_voltage_inv	 = pcsVoltages.vacOut;
100038d0:	4b3e      	ldr	r3, [pc, #248]	; (100039cc <IRQ7_Handler+0x360>)
100038d2:	885a      	ldrh	r2, [r3, #2]
100038d4:	4b37      	ldr	r3, [pc, #220]	; (100039b4 <IRQ7_Handler+0x348>)
100038d6:	819a      	strh	r2, [r3, #12]
			break;
100038d8:	e05a      	b.n	10003990 <IRQ7_Handler+0x324>

		case 0x206 : // Current Properties
			pcsCurrents = PCS_GetAmpParam(&msgObjFromPCS);
100038da:	4c3d      	ldr	r4, [pc, #244]	; (100039d0 <IRQ7_Handler+0x364>)
100038dc:	1c3a      	adds	r2, r7, #0
100038de:	4b31      	ldr	r3, [pc, #196]	; (100039a4 <IRQ7_Handler+0x338>)
100038e0:	1c10      	adds	r0, r2, #0
100038e2:	1c19      	adds	r1, r3, #0
100038e4:	f001 fc5c 	bl	100051a0 <PCS_GetAmpParam>
100038e8:	1c3b      	adds	r3, r7, #0
100038ea:	1c21      	adds	r1, r4, #0
100038ec:	1c1a      	adds	r2, r3, #0
100038ee:	2308      	movs	r3, #8
100038f0:	1c08      	adds	r0, r1, #0
100038f2:	1c11      	adds	r1, r2, #0
100038f4:	1c1a      	adds	r2, r3, #0
100038f6:	f004 fa31 	bl	10007d5c <memcpy>

			btData.bt_current_batt	 = pcsCurrents.ibat;
100038fa:	4b35      	ldr	r3, [pc, #212]	; (100039d0 <IRQ7_Handler+0x364>)
100038fc:	88db      	ldrh	r3, [r3, #6]
100038fe:	b29a      	uxth	r2, r3
10003900:	4b2c      	ldr	r3, [pc, #176]	; (100039b4 <IRQ7_Handler+0x348>)
10003902:	81da      	strh	r2, [r3, #14]
			btData.bt_current_pv	 = pcsCurrents.iPV;
10003904:	4b32      	ldr	r3, [pc, #200]	; (100039d0 <IRQ7_Handler+0x364>)
10003906:	889b      	ldrh	r3, [r3, #4]
10003908:	b29a      	uxth	r2, r3
1000390a:	4b2a      	ldr	r3, [pc, #168]	; (100039b4 <IRQ7_Handler+0x348>)
1000390c:	821a      	strh	r2, [r3, #16]
			btData.bt_current_grid	 = pcsCurrents.idcGrid;
1000390e:	4b30      	ldr	r3, [pc, #192]	; (100039d0 <IRQ7_Handler+0x364>)
10003910:	881b      	ldrh	r3, [r3, #0]
10003912:	b29a      	uxth	r2, r3
10003914:	4b27      	ldr	r3, [pc, #156]	; (100039b4 <IRQ7_Handler+0x348>)
10003916:	825a      	strh	r2, [r3, #18]
			btData.bt_current_inv	 = pcsCurrents.iacOut;
10003918:	4b2d      	ldr	r3, [pc, #180]	; (100039d0 <IRQ7_Handler+0x364>)
1000391a:	885b      	ldrh	r3, [r3, #2]
1000391c:	b29a      	uxth	r2, r3
1000391e:	4b25      	ldr	r3, [pc, #148]	; (100039b4 <IRQ7_Handler+0x348>)
10003920:	829a      	strh	r2, [r3, #20]
			break;
10003922:	e035      	b.n	10003990 <IRQ7_Handler+0x324>

		case 0x207 : // Power Properties
			pcsPowers = PCS_GetPowerParam(&msgObjFromPCS);
10003924:	4c2b      	ldr	r4, [pc, #172]	; (100039d4 <IRQ7_Handler+0x368>)
10003926:	1c3a      	adds	r2, r7, #0
10003928:	4b1e      	ldr	r3, [pc, #120]	; (100039a4 <IRQ7_Handler+0x338>)
1000392a:	1c10      	adds	r0, r2, #0
1000392c:	1c19      	adds	r1, r3, #0
1000392e:	f001 fc7b 	bl	10005228 <PCS_GetPowerParam>
10003932:	1c3b      	adds	r3, r7, #0
10003934:	1c21      	adds	r1, r4, #0
10003936:	1c1a      	adds	r2, r3, #0
10003938:	2308      	movs	r3, #8
1000393a:	1c08      	adds	r0, r1, #0
1000393c:	1c11      	adds	r1, r2, #0
1000393e:	1c1a      	adds	r2, r3, #0
10003940:	f004 fa0c 	bl	10007d5c <memcpy>

			btData.bt_power_batt	 = pcsPowers.pbat;
10003944:	4b23      	ldr	r3, [pc, #140]	; (100039d4 <IRQ7_Handler+0x368>)
10003946:	88da      	ldrh	r2, [r3, #6]
10003948:	4b1a      	ldr	r3, [pc, #104]	; (100039b4 <IRQ7_Handler+0x348>)
1000394a:	82da      	strh	r2, [r3, #22]
			btData.bt_power_pv		 = pcsPowers.pPV;
1000394c:	4b21      	ldr	r3, [pc, #132]	; (100039d4 <IRQ7_Handler+0x368>)
1000394e:	889a      	ldrh	r2, [r3, #4]
10003950:	4b18      	ldr	r3, [pc, #96]	; (100039b4 <IRQ7_Handler+0x348>)
10003952:	831a      	strh	r2, [r3, #24]
			btData.bt_power_grid	 = pcsPowers.pdcGrid;
10003954:	4b1f      	ldr	r3, [pc, #124]	; (100039d4 <IRQ7_Handler+0x368>)
10003956:	881a      	ldrh	r2, [r3, #0]
10003958:	4b16      	ldr	r3, [pc, #88]	; (100039b4 <IRQ7_Handler+0x348>)
1000395a:	835a      	strh	r2, [r3, #26]
			btData.bt_power_inv		 = pcsPowers.pacOut;
1000395c:	4b1d      	ldr	r3, [pc, #116]	; (100039d4 <IRQ7_Handler+0x368>)
1000395e:	885a      	ldrh	r2, [r3, #2]
10003960:	4b14      	ldr	r3, [pc, #80]	; (100039b4 <IRQ7_Handler+0x348>)
10003962:	839a      	strh	r2, [r3, #28]
			break;
10003964:	e014      	b.n	10003990 <IRQ7_Handler+0x324>

		case 0x208 : // Frequency and Temperature Properties
			pcsMiscs = PCS_GetMiscParam(&msgObjFromPCS);
10003966:	4b0f      	ldr	r3, [pc, #60]	; (100039a4 <IRQ7_Handler+0x338>)
10003968:	1c18      	adds	r0, r3, #0
1000396a:	f001 fca5 	bl	100052b8 <PCS_GetMiscParam>
1000396e:	1c03      	adds	r3, r0, #0
10003970:	1c1a      	adds	r2, r3, #0
10003972:	4b19      	ldr	r3, [pc, #100]	; (100039d8 <IRQ7_Handler+0x36c>)
10003974:	1c11      	adds	r1, r2, #0
10003976:	8019      	strh	r1, [r3, #0]
10003978:	0c12      	lsrs	r2, r2, #16
1000397a:	805a      	strh	r2, [r3, #2]

			btData.bt_inv_frequency = pcsMiscs.frequency;
1000397c:	4b16      	ldr	r3, [pc, #88]	; (100039d8 <IRQ7_Handler+0x36c>)
1000397e:	885a      	ldrh	r2, [r3, #2]
10003980:	4b0c      	ldr	r3, [pc, #48]	; (100039b4 <IRQ7_Handler+0x348>)
10003982:	83da      	strh	r2, [r3, #30]
			btData.bt_pcs_temp		= pcsMiscs.tempPCS;
10003984:	4b14      	ldr	r3, [pc, #80]	; (100039d8 <IRQ7_Handler+0x36c>)
10003986:	881a      	ldrh	r2, [r3, #0]
10003988:	4b0a      	ldr	r3, [pc, #40]	; (100039b4 <IRQ7_Handler+0x348>)
1000398a:	805a      	strh	r2, [r3, #2]
			break;
1000398c:	e000      	b.n	10003990 <IRQ7_Handler+0x324>

		default    : // others
			break;
1000398e:	46c0      	nop			; (mov r8, r8)
	}

	flag_pcs = true;
10003990:	4b12      	ldr	r3, [pc, #72]	; (100039dc <IRQ7_Handler+0x370>)
10003992:	2201      	movs	r2, #1
10003994:	701a      	strb	r2, [r3, #0]
	NVIC_ClearPendingIRQ(IRQ7_IRQn);
10003996:	2007      	movs	r0, #7
10003998:	f7ff fcec 	bl	10003374 <__NVIC_ClearPendingIRQ>
}
1000399c:	46bd      	mov	sp, r7
1000399e:	b003      	add	sp, #12
100039a0:	bd90      	pop	{r4, r7, pc}
100039a2:	46c0      	nop			; (mov r8, r8)
100039a4:	20000658 	.word	0x20000658
100039a8:	fffffe00 	.word	0xfffffe00
100039ac:	10007e54 	.word	0x10007e54
100039b0:	20000d80 	.word	0x20000d80
100039b4:	20000d54 	.word	0x20000d54
100039b8:	20000a75 	.word	0x20000a75
100039bc:	20000d30 	.word	0x20000d30
100039c0:	20000a94 	.word	0x20000a94
100039c4:	20000a88 	.word	0x20000a88
100039c8:	20000ab4 	.word	0x20000ab4
100039cc:	20000a6c 	.word	0x20000a6c
100039d0:	20000aa0 	.word	0x20000aa0
100039d4:	20000d3c 	.word	0x20000d3c
100039d8:	20000d28 	.word	0x20000d28
100039dc:	20000aa9 	.word	0x20000aa9

100039e0 <IRQ11_Handler>:

void reset_intrpt_handler(void)
{
100039e0:	b580      	push	{r7, lr}
100039e2:	af00      	add	r7, sp, #0
	XMC_ERU_ETL_ClearStatusFlag(ERU0_ETL2);
100039e4:	4b04      	ldr	r3, [pc, #16]	; (100039f8 <IRQ11_Handler+0x18>)
100039e6:	1c18      	adds	r0, r3, #0
100039e8:	2102      	movs	r1, #2
100039ea:	f7ff fd21 	bl	10003430 <XMC_ERU_ETL_ClearStatusFlag>
	__NVIC_SystemReset();
100039ee:	f7ff fcdb 	bl	100033a8 <__NVIC_SystemReset>
}
100039f2:	46bd      	mov	sp, r7
100039f4:	bd80      	pop	{r7, pc}
100039f6:	46c0      	nop			; (mov r8, r8)
100039f8:	40010600 	.word	0x40010600

100039fc <IRQ23_Handler>:

void one_msec_intrpt_handler(void)
{
100039fc:	b580      	push	{r7, lr}
100039fe:	af00      	add	r7, sp, #0
	static uint16_t counting[3];
	static uint8_t  countingADC;
	XMC_CCU4_SLICE_ClearEvent(CCU40_CC40, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
10003a00:	4b39      	ldr	r3, [pc, #228]	; (10003ae8 <IRQ23_Handler+0xec>)
10003a02:	1c18      	adds	r0, r3, #0
10003a04:	2100      	movs	r1, #0
10003a06:	f7ff fcf1 	bl	100033ec <XMC_CCU4_SLICE_ClearEvent>

	/* PV Handshaking */
	if(pvHShake.isEnabled)
10003a0a:	4b38      	ldr	r3, [pc, #224]	; (10003aec <IRQ23_Handler+0xf0>)
10003a0c:	789b      	ldrb	r3, [r3, #2]
10003a0e:	2b00      	cmp	r3, #0
10003a10:	d018      	beq.n	10003a44 <IRQ23_Handler+0x48>
	{
		if(counting[0] == pvHShake.cycle-1)
10003a12:	4b37      	ldr	r3, [pc, #220]	; (10003af0 <IRQ23_Handler+0xf4>)
10003a14:	881b      	ldrh	r3, [r3, #0]
10003a16:	1c1a      	adds	r2, r3, #0
10003a18:	4b34      	ldr	r3, [pc, #208]	; (10003aec <IRQ23_Handler+0xf0>)
10003a1a:	881b      	ldrh	r3, [r3, #0]
10003a1c:	3b01      	subs	r3, #1
10003a1e:	429a      	cmp	r2, r3
10003a20:	d109      	bne.n	10003a36 <IRQ23_Handler+0x3a>
		{
			pvHShake.isEnabled 		= false;
10003a22:	4b32      	ldr	r3, [pc, #200]	; (10003aec <IRQ23_Handler+0xf0>)
10003a24:	2200      	movs	r2, #0
10003a26:	709a      	strb	r2, [r3, #2]
			pvHShake.isTimeOut 		= true;
10003a28:	4b30      	ldr	r3, [pc, #192]	; (10003aec <IRQ23_Handler+0xf0>)
10003a2a:	2201      	movs	r2, #1
10003a2c:	70da      	strb	r2, [r3, #3]
			counting[0]				= 0;
10003a2e:	4b30      	ldr	r3, [pc, #192]	; (10003af0 <IRQ23_Handler+0xf4>)
10003a30:	2200      	movs	r2, #0
10003a32:	801a      	strh	r2, [r3, #0]
10003a34:	e009      	b.n	10003a4a <IRQ23_Handler+0x4e>
		}
		else counting[0]++;
10003a36:	4b2e      	ldr	r3, [pc, #184]	; (10003af0 <IRQ23_Handler+0xf4>)
10003a38:	881b      	ldrh	r3, [r3, #0]
10003a3a:	3301      	adds	r3, #1
10003a3c:	b29a      	uxth	r2, r3
10003a3e:	4b2c      	ldr	r3, [pc, #176]	; (10003af0 <IRQ23_Handler+0xf4>)
10003a40:	801a      	strh	r2, [r3, #0]
10003a42:	e002      	b.n	10003a4a <IRQ23_Handler+0x4e>
	}
	else {counting[0]=0;}
10003a44:	4b2a      	ldr	r3, [pc, #168]	; (10003af0 <IRQ23_Handler+0xf4>)
10003a46:	2200      	movs	r2, #0
10003a48:	801a      	strh	r2, [r3, #0]

	/* ESP32 Handshaking */
	if(esp32HShake.isEnabled)
10003a4a:	4b2a      	ldr	r3, [pc, #168]	; (10003af4 <IRQ23_Handler+0xf8>)
10003a4c:	789b      	ldrb	r3, [r3, #2]
10003a4e:	2b00      	cmp	r3, #0
10003a50:	d018      	beq.n	10003a84 <IRQ23_Handler+0x88>
	{
		if(counting[1] == esp32HShake.cycle-1)
10003a52:	4b27      	ldr	r3, [pc, #156]	; (10003af0 <IRQ23_Handler+0xf4>)
10003a54:	885b      	ldrh	r3, [r3, #2]
10003a56:	1c1a      	adds	r2, r3, #0
10003a58:	4b26      	ldr	r3, [pc, #152]	; (10003af4 <IRQ23_Handler+0xf8>)
10003a5a:	881b      	ldrh	r3, [r3, #0]
10003a5c:	3b01      	subs	r3, #1
10003a5e:	429a      	cmp	r2, r3
10003a60:	d109      	bne.n	10003a76 <IRQ23_Handler+0x7a>
		{
			esp32HShake.isEnabled 	= false;
10003a62:	4b24      	ldr	r3, [pc, #144]	; (10003af4 <IRQ23_Handler+0xf8>)
10003a64:	2200      	movs	r2, #0
10003a66:	709a      	strb	r2, [r3, #2]
			esp32HShake.isTimeOut 	= true;
10003a68:	4b22      	ldr	r3, [pc, #136]	; (10003af4 <IRQ23_Handler+0xf8>)
10003a6a:	2201      	movs	r2, #1
10003a6c:	70da      	strb	r2, [r3, #3]
			counting[1]				= 0;
10003a6e:	4b20      	ldr	r3, [pc, #128]	; (10003af0 <IRQ23_Handler+0xf4>)
10003a70:	2200      	movs	r2, #0
10003a72:	805a      	strh	r2, [r3, #2]
10003a74:	e009      	b.n	10003a8a <IRQ23_Handler+0x8e>
		}
		else counting[1]++;
10003a76:	4b1e      	ldr	r3, [pc, #120]	; (10003af0 <IRQ23_Handler+0xf4>)
10003a78:	885b      	ldrh	r3, [r3, #2]
10003a7a:	3301      	adds	r3, #1
10003a7c:	b29a      	uxth	r2, r3
10003a7e:	4b1c      	ldr	r3, [pc, #112]	; (10003af0 <IRQ23_Handler+0xf4>)
10003a80:	805a      	strh	r2, [r3, #2]
10003a82:	e002      	b.n	10003a8a <IRQ23_Handler+0x8e>
	}
	else {counting[1]=0;}
10003a84:	4b1a      	ldr	r3, [pc, #104]	; (10003af0 <IRQ23_Handler+0xf4>)
10003a86:	2200      	movs	r2, #0
10003a88:	805a      	strh	r2, [r3, #2]

	/* Button Handshaking */
	if(buttonHShake.isEnabled)
10003a8a:	4b1b      	ldr	r3, [pc, #108]	; (10003af8 <IRQ23_Handler+0xfc>)
10003a8c:	789b      	ldrb	r3, [r3, #2]
10003a8e:	2b00      	cmp	r3, #0
10003a90:	d018      	beq.n	10003ac4 <IRQ23_Handler+0xc8>
	{
		if(counting[2] == buttonHShake.cycle-1)
10003a92:	4b17      	ldr	r3, [pc, #92]	; (10003af0 <IRQ23_Handler+0xf4>)
10003a94:	889b      	ldrh	r3, [r3, #4]
10003a96:	1c1a      	adds	r2, r3, #0
10003a98:	4b17      	ldr	r3, [pc, #92]	; (10003af8 <IRQ23_Handler+0xfc>)
10003a9a:	881b      	ldrh	r3, [r3, #0]
10003a9c:	3b01      	subs	r3, #1
10003a9e:	429a      	cmp	r2, r3
10003aa0:	d109      	bne.n	10003ab6 <IRQ23_Handler+0xba>
		{
			buttonHShake.isEnabled 	= false;
10003aa2:	4b15      	ldr	r3, [pc, #84]	; (10003af8 <IRQ23_Handler+0xfc>)
10003aa4:	2200      	movs	r2, #0
10003aa6:	709a      	strb	r2, [r3, #2]
			buttonHShake.isTimeOut 	= true;
10003aa8:	4b13      	ldr	r3, [pc, #76]	; (10003af8 <IRQ23_Handler+0xfc>)
10003aaa:	2201      	movs	r2, #1
10003aac:	70da      	strb	r2, [r3, #3]
			counting[2]				= 0;
10003aae:	4b10      	ldr	r3, [pc, #64]	; (10003af0 <IRQ23_Handler+0xf4>)
10003ab0:	2200      	movs	r2, #0
10003ab2:	809a      	strh	r2, [r3, #4]
10003ab4:	e009      	b.n	10003aca <IRQ23_Handler+0xce>
		}
		else counting[2]++;
10003ab6:	4b0e      	ldr	r3, [pc, #56]	; (10003af0 <IRQ23_Handler+0xf4>)
10003ab8:	889b      	ldrh	r3, [r3, #4]
10003aba:	3301      	adds	r3, #1
10003abc:	b29a      	uxth	r2, r3
10003abe:	4b0c      	ldr	r3, [pc, #48]	; (10003af0 <IRQ23_Handler+0xf4>)
10003ac0:	809a      	strh	r2, [r3, #4]
10003ac2:	e002      	b.n	10003aca <IRQ23_Handler+0xce>
	}
	else {counting[2]=0;}
10003ac4:	4b0a      	ldr	r3, [pc, #40]	; (10003af0 <IRQ23_Handler+0xf4>)
10003ac6:	2200      	movs	r2, #0
10003ac8:	809a      	strh	r2, [r3, #4]

	/* ADC is processed every 3 ms */
	if(countingADC<2)
10003aca:	4b0c      	ldr	r3, [pc, #48]	; (10003afc <IRQ23_Handler+0x100>)
10003acc:	781b      	ldrb	r3, [r3, #0]
10003ace:	2b01      	cmp	r3, #1
10003ad0:	d806      	bhi.n	10003ae0 <IRQ23_Handler+0xe4>
	{
		countingADC++;
10003ad2:	4b0a      	ldr	r3, [pc, #40]	; (10003afc <IRQ23_Handler+0x100>)
10003ad4:	781b      	ldrb	r3, [r3, #0]
10003ad6:	3301      	adds	r3, #1
10003ad8:	b2da      	uxtb	r2, r3
10003ada:	4b08      	ldr	r3, [pc, #32]	; (10003afc <IRQ23_Handler+0x100>)
10003adc:	701a      	strb	r2, [r3, #0]
10003ade:	e001      	b.n	10003ae4 <IRQ23_Handler+0xe8>
	}
	else
	{
		PDU_ADC_Start();
10003ae0:	f000 fe0e 	bl	10004700 <PDU_ADC_Start>
	}
}
10003ae4:	46bd      	mov	sp, r7
10003ae6:	bd80      	pop	{r7, pc}
10003ae8:	48040100 	.word	0x48040100
10003aec:	20000a78 	.word	0x20000a78
10003af0:	20000714 	.word	0x20000714
10003af4:	20000d94 	.word	0x20000d94
10003af8:	20000da4 	.word	0x20000da4
10003afc:	2000071c 	.word	0x2000071c

10003b00 <IRQ24_Handler>:

void hundred_msec_intrpt_handler(void)
{
10003b00:	b590      	push	{r4, r7, lr}
10003b02:	b083      	sub	sp, #12
10003b04:	af02      	add	r7, sp, #8
	static uint8_t cycle_100ms=0;
	static const uint8_t esp32_cycle   = 15;  // 1.5 s
	static const uint8_t rs232_cycle   = 25;  // 2.5 s
	static const uint8_t max_cycle     = 30;  // 3 s

	XMC_CCU4_SLICE_ClearEvent(CCU40_CC41, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
10003b06:	4b41      	ldr	r3, [pc, #260]	; (10003c0c <IRQ24_Handler+0x10c>)
10003b08:	1c18      	adds	r0, r3, #0
10003b0a:	2100      	movs	r1, #0
10003b0c:	f7ff fc6e 	bl	100033ec <XMC_CCU4_SLICE_ClearEvent>
//
//		esp32DataPack.pcs_soc = bmsSensor.soc;


	/* Are Communication Devices attached? */
	if(!recEspCommIsHalt) {cycle_100ms++;}
10003b10:	4b3f      	ldr	r3, [pc, #252]	; (10003c10 <IRQ24_Handler+0x110>)
10003b12:	781b      	ldrb	r3, [r3, #0]
10003b14:	2201      	movs	r2, #1
10003b16:	4053      	eors	r3, r2
10003b18:	b2db      	uxtb	r3, r3
10003b1a:	2b00      	cmp	r3, #0
10003b1c:	d005      	beq.n	10003b2a <IRQ24_Handler+0x2a>
10003b1e:	4b3d      	ldr	r3, [pc, #244]	; (10003c14 <IRQ24_Handler+0x114>)
10003b20:	781b      	ldrb	r3, [r3, #0]
10003b22:	3301      	adds	r3, #1
10003b24:	b2da      	uxtb	r2, r3
10003b26:	4b3b      	ldr	r3, [pc, #236]	; (10003c14 <IRQ24_Handler+0x114>)
10003b28:	701a      	strb	r2, [r3, #0]

	/* send PCS status */
	PCS_BMSTransmitToPCS(0x100, &pcsBmsStatus, &bmsSensor);
10003b2a:	2380      	movs	r3, #128	; 0x80
10003b2c:	0059      	lsls	r1, r3, #1
10003b2e:	4a3a      	ldr	r2, [pc, #232]	; (10003c18 <IRQ24_Handler+0x118>)
10003b30:	4b3a      	ldr	r3, [pc, #232]	; (10003c1c <IRQ24_Handler+0x11c>)
10003b32:	1c08      	adds	r0, r1, #0
10003b34:	1c11      	adds	r1, r2, #0
10003b36:	1c1a      	adds	r2, r3, #0
10003b38:	f000 ff5c 	bl	100049f4 <PCS_BMSTransmitToPCS>
	PCS_BMSTransmitToPCS(0x101, &pcsBmsStatus, &bmsSensor);
10003b3c:	2302      	movs	r3, #2
10003b3e:	33ff      	adds	r3, #255	; 0xff
10003b40:	1c19      	adds	r1, r3, #0
10003b42:	4a35      	ldr	r2, [pc, #212]	; (10003c18 <IRQ24_Handler+0x118>)
10003b44:	4b35      	ldr	r3, [pc, #212]	; (10003c1c <IRQ24_Handler+0x11c>)
10003b46:	1c08      	adds	r0, r1, #0
10003b48:	1c11      	adds	r1, r2, #0
10003b4a:	1c1a      	adds	r2, r3, #0
10003b4c:	f000 ff52 	bl	100049f4 <PCS_BMSTransmitToPCS>

	/* Handshake Phase */
	if(isStartHShake)
10003b50:	4b33      	ldr	r3, [pc, #204]	; (10003c20 <IRQ24_Handler+0x120>)
10003b52:	781b      	ldrb	r3, [r3, #0]
10003b54:	2b00      	cmp	r3, #0
10003b56:	d008      	beq.n	10003b6a <IRQ24_Handler+0x6a>
	{
		XMC_UART_CH_Transmit(XMC_USIC0_CH0, ';');
10003b58:	2390      	movs	r3, #144	; 0x90
10003b5a:	05db      	lsls	r3, r3, #23
10003b5c:	1c18      	adds	r0, r3, #0
10003b5e:	213b      	movs	r1, #59	; 0x3b
10003b60:	f7fe fd32 	bl	100025c8 <XMC_UART_CH_Transmit>
		isStartHShake = false;
10003b64:	4b2e      	ldr	r3, [pc, #184]	; (10003c20 <IRQ24_Handler+0x120>)
10003b66:	2200      	movs	r2, #0
10003b68:	701a      	strb	r2, [r3, #0]
	}

	/* Activate Communication Order */
	if (cycle_100ms == esp32_cycle-1)
10003b6a:	4b2a      	ldr	r3, [pc, #168]	; (10003c14 <IRQ24_Handler+0x114>)
10003b6c:	781b      	ldrb	r3, [r3, #0]
10003b6e:	1c1a      	adds	r2, r3, #0
10003b70:	230f      	movs	r3, #15
10003b72:	3b01      	subs	r3, #1
10003b74:	429a      	cmp	r2, r3
10003b76:	d102      	bne.n	10003b7e <IRQ24_Handler+0x7e>
	{
		flag_esp32 = true;
10003b78:	4b2a      	ldr	r3, [pc, #168]	; (10003c24 <IRQ24_Handler+0x124>)
10003b7a:	2201      	movs	r2, #1
10003b7c:	701a      	strb	r2, [r3, #0]
	}
	if (cycle_100ms == rs232_cycle-1)
10003b7e:	4b25      	ldr	r3, [pc, #148]	; (10003c14 <IRQ24_Handler+0x114>)
10003b80:	781b      	ldrb	r3, [r3, #0]
10003b82:	1c1a      	adds	r2, r3, #0
10003b84:	2319      	movs	r3, #25
10003b86:	3b01      	subs	r3, #1
10003b88:	429a      	cmp	r2, r3
10003b8a:	d102      	bne.n	10003b92 <IRQ24_Handler+0x92>
	{
		flag_rs232 = true;
10003b8c:	4b26      	ldr	r3, [pc, #152]	; (10003c28 <IRQ24_Handler+0x128>)
10003b8e:	2201      	movs	r2, #1
10003b90:	701a      	strb	r2, [r3, #0]
	}
	if (cycle_100ms == max_cycle-1)
10003b92:	4b20      	ldr	r3, [pc, #128]	; (10003c14 <IRQ24_Handler+0x114>)
10003b94:	781b      	ldrb	r3, [r3, #0]
10003b96:	1c1a      	adds	r2, r3, #0
10003b98:	231e      	movs	r3, #30
10003b9a:	3b01      	subs	r3, #1
10003b9c:	429a      	cmp	r2, r3
10003b9e:	d102      	bne.n	10003ba6 <IRQ24_Handler+0xa6>
	{
		cycle_100ms = 0;
10003ba0:	4b1c      	ldr	r3, [pc, #112]	; (10003c14 <IRQ24_Handler+0x114>)
10003ba2:	2200      	movs	r2, #0
10003ba4:	701a      	strb	r2, [r3, #0]
//			sprintf(buffer, "4. raw sensor DCCT = %lu \r\n", pduSensorAvg.sumAvgDCCT);
//			RS232_SendString(XMC_USIC0_CH1, buffer, strlen(buffer));
		}
	}

	if(enable_bt && flag_esp32)
10003ba6:	4b21      	ldr	r3, [pc, #132]	; (10003c2c <IRQ24_Handler+0x12c>)
10003ba8:	781b      	ldrb	r3, [r3, #0]
10003baa:	2b00      	cmp	r3, #0
10003bac:	d02a      	beq.n	10003c04 <IRQ24_Handler+0x104>
10003bae:	4b1d      	ldr	r3, [pc, #116]	; (10003c24 <IRQ24_Handler+0x124>)
10003bb0:	781b      	ldrb	r3, [r3, #0]
10003bb2:	2b00      	cmp	r3, #0
10003bb4:	d026      	beq.n	10003c04 <IRQ24_Handler+0x104>
	{
		/* PCS Battery Parameter */
		btData.bt_bat_pack_soc 		= batPackData.pack_soc;
10003bb6:	4b1e      	ldr	r3, [pc, #120]	; (10003c30 <IRQ24_Handler+0x130>)
10003bb8:	7819      	ldrb	r1, [r3, #0]
10003bba:	4b1e      	ldr	r3, [pc, #120]	; (10003c34 <IRQ24_Handler+0x134>)
10003bbc:	2224      	movs	r2, #36	; 0x24
10003bbe:	5499      	strb	r1, [r3, r2]
		btData.bt_bat_pack_volt		= batPackData.pack_voltage;
10003bc0:	4b1b      	ldr	r3, [pc, #108]	; (10003c30 <IRQ24_Handler+0x130>)
10003bc2:	885a      	ldrh	r2, [r3, #2]
10003bc4:	4b1b      	ldr	r3, [pc, #108]	; (10003c34 <IRQ24_Handler+0x134>)
10003bc6:	84da      	strh	r2, [r3, #38]	; 0x26
		btData.bt_bat_pack_max_temp	= batPackData.pack_max_temp;
10003bc8:	4b19      	ldr	r3, [pc, #100]	; (10003c30 <IRQ24_Handler+0x130>)
10003bca:	7919      	ldrb	r1, [r3, #4]
10003bcc:	4b19      	ldr	r3, [pc, #100]	; (10003c34 <IRQ24_Handler+0x134>)
10003bce:	2228      	movs	r2, #40	; 0x28
10003bd0:	5499      	strb	r1, [r3, r2]
		btData.bt_bat_pack_min_temp	= batPackData.pack_min_temp;
10003bd2:	4b17      	ldr	r3, [pc, #92]	; (10003c30 <IRQ24_Handler+0x130>)
10003bd4:	7959      	ldrb	r1, [r3, #5]
10003bd6:	4b17      	ldr	r3, [pc, #92]	; (10003c34 <IRQ24_Handler+0x134>)
10003bd8:	2229      	movs	r2, #41	; 0x29
10003bda:	5499      	strb	r1, [r3, r2]
		btData.bt_bat_pack_status	= batPackData.pack_status;
10003bdc:	4b14      	ldr	r3, [pc, #80]	; (10003c30 <IRQ24_Handler+0x130>)
10003bde:	7999      	ldrb	r1, [r3, #6]
10003be0:	4b14      	ldr	r3, [pc, #80]	; (10003c34 <IRQ24_Handler+0x134>)
10003be2:	222a      	movs	r2, #42	; 0x2a
10003be4:	5499      	strb	r1, [r3, r2]
		BT_prepareData(buffer, 0x05, 41, &btData, 0xAA);
10003be6:	4a14      	ldr	r2, [pc, #80]	; (10003c38 <IRQ24_Handler+0x138>)
10003be8:	4c12      	ldr	r4, [pc, #72]	; (10003c34 <IRQ24_Handler+0x134>)
10003bea:	23aa      	movs	r3, #170	; 0xaa
10003bec:	9300      	str	r3, [sp, #0]
10003bee:	1c10      	adds	r0, r2, #0
10003bf0:	2105      	movs	r1, #5
10003bf2:	2229      	movs	r2, #41	; 0x29
10003bf4:	1c23      	adds	r3, r4, #0
10003bf6:	f003 fc4d 	bl	10007494 <BT_prepareData>
		BT_sendStream(buffer, 46);
10003bfa:	4b0f      	ldr	r3, [pc, #60]	; (10003c38 <IRQ24_Handler+0x138>)
10003bfc:	1c18      	adds	r0, r3, #0
10003bfe:	212e      	movs	r1, #46	; 0x2e
10003c00:	f003 fd9e 	bl	10007740 <BT_sendStream>
	}
}
10003c04:	46bd      	mov	sp, r7
10003c06:	b001      	add	sp, #4
10003c08:	bd90      	pop	{r4, r7, pc}
10003c0a:	46c0      	nop			; (mov r8, r8)
10003c0c:	48040200 	.word	0x48040200
10003c10:	20000550 	.word	0x20000550
10003c14:	2000071d 	.word	0x2000071d
10003c18:	20000d9c 	.word	0x20000d9c
10003c1c:	20000a80 	.word	0x20000a80
10003c20:	20000816 	.word	0x20000816
10003c24:	20000da0 	.word	0x20000da0
10003c28:	20000814 	.word	0x20000814
10003c2c:	20000aa8 	.word	0x20000aa8
10003c30:	20000d34 	.word	0x20000d34
10003c34:	20000d54 	.word	0x20000d54
10003c38:	20000b34 	.word	0x20000b34

10003c3c <IRQ12_Handler>:

void genixrs485_intrpt_handler(void)
{
10003c3c:	b580      	push	{r7, lr}
10003c3e:	b082      	sub	sp, #8
10003c40:	af00      	add	r7, sp, #0
	static uint8_t 	count, retry=0;
	static uint8_t 	length;
	static char 	buffer[32];
	uint8_t data;

	XMC_UART_CH_ClearStatusFlag(XMC_USIC1_CH0,
10003c42:	4a68      	ldr	r2, [pc, #416]	; (10003de4 <IRQ12_Handler+0x1a8>)
10003c44:	2380      	movs	r3, #128	; 0x80
10003c46:	01db      	lsls	r3, r3, #7
10003c48:	1c10      	adds	r0, r2, #0
10003c4a:	1c19      	adds	r1, r3, #0
10003c4c:	f7ff fbe4 	bl	10003418 <XMC_UART_CH_ClearStatusFlag>
								XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION);

	data = XMC_UART_CH_GetReceivedData(XMC_USIC1_CH0);
10003c50:	4b64      	ldr	r3, [pc, #400]	; (10003de4 <IRQ12_Handler+0x1a8>)
10003c52:	1c18      	adds	r0, r3, #0
10003c54:	f7fe fce6 	bl	10002624 <XMC_UART_CH_GetReceivedData>
10003c58:	1c03      	adds	r3, r0, #0
10003c5a:	1c1a      	adds	r2, r3, #0
10003c5c:	1dfb      	adds	r3, r7, #7
10003c5e:	701a      	strb	r2, [r3, #0]

	switch(rcvState)
10003c60:	4b61      	ldr	r3, [pc, #388]	; (10003de8 <IRQ12_Handler+0x1ac>)
10003c62:	781b      	ldrb	r3, [r3, #0]
10003c64:	2b01      	cmp	r3, #1
10003c66:	d040      	beq.n	10003cea <IRQ12_Handler+0xae>
10003c68:	dc02      	bgt.n	10003c70 <IRQ12_Handler+0x34>
10003c6a:	2b00      	cmp	r3, #0
10003c6c:	d007      	beq.n	10003c7e <IRQ12_Handler+0x42>
			XMC_UART_CH_Transmit(XMC_USIC0_CH1, 'F');
			XMC_UART_CH_Transmit(XMC_USIC0_CH1, 0x0D);
			XMC_UART_CH_Transmit(XMC_USIC0_CH1, 0x0A);
		}
		break;
	default				:break;
10003c6e:	e0b6      	b.n	10003dde <IRQ12_Handler+0x1a2>
	XMC_UART_CH_ClearStatusFlag(XMC_USIC1_CH0,
								XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION);

	data = XMC_UART_CH_GetReceivedData(XMC_USIC1_CH0);

	switch(rcvState)
10003c70:	2b02      	cmp	r3, #2
10003c72:	d100      	bne.n	10003c76 <IRQ12_Handler+0x3a>
10003c74:	e073      	b.n	10003d5e <IRQ12_Handler+0x122>
10003c76:	2b03      	cmp	r3, #3
10003c78:	d100      	bne.n	10003c7c <IRQ12_Handler+0x40>
10003c7a:	e07e      	b.n	10003d7a <IRQ12_Handler+0x13e>
			XMC_UART_CH_Transmit(XMC_USIC0_CH1, 'F');
			XMC_UART_CH_Transmit(XMC_USIC0_CH1, 0x0D);
			XMC_UART_CH_Transmit(XMC_USIC0_CH1, 0x0A);
		}
		break;
	default				:break;
10003c7c:	e0af      	b.n	10003dde <IRQ12_Handler+0x1a2>
	data = XMC_UART_CH_GetReceivedData(XMC_USIC1_CH0);

	switch(rcvState)
	{
	case HEADER_CHECK	:
		rcvState = HEADER_CHECK;
10003c7e:	4b5a      	ldr	r3, [pc, #360]	; (10003de8 <IRQ12_Handler+0x1ac>)
10003c80:	2200      	movs	r2, #0
10003c82:	701a      	strb	r2, [r3, #0]
		head = (head << 8) | data;
10003c84:	4b59      	ldr	r3, [pc, #356]	; (10003dec <IRQ12_Handler+0x1b0>)
10003c86:	881b      	ldrh	r3, [r3, #0]
10003c88:	021b      	lsls	r3, r3, #8
10003c8a:	b29a      	uxth	r2, r3
10003c8c:	1dfb      	adds	r3, r7, #7
10003c8e:	781b      	ldrb	r3, [r3, #0]
10003c90:	b29b      	uxth	r3, r3
10003c92:	4313      	orrs	r3, r2
10003c94:	b29b      	uxth	r3, r3
10003c96:	b29a      	uxth	r2, r3
10003c98:	4b54      	ldr	r3, [pc, #336]	; (10003dec <IRQ12_Handler+0x1b0>)
10003c9a:	801a      	strh	r2, [r3, #0]
		if(head == 0xAABB)
10003c9c:	4b53      	ldr	r3, [pc, #332]	; (10003dec <IRQ12_Handler+0x1b0>)
10003c9e:	881b      	ldrh	r3, [r3, #0]
10003ca0:	4a53      	ldr	r2, [pc, #332]	; (10003df0 <IRQ12_Handler+0x1b4>)
10003ca2:	4293      	cmp	r3, r2
10003ca4:	d10f      	bne.n	10003cc6 <IRQ12_Handler+0x8a>
		{
			rcvState = HEADER_RECEIVE;
10003ca6:	4b50      	ldr	r3, [pc, #320]	; (10003de8 <IRQ12_Handler+0x1ac>)
10003ca8:	2201      	movs	r2, #1
10003caa:	701a      	strb	r2, [r3, #0]
			head	 = 0x0000;
10003cac:	4b4f      	ldr	r3, [pc, #316]	; (10003dec <IRQ12_Handler+0x1b0>)
10003cae:	2200      	movs	r2, #0
10003cb0:	801a      	strh	r2, [r3, #0]
			count	 = 0;
10003cb2:	4b50      	ldr	r3, [pc, #320]	; (10003df4 <IRQ12_Handler+0x1b8>)
10003cb4:	2200      	movs	r2, #0
10003cb6:	701a      	strb	r2, [r3, #0]
			retry	 = 0;
10003cb8:	4b4f      	ldr	r3, [pc, #316]	; (10003df8 <IRQ12_Handler+0x1bc>)
10003cba:	2200      	movs	r2, #0
10003cbc:	701a      	strb	r2, [r3, #0]
			/* let first a maximum length */
			length 	 = 40;
10003cbe:	4b4f      	ldr	r3, [pc, #316]	; (10003dfc <IRQ12_Handler+0x1c0>)
10003cc0:	2228      	movs	r2, #40	; 0x28
10003cc2:	701a      	strb	r2, [r3, #0]
10003cc4:	e010      	b.n	10003ce8 <IRQ12_Handler+0xac>
		}
		else
		{
			retry++;
10003cc6:	4b4c      	ldr	r3, [pc, #304]	; (10003df8 <IRQ12_Handler+0x1bc>)
10003cc8:	781b      	ldrb	r3, [r3, #0]
10003cca:	3301      	adds	r3, #1
10003ccc:	b2da      	uxtb	r2, r3
10003cce:	4b4a      	ldr	r3, [pc, #296]	; (10003df8 <IRQ12_Handler+0x1bc>)
10003cd0:	701a      	strb	r2, [r3, #0]
			if(retry==2)
10003cd2:	4b49      	ldr	r3, [pc, #292]	; (10003df8 <IRQ12_Handler+0x1bc>)
10003cd4:	781b      	ldrb	r3, [r3, #0]
10003cd6:	2b02      	cmp	r3, #2
10003cd8:	d106      	bne.n	10003ce8 <IRQ12_Handler+0xac>
			{
				head  = 0x0000;
10003cda:	4b44      	ldr	r3, [pc, #272]	; (10003dec <IRQ12_Handler+0x1b0>)
10003cdc:	2200      	movs	r2, #0
10003cde:	801a      	strh	r2, [r3, #0]
				retry = 0;
10003ce0:	4b45      	ldr	r3, [pc, #276]	; (10003df8 <IRQ12_Handler+0x1bc>)
10003ce2:	2200      	movs	r2, #0
10003ce4:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
10003ce6:	e07a      	b.n	10003dde <IRQ12_Handler+0x1a2>
10003ce8:	e079      	b.n	10003dde <IRQ12_Handler+0x1a2>
	case HEADER_RECEIVE	:
		rcvState = HEADER_RECEIVE;
10003cea:	4b3f      	ldr	r3, [pc, #252]	; (10003de8 <IRQ12_Handler+0x1ac>)
10003cec:	2201      	movs	r2, #1
10003cee:	701a      	strb	r2, [r3, #0]
		if(count==0)
10003cf0:	4b40      	ldr	r3, [pc, #256]	; (10003df4 <IRQ12_Handler+0x1b8>)
10003cf2:	781b      	ldrb	r3, [r3, #0]
10003cf4:	2b00      	cmp	r3, #0
10003cf6:	d10a      	bne.n	10003d0e <IRQ12_Handler+0xd2>
		{
			length = data;
10003cf8:	4b40      	ldr	r3, [pc, #256]	; (10003dfc <IRQ12_Handler+0x1c0>)
10003cfa:	1dfa      	adds	r2, r7, #7
10003cfc:	7812      	ldrb	r2, [r2, #0]
10003cfe:	701a      	strb	r2, [r3, #0]
			count++;
10003d00:	4b3c      	ldr	r3, [pc, #240]	; (10003df4 <IRQ12_Handler+0x1b8>)
10003d02:	781b      	ldrb	r3, [r3, #0]
10003d04:	3301      	adds	r3, #1
10003d06:	b2da      	uxtb	r2, r3
10003d08:	4b3a      	ldr	r3, [pc, #232]	; (10003df4 <IRQ12_Handler+0x1b8>)
10003d0a:	701a      	strb	r2, [r3, #0]
10003d0c:	e026      	b.n	10003d5c <IRQ12_Handler+0x120>
		}
		else if(count == (length - 2) - 1) // count starts after header
10003d0e:	4b39      	ldr	r3, [pc, #228]	; (10003df4 <IRQ12_Handler+0x1b8>)
10003d10:	781b      	ldrb	r3, [r3, #0]
10003d12:	1c1a      	adds	r2, r3, #0
10003d14:	4b39      	ldr	r3, [pc, #228]	; (10003dfc <IRQ12_Handler+0x1c0>)
10003d16:	781b      	ldrb	r3, [r3, #0]
10003d18:	3b03      	subs	r3, #3
10003d1a:	429a      	cmp	r2, r3
10003d1c:	d110      	bne.n	10003d40 <IRQ12_Handler+0x104>
		{
			buffer[count-1] = (char)data;
10003d1e:	4b35      	ldr	r3, [pc, #212]	; (10003df4 <IRQ12_Handler+0x1b8>)
10003d20:	781b      	ldrb	r3, [r3, #0]
10003d22:	3b01      	subs	r3, #1
10003d24:	4a36      	ldr	r2, [pc, #216]	; (10003e00 <IRQ12_Handler+0x1c4>)
10003d26:	1df9      	adds	r1, r7, #7
10003d28:	7809      	ldrb	r1, [r1, #0]
10003d2a:	54d1      	strb	r1, [r2, r3]
			rcvState = HEADER_PARSE;
10003d2c:	4b2e      	ldr	r3, [pc, #184]	; (10003de8 <IRQ12_Handler+0x1ac>)
10003d2e:	2202      	movs	r2, #2
10003d30:	701a      	strb	r2, [r3, #0]
			count++;
10003d32:	4b30      	ldr	r3, [pc, #192]	; (10003df4 <IRQ12_Handler+0x1b8>)
10003d34:	781b      	ldrb	r3, [r3, #0]
10003d36:	3301      	adds	r3, #1
10003d38:	b2da      	uxtb	r2, r3
10003d3a:	4b2e      	ldr	r3, [pc, #184]	; (10003df4 <IRQ12_Handler+0x1b8>)
10003d3c:	701a      	strb	r2, [r3, #0]
10003d3e:	e00d      	b.n	10003d5c <IRQ12_Handler+0x120>
		}
		else
		{
			buffer[count-1] = (char)data;
10003d40:	4b2c      	ldr	r3, [pc, #176]	; (10003df4 <IRQ12_Handler+0x1b8>)
10003d42:	781b      	ldrb	r3, [r3, #0]
10003d44:	3b01      	subs	r3, #1
10003d46:	4a2e      	ldr	r2, [pc, #184]	; (10003e00 <IRQ12_Handler+0x1c4>)
10003d48:	1df9      	adds	r1, r7, #7
10003d4a:	7809      	ldrb	r1, [r1, #0]
10003d4c:	54d1      	strb	r1, [r2, r3]
			count++;
10003d4e:	4b29      	ldr	r3, [pc, #164]	; (10003df4 <IRQ12_Handler+0x1b8>)
10003d50:	781b      	ldrb	r3, [r3, #0]
10003d52:	3301      	adds	r3, #1
10003d54:	b2da      	uxtb	r2, r3
10003d56:	4b27      	ldr	r3, [pc, #156]	; (10003df4 <IRQ12_Handler+0x1b8>)
10003d58:	701a      	strb	r2, [r3, #0]
		}
		break;
10003d5a:	e040      	b.n	10003dde <IRQ12_Handler+0x1a2>
10003d5c:	e03f      	b.n	10003dde <IRQ12_Handler+0x1a2>
	case HEADER_PARSE	:
		buffer[count-1] = (char)data;
10003d5e:	4b25      	ldr	r3, [pc, #148]	; (10003df4 <IRQ12_Handler+0x1b8>)
10003d60:	781b      	ldrb	r3, [r3, #0]
10003d62:	3b01      	subs	r3, #1
10003d64:	4a26      	ldr	r2, [pc, #152]	; (10003e00 <IRQ12_Handler+0x1c4>)
10003d66:	1df9      	adds	r1, r7, #7
10003d68:	7809      	ldrb	r1, [r1, #0]
10003d6a:	54d1      	strb	r1, [r2, r3]
		/* do a parsing */
		// PARSE //
		/* restart counter */
		count	 = 0;
10003d6c:	4b21      	ldr	r3, [pc, #132]	; (10003df4 <IRQ12_Handler+0x1b8>)
10003d6e:	2200      	movs	r2, #0
10003d70:	701a      	strb	r2, [r3, #0]
		rcvState = HEADER_FINISH;
10003d72:	4b1d      	ldr	r3, [pc, #116]	; (10003de8 <IRQ12_Handler+0x1ac>)
10003d74:	2203      	movs	r2, #3
10003d76:	701a      	strb	r2, [r3, #0]
		break;
10003d78:	e031      	b.n	10003dde <IRQ12_Handler+0x1a2>
	case HEADER_FINISH	:
		rcvState = HEADER_FINISH;
10003d7a:	4b1b      	ldr	r3, [pc, #108]	; (10003de8 <IRQ12_Handler+0x1ac>)
10003d7c:	2203      	movs	r2, #3
10003d7e:	701a      	strb	r2, [r3, #0]

		tail = (tail << 8) | data;
10003d80:	4b20      	ldr	r3, [pc, #128]	; (10003e04 <IRQ12_Handler+0x1c8>)
10003d82:	881b      	ldrh	r3, [r3, #0]
10003d84:	021b      	lsls	r3, r3, #8
10003d86:	b29a      	uxth	r2, r3
10003d88:	1dfb      	adds	r3, r7, #7
10003d8a:	781b      	ldrb	r3, [r3, #0]
10003d8c:	b29b      	uxth	r3, r3
10003d8e:	4313      	orrs	r3, r2
10003d90:	b29b      	uxth	r3, r3
10003d92:	b29a      	uxth	r2, r3
10003d94:	4b1b      	ldr	r3, [pc, #108]	; (10003e04 <IRQ12_Handler+0x1c8>)
10003d96:	801a      	strh	r2, [r3, #0]
		if(tail == 0x0D0A)
10003d98:	4b1a      	ldr	r3, [pc, #104]	; (10003e04 <IRQ12_Handler+0x1c8>)
10003d9a:	881b      	ldrh	r3, [r3, #0]
10003d9c:	4a1a      	ldr	r2, [pc, #104]	; (10003e08 <IRQ12_Handler+0x1cc>)
10003d9e:	4293      	cmp	r3, r2
10003da0:	d11c      	bne.n	10003ddc <IRQ12_Handler+0x1a0>
		{
			rcvState = HEADER_CHECK;
10003da2:	4b11      	ldr	r3, [pc, #68]	; (10003de8 <IRQ12_Handler+0x1ac>)
10003da4:	2200      	movs	r2, #0
10003da6:	701a      	strb	r2, [r3, #0]
			tail	 = 0x0000;
10003da8:	4b16      	ldr	r3, [pc, #88]	; (10003e04 <IRQ12_Handler+0x1c8>)
10003daa:	2200      	movs	r2, #0
10003dac:	801a      	strh	r2, [r3, #0]
			RS232_SendString(XMC_USIC0_CH1, buffer, 30);
10003dae:	4a17      	ldr	r2, [pc, #92]	; (10003e0c <IRQ12_Handler+0x1d0>)
10003db0:	4b13      	ldr	r3, [pc, #76]	; (10003e00 <IRQ12_Handler+0x1c4>)
10003db2:	1c10      	adds	r0, r2, #0
10003db4:	1c19      	adds	r1, r3, #0
10003db6:	221e      	movs	r2, #30
10003db8:	f000 fa5e 	bl	10004278 <RS232_SendString>
			XMC_UART_CH_Transmit(XMC_USIC0_CH1, 'F');
10003dbc:	4b13      	ldr	r3, [pc, #76]	; (10003e0c <IRQ12_Handler+0x1d0>)
10003dbe:	1c18      	adds	r0, r3, #0
10003dc0:	2146      	movs	r1, #70	; 0x46
10003dc2:	f7fe fc01 	bl	100025c8 <XMC_UART_CH_Transmit>
			XMC_UART_CH_Transmit(XMC_USIC0_CH1, 0x0D);
10003dc6:	4b11      	ldr	r3, [pc, #68]	; (10003e0c <IRQ12_Handler+0x1d0>)
10003dc8:	1c18      	adds	r0, r3, #0
10003dca:	210d      	movs	r1, #13
10003dcc:	f7fe fbfc 	bl	100025c8 <XMC_UART_CH_Transmit>
			XMC_UART_CH_Transmit(XMC_USIC0_CH1, 0x0A);
10003dd0:	4b0e      	ldr	r3, [pc, #56]	; (10003e0c <IRQ12_Handler+0x1d0>)
10003dd2:	1c18      	adds	r0, r3, #0
10003dd4:	210a      	movs	r1, #10
10003dd6:	f7fe fbf7 	bl	100025c8 <XMC_UART_CH_Transmit>
		}
		break;
10003dda:	e7ff      	b.n	10003ddc <IRQ12_Handler+0x1a0>
10003ddc:	46c0      	nop			; (mov r8, r8)
	default				:break;
	}

//	XMC_UART_CH_Transmit(XMC_USIC0_CH1, data);
}
10003dde:	46bd      	mov	sp, r7
10003de0:	b002      	add	sp, #8
10003de2:	bd80      	pop	{r7, pc}
10003de4:	48004000 	.word	0x48004000
10003de8:	2000071e 	.word	0x2000071e
10003dec:	20000720 	.word	0x20000720
10003df0:	0000aabb 	.word	0x0000aabb
10003df4:	20000722 	.word	0x20000722
10003df8:	20000723 	.word	0x20000723
10003dfc:	20000724 	.word	0x20000724
10003e00:	20000728 	.word	0x20000728
10003e04:	20000748 	.word	0x20000748
10003e08:	00000d0a 	.word	0x00000d0a
10003e0c:	48000200 	.word	0x48000200

10003e10 <IRQ18_Handler>:

void esp32uart_intrpt_handler(void)
{
10003e10:	b598      	push	{r3, r4, r7, lr}
10003e12:	af00      	add	r7, sp, #0
	static uint8_t n=0;
	static char NTPdata[200];

	NTPdata[n] = XMC_UART_CH_GetReceivedData(XMC_USIC0_CH0);
10003e14:	4b57      	ldr	r3, [pc, #348]	; (10003f74 <IRQ18_Handler+0x164>)
10003e16:	781b      	ldrb	r3, [r3, #0]
10003e18:	1c1c      	adds	r4, r3, #0
10003e1a:	2390      	movs	r3, #144	; 0x90
10003e1c:	05db      	lsls	r3, r3, #23
10003e1e:	1c18      	adds	r0, r3, #0
10003e20:	f7fe fc00 	bl	10002624 <XMC_UART_CH_GetReceivedData>
10003e24:	1c03      	adds	r3, r0, #0
10003e26:	b2da      	uxtb	r2, r3
10003e28:	4b53      	ldr	r3, [pc, #332]	; (10003f78 <IRQ18_Handler+0x168>)
10003e2a:	551a      	strb	r2, [r3, r4]

	if(NTPdata[n] =='#')
10003e2c:	4b51      	ldr	r3, [pc, #324]	; (10003f74 <IRQ18_Handler+0x164>)
10003e2e:	781b      	ldrb	r3, [r3, #0]
10003e30:	1c1a      	adds	r2, r3, #0
10003e32:	4b51      	ldr	r3, [pc, #324]	; (10003f78 <IRQ18_Handler+0x168>)
10003e34:	5c9b      	ldrb	r3, [r3, r2]
10003e36:	2b23      	cmp	r3, #35	; 0x23
10003e38:	d103      	bne.n	10003e42 <IRQ18_Handler+0x32>
	{
		n=0;
10003e3a:	4b4e      	ldr	r3, [pc, #312]	; (10003f74 <IRQ18_Handler+0x164>)
10003e3c:	2200      	movs	r2, #0
10003e3e:	701a      	strb	r2, [r3, #0]
10003e40:	e08e      	b.n	10003f60 <IRQ18_Handler+0x150>
	}
	else if(NTPdata[n] =='K')
10003e42:	4b4c      	ldr	r3, [pc, #304]	; (10003f74 <IRQ18_Handler+0x164>)
10003e44:	781b      	ldrb	r3, [r3, #0]
10003e46:	1c1a      	adds	r2, r3, #0
10003e48:	4b4b      	ldr	r3, [pc, #300]	; (10003f78 <IRQ18_Handler+0x168>)
10003e4a:	5c9b      	ldrb	r3, [r3, r2]
10003e4c:	2b4b      	cmp	r3, #75	; 0x4b
10003e4e:	d000      	beq.n	10003e52 <IRQ18_Handler+0x42>
10003e50:	e080      	b.n	10003f54 <IRQ18_Handler+0x144>
	{
	  esp32HShake.isValid 	= true;
10003e52:	4b4a      	ldr	r3, [pc, #296]	; (10003f7c <IRQ18_Handler+0x16c>)
10003e54:	2201      	movs	r2, #1
10003e56:	719a      	strb	r2, [r3, #6]
	  rtcDate.year  	= (NTPdata[0]-48)*1000 + (NTPdata[1]-48)*100 + (NTPdata[2]-48)*10 + (NTPdata[3]-48);
10003e58:	4b47      	ldr	r3, [pc, #284]	; (10003f78 <IRQ18_Handler+0x168>)
10003e5a:	781b      	ldrb	r3, [r3, #0]
10003e5c:	3b30      	subs	r3, #48	; 0x30
10003e5e:	b29b      	uxth	r3, r3
10003e60:	22fa      	movs	r2, #250	; 0xfa
10003e62:	0092      	lsls	r2, r2, #2
10003e64:	4353      	muls	r3, r2
10003e66:	b29a      	uxth	r2, r3
10003e68:	4b43      	ldr	r3, [pc, #268]	; (10003f78 <IRQ18_Handler+0x168>)
10003e6a:	785b      	ldrb	r3, [r3, #1]
10003e6c:	3b30      	subs	r3, #48	; 0x30
10003e6e:	b29b      	uxth	r3, r3
10003e70:	2164      	movs	r1, #100	; 0x64
10003e72:	434b      	muls	r3, r1
10003e74:	b29b      	uxth	r3, r3
10003e76:	18d3      	adds	r3, r2, r3
10003e78:	b29a      	uxth	r2, r3
10003e7a:	4b3f      	ldr	r3, [pc, #252]	; (10003f78 <IRQ18_Handler+0x168>)
10003e7c:	789b      	ldrb	r3, [r3, #2]
10003e7e:	3b30      	subs	r3, #48	; 0x30
10003e80:	b29b      	uxth	r3, r3
10003e82:	1c19      	adds	r1, r3, #0
10003e84:	0089      	lsls	r1, r1, #2
10003e86:	18cb      	adds	r3, r1, r3
10003e88:	18db      	adds	r3, r3, r3
10003e8a:	b29b      	uxth	r3, r3
10003e8c:	18d3      	adds	r3, r2, r3
10003e8e:	b29a      	uxth	r2, r3
10003e90:	4b39      	ldr	r3, [pc, #228]	; (10003f78 <IRQ18_Handler+0x168>)
10003e92:	78db      	ldrb	r3, [r3, #3]
10003e94:	b29b      	uxth	r3, r3
10003e96:	18d3      	adds	r3, r2, r3
10003e98:	b29b      	uxth	r3, r3
10003e9a:	3b30      	subs	r3, #48	; 0x30
10003e9c:	b29a      	uxth	r2, r3
10003e9e:	4b38      	ldr	r3, [pc, #224]	; (10003f80 <IRQ18_Handler+0x170>)
10003ea0:	801a      	strh	r2, [r3, #0]
	  rtcDate.month 	= (NTPdata[4]-48)*10 + (NTPdata[5]-48);
10003ea2:	4b35      	ldr	r3, [pc, #212]	; (10003f78 <IRQ18_Handler+0x168>)
10003ea4:	791b      	ldrb	r3, [r3, #4]
10003ea6:	3b30      	subs	r3, #48	; 0x30
10003ea8:	b2db      	uxtb	r3, r3
10003eaa:	1c1a      	adds	r2, r3, #0
10003eac:	0092      	lsls	r2, r2, #2
10003eae:	18d3      	adds	r3, r2, r3
10003eb0:	18db      	adds	r3, r3, r3
10003eb2:	b2da      	uxtb	r2, r3
10003eb4:	4b30      	ldr	r3, [pc, #192]	; (10003f78 <IRQ18_Handler+0x168>)
10003eb6:	795b      	ldrb	r3, [r3, #5]
10003eb8:	18d3      	adds	r3, r2, r3
10003eba:	b2db      	uxtb	r3, r3
10003ebc:	3b30      	subs	r3, #48	; 0x30
10003ebe:	b2da      	uxtb	r2, r3
10003ec0:	4b2f      	ldr	r3, [pc, #188]	; (10003f80 <IRQ18_Handler+0x170>)
10003ec2:	709a      	strb	r2, [r3, #2]
	  rtcDate.date  	= (NTPdata[6]-48)*10 + (NTPdata[7]-48);
10003ec4:	4b2c      	ldr	r3, [pc, #176]	; (10003f78 <IRQ18_Handler+0x168>)
10003ec6:	799b      	ldrb	r3, [r3, #6]
10003ec8:	3b30      	subs	r3, #48	; 0x30
10003eca:	b2db      	uxtb	r3, r3
10003ecc:	1c1a      	adds	r2, r3, #0
10003ece:	0092      	lsls	r2, r2, #2
10003ed0:	18d3      	adds	r3, r2, r3
10003ed2:	18db      	adds	r3, r3, r3
10003ed4:	b2da      	uxtb	r2, r3
10003ed6:	4b28      	ldr	r3, [pc, #160]	; (10003f78 <IRQ18_Handler+0x168>)
10003ed8:	79db      	ldrb	r3, [r3, #7]
10003eda:	18d3      	adds	r3, r2, r3
10003edc:	b2db      	uxtb	r3, r3
10003ede:	3b30      	subs	r3, #48	; 0x30
10003ee0:	b2da      	uxtb	r2, r3
10003ee2:	4b27      	ldr	r3, [pc, #156]	; (10003f80 <IRQ18_Handler+0x170>)
10003ee4:	70da      	strb	r2, [r3, #3]
	  rtcTime.hour  	= (NTPdata[8]-48)*10 + (NTPdata[9]-48);
10003ee6:	4b24      	ldr	r3, [pc, #144]	; (10003f78 <IRQ18_Handler+0x168>)
10003ee8:	7a1b      	ldrb	r3, [r3, #8]
10003eea:	3b30      	subs	r3, #48	; 0x30
10003eec:	b2db      	uxtb	r3, r3
10003eee:	1c1a      	adds	r2, r3, #0
10003ef0:	0092      	lsls	r2, r2, #2
10003ef2:	18d3      	adds	r3, r2, r3
10003ef4:	18db      	adds	r3, r3, r3
10003ef6:	b2da      	uxtb	r2, r3
10003ef8:	4b1f      	ldr	r3, [pc, #124]	; (10003f78 <IRQ18_Handler+0x168>)
10003efa:	7a5b      	ldrb	r3, [r3, #9]
10003efc:	18d3      	adds	r3, r2, r3
10003efe:	b2db      	uxtb	r3, r3
10003f00:	3b30      	subs	r3, #48	; 0x30
10003f02:	b2da      	uxtb	r2, r3
10003f04:	4b1f      	ldr	r3, [pc, #124]	; (10003f84 <IRQ18_Handler+0x174>)
10003f06:	701a      	strb	r2, [r3, #0]
	  rtcTime.minute  	= (NTPdata[10]-48)*10 + (NTPdata[11]-48);
10003f08:	4b1b      	ldr	r3, [pc, #108]	; (10003f78 <IRQ18_Handler+0x168>)
10003f0a:	7a9b      	ldrb	r3, [r3, #10]
10003f0c:	3b30      	subs	r3, #48	; 0x30
10003f0e:	b2db      	uxtb	r3, r3
10003f10:	1c1a      	adds	r2, r3, #0
10003f12:	0092      	lsls	r2, r2, #2
10003f14:	18d3      	adds	r3, r2, r3
10003f16:	18db      	adds	r3, r3, r3
10003f18:	b2da      	uxtb	r2, r3
10003f1a:	4b17      	ldr	r3, [pc, #92]	; (10003f78 <IRQ18_Handler+0x168>)
10003f1c:	7adb      	ldrb	r3, [r3, #11]
10003f1e:	18d3      	adds	r3, r2, r3
10003f20:	b2db      	uxtb	r3, r3
10003f22:	3b30      	subs	r3, #48	; 0x30
10003f24:	b2da      	uxtb	r2, r3
10003f26:	4b17      	ldr	r3, [pc, #92]	; (10003f84 <IRQ18_Handler+0x174>)
10003f28:	705a      	strb	r2, [r3, #1]
	  rtcTime.second	= (NTPdata[12]-48)*10 + (NTPdata[13]-48);
10003f2a:	4b13      	ldr	r3, [pc, #76]	; (10003f78 <IRQ18_Handler+0x168>)
10003f2c:	7b1b      	ldrb	r3, [r3, #12]
10003f2e:	3b30      	subs	r3, #48	; 0x30
10003f30:	b2db      	uxtb	r3, r3
10003f32:	1c1a      	adds	r2, r3, #0
10003f34:	0092      	lsls	r2, r2, #2
10003f36:	18d3      	adds	r3, r2, r3
10003f38:	18db      	adds	r3, r3, r3
10003f3a:	b2da      	uxtb	r2, r3
10003f3c:	4b0e      	ldr	r3, [pc, #56]	; (10003f78 <IRQ18_Handler+0x168>)
10003f3e:	7b5b      	ldrb	r3, [r3, #13]
10003f40:	18d3      	adds	r3, r2, r3
10003f42:	b2db      	uxtb	r3, r3
10003f44:	3b30      	subs	r3, #48	; 0x30
10003f46:	b2da      	uxtb	r2, r3
10003f48:	4b0e      	ldr	r3, [pc, #56]	; (10003f84 <IRQ18_Handler+0x174>)
10003f4a:	709a      	strb	r2, [r3, #2]
	  n=0;
10003f4c:	4b09      	ldr	r3, [pc, #36]	; (10003f74 <IRQ18_Handler+0x164>)
10003f4e:	2200      	movs	r2, #0
10003f50:	701a      	strb	r2, [r3, #0]
10003f52:	e005      	b.n	10003f60 <IRQ18_Handler+0x150>
	}
	else {n++;}
10003f54:	4b07      	ldr	r3, [pc, #28]	; (10003f74 <IRQ18_Handler+0x164>)
10003f56:	781b      	ldrb	r3, [r3, #0]
10003f58:	3301      	adds	r3, #1
10003f5a:	b2da      	uxtb	r2, r3
10003f5c:	4b05      	ldr	r3, [pc, #20]	; (10003f74 <IRQ18_Handler+0x164>)
10003f5e:	701a      	strb	r2, [r3, #0]
	XMC_UART_CH_ClearStatusFlag(XMC_USIC0_CH0,XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION);
10003f60:	2390      	movs	r3, #144	; 0x90
10003f62:	05da      	lsls	r2, r3, #23
10003f64:	2380      	movs	r3, #128	; 0x80
10003f66:	01db      	lsls	r3, r3, #7
10003f68:	1c10      	adds	r0, r2, #0
10003f6a:	1c19      	adds	r1, r3, #0
10003f6c:	f7ff fa54 	bl	10003418 <XMC_UART_CH_ClearStatusFlag>
}
10003f70:	46bd      	mov	sp, r7
10003f72:	bd98      	pop	{r3, r4, r7, pc}
10003f74:	2000074a 	.word	0x2000074a
10003f78:	2000074c 	.word	0x2000074c
10003f7c:	20000d94 	.word	0x20000d94
10003f80:	20000a8c 	.word	0x20000a8c
10003f84:	20000d2c 	.word	0x20000d2c

10003f88 <SysTick_Handler>:

void SysTick_Handler(void)
{
10003f88:	b580      	push	{r7, lr}
10003f8a:	af00      	add	r7, sp, #0
	if(sysTickHandle.enable)
10003f8c:	4b0a      	ldr	r3, [pc, #40]	; (10003fb8 <SysTick_Handler+0x30>)
10003f8e:	781b      	ldrb	r3, [r3, #0]
10003f90:	2b00      	cmp	r3, #0
10003f92:	d00f      	beq.n	10003fb4 <SysTick_Handler+0x2c>
	{
		sysTickHandle.count--;
10003f94:	4b08      	ldr	r3, [pc, #32]	; (10003fb8 <SysTick_Handler+0x30>)
10003f96:	885b      	ldrh	r3, [r3, #2]
10003f98:	3b01      	subs	r3, #1
10003f9a:	b29a      	uxth	r2, r3
10003f9c:	4b06      	ldr	r3, [pc, #24]	; (10003fb8 <SysTick_Handler+0x30>)
10003f9e:	805a      	strh	r2, [r3, #2]
		if(sysTickHandle.count == 0)
10003fa0:	4b05      	ldr	r3, [pc, #20]	; (10003fb8 <SysTick_Handler+0x30>)
10003fa2:	885b      	ldrh	r3, [r3, #2]
10003fa4:	2b00      	cmp	r3, #0
10003fa6:	d105      	bne.n	10003fb4 <SysTick_Handler+0x2c>
		{
			sysTickHandle.enable  = false;
10003fa8:	4b03      	ldr	r3, [pc, #12]	; (10003fb8 <SysTick_Handler+0x30>)
10003faa:	2200      	movs	r2, #0
10003fac:	701a      	strb	r2, [r3, #0]
			sysTickHandle.isTimeOut = true;
10003fae:	4b02      	ldr	r3, [pc, #8]	; (10003fb8 <SysTick_Handler+0x30>)
10003fb0:	2201      	movs	r2, #1
10003fb2:	711a      	strb	r2, [r3, #4]
		}
	}
}
10003fb4:	46bd      	mov	sp, r7
10003fb6:	bd80      	pop	{r7, pc}
10003fb8:	20000b2c 	.word	0x20000b2c

10003fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10003fbc:	b580      	push	{r7, lr}
10003fbe:	b082      	sub	sp, #8
10003fc0:	af00      	add	r7, sp, #0
10003fc2:	1c02      	adds	r2, r0, #0
10003fc4:	1dfb      	adds	r3, r7, #7
10003fc6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10003fc8:	1dfb      	adds	r3, r7, #7
10003fca:	781b      	ldrb	r3, [r3, #0]
10003fcc:	2b7f      	cmp	r3, #127	; 0x7f
10003fce:	d809      	bhi.n	10003fe4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
10003fd0:	4b06      	ldr	r3, [pc, #24]	; (10003fec <__NVIC_EnableIRQ+0x30>)
10003fd2:	1dfa      	adds	r2, r7, #7
10003fd4:	7812      	ldrb	r2, [r2, #0]
10003fd6:	1c11      	adds	r1, r2, #0
10003fd8:	221f      	movs	r2, #31
10003fda:	400a      	ands	r2, r1
10003fdc:	2101      	movs	r1, #1
10003fde:	4091      	lsls	r1, r2
10003fe0:	1c0a      	adds	r2, r1, #0
10003fe2:	601a      	str	r2, [r3, #0]
  }
}
10003fe4:	46bd      	mov	sp, r7
10003fe6:	b002      	add	sp, #8
10003fe8:	bd80      	pop	{r7, pc}
10003fea:	46c0      	nop			; (mov r8, r8)
10003fec:	e000e100 	.word	0xe000e100

10003ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10003ff0:	b5b0      	push	{r4, r5, r7, lr}
10003ff2:	b082      	sub	sp, #8
10003ff4:	af00      	add	r7, sp, #0
10003ff6:	1c02      	adds	r2, r0, #0
10003ff8:	6039      	str	r1, [r7, #0]
10003ffa:	1dfb      	adds	r3, r7, #7
10003ffc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10003ffe:	1dfb      	adds	r3, r7, #7
10004000:	781b      	ldrb	r3, [r3, #0]
10004002:	2b7f      	cmp	r3, #127	; 0x7f
10004004:	d827      	bhi.n	10004056 <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004006:	4c2d      	ldr	r4, [pc, #180]	; (100040bc <__NVIC_SetPriority+0xcc>)
10004008:	1dfb      	adds	r3, r7, #7
1000400a:	781b      	ldrb	r3, [r3, #0]
1000400c:	b25b      	sxtb	r3, r3
1000400e:	089b      	lsrs	r3, r3, #2
10004010:	492a      	ldr	r1, [pc, #168]	; (100040bc <__NVIC_SetPriority+0xcc>)
10004012:	1dfa      	adds	r2, r7, #7
10004014:	7812      	ldrb	r2, [r2, #0]
10004016:	b252      	sxtb	r2, r2
10004018:	0892      	lsrs	r2, r2, #2
1000401a:	32c0      	adds	r2, #192	; 0xc0
1000401c:	0092      	lsls	r2, r2, #2
1000401e:	5852      	ldr	r2, [r2, r1]
10004020:	1df9      	adds	r1, r7, #7
10004022:	7809      	ldrb	r1, [r1, #0]
10004024:	1c08      	adds	r0, r1, #0
10004026:	2103      	movs	r1, #3
10004028:	4001      	ands	r1, r0
1000402a:	00c9      	lsls	r1, r1, #3
1000402c:	1c08      	adds	r0, r1, #0
1000402e:	21ff      	movs	r1, #255	; 0xff
10004030:	4081      	lsls	r1, r0
10004032:	43c9      	mvns	r1, r1
10004034:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10004036:	683a      	ldr	r2, [r7, #0]
10004038:	0192      	lsls	r2, r2, #6
1000403a:	20ff      	movs	r0, #255	; 0xff
1000403c:	4002      	ands	r2, r0
1000403e:	1df8      	adds	r0, r7, #7
10004040:	7800      	ldrb	r0, [r0, #0]
10004042:	1c05      	adds	r5, r0, #0
10004044:	2003      	movs	r0, #3
10004046:	4028      	ands	r0, r5
10004048:	00c0      	lsls	r0, r0, #3
1000404a:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000404c:	430a      	orrs	r2, r1
1000404e:	33c0      	adds	r3, #192	; 0xc0
10004050:	009b      	lsls	r3, r3, #2
10004052:	511a      	str	r2, [r3, r4]
10004054:	e02e      	b.n	100040b4 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004056:	4c1a      	ldr	r4, [pc, #104]	; (100040c0 <__NVIC_SetPriority+0xd0>)
10004058:	1dfb      	adds	r3, r7, #7
1000405a:	781b      	ldrb	r3, [r3, #0]
1000405c:	1c1a      	adds	r2, r3, #0
1000405e:	230f      	movs	r3, #15
10004060:	4013      	ands	r3, r2
10004062:	3b08      	subs	r3, #8
10004064:	0899      	lsrs	r1, r3, #2
10004066:	4a16      	ldr	r2, [pc, #88]	; (100040c0 <__NVIC_SetPriority+0xd0>)
10004068:	1dfb      	adds	r3, r7, #7
1000406a:	781b      	ldrb	r3, [r3, #0]
1000406c:	1c18      	adds	r0, r3, #0
1000406e:	230f      	movs	r3, #15
10004070:	4003      	ands	r3, r0
10004072:	3b08      	subs	r3, #8
10004074:	089b      	lsrs	r3, r3, #2
10004076:	3306      	adds	r3, #6
10004078:	009b      	lsls	r3, r3, #2
1000407a:	18d3      	adds	r3, r2, r3
1000407c:	685b      	ldr	r3, [r3, #4]
1000407e:	1dfa      	adds	r2, r7, #7
10004080:	7812      	ldrb	r2, [r2, #0]
10004082:	1c10      	adds	r0, r2, #0
10004084:	2203      	movs	r2, #3
10004086:	4002      	ands	r2, r0
10004088:	00d2      	lsls	r2, r2, #3
1000408a:	1c10      	adds	r0, r2, #0
1000408c:	22ff      	movs	r2, #255	; 0xff
1000408e:	4082      	lsls	r2, r0
10004090:	43d2      	mvns	r2, r2
10004092:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10004094:	683b      	ldr	r3, [r7, #0]
10004096:	019b      	lsls	r3, r3, #6
10004098:	20ff      	movs	r0, #255	; 0xff
1000409a:	4003      	ands	r3, r0
1000409c:	1df8      	adds	r0, r7, #7
1000409e:	7800      	ldrb	r0, [r0, #0]
100040a0:	1c05      	adds	r5, r0, #0
100040a2:	2003      	movs	r0, #3
100040a4:	4028      	ands	r0, r5
100040a6:	00c0      	lsls	r0, r0, #3
100040a8:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100040aa:	431a      	orrs	r2, r3
100040ac:	1d8b      	adds	r3, r1, #6
100040ae:	009b      	lsls	r3, r3, #2
100040b0:	18e3      	adds	r3, r4, r3
100040b2:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
100040b4:	46bd      	mov	sp, r7
100040b6:	b002      	add	sp, #8
100040b8:	bdb0      	pop	{r4, r5, r7, pc}
100040ba:	46c0      	nop			; (mov r8, r8)
100040bc:	e000e100 	.word	0xe000e100
100040c0:	e000ed00 	.word	0xe000ed00

100040c4 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
100040c4:	b580      	push	{r7, lr}
100040c6:	b082      	sub	sp, #8
100040c8:	af00      	add	r7, sp, #0
100040ca:	6078      	str	r0, [r7, #4]
100040cc:	1c08      	adds	r0, r1, #0
100040ce:	1c11      	adds	r1, r2, #0
100040d0:	1cfb      	adds	r3, r7, #3
100040d2:	1c02      	adds	r2, r0, #0
100040d4:	701a      	strb	r2, [r3, #0]
100040d6:	1cbb      	adds	r3, r7, #2
100040d8:	1c0a      	adds	r2, r1, #0
100040da:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
100040dc:	1cfb      	adds	r3, r7, #3
100040de:	7818      	ldrb	r0, [r3, #0]
100040e0:	1cfb      	adds	r3, r7, #3
100040e2:	781b      	ldrb	r3, [r3, #0]
100040e4:	687a      	ldr	r2, [r7, #4]
100040e6:	3306      	adds	r3, #6
100040e8:	009b      	lsls	r3, r3, #2
100040ea:	18d3      	adds	r3, r2, r3
100040ec:	685b      	ldr	r3, [r3, #4]
100040ee:	2207      	movs	r2, #7
100040f0:	4393      	bics	r3, r2
100040f2:	1c1a      	adds	r2, r3, #0
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
100040f4:	1cbb      	adds	r3, r7, #2
100040f6:	781b      	ldrb	r3, [r3, #0]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
100040f8:	431a      	orrs	r2, r3
100040fa:	6879      	ldr	r1, [r7, #4]
100040fc:	1d83      	adds	r3, r0, #6
100040fe:	009b      	lsls	r3, r3, #2
10004100:	18cb      	adds	r3, r1, r3
10004102:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
10004104:	46bd      	mov	sp, r7
10004106:	b002      	add	sp, #8
10004108:	bd80      	pop	{r7, pc}
1000410a:	46c0      	nop			; (mov r8, r8)

1000410c <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
1000410c:	b580      	push	{r7, lr}
1000410e:	b082      	sub	sp, #8
10004110:	af00      	add	r7, sp, #0
10004112:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
10004114:	687b      	ldr	r3, [r7, #4]
10004116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10004118:	b2db      	uxtb	r3, r3
1000411a:	227f      	movs	r2, #127	; 0x7f
1000411c:	4393      	bics	r3, r2
1000411e:	b2db      	uxtb	r3, r3
}
10004120:	1c18      	adds	r0, r3, #0
10004122:	46bd      	mov	sp, r7
10004124:	b002      	add	sp, #8
10004126:	bd80      	pop	{r7, pc}

10004128 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
10004128:	b580      	push	{r7, lr}
1000412a:	b082      	sub	sp, #8
1000412c:	af00      	add	r7, sp, #0
1000412e:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
10004130:	687b      	ldr	r3, [r7, #4]
10004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10004134:	220f      	movs	r2, #15
10004136:	4393      	bics	r3, r2
10004138:	2202      	movs	r2, #2
1000413a:	431a      	orrs	r2, r3
1000413c:	687b      	ldr	r3, [r7, #4]
1000413e:	641a      	str	r2, [r3, #64]	; 0x40
}
10004140:	46bd      	mov	sp, r7
10004142:	b002      	add	sp, #8
10004144:	bd80      	pop	{r7, pc}
10004146:	46c0      	nop			; (mov r8, r8)

10004148 <XMC_UART_CH_SelectInterruptNodePointer>:
 * XMC_UART_CH_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SelectInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                            const XMC_UART_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                            const uint32_t service_request)
{
10004148:	b580      	push	{r7, lr}
1000414a:	b084      	sub	sp, #16
1000414c:	af00      	add	r7, sp, #0
1000414e:	60f8      	str	r0, [r7, #12]
10004150:	607a      	str	r2, [r7, #4]
10004152:	230b      	movs	r3, #11
10004154:	18fb      	adds	r3, r7, r3
10004156:	1c0a      	adds	r2, r1, #0
10004158:	701a      	strb	r2, [r3, #0]
  XMC_USIC_CH_SetInterruptNodePointer(channel, (XMC_USIC_CH_INTERRUPT_NODE_POINTER_t)interrupt_node,
1000415a:	68f9      	ldr	r1, [r7, #12]
1000415c:	230b      	movs	r3, #11
1000415e:	18fb      	adds	r3, r7, r3
10004160:	781a      	ldrb	r2, [r3, #0]
10004162:	687b      	ldr	r3, [r7, #4]
10004164:	1c08      	adds	r0, r1, #0
10004166:	1c11      	adds	r1, r2, #0
10004168:	1c1a      	adds	r2, r3, #0
1000416a:	f7fe fb47 	bl	100027fc <XMC_USIC_CH_SetInterruptNodePointer>
		                                       (uint32_t)service_request);
}
1000416e:	46bd      	mov	sp, r7
10004170:	b004      	add	sp, #16
10004172:	bd80      	pop	{r7, pc}

10004174 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
10004174:	b580      	push	{r7, lr}
10004176:	b082      	sub	sp, #8
10004178:	af00      	add	r7, sp, #0
1000417a:	6078      	str	r0, [r7, #4]
1000417c:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
1000417e:	687b      	ldr	r3, [r7, #4]
10004180:	683a      	ldr	r2, [r7, #0]
10004182:	64da      	str	r2, [r3, #76]	; 0x4c
}
10004184:	46bd      	mov	sp, r7
10004186:	b002      	add	sp, #8
10004188:	bd80      	pop	{r7, pc}
1000418a:	46c0      	nop			; (mov r8, r8)

1000418c <XMC_UART_CH_SetInputSource>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_UART_CH_INPUT_t input, const uint8_t source)
{
1000418c:	b580      	push	{r7, lr}
1000418e:	b082      	sub	sp, #8
10004190:	af00      	add	r7, sp, #0
10004192:	6078      	str	r0, [r7, #4]
10004194:	1c08      	adds	r0, r1, #0
10004196:	1c11      	adds	r1, r2, #0
10004198:	1cfb      	adds	r3, r7, #3
1000419a:	1c02      	adds	r2, r0, #0
1000419c:	701a      	strb	r2, [r3, #0]
1000419e:	1cbb      	adds	r3, r7, #2
100041a0:	1c0a      	adds	r2, r1, #0
100041a2:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~(USIC_CH_DX0CR_INSW_Msk|USIC_CH_DX0CR_DSEN_Msk)));
100041a4:	1cfb      	adds	r3, r7, #3
100041a6:	7818      	ldrb	r0, [r3, #0]
100041a8:	1cfb      	adds	r3, r7, #3
100041aa:	781b      	ldrb	r3, [r3, #0]
100041ac:	687a      	ldr	r2, [r7, #4]
100041ae:	3306      	adds	r3, #6
100041b0:	009b      	lsls	r3, r3, #2
100041b2:	18d3      	adds	r3, r2, r3
100041b4:	685b      	ldr	r3, [r3, #4]
100041b6:	2250      	movs	r2, #80	; 0x50
100041b8:	4393      	bics	r3, r2
100041ba:	1c1a      	adds	r2, r3, #0
100041bc:	6879      	ldr	r1, [r7, #4]
100041be:	1d83      	adds	r3, r0, #6
100041c0:	009b      	lsls	r3, r3, #2
100041c2:	18cb      	adds	r3, r1, r3
100041c4:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
100041c6:	6879      	ldr	r1, [r7, #4]
100041c8:	1cfb      	adds	r3, r7, #3
100041ca:	781a      	ldrb	r2, [r3, #0]
100041cc:	1cbb      	adds	r3, r7, #2
100041ce:	781b      	ldrb	r3, [r3, #0]
100041d0:	1c08      	adds	r0, r1, #0
100041d2:	1c11      	adds	r1, r2, #0
100041d4:	1c1a      	adds	r2, r3, #0
100041d6:	f7ff ff75 	bl	100040c4 <XMC_USIC_CH_SetInputSource>
}
100041da:	46bd      	mov	sp, r7
100041dc:	b002      	add	sp, #8
100041de:	bd80      	pop	{r7, pc}

100041e0 <RS232_Connection_Init>:
 */

#include "rs232_operation.h"

void RS232_Connection_Init(void)
{
100041e0:	b580      	push	{r7, lr}
100041e2:	af00      	add	r7, sp, #0
    XMC_GPIO_Init(P1_2, &rs232_tx_config);
100041e4:	4a1e      	ldr	r2, [pc, #120]	; (10004260 <RS232_Connection_Init+0x80>)
100041e6:	4b1f      	ldr	r3, [pc, #124]	; (10004264 <RS232_Connection_Init+0x84>)
100041e8:	1c10      	adds	r0, r2, #0
100041ea:	2102      	movs	r1, #2
100041ec:	1c1a      	adds	r2, r3, #0
100041ee:	f7fc fffd 	bl	100011ec <XMC_GPIO_Init>
    XMC_GPIO_Init(P1_3, &rs232_rx_config);
100041f2:	4a1b      	ldr	r2, [pc, #108]	; (10004260 <RS232_Connection_Init+0x80>)
100041f4:	4b1c      	ldr	r3, [pc, #112]	; (10004268 <RS232_Connection_Init+0x88>)
100041f6:	1c10      	adds	r0, r2, #0
100041f8:	2103      	movs	r1, #3
100041fa:	1c1a      	adds	r2, r3, #0
100041fc:	f7fc fff6 	bl	100011ec <XMC_GPIO_Init>

   	XMC_USIC_CH_Enable(XMC_USIC0_CH1);
10004200:	4b1a      	ldr	r3, [pc, #104]	; (1000426c <RS232_Connection_Init+0x8c>)
10004202:	1c18      	adds	r0, r3, #0
10004204:	f7fe fa48 	bl	10002698 <XMC_USIC_CH_Enable>
	XMC_UART_CH_Init(XMC_USIC0_CH1, &rs232_config);
10004208:	4a18      	ldr	r2, [pc, #96]	; (1000426c <RS232_Connection_Init+0x8c>)
1000420a:	4b19      	ldr	r3, [pc, #100]	; (10004270 <RS232_Connection_Init+0x90>)
1000420c:	1c10      	adds	r0, r2, #0
1000420e:	1c19      	adds	r1, r3, #0
10004210:	f7fe f980 	bl	10002514 <XMC_UART_CH_Init>
	XMC_UART_CH_SetInputSource(XMC_USIC0_CH1, XMC_UART_CH_INPUT_RXD, USIC0_C1_DX0_P1_3);
10004214:	4b15      	ldr	r3, [pc, #84]	; (1000426c <RS232_Connection_Init+0x8c>)
10004216:	1c18      	adds	r0, r3, #0
10004218:	2100      	movs	r1, #0
1000421a:	2200      	movs	r2, #0
1000421c:	f7ff ffb6 	bl	1000418c <XMC_UART_CH_SetInputSource>
	XMC_UART_CH_EnableEvent(XMC_USIC0_CH1,XMC_UART_CH_EVENT_STANDARD_RECEIVE); // PSR.RFF
10004220:	4a12      	ldr	r2, [pc, #72]	; (1000426c <RS232_Connection_Init+0x8c>)
10004222:	2380      	movs	r3, #128	; 0x80
10004224:	01db      	lsls	r3, r3, #7
10004226:	1c10      	adds	r0, r2, #0
10004228:	1c19      	adds	r1, r3, #0
1000422a:	f7fe fa1b 	bl	10002664 <XMC_UART_CH_EnableEvent>
	XMC_UART_CH_SelectInterruptNodePointer(XMC_USIC0_CH1, XMC_UART_CH_INTERRUPT_NODE_POINTER_RECEIVE, 4);
1000422e:	4b0f      	ldr	r3, [pc, #60]	; (1000426c <RS232_Connection_Init+0x8c>)
10004230:	1c18      	adds	r0, r3, #0
10004232:	2108      	movs	r1, #8
10004234:	2204      	movs	r2, #4
10004236:	f7ff ff87 	bl	10004148 <XMC_UART_CH_SelectInterruptNodePointer>
	XMC_SCU_SetInterruptControl(IRQ25_IRQn, XMC_SCU_IRQCTRL_USIC0_SR4_IRQ25);
1000423a:	4b0e      	ldr	r3, [pc, #56]	; (10004274 <RS232_Connection_Init+0x94>)
1000423c:	2019      	movs	r0, #25
1000423e:	1c19      	adds	r1, r3, #0
10004240:	f7fd f8d0 	bl	100013e4 <XMC_SCU_SetInterruptControl>
	NVIC_SetPriority(IRQ25_IRQn, 10U);
10004244:	2019      	movs	r0, #25
10004246:	210a      	movs	r1, #10
10004248:	f7ff fed2 	bl	10003ff0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQ25_IRQn);
1000424c:	2019      	movs	r0, #25
1000424e:	f7ff feb5 	bl	10003fbc <__NVIC_EnableIRQ>

	XMC_UART_CH_Start(XMC_USIC0_CH1); // Sets the USIC channel operation mode to UART mode
10004252:	4b06      	ldr	r3, [pc, #24]	; (1000426c <RS232_Connection_Init+0x8c>)
10004254:	1c18      	adds	r0, r3, #0
10004256:	f7ff ff67 	bl	10004128 <XMC_UART_CH_Start>
}
1000425a:	46bd      	mov	sp, r7
1000425c:	bd80      	pop	{r7, pc}
1000425e:	46c0      	nop			; (mov r8, r8)
10004260:	40040100 	.word	0x40040100
10004264:	20000554 	.word	0x20000554
10004268:	20000818 	.word	0x20000818
1000426c:	48000200 	.word	0x48000200
10004270:	2000055c 	.word	0x2000055c
10004274:	00001902 	.word	0x00001902

10004278 <RS232_SendString>:

void RS232_SendString(XMC_USIC_CH_t *const channel, char* DataPtr, uint32_t count)
{
10004278:	b580      	push	{r7, lr}
1000427a:	b084      	sub	sp, #16
1000427c:	af00      	add	r7, sp, #0
1000427e:	60f8      	str	r0, [r7, #12]
10004280:	60b9      	str	r1, [r7, #8]
10004282:	607a      	str	r2, [r7, #4]
	while(count)
10004284:	e01a      	b.n	100042bc <RS232_SendString+0x44>
	{
	    /* Wait till the Transmit Buffer is free for transmission */
	    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10004286:	46c0      	nop			; (mov r8, r8)
10004288:	68fb      	ldr	r3, [r7, #12]
1000428a:	1c18      	adds	r0, r3, #0
1000428c:	f7ff ff3e 	bl	1000410c <XMC_USIC_CH_GetTransmitBufferStatus>
10004290:	1e03      	subs	r3, r0, #0
10004292:	2b80      	cmp	r3, #128	; 0x80
10004294:	d0f8      	beq.n	10004288 <RS232_SendString+0x10>
	    {
	    }

	    /* Clear the Transmit Buffer indication flag */
	    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
10004296:	68fa      	ldr	r2, [r7, #12]
10004298:	2380      	movs	r3, #128	; 0x80
1000429a:	019b      	lsls	r3, r3, #6
1000429c:	1c10      	adds	r0, r2, #0
1000429e:	1c19      	adds	r1, r3, #0
100042a0:	f7ff ff68 	bl	10004174 <XMC_UART_CH_ClearStatusFlag>

	    /*Transmit data */
	    channel->TBUF[0U] = *DataPtr;
100042a4:	68bb      	ldr	r3, [r7, #8]
100042a6:	781b      	ldrb	r3, [r3, #0]
100042a8:	1c19      	adds	r1, r3, #0
100042aa:	68fb      	ldr	r3, [r7, #12]
100042ac:	2280      	movs	r2, #128	; 0x80
100042ae:	5099      	str	r1, [r3, r2]

	    /* Shifts Pointer */
	    count--;
100042b0:	687b      	ldr	r3, [r7, #4]
100042b2:	3b01      	subs	r3, #1
100042b4:	607b      	str	r3, [r7, #4]
	    DataPtr++;
100042b6:	68bb      	ldr	r3, [r7, #8]
100042b8:	3301      	adds	r3, #1
100042ba:	60bb      	str	r3, [r7, #8]
	XMC_UART_CH_Start(XMC_USIC0_CH1); // Sets the USIC channel operation mode to UART mode
}

void RS232_SendString(XMC_USIC_CH_t *const channel, char* DataPtr, uint32_t count)
{
	while(count)
100042bc:	687b      	ldr	r3, [r7, #4]
100042be:	2b00      	cmp	r3, #0
100042c0:	d1e1      	bne.n	10004286 <RS232_SendString+0xe>

	    /* Shifts Pointer */
	    count--;
	    DataPtr++;
	 }
}
100042c2:	46bd      	mov	sp, r7
100042c4:	b004      	add	sp, #16
100042c6:	bd80      	pop	{r7, pc}

100042c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
100042c8:	b580      	push	{r7, lr}
100042ca:	b082      	sub	sp, #8
100042cc:	af00      	add	r7, sp, #0
100042ce:	1c02      	adds	r2, r0, #0
100042d0:	1dfb      	adds	r3, r7, #7
100042d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100042d4:	1dfb      	adds	r3, r7, #7
100042d6:	781b      	ldrb	r3, [r3, #0]
100042d8:	2b7f      	cmp	r3, #127	; 0x7f
100042da:	d809      	bhi.n	100042f0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
100042dc:	4b06      	ldr	r3, [pc, #24]	; (100042f8 <__NVIC_EnableIRQ+0x30>)
100042de:	1dfa      	adds	r2, r7, #7
100042e0:	7812      	ldrb	r2, [r2, #0]
100042e2:	1c11      	adds	r1, r2, #0
100042e4:	221f      	movs	r2, #31
100042e6:	400a      	ands	r2, r1
100042e8:	2101      	movs	r1, #1
100042ea:	4091      	lsls	r1, r2
100042ec:	1c0a      	adds	r2, r1, #0
100042ee:	601a      	str	r2, [r3, #0]
  }
}
100042f0:	46bd      	mov	sp, r7
100042f2:	b002      	add	sp, #8
100042f4:	bd80      	pop	{r7, pc}
100042f6:	46c0      	nop			; (mov r8, r8)
100042f8:	e000e100 	.word	0xe000e100

100042fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100042fc:	b5b0      	push	{r4, r5, r7, lr}
100042fe:	b082      	sub	sp, #8
10004300:	af00      	add	r7, sp, #0
10004302:	1c02      	adds	r2, r0, #0
10004304:	6039      	str	r1, [r7, #0]
10004306:	1dfb      	adds	r3, r7, #7
10004308:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1000430a:	1dfb      	adds	r3, r7, #7
1000430c:	781b      	ldrb	r3, [r3, #0]
1000430e:	2b7f      	cmp	r3, #127	; 0x7f
10004310:	d827      	bhi.n	10004362 <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004312:	4c2d      	ldr	r4, [pc, #180]	; (100043c8 <__NVIC_SetPriority+0xcc>)
10004314:	1dfb      	adds	r3, r7, #7
10004316:	781b      	ldrb	r3, [r3, #0]
10004318:	b25b      	sxtb	r3, r3
1000431a:	089b      	lsrs	r3, r3, #2
1000431c:	492a      	ldr	r1, [pc, #168]	; (100043c8 <__NVIC_SetPriority+0xcc>)
1000431e:	1dfa      	adds	r2, r7, #7
10004320:	7812      	ldrb	r2, [r2, #0]
10004322:	b252      	sxtb	r2, r2
10004324:	0892      	lsrs	r2, r2, #2
10004326:	32c0      	adds	r2, #192	; 0xc0
10004328:	0092      	lsls	r2, r2, #2
1000432a:	5852      	ldr	r2, [r2, r1]
1000432c:	1df9      	adds	r1, r7, #7
1000432e:	7809      	ldrb	r1, [r1, #0]
10004330:	1c08      	adds	r0, r1, #0
10004332:	2103      	movs	r1, #3
10004334:	4001      	ands	r1, r0
10004336:	00c9      	lsls	r1, r1, #3
10004338:	1c08      	adds	r0, r1, #0
1000433a:	21ff      	movs	r1, #255	; 0xff
1000433c:	4081      	lsls	r1, r0
1000433e:	43c9      	mvns	r1, r1
10004340:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10004342:	683a      	ldr	r2, [r7, #0]
10004344:	0192      	lsls	r2, r2, #6
10004346:	20ff      	movs	r0, #255	; 0xff
10004348:	4002      	ands	r2, r0
1000434a:	1df8      	adds	r0, r7, #7
1000434c:	7800      	ldrb	r0, [r0, #0]
1000434e:	1c05      	adds	r5, r0, #0
10004350:	2003      	movs	r0, #3
10004352:	4028      	ands	r0, r5
10004354:	00c0      	lsls	r0, r0, #3
10004356:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004358:	430a      	orrs	r2, r1
1000435a:	33c0      	adds	r3, #192	; 0xc0
1000435c:	009b      	lsls	r3, r3, #2
1000435e:	511a      	str	r2, [r3, r4]
10004360:	e02e      	b.n	100043c0 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004362:	4c1a      	ldr	r4, [pc, #104]	; (100043cc <__NVIC_SetPriority+0xd0>)
10004364:	1dfb      	adds	r3, r7, #7
10004366:	781b      	ldrb	r3, [r3, #0]
10004368:	1c1a      	adds	r2, r3, #0
1000436a:	230f      	movs	r3, #15
1000436c:	4013      	ands	r3, r2
1000436e:	3b08      	subs	r3, #8
10004370:	0899      	lsrs	r1, r3, #2
10004372:	4a16      	ldr	r2, [pc, #88]	; (100043cc <__NVIC_SetPriority+0xd0>)
10004374:	1dfb      	adds	r3, r7, #7
10004376:	781b      	ldrb	r3, [r3, #0]
10004378:	1c18      	adds	r0, r3, #0
1000437a:	230f      	movs	r3, #15
1000437c:	4003      	ands	r3, r0
1000437e:	3b08      	subs	r3, #8
10004380:	089b      	lsrs	r3, r3, #2
10004382:	3306      	adds	r3, #6
10004384:	009b      	lsls	r3, r3, #2
10004386:	18d3      	adds	r3, r2, r3
10004388:	685b      	ldr	r3, [r3, #4]
1000438a:	1dfa      	adds	r2, r7, #7
1000438c:	7812      	ldrb	r2, [r2, #0]
1000438e:	1c10      	adds	r0, r2, #0
10004390:	2203      	movs	r2, #3
10004392:	4002      	ands	r2, r0
10004394:	00d2      	lsls	r2, r2, #3
10004396:	1c10      	adds	r0, r2, #0
10004398:	22ff      	movs	r2, #255	; 0xff
1000439a:	4082      	lsls	r2, r0
1000439c:	43d2      	mvns	r2, r2
1000439e:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100043a0:	683b      	ldr	r3, [r7, #0]
100043a2:	019b      	lsls	r3, r3, #6
100043a4:	20ff      	movs	r0, #255	; 0xff
100043a6:	4003      	ands	r3, r0
100043a8:	1df8      	adds	r0, r7, #7
100043aa:	7800      	ldrb	r0, [r0, #0]
100043ac:	1c05      	adds	r5, r0, #0
100043ae:	2003      	movs	r0, #3
100043b0:	4028      	ands	r0, r5
100043b2:	00c0      	lsls	r0, r0, #3
100043b4:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100043b6:	431a      	orrs	r2, r3
100043b8:	1d8b      	adds	r3, r1, #6
100043ba:	009b      	lsls	r3, r3, #2
100043bc:	18e3      	adds	r3, r4, r3
100043be:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
100043c0:	46bd      	mov	sp, r7
100043c2:	b002      	add	sp, #8
100043c4:	bdb0      	pop	{r4, r5, r7, pc}
100043c6:	46c0      	nop			; (mov r8, r8)
100043c8:	e000e100 	.word	0xe000e100
100043cc:	e000ed00 	.word	0xe000ed00

100043d0 <XMC_VADC_GROUP_QueueTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
{
100043d0:	b580      	push	{r7, lr}
100043d2:	b082      	sub	sp, #8
100043d4:	af00      	add	r7, sp, #0
100043d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_TREV_Pos);
100043d8:	687a      	ldr	r2, [r7, #4]
100043da:	2382      	movs	r3, #130	; 0x82
100043dc:	005b      	lsls	r3, r3, #1
100043de:	58d3      	ldr	r3, [r2, r3]
100043e0:	2280      	movs	r2, #128	; 0x80
100043e2:	0092      	lsls	r2, r2, #2
100043e4:	431a      	orrs	r2, r3
100043e6:	1c11      	adds	r1, r2, #0
100043e8:	687a      	ldr	r2, [r7, #4]
100043ea:	2382      	movs	r3, #130	; 0x82
100043ec:	005b      	lsls	r3, r3, #1
100043ee:	50d1      	str	r1, [r2, r3]
}
100043f0:	46bd      	mov	sp, r7
100043f2:	b002      	add	sp, #8
100043f4:	bd80      	pop	{r7, pc}
100043f6:	46c0      	nop			; (mov r8, r8)

100043f8 <XMC_VADC_GROUP_QueueInsertChannel>:
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueRemoveChannel()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueInsertChannel(XMC_VADC_GROUP_t *const group_ptr,
                                                       const XMC_VADC_QUEUE_ENTRY_t entry)
{
100043f8:	b580      	push	{r7, lr}
100043fa:	b082      	sub	sp, #8
100043fc:	af00      	add	r7, sp, #0
100043fe:	6078      	str	r0, [r7, #4]
10004400:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_QueueInsertChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  /* Insert the channel physically and get the length of the queue*/
  group_ptr->QINR0 = entry.qinr0;
10004402:	6839      	ldr	r1, [r7, #0]
10004404:	687a      	ldr	r2, [r7, #4]
10004406:	2388      	movs	r3, #136	; 0x88
10004408:	005b      	lsls	r3, r3, #1
1000440a:	50d1      	str	r1, [r2, r3]
}
1000440c:	46bd      	mov	sp, r7
1000440e:	b002      	add	sp, #8
10004410:	bd80      	pop	{r7, pc}
10004412:	46c0      	nop			; (mov r8, r8)

10004414 <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
10004414:	b580      	push	{r7, lr}
10004416:	b084      	sub	sp, #16
10004418:	af00      	add	r7, sp, #0
1000441a:	60f8      	str	r0, [r7, #12]
1000441c:	60b9      	str	r1, [r7, #8]
1000441e:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
10004420:	687b      	ldr	r3, [r7, #4]
10004422:	6819      	ldr	r1, [r3, #0]
10004424:	68fb      	ldr	r3, [r7, #12]
10004426:	68ba      	ldr	r2, [r7, #8]
10004428:	32a0      	adds	r2, #160	; 0xa0
1000442a:	0092      	lsls	r2, r2, #2
1000442c:	50d1      	str	r1, [r2, r3]

}
1000442e:	46bd      	mov	sp, r7
10004430:	b004      	add	sp, #16
10004432:	bd80      	pop	{r7, pc}

10004434 <XMC_GPIO_SetOutputLevel>:
 *
 */


__STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_OUTPUT_LEVEL_t level)
{
10004434:	b580      	push	{r7, lr}
10004436:	b084      	sub	sp, #16
10004438:	af00      	add	r7, sp, #0
1000443a:	60f8      	str	r0, [r7, #12]
1000443c:	607a      	str	r2, [r7, #4]
1000443e:	230b      	movs	r3, #11
10004440:	18fb      	adds	r3, r7, r3
10004442:	1c0a      	adds	r2, r1, #0
10004444:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
  
  port->OMR = (uint32_t)level << pin;
10004446:	230b      	movs	r3, #11
10004448:	18fb      	adds	r3, r7, r3
1000444a:	781b      	ldrb	r3, [r3, #0]
1000444c:	687a      	ldr	r2, [r7, #4]
1000444e:	409a      	lsls	r2, r3
10004450:	68fb      	ldr	r3, [r7, #12]
10004452:	605a      	str	r2, [r3, #4]
}
10004454:	46bd      	mov	sp, r7
10004456:	b004      	add	sp, #16
10004458:	bd80      	pop	{r7, pc}
1000445a:	46c0      	nop			; (mov r8, r8)

1000445c <PDU_SensorADC_Init>:

#include "pdu_operation.h"


void PDU_SensorADC_Init(void)
{
1000445c:	b580      	push	{r7, lr}
1000445e:	af00      	add	r7, sp, #0
	XMC_GPIO_Init(P2_9,&adc_io);
10004460:	4a4c      	ldr	r2, [pc, #304]	; (10004594 <PDU_SensorADC_Init+0x138>)
10004462:	4b4d      	ldr	r3, [pc, #308]	; (10004598 <PDU_SensorADC_Init+0x13c>)
10004464:	1c10      	adds	r0, r2, #0
10004466:	2109      	movs	r1, #9
10004468:	1c1a      	adds	r2, r3, #0
1000446a:	f7fc febf 	bl	100011ec <XMC_GPIO_Init>
	XMC_GPIO_Init(P2_3,&adc_io);
1000446e:	4a49      	ldr	r2, [pc, #292]	; (10004594 <PDU_SensorADC_Init+0x138>)
10004470:	4b49      	ldr	r3, [pc, #292]	; (10004598 <PDU_SensorADC_Init+0x13c>)
10004472:	1c10      	adds	r0, r2, #0
10004474:	2103      	movs	r1, #3
10004476:	1c1a      	adds	r2, r3, #0
10004478:	f7fc feb8 	bl	100011ec <XMC_GPIO_Init>
	XMC_GPIO_Init(P2_4,&adc_io);
1000447c:	4a45      	ldr	r2, [pc, #276]	; (10004594 <PDU_SensorADC_Init+0x138>)
1000447e:	4b46      	ldr	r3, [pc, #280]	; (10004598 <PDU_SensorADC_Init+0x13c>)
10004480:	1c10      	adds	r0, r2, #0
10004482:	2104      	movs	r1, #4
10004484:	1c1a      	adds	r2, r3, #0
10004486:	f7fc feb1 	bl	100011ec <XMC_GPIO_Init>
	XMC_GPIO_Init(P2_5,&adc_io);
1000448a:	4a42      	ldr	r2, [pc, #264]	; (10004594 <PDU_SensorADC_Init+0x138>)
1000448c:	4b42      	ldr	r3, [pc, #264]	; (10004598 <PDU_SensorADC_Init+0x13c>)
1000448e:	1c10      	adds	r0, r2, #0
10004490:	2105      	movs	r1, #5
10004492:	1c1a      	adds	r2, r3, #0
10004494:	f7fc feaa 	bl	100011ec <XMC_GPIO_Init>

	XMC_VADC_GLOBAL_Init(VADC, &g_global_handle);
10004498:	4a40      	ldr	r2, [pc, #256]	; (1000459c <PDU_SensorADC_Init+0x140>)
1000449a:	4b41      	ldr	r3, [pc, #260]	; (100045a0 <PDU_SensorADC_Init+0x144>)
1000449c:	1c10      	adds	r0, r2, #0
1000449e:	1c19      	adds	r1, r3, #0
100044a0:	f7fe fa5e 	bl	10002960 <XMC_VADC_GLOBAL_Init>
	/* Configure a conversion kernel */
	XMC_VADC_GROUP_Init(VADC_G1, &g_group_handle);
100044a4:	4a3f      	ldr	r2, [pc, #252]	; (100045a4 <PDU_SensorADC_Init+0x148>)
100044a6:	4b40      	ldr	r3, [pc, #256]	; (100045a8 <PDU_SensorADC_Init+0x14c>)
100044a8:	1c10      	adds	r0, r2, #0
100044aa:	1c19      	adds	r1, r3, #0
100044ac:	f7fe fabe 	bl	10002a2c <XMC_VADC_GROUP_Init>

	/* Enable the analog converters */
	XMC_VADC_GROUP_SetPowerMode(VADC_G1, XMC_VADC_GROUP_POWERMODE_NORMAL);
100044b0:	4b3c      	ldr	r3, [pc, #240]	; (100045a4 <PDU_SensorADC_Init+0x148>)
100044b2:	1c18      	adds	r0, r3, #0
100044b4:	2103      	movs	r1, #3
100044b6:	f7fe fb61 	bl	10002b7c <XMC_VADC_GROUP_SetPowerMode>

	XMC_VADC_GLOBAL_StartupCalibration(VADC);		//XMC1400 EE step will not work with this API here
100044ba:	4b38      	ldr	r3, [pc, #224]	; (1000459c <PDU_SensorADC_Init+0x140>)
100044bc:	1c18      	adds	r0, r3, #0
100044be:	f7fe fa7b 	bl	100029b8 <XMC_VADC_GLOBAL_StartupCalibration>

	/* Configure the queue request source of the aforesaid conversion kernel */
	XMC_VADC_GROUP_QueueInit(VADC_G1, &g_queue_handle);
100044c2:	4a38      	ldr	r2, [pc, #224]	; (100045a4 <PDU_SensorADC_Init+0x148>)
100044c4:	4b39      	ldr	r3, [pc, #228]	; (100045ac <PDU_SensorADC_Init+0x150>)
100044c6:	1c10      	adds	r0, r2, #0
100044c8:	1c19      	adds	r1, r3, #0
100044ca:	f7fe fb73 	bl	10002bb4 <XMC_VADC_GROUP_QueueInit>

	XMC_VADC_GROUP_QueueInsertChannel(VADC_G1, g_queue_entry[0]);	// Queue no.0
100044ce:	4a35      	ldr	r2, [pc, #212]	; (100045a4 <PDU_SensorADC_Init+0x148>)
100044d0:	4b37      	ldr	r3, [pc, #220]	; (100045b0 <PDU_SensorADC_Init+0x154>)
100044d2:	681b      	ldr	r3, [r3, #0]
100044d4:	1c10      	adds	r0, r2, #0
100044d6:	1c19      	adds	r1, r3, #0
100044d8:	f7ff ff8e 	bl	100043f8 <XMC_VADC_GROUP_QueueInsertChannel>
	XMC_VADC_GROUP_QueueInsertChannel(VADC_G1, g_queue_entry[1]);	// Queue no.1
100044dc:	4a31      	ldr	r2, [pc, #196]	; (100045a4 <PDU_SensorADC_Init+0x148>)
100044de:	4b34      	ldr	r3, [pc, #208]	; (100045b0 <PDU_SensorADC_Init+0x154>)
100044e0:	685b      	ldr	r3, [r3, #4]
100044e2:	1c10      	adds	r0, r2, #0
100044e4:	1c19      	adds	r1, r3, #0
100044e6:	f7ff ff87 	bl	100043f8 <XMC_VADC_GROUP_QueueInsertChannel>
	XMC_VADC_GROUP_QueueInsertChannel(VADC_G1, g_queue_entry[2]);	// Queue no.2
100044ea:	4a2e      	ldr	r2, [pc, #184]	; (100045a4 <PDU_SensorADC_Init+0x148>)
100044ec:	4b30      	ldr	r3, [pc, #192]	; (100045b0 <PDU_SensorADC_Init+0x154>)
100044ee:	689b      	ldr	r3, [r3, #8]
100044f0:	1c10      	adds	r0, r2, #0
100044f2:	1c19      	adds	r1, r3, #0
100044f4:	f7ff ff80 	bl	100043f8 <XMC_VADC_GROUP_QueueInsertChannel>
	XMC_VADC_GROUP_QueueInsertChannel(VADC_G1, g_queue_entry[3]);	// Queue no.3
100044f8:	4a2a      	ldr	r2, [pc, #168]	; (100045a4 <PDU_SensorADC_Init+0x148>)
100044fa:	4b2d      	ldr	r3, [pc, #180]	; (100045b0 <PDU_SensorADC_Init+0x154>)
100044fc:	68db      	ldr	r3, [r3, #12]
100044fe:	1c10      	adds	r0, r2, #0
10004500:	1c19      	adds	r1, r3, #0
10004502:	f7ff ff79 	bl	100043f8 <XMC_VADC_GROUP_QueueInsertChannel>

	XMC_VADC_GROUP_ChannelInit(VADC_G1,4, &g_channel_handle[0]);	// G1 ch 4 P2_9
10004506:	4a27      	ldr	r2, [pc, #156]	; (100045a4 <PDU_SensorADC_Init+0x148>)
10004508:	4b2a      	ldr	r3, [pc, #168]	; (100045b4 <PDU_SensorADC_Init+0x158>)
1000450a:	1c10      	adds	r0, r2, #0
1000450c:	2104      	movs	r1, #4
1000450e:	1c1a      	adds	r2, r3, #0
10004510:	f7fe fba8 	bl	10002c64 <XMC_VADC_GROUP_ChannelInit>
	XMC_VADC_GROUP_ChannelInit(VADC_G1,5, &g_channel_handle[1]);	// G1 ch 5 P2_3
10004514:	4a23      	ldr	r2, [pc, #140]	; (100045a4 <PDU_SensorADC_Init+0x148>)
10004516:	4b28      	ldr	r3, [pc, #160]	; (100045b8 <PDU_SensorADC_Init+0x15c>)
10004518:	1c10      	adds	r0, r2, #0
1000451a:	2105      	movs	r1, #5
1000451c:	1c1a      	adds	r2, r3, #0
1000451e:	f7fe fba1 	bl	10002c64 <XMC_VADC_GROUP_ChannelInit>
	XMC_VADC_GROUP_ChannelInit(VADC_G1,6, &g_channel_handle[2]);	// G1 ch 6 P2_4
10004522:	4a20      	ldr	r2, [pc, #128]	; (100045a4 <PDU_SensorADC_Init+0x148>)
10004524:	4b25      	ldr	r3, [pc, #148]	; (100045bc <PDU_SensorADC_Init+0x160>)
10004526:	1c10      	adds	r0, r2, #0
10004528:	2106      	movs	r1, #6
1000452a:	1c1a      	adds	r2, r3, #0
1000452c:	f7fe fb9a 	bl	10002c64 <XMC_VADC_GROUP_ChannelInit>
	XMC_VADC_GROUP_ChannelInit(VADC_G1,7, &g_channel_handle[3]);	// G1 ch 7 P2_5
10004530:	4a1c      	ldr	r2, [pc, #112]	; (100045a4 <PDU_SensorADC_Init+0x148>)
10004532:	4b23      	ldr	r3, [pc, #140]	; (100045c0 <PDU_SensorADC_Init+0x164>)
10004534:	1c10      	adds	r0, r2, #0
10004536:	2107      	movs	r1, #7
10004538:	1c1a      	adds	r2, r3, #0
1000453a:	f7fe fb93 	bl	10002c64 <XMC_VADC_GROUP_ChannelInit>

	XMC_VADC_GROUP_ResultInit(VADC_G1, 0, &g_result_handle[0]);
1000453e:	4a19      	ldr	r2, [pc, #100]	; (100045a4 <PDU_SensorADC_Init+0x148>)
10004540:	4b20      	ldr	r3, [pc, #128]	; (100045c4 <PDU_SensorADC_Init+0x168>)
10004542:	1c10      	adds	r0, r2, #0
10004544:	2100      	movs	r1, #0
10004546:	1c1a      	adds	r2, r3, #0
10004548:	f7ff ff64 	bl	10004414 <XMC_VADC_GROUP_ResultInit>
	XMC_VADC_GROUP_ResultInit(VADC_G1, 1, &g_result_handle[1]);
1000454c:	4a15      	ldr	r2, [pc, #84]	; (100045a4 <PDU_SensorADC_Init+0x148>)
1000454e:	4b1e      	ldr	r3, [pc, #120]	; (100045c8 <PDU_SensorADC_Init+0x16c>)
10004550:	1c10      	adds	r0, r2, #0
10004552:	2101      	movs	r1, #1
10004554:	1c1a      	adds	r2, r3, #0
10004556:	f7ff ff5d 	bl	10004414 <XMC_VADC_GROUP_ResultInit>
	XMC_VADC_GROUP_ResultInit(VADC_G1, 2, &g_result_handle[2]);
1000455a:	4a12      	ldr	r2, [pc, #72]	; (100045a4 <PDU_SensorADC_Init+0x148>)
1000455c:	4b1b      	ldr	r3, [pc, #108]	; (100045cc <PDU_SensorADC_Init+0x170>)
1000455e:	1c10      	adds	r0, r2, #0
10004560:	2102      	movs	r1, #2
10004562:	1c1a      	adds	r2, r3, #0
10004564:	f7ff ff56 	bl	10004414 <XMC_VADC_GROUP_ResultInit>
	XMC_VADC_GROUP_ResultInit(VADC_G1, 3, &g_result_handle[3]);
10004568:	4a0e      	ldr	r2, [pc, #56]	; (100045a4 <PDU_SensorADC_Init+0x148>)
1000456a:	4b19      	ldr	r3, [pc, #100]	; (100045d0 <PDU_SensorADC_Init+0x174>)
1000456c:	1c10      	adds	r0, r2, #0
1000456e:	2103      	movs	r1, #3
10004570:	1c1a      	adds	r2, r3, #0
10004572:	f7ff ff4f 	bl	10004414 <XMC_VADC_GROUP_ResultInit>
//	XMC_VADC_GROUP_ChannelSetEventInterruptNode(VADC_G1, 7, XMC_VADC_SR_GROUP_SR1); // For Channel 7
//	NVIC_SetPriority(IRQ20_IRQn, IRQ20_IRQn_11);			// Table 4-3 Interrupt Node assignment
//	NVIC_EnableIRQ(IRQ20_IRQn);

	/* Enable event at check g_result_handle[i].event_gen_enable */
	XMC_VADC_GROUP_SetResultInterruptNode(VADC_G1, VADC_RES_MAX-1, XMC_VADC_SR_GROUP_SR0);
10004576:	4b0b      	ldr	r3, [pc, #44]	; (100045a4 <PDU_SensorADC_Init+0x148>)
10004578:	1c18      	adds	r0, r3, #0
1000457a:	2103      	movs	r1, #3
1000457c:	2200      	movs	r2, #0
1000457e:	f7fe fbdf 	bl	10002d40 <XMC_VADC_GROUP_SetResultInterruptNode>
	NVIC_SetPriority(IRQ19_IRQn, 17U);
10004582:	2013      	movs	r0, #19
10004584:	2111      	movs	r1, #17
10004586:	f7ff feb9 	bl	100042fc <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQ19_IRQn);
1000458a:	2013      	movs	r0, #19
1000458c:	f7ff fe9c 	bl	100042c8 <__NVIC_EnableIRQ>
}
10004590:	46bd      	mov	sp, r7
10004592:	bd80      	pop	{r7, pc}
10004594:	40040200 	.word	0x40040200
10004598:	20000820 	.word	0x20000820
1000459c:	48030000 	.word	0x48030000
100045a0:	20000568 	.word	0x20000568
100045a4:	48030800 	.word	0x48030800
100045a8:	20000580 	.word	0x20000580
100045ac:	20000594 	.word	0x20000594
100045b0:	200005a0 	.word	0x200005a0
100045b4:	200005b0 	.word	0x200005b0
100045b8:	200005c0 	.word	0x200005c0
100045bc:	200005d0 	.word	0x200005d0
100045c0:	200005e0 	.word	0x200005e0
100045c4:	200005f0 	.word	0x200005f0
100045c8:	200005f4 	.word	0x200005f4
100045cc:	200005f8 	.word	0x200005f8
100045d0:	200005fc 	.word	0x200005fc

100045d4 <PDU_Relay_Init>:

void PDU_Relay_Init(void)
{
100045d4:	b580      	push	{r7, lr}
100045d6:	af00      	add	r7, sp, #0
	XMC_GPIO_Init(P1_4, &relay_KBAT);
100045d8:	4a0e      	ldr	r2, [pc, #56]	; (10004614 <PDU_Relay_Init+0x40>)
100045da:	4b0f      	ldr	r3, [pc, #60]	; (10004618 <PDU_Relay_Init+0x44>)
100045dc:	1c10      	adds	r0, r2, #0
100045de:	2104      	movs	r1, #4
100045e0:	1c1a      	adds	r2, r3, #0
100045e2:	f7fc fe03 	bl	100011ec <XMC_GPIO_Init>
	XMC_GPIO_Init(P1_5, &relay_KMP);
100045e6:	4a0b      	ldr	r2, [pc, #44]	; (10004614 <PDU_Relay_Init+0x40>)
100045e8:	4b0c      	ldr	r3, [pc, #48]	; (1000461c <PDU_Relay_Init+0x48>)
100045ea:	1c10      	adds	r0, r2, #0
100045ec:	2105      	movs	r1, #5
100045ee:	1c1a      	adds	r2, r3, #0
100045f0:	f7fc fdfc 	bl	100011ec <XMC_GPIO_Init>
	XMC_GPIO_Init(P1_6, &relay_KMF);
100045f4:	4a07      	ldr	r2, [pc, #28]	; (10004614 <PDU_Relay_Init+0x40>)
100045f6:	4b0a      	ldr	r3, [pc, #40]	; (10004620 <PDU_Relay_Init+0x4c>)
100045f8:	1c10      	adds	r0, r2, #0
100045fa:	2106      	movs	r1, #6
100045fc:	1c1a      	adds	r2, r3, #0
100045fe:	f7fc fdf5 	bl	100011ec <XMC_GPIO_Init>
	XMC_GPIO_Init(P1_7, &relay_KDSG);
10004602:	4a04      	ldr	r2, [pc, #16]	; (10004614 <PDU_Relay_Init+0x40>)
10004604:	4b07      	ldr	r3, [pc, #28]	; (10004624 <PDU_Relay_Init+0x50>)
10004606:	1c10      	adds	r0, r2, #0
10004608:	2107      	movs	r1, #7
1000460a:	1c1a      	adds	r2, r3, #0
1000460c:	f7fc fdee 	bl	100011ec <XMC_GPIO_Init>
}
10004610:	46bd      	mov	sp, r7
10004612:	bd80      	pop	{r7, pc}
10004614:	40040100 	.word	0x40040100
10004618:	20000618 	.word	0x20000618
1000461c:	20000600 	.word	0x20000600
10004620:	20000608 	.word	0x20000608
10004624:	20000610 	.word	0x20000610

10004628 <PDU_Switch_Relay>:

void PDU_Switch_Relay(PDU_RELAY_NAME_t relay_name, PDU_RELAY_STAT_t level)
{
10004628:	b580      	push	{r7, lr}
1000462a:	b082      	sub	sp, #8
1000462c:	af00      	add	r7, sp, #0
1000462e:	1c02      	adds	r2, r0, #0
10004630:	1dfb      	adds	r3, r7, #7
10004632:	701a      	strb	r2, [r3, #0]
10004634:	1dbb      	adds	r3, r7, #6
10004636:	1c0a      	adds	r2, r1, #0
10004638:	701a      	strb	r2, [r3, #0]
	switch(relay_name)
1000463a:	1dfb      	adds	r3, r7, #7
1000463c:	781b      	ldrb	r3, [r3, #0]
1000463e:	2b01      	cmp	r3, #1
10004640:	d01c      	beq.n	1000467c <PDU_Switch_Relay+0x54>
10004642:	dc02      	bgt.n	1000464a <PDU_Switch_Relay+0x22>
10004644:	2b00      	cmp	r3, #0
10004646:	d005      	beq.n	10004654 <PDU_Switch_Relay+0x2c>
									(XMC_GPIO_SetOutputLevel(P1_6, XMC_GPIO_OUTPUT_LEVEL_LOW));
							  break;
		case PDU_RELAY_KDSG	: level?(XMC_GPIO_SetOutputLevel(P1_7, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
									(XMC_GPIO_SetOutputLevel(P1_7, XMC_GPIO_OUTPUT_LEVEL_LOW));
							  break;
		default				: break;
10004648:	e054      	b.n	100046f4 <PDU_Switch_Relay+0xcc>
	XMC_GPIO_Init(P1_7, &relay_KDSG);
}

void PDU_Switch_Relay(PDU_RELAY_NAME_t relay_name, PDU_RELAY_STAT_t level)
{
	switch(relay_name)
1000464a:	2b02      	cmp	r3, #2
1000464c:	d02a      	beq.n	100046a4 <PDU_Switch_Relay+0x7c>
1000464e:	2b03      	cmp	r3, #3
10004650:	d03c      	beq.n	100046cc <PDU_Switch_Relay+0xa4>
									(XMC_GPIO_SetOutputLevel(P1_6, XMC_GPIO_OUTPUT_LEVEL_LOW));
							  break;
		case PDU_RELAY_KDSG	: level?(XMC_GPIO_SetOutputLevel(P1_7, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
									(XMC_GPIO_SetOutputLevel(P1_7, XMC_GPIO_OUTPUT_LEVEL_LOW));
							  break;
		default				: break;
10004652:	e04f      	b.n	100046f4 <PDU_Switch_Relay+0xcc>

void PDU_Switch_Relay(PDU_RELAY_NAME_t relay_name, PDU_RELAY_STAT_t level)
{
	switch(relay_name)
	{
		case PDU_RELAY_KBAT : level?(XMC_GPIO_SetOutputLevel(P1_4, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
10004654:	1dbb      	adds	r3, r7, #6
10004656:	781b      	ldrb	r3, [r3, #0]
10004658:	2b00      	cmp	r3, #0
1000465a:	d006      	beq.n	1000466a <PDU_Switch_Relay+0x42>
1000465c:	4b27      	ldr	r3, [pc, #156]	; (100046fc <PDU_Switch_Relay+0xd4>)
1000465e:	1c18      	adds	r0, r3, #0
10004660:	2104      	movs	r1, #4
10004662:	2201      	movs	r2, #1
10004664:	f7ff fee6 	bl	10004434 <XMC_GPIO_SetOutputLevel>
								    (XMC_GPIO_SetOutputLevel(P1_4, XMC_GPIO_OUTPUT_LEVEL_LOW));
						  	  break;
10004668:	e044      	b.n	100046f4 <PDU_Switch_Relay+0xcc>
void PDU_Switch_Relay(PDU_RELAY_NAME_t relay_name, PDU_RELAY_STAT_t level)
{
	switch(relay_name)
	{
		case PDU_RELAY_KBAT : level?(XMC_GPIO_SetOutputLevel(P1_4, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
								    (XMC_GPIO_SetOutputLevel(P1_4, XMC_GPIO_OUTPUT_LEVEL_LOW));
1000466a:	4a24      	ldr	r2, [pc, #144]	; (100046fc <PDU_Switch_Relay+0xd4>)
1000466c:	2380      	movs	r3, #128	; 0x80
1000466e:	025b      	lsls	r3, r3, #9
10004670:	1c10      	adds	r0, r2, #0
10004672:	2104      	movs	r1, #4
10004674:	1c1a      	adds	r2, r3, #0
10004676:	f7ff fedd 	bl	10004434 <XMC_GPIO_SetOutputLevel>
						  	  break;
1000467a:	e03b      	b.n	100046f4 <PDU_Switch_Relay+0xcc>
		case PDU_RELAY_KMP 	: level?(XMC_GPIO_SetOutputLevel(P1_5, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
1000467c:	1dbb      	adds	r3, r7, #6
1000467e:	781b      	ldrb	r3, [r3, #0]
10004680:	2b00      	cmp	r3, #0
10004682:	d006      	beq.n	10004692 <PDU_Switch_Relay+0x6a>
10004684:	4b1d      	ldr	r3, [pc, #116]	; (100046fc <PDU_Switch_Relay+0xd4>)
10004686:	1c18      	adds	r0, r3, #0
10004688:	2105      	movs	r1, #5
1000468a:	2201      	movs	r2, #1
1000468c:	f7ff fed2 	bl	10004434 <XMC_GPIO_SetOutputLevel>
									(XMC_GPIO_SetOutputLevel(P1_5, XMC_GPIO_OUTPUT_LEVEL_LOW));
							  break;
10004690:	e030      	b.n	100046f4 <PDU_Switch_Relay+0xcc>
	{
		case PDU_RELAY_KBAT : level?(XMC_GPIO_SetOutputLevel(P1_4, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
								    (XMC_GPIO_SetOutputLevel(P1_4, XMC_GPIO_OUTPUT_LEVEL_LOW));
						  	  break;
		case PDU_RELAY_KMP 	: level?(XMC_GPIO_SetOutputLevel(P1_5, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
									(XMC_GPIO_SetOutputLevel(P1_5, XMC_GPIO_OUTPUT_LEVEL_LOW));
10004692:	4a1a      	ldr	r2, [pc, #104]	; (100046fc <PDU_Switch_Relay+0xd4>)
10004694:	2380      	movs	r3, #128	; 0x80
10004696:	025b      	lsls	r3, r3, #9
10004698:	1c10      	adds	r0, r2, #0
1000469a:	2105      	movs	r1, #5
1000469c:	1c1a      	adds	r2, r3, #0
1000469e:	f7ff fec9 	bl	10004434 <XMC_GPIO_SetOutputLevel>
							  break;
100046a2:	e027      	b.n	100046f4 <PDU_Switch_Relay+0xcc>
		case PDU_RELAY_KMF 	: level?(XMC_GPIO_SetOutputLevel(P1_6, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
100046a4:	1dbb      	adds	r3, r7, #6
100046a6:	781b      	ldrb	r3, [r3, #0]
100046a8:	2b00      	cmp	r3, #0
100046aa:	d006      	beq.n	100046ba <PDU_Switch_Relay+0x92>
100046ac:	4b13      	ldr	r3, [pc, #76]	; (100046fc <PDU_Switch_Relay+0xd4>)
100046ae:	1c18      	adds	r0, r3, #0
100046b0:	2106      	movs	r1, #6
100046b2:	2201      	movs	r2, #1
100046b4:	f7ff febe 	bl	10004434 <XMC_GPIO_SetOutputLevel>
									(XMC_GPIO_SetOutputLevel(P1_6, XMC_GPIO_OUTPUT_LEVEL_LOW));
							  break;
100046b8:	e01c      	b.n	100046f4 <PDU_Switch_Relay+0xcc>
						  	  break;
		case PDU_RELAY_KMP 	: level?(XMC_GPIO_SetOutputLevel(P1_5, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
									(XMC_GPIO_SetOutputLevel(P1_5, XMC_GPIO_OUTPUT_LEVEL_LOW));
							  break;
		case PDU_RELAY_KMF 	: level?(XMC_GPIO_SetOutputLevel(P1_6, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
									(XMC_GPIO_SetOutputLevel(P1_6, XMC_GPIO_OUTPUT_LEVEL_LOW));
100046ba:	4a10      	ldr	r2, [pc, #64]	; (100046fc <PDU_Switch_Relay+0xd4>)
100046bc:	2380      	movs	r3, #128	; 0x80
100046be:	025b      	lsls	r3, r3, #9
100046c0:	1c10      	adds	r0, r2, #0
100046c2:	2106      	movs	r1, #6
100046c4:	1c1a      	adds	r2, r3, #0
100046c6:	f7ff feb5 	bl	10004434 <XMC_GPIO_SetOutputLevel>
							  break;
100046ca:	e013      	b.n	100046f4 <PDU_Switch_Relay+0xcc>
		case PDU_RELAY_KDSG	: level?(XMC_GPIO_SetOutputLevel(P1_7, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
100046cc:	1dbb      	adds	r3, r7, #6
100046ce:	781b      	ldrb	r3, [r3, #0]
100046d0:	2b00      	cmp	r3, #0
100046d2:	d006      	beq.n	100046e2 <PDU_Switch_Relay+0xba>
100046d4:	4b09      	ldr	r3, [pc, #36]	; (100046fc <PDU_Switch_Relay+0xd4>)
100046d6:	1c18      	adds	r0, r3, #0
100046d8:	2107      	movs	r1, #7
100046da:	2201      	movs	r2, #1
100046dc:	f7ff feaa 	bl	10004434 <XMC_GPIO_SetOutputLevel>
									(XMC_GPIO_SetOutputLevel(P1_7, XMC_GPIO_OUTPUT_LEVEL_LOW));
							  break;
100046e0:	e007      	b.n	100046f2 <PDU_Switch_Relay+0xca>
							  break;
		case PDU_RELAY_KMF 	: level?(XMC_GPIO_SetOutputLevel(P1_6, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
									(XMC_GPIO_SetOutputLevel(P1_6, XMC_GPIO_OUTPUT_LEVEL_LOW));
							  break;
		case PDU_RELAY_KDSG	: level?(XMC_GPIO_SetOutputLevel(P1_7, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
									(XMC_GPIO_SetOutputLevel(P1_7, XMC_GPIO_OUTPUT_LEVEL_LOW));
100046e2:	4a06      	ldr	r2, [pc, #24]	; (100046fc <PDU_Switch_Relay+0xd4>)
100046e4:	2380      	movs	r3, #128	; 0x80
100046e6:	025b      	lsls	r3, r3, #9
100046e8:	1c10      	adds	r0, r2, #0
100046ea:	2107      	movs	r1, #7
100046ec:	1c1a      	adds	r2, r3, #0
100046ee:	f7ff fea1 	bl	10004434 <XMC_GPIO_SetOutputLevel>
							  break;
100046f2:	46c0      	nop			; (mov r8, r8)
		default				: break;
	}
}
100046f4:	46bd      	mov	sp, r7
100046f6:	b002      	add	sp, #8
100046f8:	bd80      	pop	{r7, pc}
100046fa:	46c0      	nop			; (mov r8, r8)
100046fc:	40040100 	.word	0x40040100

10004700 <PDU_ADC_Start>:

void PDU_ADC_Start(void)
{
10004700:	b580      	push	{r7, lr}
10004702:	af00      	add	r7, sp, #0
	XMC_VADC_GROUP_QueueTriggerConversion(VADC_G1);
10004704:	4b02      	ldr	r3, [pc, #8]	; (10004710 <PDU_ADC_Start+0x10>)
10004706:	1c18      	adds	r0, r3, #0
10004708:	f7ff fe62 	bl	100043d0 <XMC_VADC_GROUP_QueueTriggerConversion>
}
1000470c:	46bd      	mov	sp, r7
1000470e:	bd80      	pop	{r7, pc}
10004710:	48030800 	.word	0x48030800

10004714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10004714:	b580      	push	{r7, lr}
10004716:	b082      	sub	sp, #8
10004718:	af00      	add	r7, sp, #0
1000471a:	1c02      	adds	r2, r0, #0
1000471c:	1dfb      	adds	r3, r7, #7
1000471e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10004720:	1dfb      	adds	r3, r7, #7
10004722:	781b      	ldrb	r3, [r3, #0]
10004724:	2b7f      	cmp	r3, #127	; 0x7f
10004726:	d809      	bhi.n	1000473c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
10004728:	4b06      	ldr	r3, [pc, #24]	; (10004744 <__NVIC_EnableIRQ+0x30>)
1000472a:	1dfa      	adds	r2, r7, #7
1000472c:	7812      	ldrb	r2, [r2, #0]
1000472e:	1c11      	adds	r1, r2, #0
10004730:	221f      	movs	r2, #31
10004732:	400a      	ands	r2, r1
10004734:	2101      	movs	r1, #1
10004736:	4091      	lsls	r1, r2
10004738:	1c0a      	adds	r2, r1, #0
1000473a:	601a      	str	r2, [r3, #0]
  }
}
1000473c:	46bd      	mov	sp, r7
1000473e:	b002      	add	sp, #8
10004740:	bd80      	pop	{r7, pc}
10004742:	46c0      	nop			; (mov r8, r8)
10004744:	e000e100 	.word	0xe000e100

10004748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10004748:	b5b0      	push	{r4, r5, r7, lr}
1000474a:	b082      	sub	sp, #8
1000474c:	af00      	add	r7, sp, #0
1000474e:	1c02      	adds	r2, r0, #0
10004750:	6039      	str	r1, [r7, #0]
10004752:	1dfb      	adds	r3, r7, #7
10004754:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10004756:	1dfb      	adds	r3, r7, #7
10004758:	781b      	ldrb	r3, [r3, #0]
1000475a:	2b7f      	cmp	r3, #127	; 0x7f
1000475c:	d827      	bhi.n	100047ae <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000475e:	4c2d      	ldr	r4, [pc, #180]	; (10004814 <__NVIC_SetPriority+0xcc>)
10004760:	1dfb      	adds	r3, r7, #7
10004762:	781b      	ldrb	r3, [r3, #0]
10004764:	b25b      	sxtb	r3, r3
10004766:	089b      	lsrs	r3, r3, #2
10004768:	492a      	ldr	r1, [pc, #168]	; (10004814 <__NVIC_SetPriority+0xcc>)
1000476a:	1dfa      	adds	r2, r7, #7
1000476c:	7812      	ldrb	r2, [r2, #0]
1000476e:	b252      	sxtb	r2, r2
10004770:	0892      	lsrs	r2, r2, #2
10004772:	32c0      	adds	r2, #192	; 0xc0
10004774:	0092      	lsls	r2, r2, #2
10004776:	5852      	ldr	r2, [r2, r1]
10004778:	1df9      	adds	r1, r7, #7
1000477a:	7809      	ldrb	r1, [r1, #0]
1000477c:	1c08      	adds	r0, r1, #0
1000477e:	2103      	movs	r1, #3
10004780:	4001      	ands	r1, r0
10004782:	00c9      	lsls	r1, r1, #3
10004784:	1c08      	adds	r0, r1, #0
10004786:	21ff      	movs	r1, #255	; 0xff
10004788:	4081      	lsls	r1, r0
1000478a:	43c9      	mvns	r1, r1
1000478c:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000478e:	683a      	ldr	r2, [r7, #0]
10004790:	0192      	lsls	r2, r2, #6
10004792:	20ff      	movs	r0, #255	; 0xff
10004794:	4002      	ands	r2, r0
10004796:	1df8      	adds	r0, r7, #7
10004798:	7800      	ldrb	r0, [r0, #0]
1000479a:	1c05      	adds	r5, r0, #0
1000479c:	2003      	movs	r0, #3
1000479e:	4028      	ands	r0, r5
100047a0:	00c0      	lsls	r0, r0, #3
100047a2:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100047a4:	430a      	orrs	r2, r1
100047a6:	33c0      	adds	r3, #192	; 0xc0
100047a8:	009b      	lsls	r3, r3, #2
100047aa:	511a      	str	r2, [r3, r4]
100047ac:	e02e      	b.n	1000480c <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100047ae:	4c1a      	ldr	r4, [pc, #104]	; (10004818 <__NVIC_SetPriority+0xd0>)
100047b0:	1dfb      	adds	r3, r7, #7
100047b2:	781b      	ldrb	r3, [r3, #0]
100047b4:	1c1a      	adds	r2, r3, #0
100047b6:	230f      	movs	r3, #15
100047b8:	4013      	ands	r3, r2
100047ba:	3b08      	subs	r3, #8
100047bc:	0899      	lsrs	r1, r3, #2
100047be:	4a16      	ldr	r2, [pc, #88]	; (10004818 <__NVIC_SetPriority+0xd0>)
100047c0:	1dfb      	adds	r3, r7, #7
100047c2:	781b      	ldrb	r3, [r3, #0]
100047c4:	1c18      	adds	r0, r3, #0
100047c6:	230f      	movs	r3, #15
100047c8:	4003      	ands	r3, r0
100047ca:	3b08      	subs	r3, #8
100047cc:	089b      	lsrs	r3, r3, #2
100047ce:	3306      	adds	r3, #6
100047d0:	009b      	lsls	r3, r3, #2
100047d2:	18d3      	adds	r3, r2, r3
100047d4:	685b      	ldr	r3, [r3, #4]
100047d6:	1dfa      	adds	r2, r7, #7
100047d8:	7812      	ldrb	r2, [r2, #0]
100047da:	1c10      	adds	r0, r2, #0
100047dc:	2203      	movs	r2, #3
100047de:	4002      	ands	r2, r0
100047e0:	00d2      	lsls	r2, r2, #3
100047e2:	1c10      	adds	r0, r2, #0
100047e4:	22ff      	movs	r2, #255	; 0xff
100047e6:	4082      	lsls	r2, r0
100047e8:	43d2      	mvns	r2, r2
100047ea:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100047ec:	683b      	ldr	r3, [r7, #0]
100047ee:	019b      	lsls	r3, r3, #6
100047f0:	20ff      	movs	r0, #255	; 0xff
100047f2:	4003      	ands	r3, r0
100047f4:	1df8      	adds	r0, r7, #7
100047f6:	7800      	ldrb	r0, [r0, #0]
100047f8:	1c05      	adds	r5, r0, #0
100047fa:	2003      	movs	r0, #3
100047fc:	4028      	ands	r0, r5
100047fe:	00c0      	lsls	r0, r0, #3
10004800:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004802:	431a      	orrs	r2, r3
10004804:	1d8b      	adds	r3, r1, #6
10004806:	009b      	lsls	r3, r3, #2
10004808:	18e3      	adds	r3, r4, r3
1000480a:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
1000480c:	46bd      	mov	sp, r7
1000480e:	b002      	add	sp, #8
10004810:	bdb0      	pop	{r4, r5, r7, pc}
10004812:	46c0      	nop			; (mov r8, r8)
10004814:	e000e100 	.word	0xe000e100
10004818:	e000ed00 	.word	0xe000ed00

1000481c <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
1000481c:	b580      	push	{r7, lr}
1000481e:	b082      	sub	sp, #8
10004820:	af00      	add	r7, sp, #0
10004822:	6078      	str	r0, [r7, #4]
10004824:	1c0a      	adds	r2, r1, #0
10004826:	1cfb      	adds	r3, r7, #3
10004828:	701a      	strb	r2, [r3, #0]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
1000482a:	687b      	ldr	r3, [r7, #4]
1000482c:	68db      	ldr	r3, [r3, #12]
1000482e:	2207      	movs	r2, #7
10004830:	4393      	bics	r3, r2
10004832:	1c1a      	adds	r2, r3, #0
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
10004834:	1cfb      	adds	r3, r7, #3
10004836:	781b      	ldrb	r3, [r3, #0]
10004838:	2107      	movs	r1, #7
1000483a:	400b      	ands	r3, r1
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
1000483c:	431a      	orrs	r2, r3
1000483e:	687b      	ldr	r3, [r7, #4]
10004840:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
10004842:	46bd      	mov	sp, r7
10004844:	b002      	add	sp, #8
10004846:	bd80      	pop	{r7, pc}

10004848 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
10004848:	b580      	push	{r7, lr}
1000484a:	b082      	sub	sp, #8
1000484c:	af00      	add	r7, sp, #0
1000484e:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
10004850:	687b      	ldr	r3, [r7, #4]
10004852:	681b      	ldr	r3, [r3, #0]
10004854:	2240      	movs	r2, #64	; 0x40
10004856:	431a      	orrs	r2, r3
10004858:	687b      	ldr	r3, [r7, #4]
1000485a:	601a      	str	r2, [r3, #0]
}
1000485c:	46bd      	mov	sp, r7
1000485e:	b002      	add	sp, #8
10004860:	bd80      	pop	{r7, pc}
10004862:	46c0      	nop			; (mov r8, r8)

10004864 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
10004864:	b580      	push	{r7, lr}
10004866:	b082      	sub	sp, #8
10004868:	af00      	add	r7, sp, #0
1000486a:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
1000486c:	687b      	ldr	r3, [r7, #4]
1000486e:	681b      	ldr	r3, [r3, #0]
10004870:	2240      	movs	r2, #64	; 0x40
10004872:	4393      	bics	r3, r2
10004874:	1c1a      	adds	r2, r3, #0
10004876:	687b      	ldr	r3, [r7, #4]
10004878:	601a      	str	r2, [r3, #0]
}
1000487a:	46bd      	mov	sp, r7
1000487c:	b002      	add	sp, #8
1000487e:	bd80      	pop	{r7, pc}

10004880 <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
10004880:	b580      	push	{r7, lr}
10004882:	b082      	sub	sp, #8
10004884:	af00      	add	r7, sp, #0
10004886:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
10004888:	687b      	ldr	r3, [r7, #4]
1000488a:	681b      	ldr	r3, [r3, #0]
1000488c:	2201      	movs	r2, #1
1000488e:	4393      	bics	r3, r2
10004890:	1c1a      	adds	r2, r3, #0
10004892:	687b      	ldr	r3, [r7, #4]
10004894:	601a      	str	r2, [r3, #0]
}
10004896:	46bd      	mov	sp, r7
10004898:	b002      	add	sp, #8
1000489a:	bd80      	pop	{r7, pc}

1000489c <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
1000489c:	b580      	push	{r7, lr}
1000489e:	b084      	sub	sp, #16
100048a0:	af00      	add	r7, sp, #0
100048a2:	60f8      	str	r0, [r7, #12]
100048a4:	607a      	str	r2, [r7, #4]
100048a6:	230b      	movs	r3, #11
100048a8:	18fb      	adds	r3, r7, r3
100048aa:	1c0a      	adds	r2, r1, #0
100048ac:	701a      	strb	r2, [r3, #0]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
100048ae:	68fb      	ldr	r3, [r7, #12]
100048b0:	681b      	ldr	r3, [r3, #0]
100048b2:	68fa      	ldr	r2, [r7, #12]
100048b4:	6812      	ldr	r2, [r2, #0]
100048b6:	6892      	ldr	r2, [r2, #8]
100048b8:	210b      	movs	r1, #11
100048ba:	1879      	adds	r1, r7, r1
100048bc:	7809      	ldrb	r1, [r1, #0]
100048be:	2007      	movs	r0, #7
100048c0:	4088      	lsls	r0, r1
100048c2:	1c01      	adds	r1, r0, #0
100048c4:	43c9      	mvns	r1, r1
100048c6:	4011      	ands	r1, r2
                          (service_request << (uint32_t)can_mo_ptr_int);
100048c8:	220b      	movs	r2, #11
100048ca:	18ba      	adds	r2, r7, r2
100048cc:	7812      	ldrb	r2, [r2, #0]
100048ce:	6878      	ldr	r0, [r7, #4]
100048d0:	4090      	lsls	r0, r2
100048d2:	1c02      	adds	r2, r0, #0

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
100048d4:	430a      	orrs	r2, r1
100048d6:	609a      	str	r2, [r3, #8]
                          (service_request << (uint32_t)can_mo_ptr_int);
}
100048d8:	46bd      	mov	sp, r7
100048da:	b004      	add	sp, #16
100048dc:	bd80      	pop	{r7, pc}
100048de:	46c0      	nop			; (mov r8, r8)

100048e0 <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
                                        const uint32_t event)
{
100048e0:	b580      	push	{r7, lr}
100048e2:	b082      	sub	sp, #8
100048e4:	af00      	add	r7, sp, #0
100048e6:	6078      	str	r0, [r7, #4]
100048e8:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
100048ea:	687b      	ldr	r3, [r7, #4]
100048ec:	681b      	ldr	r3, [r3, #0]
100048ee:	687a      	ldr	r2, [r7, #4]
100048f0:	6812      	ldr	r2, [r2, #0]
100048f2:	6811      	ldr	r1, [r2, #0]
100048f4:	683a      	ldr	r2, [r7, #0]
100048f6:	430a      	orrs	r2, r1
100048f8:	601a      	str	r2, [r3, #0]
}
100048fa:	46bd      	mov	sp, r7
100048fc:	b002      	add	sp, #8
100048fe:	bd80      	pop	{r7, pc}

10004900 <PCS_Connection_Init>:
#include "xmc_uart.h"

#include "global_var.h"

void PCS_Connection_Init(void)
{
10004900:	b580      	push	{r7, lr}
10004902:	af00      	add	r7, sp, #0
	/* Configure CAN Module */
	XMC_GPIO_Init(CAN0_TXD, &CAN0_txd_config);
10004904:	4a31      	ldr	r2, [pc, #196]	; (100049cc <PCS_Connection_Init+0xcc>)
10004906:	4b32      	ldr	r3, [pc, #200]	; (100049d0 <PCS_Connection_Init+0xd0>)
10004908:	1c10      	adds	r0, r2, #0
1000490a:	2105      	movs	r1, #5
1000490c:	1c1a      	adds	r2, r3, #0
1000490e:	f7fc fc6d 	bl	100011ec <XMC_GPIO_Init>
	XMC_GPIO_Init(CAN0_RXD, &CAN0_rxd_config);
10004912:	4a2e      	ldr	r2, [pc, #184]	; (100049cc <PCS_Connection_Init+0xcc>)
10004914:	4b2f      	ldr	r3, [pc, #188]	; (100049d4 <PCS_Connection_Init+0xd4>)
10004916:	1c10      	adds	r0, r2, #0
10004918:	2104      	movs	r1, #4
1000491a:	1c1a      	adds	r2, r3, #0
1000491c:	f7fc fc66 	bl	100011ec <XMC_GPIO_Init>

	XMC_CAN_Init(CAN, XMC_CAN_CANCLKSRC_MCLK, 11000000);
10004920:	4a2d      	ldr	r2, [pc, #180]	; (100049d8 <PCS_Connection_Init+0xd8>)
10004922:	4b2e      	ldr	r3, [pc, #184]	; (100049dc <PCS_Connection_Init+0xdc>)
10004924:	1c10      	adds	r0, r2, #0
10004926:	2101      	movs	r1, #1
10004928:	1c1a      	adds	r2, r3, #0
1000492a:	f7fc ff3d 	bl	100017a8 <XMC_CAN_Init>

	XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0);
1000492e:	4b2c      	ldr	r3, [pc, #176]	; (100049e0 <PCS_Connection_Init+0xe0>)
10004930:	1c18      	adds	r0, r3, #0
10004932:	f7ff ff89 	bl	10004848 <XMC_CAN_NODE_EnableConfigurationChange>
	XMC_CAN_NODE_SetReceiveInput(CAN_NODE0, XMC_CAN_NODE_RECEIVE_INPUT_RXDCA);
10004936:	4b2a      	ldr	r3, [pc, #168]	; (100049e0 <PCS_Connection_Init+0xe0>)
10004938:	1c18      	adds	r0, r3, #0
1000493a:	2100      	movs	r1, #0
1000493c:	f7ff ff6e 	bl	1000481c <XMC_CAN_NODE_SetReceiveInput>
	XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0);
10004940:	4b27      	ldr	r3, [pc, #156]	; (100049e0 <PCS_Connection_Init+0xe0>)
10004942:	1c18      	adds	r0, r3, #0
10004944:	f7ff ff8e 	bl	10004864 <XMC_CAN_NODE_DisableConfigurationChange>

	/* NODE 1 Initialization */
	XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0);
10004948:	4b25      	ldr	r3, [pc, #148]	; (100049e0 <PCS_Connection_Init+0xe0>)
1000494a:	1c18      	adds	r0, r3, #0
1000494c:	f7ff ff7c 	bl	10004848 <XMC_CAN_NODE_EnableConfigurationChange>
	XMC_CAN_NODE_NominalBitTimeConfigure(CAN_NODE0,&can_baud);
10004950:	4a23      	ldr	r2, [pc, #140]	; (100049e0 <PCS_Connection_Init+0xe0>)
10004952:	4b24      	ldr	r3, [pc, #144]	; (100049e4 <PCS_Connection_Init+0xe4>)
10004954:	1c10      	adds	r0, r2, #0
10004956:	1c19      	adds	r1, r3, #0
10004958:	f7fc fdfa 	bl	10001550 <XMC_CAN_NODE_NominalBitTimeConfigure>
	XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0);
1000495c:	4b20      	ldr	r3, [pc, #128]	; (100049e0 <PCS_Connection_Init+0xe0>)
1000495e:	1c18      	adds	r0, r3, #0
10004960:	f7ff ff80 	bl	10004864 <XMC_CAN_NODE_DisableConfigurationChange>

	XMC_CAN_MO_Config(&msgObjToPCS);
10004964:	4b20      	ldr	r3, [pc, #128]	; (100049e8 <PCS_Connection_Init+0xe8>)
10004966:	1c18      	adds	r0, r3, #0
10004968:	f7fc fff8 	bl	1000195c <XMC_CAN_MO_Config>
	XMC_CAN_MO_Config(&msgObjFromPCS);
1000496c:	4b1f      	ldr	r3, [pc, #124]	; (100049ec <PCS_Connection_Init+0xec>)
1000496e:	1c18      	adds	r0, r3, #0
10004970:	f7fc fff4 	bl	1000195c <XMC_CAN_MO_Config>

	/* Enable receive event */
	XMC_CAN_MO_EnableEvent(&msgObjFromPCS, XMC_CAN_MO_EVENT_RECEIVE);
10004974:	4a1d      	ldr	r2, [pc, #116]	; (100049ec <PCS_Connection_Init+0xec>)
10004976:	2380      	movs	r3, #128	; 0x80
10004978:	025b      	lsls	r3, r3, #9
1000497a:	1c10      	adds	r0, r2, #0
1000497c:	1c19      	adds	r1, r3, #0
1000497e:	f7ff ffaf 	bl	100048e0 <XMC_CAN_MO_EnableEvent>

	/* Set receive interrupt Service request number */
	XMC_SCU_SetInterruptControl(7, XMC_SCU_IRQCTRL_CAN0_SR3_IRQ7);
10004982:	4b1b      	ldr	r3, [pc, #108]	; (100049f0 <PCS_Connection_Init+0xf0>)
10004984:	2007      	movs	r0, #7
10004986:	1c19      	adds	r1, r3, #0
10004988:	f7fc fd2c 	bl	100013e4 <XMC_SCU_SetInterruptControl>
	XMC_CAN_MO_SetEventNodePointer(&msgObjFromPCS, XMC_CAN_MO_POINTER_EVENT_RECEIVE, 3);
1000498c:	4b17      	ldr	r3, [pc, #92]	; (100049ec <PCS_Connection_Init+0xec>)
1000498e:	1c18      	adds	r0, r3, #0
10004990:	2100      	movs	r1, #0
10004992:	2203      	movs	r2, #3
10004994:	f7ff ff82 	bl	1000489c <XMC_CAN_MO_SetEventNodePointer>
	NVIC_SetPriority(IRQ7_IRQn, 1);
10004998:	2007      	movs	r0, #7
1000499a:	2101      	movs	r1, #1
1000499c:	f7ff fed4 	bl	10004748 <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQ7_IRQn);
100049a0:	2007      	movs	r0, #7
100049a2:	f7ff feb7 	bl	10004714 <__NVIC_EnableIRQ>

	XMC_CAN_AllocateMOtoNodeList(CAN,0,4);
100049a6:	4b0c      	ldr	r3, [pc, #48]	; (100049d8 <PCS_Connection_Init+0xd8>)
100049a8:	1c18      	adds	r0, r3, #0
100049aa:	2100      	movs	r1, #0
100049ac:	2204      	movs	r2, #4
100049ae:	f7fc feb9 	bl	10001724 <XMC_CAN_AllocateMOtoNodeList>
	XMC_CAN_AllocateMOtoNodeList(CAN,0,2);
100049b2:	4b09      	ldr	r3, [pc, #36]	; (100049d8 <PCS_Connection_Init+0xd8>)
100049b4:	1c18      	adds	r0, r3, #0
100049b6:	2100      	movs	r1, #0
100049b8:	2202      	movs	r2, #2
100049ba:	f7fc feb3 	bl	10001724 <XMC_CAN_AllocateMOtoNodeList>
	XMC_CAN_NODE_ResetInitBit(CAN_NODE0);
100049be:	4b08      	ldr	r3, [pc, #32]	; (100049e0 <PCS_Connection_Init+0xe0>)
100049c0:	1c18      	adds	r0, r3, #0
100049c2:	f7ff ff5d 	bl	10004880 <XMC_CAN_NODE_ResetInitBit>
}
100049c6:	46bd      	mov	sp, r7
100049c8:	bd80      	pop	{r7, pc}
100049ca:	46c0      	nop			; (mov r8, r8)
100049cc:	40040000 	.word	0x40040000
100049d0:	20000620 	.word	0x20000620
100049d4:	20000828 	.word	0x20000828
100049d8:	50040000 	.word	0x50040000
100049dc:	00a7d8c0 	.word	0x00a7d8c0
100049e0:	50040200 	.word	0x50040200
100049e4:	20000628 	.word	0x20000628
100049e8:	20000638 	.word	0x20000638
100049ec:	20000658 	.word	0x20000658
100049f0:	00000701 	.word	0x00000701

100049f4 <PCS_BMSTransmitToPCS>:

void PCS_BMSTransmitToPCS(uint32_t id, PCS_BMS_STATUS_t *bmsStatus, BMS_PARAMETER_t *bmsParam)
{
100049f4:	b580      	push	{r7, lr}
100049f6:	b084      	sub	sp, #16
100049f8:	af00      	add	r7, sp, #0
100049fa:	60f8      	str	r0, [r7, #12]
100049fc:	60b9      	str	r1, [r7, #8]
100049fe:	607a      	str	r2, [r7, #4]
	switch(id)
10004a00:	68fb      	ldr	r3, [r7, #12]
10004a02:	2280      	movs	r2, #128	; 0x80
10004a04:	0052      	lsls	r2, r2, #1
10004a06:	4293      	cmp	r3, r2
10004a08:	d004      	beq.n	10004a14 <PCS_BMSTransmitToPCS+0x20>
10004a0a:	2202      	movs	r2, #2
10004a0c:	32ff      	adds	r2, #255	; 0xff
10004a0e:	4293      	cmp	r3, r2
10004a10:	d037      	beq.n	10004a82 <PCS_BMSTransmitToPCS+0x8e>
			msgObjToPCS.can_data_byte[5] = (uint8_t)(bmsParam->ibat);
			msgObjToPCS.can_data_byte[6] = (uint8_t)(bmsParam->tempbat>>8);
			msgObjToPCS.can_data_byte[7] = (uint8_t)(bmsParam->tempbat);
			break;
		default		:
			break;
10004a12:	e072      	b.n	10004afa <PCS_BMSTransmitToPCS+0x106>
void PCS_BMSTransmitToPCS(uint32_t id, PCS_BMS_STATUS_t *bmsStatus, BMS_PARAMETER_t *bmsParam)
{
	switch(id)
	{
		case (0x100)	:
			msgObjToPCS.can_identifier 	 = id;
10004a14:	68fb      	ldr	r3, [r7, #12]
10004a16:	00db      	lsls	r3, r3, #3
10004a18:	08da      	lsrs	r2, r3, #3
10004a1a:	4b3d      	ldr	r3, [pc, #244]	; (10004b10 <PCS_BMSTransmitToPCS+0x11c>)
10004a1c:	00d2      	lsls	r2, r2, #3
10004a1e:	08d2      	lsrs	r2, r2, #3
10004a20:	6859      	ldr	r1, [r3, #4]
10004a22:	0f49      	lsrs	r1, r1, #29
10004a24:	0749      	lsls	r1, r1, #29
10004a26:	430a      	orrs	r2, r1
10004a28:	605a      	str	r2, [r3, #4]
			msgObjToPCS.can_data_byte[0] = 0x00;
10004a2a:	4b39      	ldr	r3, [pc, #228]	; (10004b10 <PCS_BMSTransmitToPCS+0x11c>)
10004a2c:	2200      	movs	r2, #0
10004a2e:	741a      	strb	r2, [r3, #16]
			msgObjToPCS.can_data_byte[1] = bmsStatus->bms_status;
10004a30:	68bb      	ldr	r3, [r7, #8]
10004a32:	781a      	ldrb	r2, [r3, #0]
10004a34:	4b36      	ldr	r3, [pc, #216]	; (10004b10 <PCS_BMSTransmitToPCS+0x11c>)
10004a36:	745a      	strb	r2, [r3, #17]
			msgObjToPCS.can_data_byte[2] = 0x00;
10004a38:	4b35      	ldr	r3, [pc, #212]	; (10004b10 <PCS_BMSTransmitToPCS+0x11c>)
10004a3a:	2200      	movs	r2, #0
10004a3c:	749a      	strb	r2, [r3, #18]
			msgObjToPCS.can_data_byte[3] = bmsStatus->bms_pcs_command;
10004a3e:	68bb      	ldr	r3, [r7, #8]
10004a40:	785a      	ldrb	r2, [r3, #1]
10004a42:	4b33      	ldr	r3, [pc, #204]	; (10004b10 <PCS_BMSTransmitToPCS+0x11c>)
10004a44:	74da      	strb	r2, [r3, #19]
			msgObjToPCS.can_data_byte[4] = 0x00;
10004a46:	4b32      	ldr	r3, [pc, #200]	; (10004b10 <PCS_BMSTransmitToPCS+0x11c>)
10004a48:	2200      	movs	r2, #0
10004a4a:	751a      	strb	r2, [r3, #20]
			msgObjToPCS.can_data_byte[5] = 0x00;
10004a4c:	4b30      	ldr	r3, [pc, #192]	; (10004b10 <PCS_BMSTransmitToPCS+0x11c>)
10004a4e:	2200      	movs	r2, #0
10004a50:	755a      	strb	r2, [r3, #21]
			msgObjToPCS.can_data_byte[5]|= (bmsStatus->bms_precharge_relay<<1) | bmsStatus->bms_main_relay;
10004a52:	4b2f      	ldr	r3, [pc, #188]	; (10004b10 <PCS_BMSTransmitToPCS+0x11c>)
10004a54:	7d5b      	ldrb	r3, [r3, #21]
10004a56:	b2da      	uxtb	r2, r3
10004a58:	68bb      	ldr	r3, [r7, #8]
10004a5a:	78db      	ldrb	r3, [r3, #3]
10004a5c:	005b      	lsls	r3, r3, #1
10004a5e:	b2d9      	uxtb	r1, r3
10004a60:	68bb      	ldr	r3, [r7, #8]
10004a62:	789b      	ldrb	r3, [r3, #2]
10004a64:	b2db      	uxtb	r3, r3
10004a66:	430b      	orrs	r3, r1
10004a68:	b2db      	uxtb	r3, r3
10004a6a:	4313      	orrs	r3, r2
10004a6c:	b2db      	uxtb	r3, r3
10004a6e:	b2da      	uxtb	r2, r3
10004a70:	4b27      	ldr	r3, [pc, #156]	; (10004b10 <PCS_BMSTransmitToPCS+0x11c>)
10004a72:	755a      	strb	r2, [r3, #21]
			msgObjToPCS.can_data_byte[6] = 0x00;
10004a74:	4b26      	ldr	r3, [pc, #152]	; (10004b10 <PCS_BMSTransmitToPCS+0x11c>)
10004a76:	2200      	movs	r2, #0
10004a78:	759a      	strb	r2, [r3, #22]
			msgObjToPCS.can_data_byte[7] = 0x00;
10004a7a:	4b25      	ldr	r3, [pc, #148]	; (10004b10 <PCS_BMSTransmitToPCS+0x11c>)
10004a7c:	2200      	movs	r2, #0
10004a7e:	75da      	strb	r2, [r3, #23]
			break;
10004a80:	e03b      	b.n	10004afa <PCS_BMSTransmitToPCS+0x106>
		case (0x101)	:
			msgObjToPCS.can_identifier 	 = id;
10004a82:	68fb      	ldr	r3, [r7, #12]
10004a84:	00db      	lsls	r3, r3, #3
10004a86:	08da      	lsrs	r2, r3, #3
10004a88:	4b21      	ldr	r3, [pc, #132]	; (10004b10 <PCS_BMSTransmitToPCS+0x11c>)
10004a8a:	00d2      	lsls	r2, r2, #3
10004a8c:	08d2      	lsrs	r2, r2, #3
10004a8e:	6859      	ldr	r1, [r3, #4]
10004a90:	0f49      	lsrs	r1, r1, #29
10004a92:	0749      	lsls	r1, r1, #29
10004a94:	430a      	orrs	r2, r1
10004a96:	605a      	str	r2, [r3, #4]
			msgObjToPCS.can_data_byte[0] = (uint8_t)(bmsParam->soc>>8);
10004a98:	687b      	ldr	r3, [r7, #4]
10004a9a:	881b      	ldrh	r3, [r3, #0]
10004a9c:	0a1b      	lsrs	r3, r3, #8
10004a9e:	b29b      	uxth	r3, r3
10004aa0:	b2da      	uxtb	r2, r3
10004aa2:	4b1b      	ldr	r3, [pc, #108]	; (10004b10 <PCS_BMSTransmitToPCS+0x11c>)
10004aa4:	741a      	strb	r2, [r3, #16]
			msgObjToPCS.can_data_byte[1] = (uint8_t)(bmsParam->soc);
10004aa6:	687b      	ldr	r3, [r7, #4]
10004aa8:	881b      	ldrh	r3, [r3, #0]
10004aaa:	b2da      	uxtb	r2, r3
10004aac:	4b18      	ldr	r3, [pc, #96]	; (10004b10 <PCS_BMSTransmitToPCS+0x11c>)
10004aae:	745a      	strb	r2, [r3, #17]
			msgObjToPCS.can_data_byte[2] = (uint8_t)(bmsParam->vbat>>8);
10004ab0:	687b      	ldr	r3, [r7, #4]
10004ab2:	885b      	ldrh	r3, [r3, #2]
10004ab4:	0a1b      	lsrs	r3, r3, #8
10004ab6:	b29b      	uxth	r3, r3
10004ab8:	b2da      	uxtb	r2, r3
10004aba:	4b15      	ldr	r3, [pc, #84]	; (10004b10 <PCS_BMSTransmitToPCS+0x11c>)
10004abc:	749a      	strb	r2, [r3, #18]
			msgObjToPCS.can_data_byte[3] = (uint8_t)(bmsParam->vbat);
10004abe:	687b      	ldr	r3, [r7, #4]
10004ac0:	885b      	ldrh	r3, [r3, #2]
10004ac2:	b2da      	uxtb	r2, r3
10004ac4:	4b12      	ldr	r3, [pc, #72]	; (10004b10 <PCS_BMSTransmitToPCS+0x11c>)
10004ac6:	74da      	strb	r2, [r3, #19]
			msgObjToPCS.can_data_byte[4] = (uint8_t)(bmsParam->ibat>>8);
10004ac8:	687b      	ldr	r3, [r7, #4]
10004aca:	889b      	ldrh	r3, [r3, #4]
10004acc:	0a1b      	lsrs	r3, r3, #8
10004ace:	b29b      	uxth	r3, r3
10004ad0:	b2da      	uxtb	r2, r3
10004ad2:	4b0f      	ldr	r3, [pc, #60]	; (10004b10 <PCS_BMSTransmitToPCS+0x11c>)
10004ad4:	751a      	strb	r2, [r3, #20]
			msgObjToPCS.can_data_byte[5] = (uint8_t)(bmsParam->ibat);
10004ad6:	687b      	ldr	r3, [r7, #4]
10004ad8:	889b      	ldrh	r3, [r3, #4]
10004ada:	b2da      	uxtb	r2, r3
10004adc:	4b0c      	ldr	r3, [pc, #48]	; (10004b10 <PCS_BMSTransmitToPCS+0x11c>)
10004ade:	755a      	strb	r2, [r3, #21]
			msgObjToPCS.can_data_byte[6] = (uint8_t)(bmsParam->tempbat>>8);
10004ae0:	687b      	ldr	r3, [r7, #4]
10004ae2:	88db      	ldrh	r3, [r3, #6]
10004ae4:	0a1b      	lsrs	r3, r3, #8
10004ae6:	b29b      	uxth	r3, r3
10004ae8:	b2da      	uxtb	r2, r3
10004aea:	4b09      	ldr	r3, [pc, #36]	; (10004b10 <PCS_BMSTransmitToPCS+0x11c>)
10004aec:	759a      	strb	r2, [r3, #22]
			msgObjToPCS.can_data_byte[7] = (uint8_t)(bmsParam->tempbat);
10004aee:	687b      	ldr	r3, [r7, #4]
10004af0:	88db      	ldrh	r3, [r3, #6]
10004af2:	b2da      	uxtb	r2, r3
10004af4:	4b06      	ldr	r3, [pc, #24]	; (10004b10 <PCS_BMSTransmitToPCS+0x11c>)
10004af6:	75da      	strb	r2, [r3, #23]
			break;
10004af8:	46c0      	nop			; (mov r8, r8)
		default		:
			break;
	}
	XMC_CAN_MO_Config(&msgObjToPCS);
10004afa:	4b05      	ldr	r3, [pc, #20]	; (10004b10 <PCS_BMSTransmitToPCS+0x11c>)
10004afc:	1c18      	adds	r0, r3, #0
10004afe:	f7fc ff2d 	bl	1000195c <XMC_CAN_MO_Config>
	XMC_CAN_MO_Transmit(&msgObjToPCS);
10004b02:	4b03      	ldr	r3, [pc, #12]	; (10004b10 <PCS_BMSTransmitToPCS+0x11c>)
10004b04:	1c18      	adds	r0, r3, #0
10004b06:	f7fd f80b 	bl	10001b20 <XMC_CAN_MO_Transmit>
}
10004b0a:	46bd      	mov	sp, r7
10004b0c:	b004      	add	sp, #16
10004b0e:	bd80      	pop	{r7, pc}
10004b10:	20000638 	.word	0x20000638

10004b14 <PCS_GetPCSStatus>:

PCS_STATUS_t PCS_GetPCSStatus(XMC_CAN_MO_t *can_m0_obj)
{
10004b14:	b580      	push	{r7, lr}
10004b16:	b084      	sub	sp, #16
10004b18:	af00      	add	r7, sp, #0
10004b1a:	6078      	str	r0, [r7, #4]
10004b1c:	6039      	str	r1, [r7, #0]
	PCS_STATUS_t param;
	uint8_t 	 status;
	status = can_m0_obj->can_data_byte[0];
10004b1e:	230f      	movs	r3, #15
10004b20:	18fb      	adds	r3, r7, r3
10004b22:	683a      	ldr	r2, [r7, #0]
10004b24:	7c12      	ldrb	r2, [r2, #16]
10004b26:	701a      	strb	r2, [r3, #0]
	if(status<=3) 						{param.pcs_system_status = PCS_STAT_INITIAL;}
10004b28:	230f      	movs	r3, #15
10004b2a:	18fb      	adds	r3, r7, r3
10004b2c:	781b      	ldrb	r3, [r3, #0]
10004b2e:	2b03      	cmp	r3, #3
10004b30:	d804      	bhi.n	10004b3c <PCS_GetPCSStatus+0x28>
10004b32:	2308      	movs	r3, #8
10004b34:	18fb      	adds	r3, r7, r3
10004b36:	2200      	movs	r2, #0
10004b38:	701a      	strb	r2, [r3, #0]
10004b3a:	e017      	b.n	10004b6c <PCS_GetPCSStatus+0x58>
	else if((status==4) || (status==5)) {param.pcs_system_status = PCS_STAT_STANDBY;}
10004b3c:	230f      	movs	r3, #15
10004b3e:	18fb      	adds	r3, r7, r3
10004b40:	781b      	ldrb	r3, [r3, #0]
10004b42:	2b04      	cmp	r3, #4
10004b44:	d004      	beq.n	10004b50 <PCS_GetPCSStatus+0x3c>
10004b46:	230f      	movs	r3, #15
10004b48:	18fb      	adds	r3, r7, r3
10004b4a:	781b      	ldrb	r3, [r3, #0]
10004b4c:	2b05      	cmp	r3, #5
10004b4e:	d104      	bne.n	10004b5a <PCS_GetPCSStatus+0x46>
10004b50:	2308      	movs	r3, #8
10004b52:	18fb      	adds	r3, r7, r3
10004b54:	2204      	movs	r2, #4
10004b56:	701a      	strb	r2, [r3, #0]
10004b58:	e008      	b.n	10004b6c <PCS_GetPCSStatus+0x58>
	else if(status==6) 					{param.pcs_system_status = PCS_STAT_RUNNING;}
10004b5a:	230f      	movs	r3, #15
10004b5c:	18fb      	adds	r3, r7, r3
10004b5e:	781b      	ldrb	r3, [r3, #0]
10004b60:	2b06      	cmp	r3, #6
10004b62:	d103      	bne.n	10004b6c <PCS_GetPCSStatus+0x58>
10004b64:	2308      	movs	r3, #8
10004b66:	18fb      	adds	r3, r7, r3
10004b68:	2206      	movs	r2, #6
10004b6a:	701a      	strb	r2, [r3, #0]

	status = can_m0_obj->can_data_byte[1];
10004b6c:	230f      	movs	r3, #15
10004b6e:	18fb      	adds	r3, r7, r3
10004b70:	683a      	ldr	r2, [r7, #0]
10004b72:	7c52      	ldrb	r2, [r2, #17]
10004b74:	701a      	strb	r2, [r3, #0]
	if(status)	{param.pcs_precharge_IsComplete = true;}
10004b76:	230f      	movs	r3, #15
10004b78:	18fb      	adds	r3, r7, r3
10004b7a:	781b      	ldrb	r3, [r3, #0]
10004b7c:	2b00      	cmp	r3, #0
10004b7e:	d004      	beq.n	10004b8a <PCS_GetPCSStatus+0x76>
10004b80:	2308      	movs	r3, #8
10004b82:	18fb      	adds	r3, r7, r3
10004b84:	2201      	movs	r2, #1
10004b86:	705a      	strb	r2, [r3, #1]
10004b88:	e003      	b.n	10004b92 <PCS_GetPCSStatus+0x7e>
	else 		{param.pcs_precharge_IsComplete = false;}
10004b8a:	2308      	movs	r3, #8
10004b8c:	18fb      	adds	r3, r7, r3
10004b8e:	2200      	movs	r2, #0
10004b90:	705a      	strb	r2, [r3, #1]

	param.pcs_system_warning = PCS_WARN_NORMAL;
10004b92:	2308      	movs	r3, #8
10004b94:	18fb      	adds	r3, r7, r3
10004b96:	2200      	movs	r2, #0
10004b98:	709a      	strb	r2, [r3, #2]
	param.pcs_system_pcsIsStandBy = false;
10004b9a:	2308      	movs	r3, #8
10004b9c:	18fb      	adds	r3, r7, r3
10004b9e:	2200      	movs	r2, #0
10004ba0:	711a      	strb	r2, [r3, #4]

	/* check the warning status */
	status = can_m0_obj->can_data_byte[2];
10004ba2:	230f      	movs	r3, #15
10004ba4:	18fb      	adds	r3, r7, r3
10004ba6:	683a      	ldr	r2, [r7, #0]
10004ba8:	7c92      	ldrb	r2, [r2, #18]
10004baa:	701a      	strb	r2, [r3, #0]
	if((status>>6)&0x01)
10004bac:	230f      	movs	r3, #15
10004bae:	18fb      	adds	r3, r7, r3
10004bb0:	781b      	ldrb	r3, [r3, #0]
10004bb2:	099b      	lsrs	r3, r3, #6
10004bb4:	b2db      	uxtb	r3, r3
10004bb6:	1c1a      	adds	r2, r3, #0
10004bb8:	2301      	movs	r3, #1
10004bba:	4013      	ands	r3, r2
10004bbc:	d007      	beq.n	10004bce <PCS_GetPCSStatus+0xba>
	{
		param.pcs_system_warning = PCS_WARN_PCS_OT;
10004bbe:	2308      	movs	r3, #8
10004bc0:	18fb      	adds	r3, r7, r3
10004bc2:	2206      	movs	r2, #6
10004bc4:	709a      	strb	r2, [r3, #2]
		param.pcs_system_pcsIsStandBy = true;
10004bc6:	2308      	movs	r3, #8
10004bc8:	18fb      	adds	r3, r7, r3
10004bca:	2201      	movs	r2, #1
10004bcc:	711a      	strb	r2, [r3, #4]
	}

	status = can_m0_obj->can_data_byte[3];
10004bce:	230f      	movs	r3, #15
10004bd0:	18fb      	adds	r3, r7, r3
10004bd2:	683a      	ldr	r2, [r7, #0]
10004bd4:	7cd2      	ldrb	r2, [r2, #19]
10004bd6:	701a      	strb	r2, [r3, #0]
	if((status>>7)&0x01)
10004bd8:	230f      	movs	r3, #15
10004bda:	18fb      	adds	r3, r7, r3
10004bdc:	781b      	ldrb	r3, [r3, #0]
10004bde:	09db      	lsrs	r3, r3, #7
10004be0:	b2db      	uxtb	r3, r3
10004be2:	1c1a      	adds	r2, r3, #0
10004be4:	2301      	movs	r3, #1
10004be6:	4013      	ands	r3, r2
10004be8:	d007      	beq.n	10004bfa <PCS_GetPCSStatus+0xe6>
	{
		param.pcs_system_warning = PCS_WARN_BAT_OVCHG;
10004bea:	2308      	movs	r3, #8
10004bec:	18fb      	adds	r3, r7, r3
10004bee:	2201      	movs	r2, #1
10004bf0:	709a      	strb	r2, [r3, #2]
		param.pcs_system_pcsIsStandBy = true;
10004bf2:	2308      	movs	r3, #8
10004bf4:	18fb      	adds	r3, r7, r3
10004bf6:	2201      	movs	r2, #1
10004bf8:	711a      	strb	r2, [r3, #4]
	}
	if((status>>6)&0x01){param.pcs_system_warning = PCS_WARN_BAT_CHGSUP;}
10004bfa:	230f      	movs	r3, #15
10004bfc:	18fb      	adds	r3, r7, r3
10004bfe:	781b      	ldrb	r3, [r3, #0]
10004c00:	099b      	lsrs	r3, r3, #6
10004c02:	b2db      	uxtb	r3, r3
10004c04:	1c1a      	adds	r2, r3, #0
10004c06:	2301      	movs	r3, #1
10004c08:	4013      	ands	r3, r2
10004c0a:	d003      	beq.n	10004c14 <PCS_GetPCSStatus+0x100>
10004c0c:	2308      	movs	r3, #8
10004c0e:	18fb      	adds	r3, r7, r3
10004c10:	2202      	movs	r2, #2
10004c12:	709a      	strb	r2, [r3, #2]
	if((status>>5)&0x01){param.pcs_system_warning = PCS_WARN_BAT_DSGSUP;}
10004c14:	230f      	movs	r3, #15
10004c16:	18fb      	adds	r3, r7, r3
10004c18:	781b      	ldrb	r3, [r3, #0]
10004c1a:	095b      	lsrs	r3, r3, #5
10004c1c:	b2db      	uxtb	r3, r3
10004c1e:	1c1a      	adds	r2, r3, #0
10004c20:	2301      	movs	r3, #1
10004c22:	4013      	ands	r3, r2
10004c24:	d003      	beq.n	10004c2e <PCS_GetPCSStatus+0x11a>
10004c26:	2308      	movs	r3, #8
10004c28:	18fb      	adds	r3, r7, r3
10004c2a:	2203      	movs	r2, #3
10004c2c:	709a      	strb	r2, [r3, #2]
	if((status>>4)&0x01){param.pcs_system_warning = PCS_WARN_BAT_OVDSG;}
10004c2e:	230f      	movs	r3, #15
10004c30:	18fb      	adds	r3, r7, r3
10004c32:	781b      	ldrb	r3, [r3, #0]
10004c34:	091b      	lsrs	r3, r3, #4
10004c36:	b2db      	uxtb	r3, r3
10004c38:	1c1a      	adds	r2, r3, #0
10004c3a:	2301      	movs	r3, #1
10004c3c:	4013      	ands	r3, r2
10004c3e:	d003      	beq.n	10004c48 <PCS_GetPCSStatus+0x134>
10004c40:	2308      	movs	r3, #8
10004c42:	18fb      	adds	r3, r7, r3
10004c44:	2204      	movs	r2, #4
10004c46:	709a      	strb	r2, [r3, #2]
	if((status>>3)&0x01)
10004c48:	230f      	movs	r3, #15
10004c4a:	18fb      	adds	r3, r7, r3
10004c4c:	781b      	ldrb	r3, [r3, #0]
10004c4e:	08db      	lsrs	r3, r3, #3
10004c50:	b2db      	uxtb	r3, r3
10004c52:	1c1a      	adds	r2, r3, #0
10004c54:	2301      	movs	r3, #1
10004c56:	4013      	ands	r3, r2
10004c58:	d007      	beq.n	10004c6a <PCS_GetPCSStatus+0x156>
	{
		param.pcs_system_warning = PCS_WARN_BAT_OVDSG2;
10004c5a:	2308      	movs	r3, #8
10004c5c:	18fb      	adds	r3, r7, r3
10004c5e:	2205      	movs	r2, #5
10004c60:	709a      	strb	r2, [r3, #2]
		param.pcs_system_pcsIsStandBy = true;
10004c62:	2308      	movs	r3, #8
10004c64:	18fb      	adds	r3, r7, r3
10004c66:	2201      	movs	r2, #1
10004c68:	711a      	strb	r2, [r3, #4]
	}

	return param;
10004c6a:	687a      	ldr	r2, [r7, #4]
10004c6c:	2308      	movs	r3, #8
10004c6e:	18fb      	adds	r3, r7, r3
10004c70:	1c11      	adds	r1, r2, #0
10004c72:	1c1a      	adds	r2, r3, #0
10004c74:	2305      	movs	r3, #5
10004c76:	1c08      	adds	r0, r1, #0
10004c78:	1c11      	adds	r1, r2, #0
10004c7a:	1c1a      	adds	r2, r3, #0
10004c7c:	f003 f86e 	bl	10007d5c <memcpy>
}
10004c80:	6878      	ldr	r0, [r7, #4]
10004c82:	46bd      	mov	sp, r7
10004c84:	b004      	add	sp, #16
10004c86:	bd80      	pop	{r7, pc}

10004c88 <PCS_GetDCGridStatus>:

DCGRID_STATUS_t 	PCS_GetDCGridStatus(XMC_CAN_MO_t *can_m0_obj)
{
10004c88:	b580      	push	{r7, lr}
10004c8a:	b086      	sub	sp, #24
10004c8c:	af00      	add	r7, sp, #0
10004c8e:	6078      	str	r0, [r7, #4]
	DCGRID_STATUS_t param;
	uint8_t			status;

	param.dcgrid_system_pcsIsStandBy = false;
10004c90:	230c      	movs	r3, #12
10004c92:	18fb      	adds	r3, r7, r3
10004c94:	2200      	movs	r2, #0
10004c96:	70da      	strb	r2, [r3, #3]

	status = can_m0_obj->can_data_byte[0];
10004c98:	2317      	movs	r3, #23
10004c9a:	18fb      	adds	r3, r7, r3
10004c9c:	687a      	ldr	r2, [r7, #4]
10004c9e:	7c12      	ldrb	r2, [r2, #16]
10004ca0:	701a      	strb	r2, [r3, #0]
	if		((status<=3)||(status==6)||(status==7)) {param.dcgrid_system_status = GRID_STAT_NOT_RUNNING;}
10004ca2:	2317      	movs	r3, #23
10004ca4:	18fb      	adds	r3, r7, r3
10004ca6:	781b      	ldrb	r3, [r3, #0]
10004ca8:	2b03      	cmp	r3, #3
10004caa:	d909      	bls.n	10004cc0 <PCS_GetDCGridStatus+0x38>
10004cac:	2317      	movs	r3, #23
10004cae:	18fb      	adds	r3, r7, r3
10004cb0:	781b      	ldrb	r3, [r3, #0]
10004cb2:	2b06      	cmp	r3, #6
10004cb4:	d004      	beq.n	10004cc0 <PCS_GetDCGridStatus+0x38>
10004cb6:	2317      	movs	r3, #23
10004cb8:	18fb      	adds	r3, r7, r3
10004cba:	781b      	ldrb	r3, [r3, #0]
10004cbc:	2b07      	cmp	r3, #7
10004cbe:	d104      	bne.n	10004cca <PCS_GetDCGridStatus+0x42>
10004cc0:	230c      	movs	r3, #12
10004cc2:	18fb      	adds	r3, r7, r3
10004cc4:	2200      	movs	r2, #0
10004cc6:	701a      	strb	r2, [r3, #0]
10004cc8:	e01c      	b.n	10004d04 <PCS_GetDCGridStatus+0x7c>
	else if ((status==4)||(status ==5)) 			{param.dcgrid_system_status = GRID_STAT_CHG;}
10004cca:	2317      	movs	r3, #23
10004ccc:	18fb      	adds	r3, r7, r3
10004cce:	781b      	ldrb	r3, [r3, #0]
10004cd0:	2b04      	cmp	r3, #4
10004cd2:	d004      	beq.n	10004cde <PCS_GetDCGridStatus+0x56>
10004cd4:	2317      	movs	r3, #23
10004cd6:	18fb      	adds	r3, r7, r3
10004cd8:	781b      	ldrb	r3, [r3, #0]
10004cda:	2b05      	cmp	r3, #5
10004cdc:	d104      	bne.n	10004ce8 <PCS_GetDCGridStatus+0x60>
10004cde:	230c      	movs	r3, #12
10004ce0:	18fb      	adds	r3, r7, r3
10004ce2:	2204      	movs	r2, #4
10004ce4:	701a      	strb	r2, [r3, #0]
10004ce6:	e00d      	b.n	10004d04 <PCS_GetDCGridStatus+0x7c>
	else if ((status==8)||(status ==9)) 			{param.dcgrid_system_status = GRID_STAT_DSG;}
10004ce8:	2317      	movs	r3, #23
10004cea:	18fb      	adds	r3, r7, r3
10004cec:	781b      	ldrb	r3, [r3, #0]
10004cee:	2b08      	cmp	r3, #8
10004cf0:	d004      	beq.n	10004cfc <PCS_GetDCGridStatus+0x74>
10004cf2:	2317      	movs	r3, #23
10004cf4:	18fb      	adds	r3, r7, r3
10004cf6:	781b      	ldrb	r3, [r3, #0]
10004cf8:	2b09      	cmp	r3, #9
10004cfa:	d103      	bne.n	10004d04 <PCS_GetDCGridStatus+0x7c>
10004cfc:	230c      	movs	r3, #12
10004cfe:	18fb      	adds	r3, r7, r3
10004d00:	2208      	movs	r2, #8
10004d02:	701a      	strb	r2, [r3, #0]

	param.dcgrid_system_warning=GRID_WARN_NORMAL;
10004d04:	230c      	movs	r3, #12
10004d06:	18fb      	adds	r3, r7, r3
10004d08:	2200      	movs	r2, #0
10004d0a:	705a      	strb	r2, [r3, #1]

	/* check the warning status */
	status = can_m0_obj->can_data_byte[2];
10004d0c:	2317      	movs	r3, #23
10004d0e:	18fb      	adds	r3, r7, r3
10004d10:	687a      	ldr	r2, [r7, #4]
10004d12:	7c92      	ldrb	r2, [r2, #18]
10004d14:	701a      	strb	r2, [r3, #0]
	if((status>>7)&0x01){param.dcgrid_system_warning=GRID_WARN_OV;}
10004d16:	2317      	movs	r3, #23
10004d18:	18fb      	adds	r3, r7, r3
10004d1a:	781b      	ldrb	r3, [r3, #0]
10004d1c:	09db      	lsrs	r3, r3, #7
10004d1e:	b2db      	uxtb	r3, r3
10004d20:	1c1a      	adds	r2, r3, #0
10004d22:	2301      	movs	r3, #1
10004d24:	4013      	ands	r3, r2
10004d26:	d003      	beq.n	10004d30 <PCS_GetDCGridStatus+0xa8>
10004d28:	230c      	movs	r3, #12
10004d2a:	18fb      	adds	r3, r7, r3
10004d2c:	2201      	movs	r2, #1
10004d2e:	705a      	strb	r2, [r3, #1]
	if((status>>6)&0x01){param.dcgrid_system_warning=GRID_WARN_OC;}
10004d30:	2317      	movs	r3, #23
10004d32:	18fb      	adds	r3, r7, r3
10004d34:	781b      	ldrb	r3, [r3, #0]
10004d36:	099b      	lsrs	r3, r3, #6
10004d38:	b2db      	uxtb	r3, r3
10004d3a:	1c1a      	adds	r2, r3, #0
10004d3c:	2301      	movs	r3, #1
10004d3e:	4013      	ands	r3, r2
10004d40:	d003      	beq.n	10004d4a <PCS_GetDCGridStatus+0xc2>
10004d42:	230c      	movs	r3, #12
10004d44:	18fb      	adds	r3, r7, r3
10004d46:	2202      	movs	r2, #2
10004d48:	705a      	strb	r2, [r3, #1]

	return param;
10004d4a:	2310      	movs	r3, #16
10004d4c:	18fb      	adds	r3, r7, r3
10004d4e:	220c      	movs	r2, #12
10004d50:	18ba      	adds	r2, r7, r2
10004d52:	6812      	ldr	r2, [r2, #0]
10004d54:	601a      	str	r2, [r3, #0]
10004d56:	2310      	movs	r3, #16
10004d58:	18fa      	adds	r2, r7, r3
10004d5a:	2300      	movs	r3, #0
10004d5c:	7811      	ldrb	r1, [r2, #0]
10004d5e:	20ff      	movs	r0, #255	; 0xff
10004d60:	4001      	ands	r1, r0
10004d62:	20ff      	movs	r0, #255	; 0xff
10004d64:	4383      	bics	r3, r0
10004d66:	430b      	orrs	r3, r1
10004d68:	7851      	ldrb	r1, [r2, #1]
10004d6a:	20ff      	movs	r0, #255	; 0xff
10004d6c:	4001      	ands	r1, r0
10004d6e:	0209      	lsls	r1, r1, #8
10004d70:	4809      	ldr	r0, [pc, #36]	; (10004d98 <PCS_GetDCGridStatus+0x110>)
10004d72:	4003      	ands	r3, r0
10004d74:	430b      	orrs	r3, r1
10004d76:	7891      	ldrb	r1, [r2, #2]
10004d78:	20ff      	movs	r0, #255	; 0xff
10004d7a:	4001      	ands	r1, r0
10004d7c:	0409      	lsls	r1, r1, #16
10004d7e:	4807      	ldr	r0, [pc, #28]	; (10004d9c <PCS_GetDCGridStatus+0x114>)
10004d80:	4003      	ands	r3, r0
10004d82:	430b      	orrs	r3, r1
10004d84:	78d2      	ldrb	r2, [r2, #3]
10004d86:	0612      	lsls	r2, r2, #24
10004d88:	021b      	lsls	r3, r3, #8
10004d8a:	0a1b      	lsrs	r3, r3, #8
10004d8c:	4313      	orrs	r3, r2
}
10004d8e:	1c18      	adds	r0, r3, #0
10004d90:	46bd      	mov	sp, r7
10004d92:	b006      	add	sp, #24
10004d94:	bd80      	pop	{r7, pc}
10004d96:	46c0      	nop			; (mov r8, r8)
10004d98:	ffff00ff 	.word	0xffff00ff
10004d9c:	ff00ffff 	.word	0xff00ffff

10004da0 <PCS_GetACInvStatus>:

ACINV_STATUS_t 		PCS_GetACInvStatus(XMC_CAN_MO_t *can_m0_obj)
{
10004da0:	b580      	push	{r7, lr}
10004da2:	b086      	sub	sp, #24
10004da4:	af00      	add	r7, sp, #0
10004da6:	6078      	str	r0, [r7, #4]
	ACINV_STATUS_t param;
	uint8_t		   status;

	status = can_m0_obj->can_data_byte[0];
10004da8:	2317      	movs	r3, #23
10004daa:	18fb      	adds	r3, r7, r3
10004dac:	687a      	ldr	r2, [r7, #4]
10004dae:	7c12      	ldrb	r2, [r2, #16]
10004db0:	701a      	strb	r2, [r3, #0]
	if((status<=3)||(status==11)||(status==13))	{param.acinv_system_status = INV_STAT_NOT_RUNNING;}
10004db2:	2317      	movs	r3, #23
10004db4:	18fb      	adds	r3, r7, r3
10004db6:	781b      	ldrb	r3, [r3, #0]
10004db8:	2b03      	cmp	r3, #3
10004dba:	d909      	bls.n	10004dd0 <PCS_GetACInvStatus+0x30>
10004dbc:	2317      	movs	r3, #23
10004dbe:	18fb      	adds	r3, r7, r3
10004dc0:	781b      	ldrb	r3, [r3, #0]
10004dc2:	2b0b      	cmp	r3, #11
10004dc4:	d004      	beq.n	10004dd0 <PCS_GetACInvStatus+0x30>
10004dc6:	2317      	movs	r3, #23
10004dc8:	18fb      	adds	r3, r7, r3
10004dca:	781b      	ldrb	r3, [r3, #0]
10004dcc:	2b0d      	cmp	r3, #13
10004dce:	d104      	bne.n	10004dda <PCS_GetACInvStatus+0x3a>
10004dd0:	230c      	movs	r3, #12
10004dd2:	18fb      	adds	r3, r7, r3
10004dd4:	2200      	movs	r2, #0
10004dd6:	701a      	strb	r2, [r3, #0]
10004dd8:	e012      	b.n	10004e00 <PCS_GetACInvStatus+0x60>
	else if((status==14)||(status ==15))  		{param.acinv_system_status = INV_STAT_RUNNING;}
10004dda:	2317      	movs	r3, #23
10004ddc:	18fb      	adds	r3, r7, r3
10004dde:	781b      	ldrb	r3, [r3, #0]
10004de0:	2b0e      	cmp	r3, #14
10004de2:	d004      	beq.n	10004dee <PCS_GetACInvStatus+0x4e>
10004de4:	2317      	movs	r3, #23
10004de6:	18fb      	adds	r3, r7, r3
10004de8:	781b      	ldrb	r3, [r3, #0]
10004dea:	2b0f      	cmp	r3, #15
10004dec:	d104      	bne.n	10004df8 <PCS_GetACInvStatus+0x58>
10004dee:	230c      	movs	r3, #12
10004df0:	18fb      	adds	r3, r7, r3
10004df2:	220e      	movs	r2, #14
10004df4:	701a      	strb	r2, [r3, #0]
10004df6:	e003      	b.n	10004e00 <PCS_GetACInvStatus+0x60>
	else							 			{param.acinv_system_status = INV_STAT_NONE;}
10004df8:	230c      	movs	r3, #12
10004dfa:	18fb      	adds	r3, r7, r3
10004dfc:	2204      	movs	r2, #4
10004dfe:	701a      	strb	r2, [r3, #0]

	param.acinv_system_warning = INV_WARN_NORMAL;
10004e00:	230c      	movs	r3, #12
10004e02:	18fb      	adds	r3, r7, r3
10004e04:	2200      	movs	r2, #0
10004e06:	705a      	strb	r2, [r3, #1]
	param.acinv_system_pcsIsStandBy = false;
10004e08:	230c      	movs	r3, #12
10004e0a:	18fb      	adds	r3, r7, r3
10004e0c:	2200      	movs	r2, #0
10004e0e:	70da      	strb	r2, [r3, #3]

	/* check the warning status */
	status = can_m0_obj->can_data_byte[2];
10004e10:	2317      	movs	r3, #23
10004e12:	18fb      	adds	r3, r7, r3
10004e14:	687a      	ldr	r2, [r7, #4]
10004e16:	7c92      	ldrb	r2, [r2, #18]
10004e18:	701a      	strb	r2, [r3, #0]
	if((status>>7)&0x01)
10004e1a:	2317      	movs	r3, #23
10004e1c:	18fb      	adds	r3, r7, r3
10004e1e:	781b      	ldrb	r3, [r3, #0]
10004e20:	09db      	lsrs	r3, r3, #7
10004e22:	b2db      	uxtb	r3, r3
10004e24:	1c1a      	adds	r2, r3, #0
10004e26:	2301      	movs	r3, #1
10004e28:	4013      	ands	r3, r2
10004e2a:	d007      	beq.n	10004e3c <PCS_GetACInvStatus+0x9c>
		{
			param.acinv_system_warning = INV_WARN_MCU_OV;
10004e2c:	230c      	movs	r3, #12
10004e2e:	18fb      	adds	r3, r7, r3
10004e30:	2201      	movs	r2, #1
10004e32:	705a      	strb	r2, [r3, #1]
			param.acinv_system_pcsIsStandBy = true;
10004e34:	230c      	movs	r3, #12
10004e36:	18fb      	adds	r3, r7, r3
10004e38:	2201      	movs	r2, #1
10004e3a:	70da      	strb	r2, [r3, #3]
		}
	if((status>>3)&0x01){param.acinv_system_warning = INV_WARN_OT;}
10004e3c:	2317      	movs	r3, #23
10004e3e:	18fb      	adds	r3, r7, r3
10004e40:	781b      	ldrb	r3, [r3, #0]
10004e42:	08db      	lsrs	r3, r3, #3
10004e44:	b2db      	uxtb	r3, r3
10004e46:	1c1a      	adds	r2, r3, #0
10004e48:	2301      	movs	r3, #1
10004e4a:	4013      	ands	r3, r2
10004e4c:	d003      	beq.n	10004e56 <PCS_GetACInvStatus+0xb6>
10004e4e:	230c      	movs	r3, #12
10004e50:	18fb      	adds	r3, r7, r3
10004e52:	2202      	movs	r2, #2
10004e54:	705a      	strb	r2, [r3, #1]
	if((status>>2)&0x01){param.acinv_system_warning = INV_WARN_OV;}
10004e56:	2317      	movs	r3, #23
10004e58:	18fb      	adds	r3, r7, r3
10004e5a:	781b      	ldrb	r3, [r3, #0]
10004e5c:	089b      	lsrs	r3, r3, #2
10004e5e:	b2db      	uxtb	r3, r3
10004e60:	1c1a      	adds	r2, r3, #0
10004e62:	2301      	movs	r3, #1
10004e64:	4013      	ands	r3, r2
10004e66:	d003      	beq.n	10004e70 <PCS_GetACInvStatus+0xd0>
10004e68:	230c      	movs	r3, #12
10004e6a:	18fb      	adds	r3, r7, r3
10004e6c:	2203      	movs	r2, #3
10004e6e:	705a      	strb	r2, [r3, #1]
	if((status>>1)&0x01){param.acinv_system_warning = INV_WARN_UV;}
10004e70:	2317      	movs	r3, #23
10004e72:	18fb      	adds	r3, r7, r3
10004e74:	781b      	ldrb	r3, [r3, #0]
10004e76:	085b      	lsrs	r3, r3, #1
10004e78:	b2db      	uxtb	r3, r3
10004e7a:	1c1a      	adds	r2, r3, #0
10004e7c:	2301      	movs	r3, #1
10004e7e:	4013      	ands	r3, r2
10004e80:	d003      	beq.n	10004e8a <PCS_GetACInvStatus+0xea>
10004e82:	230c      	movs	r3, #12
10004e84:	18fb      	adds	r3, r7, r3
10004e86:	2204      	movs	r2, #4
10004e88:	705a      	strb	r2, [r3, #1]
	if((status)&0x01){param.acinv_system_warning = INV_WARN_OL;}
10004e8a:	2317      	movs	r3, #23
10004e8c:	18fb      	adds	r3, r7, r3
10004e8e:	781b      	ldrb	r3, [r3, #0]
10004e90:	2201      	movs	r2, #1
10004e92:	4013      	ands	r3, r2
10004e94:	d003      	beq.n	10004e9e <PCS_GetACInvStatus+0xfe>
10004e96:	230c      	movs	r3, #12
10004e98:	18fb      	adds	r3, r7, r3
10004e9a:	2205      	movs	r2, #5
10004e9c:	705a      	strb	r2, [r3, #1]

	return param;
10004e9e:	2310      	movs	r3, #16
10004ea0:	18fb      	adds	r3, r7, r3
10004ea2:	220c      	movs	r2, #12
10004ea4:	18ba      	adds	r2, r7, r2
10004ea6:	6812      	ldr	r2, [r2, #0]
10004ea8:	601a      	str	r2, [r3, #0]
10004eaa:	2310      	movs	r3, #16
10004eac:	18fa      	adds	r2, r7, r3
10004eae:	2300      	movs	r3, #0
10004eb0:	7811      	ldrb	r1, [r2, #0]
10004eb2:	20ff      	movs	r0, #255	; 0xff
10004eb4:	4001      	ands	r1, r0
10004eb6:	20ff      	movs	r0, #255	; 0xff
10004eb8:	4383      	bics	r3, r0
10004eba:	430b      	orrs	r3, r1
10004ebc:	7851      	ldrb	r1, [r2, #1]
10004ebe:	20ff      	movs	r0, #255	; 0xff
10004ec0:	4001      	ands	r1, r0
10004ec2:	0209      	lsls	r1, r1, #8
10004ec4:	4809      	ldr	r0, [pc, #36]	; (10004eec <PCS_GetACInvStatus+0x14c>)
10004ec6:	4003      	ands	r3, r0
10004ec8:	430b      	orrs	r3, r1
10004eca:	7891      	ldrb	r1, [r2, #2]
10004ecc:	20ff      	movs	r0, #255	; 0xff
10004ece:	4001      	ands	r1, r0
10004ed0:	0409      	lsls	r1, r1, #16
10004ed2:	4807      	ldr	r0, [pc, #28]	; (10004ef0 <PCS_GetACInvStatus+0x150>)
10004ed4:	4003      	ands	r3, r0
10004ed6:	430b      	orrs	r3, r1
10004ed8:	78d2      	ldrb	r2, [r2, #3]
10004eda:	0612      	lsls	r2, r2, #24
10004edc:	021b      	lsls	r3, r3, #8
10004ede:	0a1b      	lsrs	r3, r3, #8
10004ee0:	4313      	orrs	r3, r2
}
10004ee2:	1c18      	adds	r0, r3, #0
10004ee4:	46bd      	mov	sp, r7
10004ee6:	b006      	add	sp, #24
10004ee8:	bd80      	pop	{r7, pc}
10004eea:	46c0      	nop			; (mov r8, r8)
10004eec:	ffff00ff 	.word	0xffff00ff
10004ef0:	ff00ffff 	.word	0xff00ffff

10004ef4 <PCS_GetPVConvStatus>:

PVCONV_STATUS_t 	PCS_GetPVConvStatus(XMC_CAN_MO_t *can_m0_obj)
{
10004ef4:	b580      	push	{r7, lr}
10004ef6:	b086      	sub	sp, #24
10004ef8:	af00      	add	r7, sp, #0
10004efa:	6078      	str	r0, [r7, #4]
	PVCONV_STATUS_t param;
	uint8_t		   status;
	status = can_m0_obj->can_data_byte[0];
10004efc:	2317      	movs	r3, #23
10004efe:	18fb      	adds	r3, r7, r3
10004f00:	687a      	ldr	r2, [r7, #4]
10004f02:	7c12      	ldrb	r2, [r2, #16]
10004f04:	701a      	strb	r2, [r3, #0]
	if 		(status<=3) 				{param.pvconv_system_status = PV_STAT_NOT_RUNNING;}
10004f06:	2317      	movs	r3, #23
10004f08:	18fb      	adds	r3, r7, r3
10004f0a:	781b      	ldrb	r3, [r3, #0]
10004f0c:	2b03      	cmp	r3, #3
10004f0e:	d804      	bhi.n	10004f1a <PCS_GetPVConvStatus+0x26>
10004f10:	230c      	movs	r3, #12
10004f12:	18fb      	adds	r3, r7, r3
10004f14:	2200      	movs	r2, #0
10004f16:	701a      	strb	r2, [r3, #0]
10004f18:	e00d      	b.n	10004f36 <PCS_GetPVConvStatus+0x42>
	else if ((status==4)||(status ==5))	{param.pvconv_system_status = PV_STAT_RUNNING;}
10004f1a:	2317      	movs	r3, #23
10004f1c:	18fb      	adds	r3, r7, r3
10004f1e:	781b      	ldrb	r3, [r3, #0]
10004f20:	2b04      	cmp	r3, #4
10004f22:	d004      	beq.n	10004f2e <PCS_GetPVConvStatus+0x3a>
10004f24:	2317      	movs	r3, #23
10004f26:	18fb      	adds	r3, r7, r3
10004f28:	781b      	ldrb	r3, [r3, #0]
10004f2a:	2b05      	cmp	r3, #5
10004f2c:	d103      	bne.n	10004f36 <PCS_GetPVConvStatus+0x42>
10004f2e:	230c      	movs	r3, #12
10004f30:	18fb      	adds	r3, r7, r3
10004f32:	2204      	movs	r2, #4
10004f34:	701a      	strb	r2, [r3, #0]

	param.pvconv_system_warning = PV_WARN_NORMAL;
10004f36:	230c      	movs	r3, #12
10004f38:	18fb      	adds	r3, r7, r3
10004f3a:	2200      	movs	r2, #0
10004f3c:	705a      	strb	r2, [r3, #1]
	param.pvconv_system_pcsIsStandBy = false;
10004f3e:	230c      	movs	r3, #12
10004f40:	18fb      	adds	r3, r7, r3
10004f42:	2200      	movs	r2, #0
10004f44:	70da      	strb	r2, [r3, #3]

	/* check the warning status */
	status = can_m0_obj->can_data_byte[2];
10004f46:	2317      	movs	r3, #23
10004f48:	18fb      	adds	r3, r7, r3
10004f4a:	687a      	ldr	r2, [r7, #4]
10004f4c:	7c92      	ldrb	r2, [r2, #18]
10004f4e:	701a      	strb	r2, [r3, #0]
	if((status>>7)&0x01){param.pvconv_system_warning = PV_WARN_OV;}
10004f50:	2317      	movs	r3, #23
10004f52:	18fb      	adds	r3, r7, r3
10004f54:	781b      	ldrb	r3, [r3, #0]
10004f56:	09db      	lsrs	r3, r3, #7
10004f58:	b2db      	uxtb	r3, r3
10004f5a:	1c1a      	adds	r2, r3, #0
10004f5c:	2301      	movs	r3, #1
10004f5e:	4013      	ands	r3, r2
10004f60:	d003      	beq.n	10004f6a <PCS_GetPVConvStatus+0x76>
10004f62:	230c      	movs	r3, #12
10004f64:	18fb      	adds	r3, r7, r3
10004f66:	2201      	movs	r2, #1
10004f68:	705a      	strb	r2, [r3, #1]
	if((status>>6)&0x01){param.pvconv_system_warning = PV_WARN_OC;}
10004f6a:	2317      	movs	r3, #23
10004f6c:	18fb      	adds	r3, r7, r3
10004f6e:	781b      	ldrb	r3, [r3, #0]
10004f70:	099b      	lsrs	r3, r3, #6
10004f72:	b2db      	uxtb	r3, r3
10004f74:	1c1a      	adds	r2, r3, #0
10004f76:	2301      	movs	r3, #1
10004f78:	4013      	ands	r3, r2
10004f7a:	d003      	beq.n	10004f84 <PCS_GetPVConvStatus+0x90>
10004f7c:	230c      	movs	r3, #12
10004f7e:	18fb      	adds	r3, r7, r3
10004f80:	2202      	movs	r2, #2
10004f82:	705a      	strb	r2, [r3, #1]

	return param;
10004f84:	2310      	movs	r3, #16
10004f86:	18fb      	adds	r3, r7, r3
10004f88:	220c      	movs	r2, #12
10004f8a:	18ba      	adds	r2, r7, r2
10004f8c:	6812      	ldr	r2, [r2, #0]
10004f8e:	601a      	str	r2, [r3, #0]
10004f90:	2310      	movs	r3, #16
10004f92:	18fa      	adds	r2, r7, r3
10004f94:	2300      	movs	r3, #0
10004f96:	7811      	ldrb	r1, [r2, #0]
10004f98:	20ff      	movs	r0, #255	; 0xff
10004f9a:	4001      	ands	r1, r0
10004f9c:	20ff      	movs	r0, #255	; 0xff
10004f9e:	4383      	bics	r3, r0
10004fa0:	430b      	orrs	r3, r1
10004fa2:	7851      	ldrb	r1, [r2, #1]
10004fa4:	20ff      	movs	r0, #255	; 0xff
10004fa6:	4001      	ands	r1, r0
10004fa8:	0209      	lsls	r1, r1, #8
10004faa:	4809      	ldr	r0, [pc, #36]	; (10004fd0 <PCS_GetPVConvStatus+0xdc>)
10004fac:	4003      	ands	r3, r0
10004fae:	430b      	orrs	r3, r1
10004fb0:	7891      	ldrb	r1, [r2, #2]
10004fb2:	20ff      	movs	r0, #255	; 0xff
10004fb4:	4001      	ands	r1, r0
10004fb6:	0409      	lsls	r1, r1, #16
10004fb8:	4806      	ldr	r0, [pc, #24]	; (10004fd4 <PCS_GetPVConvStatus+0xe0>)
10004fba:	4003      	ands	r3, r0
10004fbc:	430b      	orrs	r3, r1
10004fbe:	78d2      	ldrb	r2, [r2, #3]
10004fc0:	0612      	lsls	r2, r2, #24
10004fc2:	021b      	lsls	r3, r3, #8
10004fc4:	0a1b      	lsrs	r3, r3, #8
10004fc6:	4313      	orrs	r3, r2
}
10004fc8:	1c18      	adds	r0, r3, #0
10004fca:	46bd      	mov	sp, r7
10004fcc:	b006      	add	sp, #24
10004fce:	bd80      	pop	{r7, pc}
10004fd0:	ffff00ff 	.word	0xffff00ff
10004fd4:	ff00ffff 	.word	0xff00ffff

10004fd8 <PCS_GetBatConvStatus>:

BATCONV_STATUS_t 	PCS_GetBatConvStatus(XMC_CAN_MO_t *can_m0_obj)
{
10004fd8:	b580      	push	{r7, lr}
10004fda:	b086      	sub	sp, #24
10004fdc:	af00      	add	r7, sp, #0
10004fde:	6078      	str	r0, [r7, #4]
	BATCONV_STATUS_t param;
	uint8_t		   status;
	status = can_m0_obj->can_data_byte[0];
10004fe0:	2317      	movs	r3, #23
10004fe2:	18fb      	adds	r3, r7, r3
10004fe4:	687a      	ldr	r2, [r7, #4]
10004fe6:	7c12      	ldrb	r2, [r2, #16]
10004fe8:	701a      	strb	r2, [r3, #0]
	if (status<=3) 						{param.batconv_system_status = BATCONV_STAT_NOT_RUNNING;}
10004fea:	2317      	movs	r3, #23
10004fec:	18fb      	adds	r3, r7, r3
10004fee:	781b      	ldrb	r3, [r3, #0]
10004ff0:	2b03      	cmp	r3, #3
10004ff2:	d804      	bhi.n	10004ffe <PCS_GetBatConvStatus+0x26>
10004ff4:	230c      	movs	r3, #12
10004ff6:	18fb      	adds	r3, r7, r3
10004ff8:	2200      	movs	r2, #0
10004ffa:	701a      	strb	r2, [r3, #0]
10004ffc:	e00d      	b.n	1000501a <PCS_GetBatConvStatus+0x42>
	else if((status==4)||(status ==5))	{param.batconv_system_status = BATCONV_STAT_RUNNING;}
10004ffe:	2317      	movs	r3, #23
10005000:	18fb      	adds	r3, r7, r3
10005002:	781b      	ldrb	r3, [r3, #0]
10005004:	2b04      	cmp	r3, #4
10005006:	d004      	beq.n	10005012 <PCS_GetBatConvStatus+0x3a>
10005008:	2317      	movs	r3, #23
1000500a:	18fb      	adds	r3, r7, r3
1000500c:	781b      	ldrb	r3, [r3, #0]
1000500e:	2b05      	cmp	r3, #5
10005010:	d103      	bne.n	1000501a <PCS_GetBatConvStatus+0x42>
10005012:	230c      	movs	r3, #12
10005014:	18fb      	adds	r3, r7, r3
10005016:	2204      	movs	r2, #4
10005018:	701a      	strb	r2, [r3, #0]

	param.batconv_system_warning = BATCONV_WARN_NORMAL;
1000501a:	230c      	movs	r3, #12
1000501c:	18fb      	adds	r3, r7, r3
1000501e:	2200      	movs	r2, #0
10005020:	705a      	strb	r2, [r3, #1]
	param.batconv_system_pcsIsStandBy = false;
10005022:	230c      	movs	r3, #12
10005024:	18fb      	adds	r3, r7, r3
10005026:	2200      	movs	r2, #0
10005028:	70da      	strb	r2, [r3, #3]

	/* check the warning status */
	status = can_m0_obj->can_data_byte[2];
1000502a:	2317      	movs	r3, #23
1000502c:	18fb      	adds	r3, r7, r3
1000502e:	687a      	ldr	r2, [r7, #4]
10005030:	7c92      	ldrb	r2, [r2, #18]
10005032:	701a      	strb	r2, [r3, #0]
	if((status>>7)&0x01)
10005034:	2317      	movs	r3, #23
10005036:	18fb      	adds	r3, r7, r3
10005038:	781b      	ldrb	r3, [r3, #0]
1000503a:	09db      	lsrs	r3, r3, #7
1000503c:	b2db      	uxtb	r3, r3
1000503e:	1c1a      	adds	r2, r3, #0
10005040:	2301      	movs	r3, #1
10005042:	4013      	ands	r3, r2
10005044:	d007      	beq.n	10005056 <PCS_GetBatConvStatus+0x7e>
		{
			param.batconv_system_warning = BATCONV_WARN_OV;
10005046:	230c      	movs	r3, #12
10005048:	18fb      	adds	r3, r7, r3
1000504a:	2201      	movs	r2, #1
1000504c:	705a      	strb	r2, [r3, #1]
			param.batconv_system_pcsIsStandBy = true;
1000504e:	230c      	movs	r3, #12
10005050:	18fb      	adds	r3, r7, r3
10005052:	2201      	movs	r2, #1
10005054:	70da      	strb	r2, [r3, #3]
		}
	if((status>>6)&0x01)
10005056:	2317      	movs	r3, #23
10005058:	18fb      	adds	r3, r7, r3
1000505a:	781b      	ldrb	r3, [r3, #0]
1000505c:	099b      	lsrs	r3, r3, #6
1000505e:	b2db      	uxtb	r3, r3
10005060:	1c1a      	adds	r2, r3, #0
10005062:	2301      	movs	r3, #1
10005064:	4013      	ands	r3, r2
10005066:	d007      	beq.n	10005078 <PCS_GetBatConvStatus+0xa0>
		{
			param.batconv_system_warning = BATCONV_WARN_OC;
10005068:	230c      	movs	r3, #12
1000506a:	18fb      	adds	r3, r7, r3
1000506c:	2202      	movs	r2, #2
1000506e:	705a      	strb	r2, [r3, #1]
			param.batconv_system_pcsIsStandBy = true;
10005070:	230c      	movs	r3, #12
10005072:	18fb      	adds	r3, r7, r3
10005074:	2201      	movs	r2, #1
10005076:	70da      	strb	r2, [r3, #3]
		}
	if((status>>5)&0x01)
10005078:	2317      	movs	r3, #23
1000507a:	18fb      	adds	r3, r7, r3
1000507c:	781b      	ldrb	r3, [r3, #0]
1000507e:	095b      	lsrs	r3, r3, #5
10005080:	b2db      	uxtb	r3, r3
10005082:	1c1a      	adds	r2, r3, #0
10005084:	2301      	movs	r3, #1
10005086:	4013      	ands	r3, r2
10005088:	d007      	beq.n	1000509a <PCS_GetBatConvStatus+0xc2>
		{
			param.batconv_system_warning = BATCONV_WARN_DCDC_OV;
1000508a:	230c      	movs	r3, #12
1000508c:	18fb      	adds	r3, r7, r3
1000508e:	2203      	movs	r2, #3
10005090:	705a      	strb	r2, [r3, #1]
			param.batconv_system_pcsIsStandBy = true;
10005092:	230c      	movs	r3, #12
10005094:	18fb      	adds	r3, r7, r3
10005096:	2201      	movs	r2, #1
10005098:	70da      	strb	r2, [r3, #3]
		}
	if((status>>2)&0x01)
1000509a:	2317      	movs	r3, #23
1000509c:	18fb      	adds	r3, r7, r3
1000509e:	781b      	ldrb	r3, [r3, #0]
100050a0:	089b      	lsrs	r3, r3, #2
100050a2:	b2db      	uxtb	r3, r3
100050a4:	1c1a      	adds	r2, r3, #0
100050a6:	2301      	movs	r3, #1
100050a8:	4013      	ands	r3, r2
100050aa:	d007      	beq.n	100050bc <PCS_GetBatConvStatus+0xe4>
		{
			param.batconv_system_warning = BATCONV_WARN_DCDC_OT;
100050ac:	230c      	movs	r3, #12
100050ae:	18fb      	adds	r3, r7, r3
100050b0:	2204      	movs	r2, #4
100050b2:	705a      	strb	r2, [r3, #1]
			param.batconv_system_pcsIsStandBy = true;
100050b4:	230c      	movs	r3, #12
100050b6:	18fb      	adds	r3, r7, r3
100050b8:	2201      	movs	r2, #1
100050ba:	70da      	strb	r2, [r3, #3]
		}

	return param;
100050bc:	2310      	movs	r3, #16
100050be:	18fb      	adds	r3, r7, r3
100050c0:	220c      	movs	r2, #12
100050c2:	18ba      	adds	r2, r7, r2
100050c4:	6812      	ldr	r2, [r2, #0]
100050c6:	601a      	str	r2, [r3, #0]
100050c8:	2310      	movs	r3, #16
100050ca:	18fa      	adds	r2, r7, r3
100050cc:	2300      	movs	r3, #0
100050ce:	7811      	ldrb	r1, [r2, #0]
100050d0:	20ff      	movs	r0, #255	; 0xff
100050d2:	4001      	ands	r1, r0
100050d4:	20ff      	movs	r0, #255	; 0xff
100050d6:	4383      	bics	r3, r0
100050d8:	430b      	orrs	r3, r1
100050da:	7851      	ldrb	r1, [r2, #1]
100050dc:	20ff      	movs	r0, #255	; 0xff
100050de:	4001      	ands	r1, r0
100050e0:	0209      	lsls	r1, r1, #8
100050e2:	4809      	ldr	r0, [pc, #36]	; (10005108 <PCS_GetBatConvStatus+0x130>)
100050e4:	4003      	ands	r3, r0
100050e6:	430b      	orrs	r3, r1
100050e8:	7891      	ldrb	r1, [r2, #2]
100050ea:	20ff      	movs	r0, #255	; 0xff
100050ec:	4001      	ands	r1, r0
100050ee:	0409      	lsls	r1, r1, #16
100050f0:	4806      	ldr	r0, [pc, #24]	; (1000510c <PCS_GetBatConvStatus+0x134>)
100050f2:	4003      	ands	r3, r0
100050f4:	430b      	orrs	r3, r1
100050f6:	78d2      	ldrb	r2, [r2, #3]
100050f8:	0612      	lsls	r2, r2, #24
100050fa:	021b      	lsls	r3, r3, #8
100050fc:	0a1b      	lsrs	r3, r3, #8
100050fe:	4313      	orrs	r3, r2
}
10005100:	1c18      	adds	r0, r3, #0
10005102:	46bd      	mov	sp, r7
10005104:	b006      	add	sp, #24
10005106:	bd80      	pop	{r7, pc}
10005108:	ffff00ff 	.word	0xffff00ff
1000510c:	ff00ffff 	.word	0xff00ffff

10005110 <PCS_GetVoltParam>:

PCS_VOLTAGE_PARAM_t	PCS_GetVoltParam(XMC_CAN_MO_t *can_m0_obj)
{
10005110:	b580      	push	{r7, lr}
10005112:	b084      	sub	sp, #16
10005114:	af00      	add	r7, sp, #0
10005116:	6078      	str	r0, [r7, #4]
10005118:	6039      	str	r1, [r7, #0]
	PCS_VOLTAGE_PARAM_t param;

	param.vdcGrid 	= ((uint16_t)(can_m0_obj->can_data_byte[0])<<8) | can_m0_obj->can_data_byte[1];
1000511a:	683b      	ldr	r3, [r7, #0]
1000511c:	7c1b      	ldrb	r3, [r3, #16]
1000511e:	021b      	lsls	r3, r3, #8
10005120:	b29a      	uxth	r2, r3
10005122:	683b      	ldr	r3, [r7, #0]
10005124:	7c5b      	ldrb	r3, [r3, #17]
10005126:	b29b      	uxth	r3, r3
10005128:	4313      	orrs	r3, r2
1000512a:	b29b      	uxth	r3, r3
1000512c:	b29a      	uxth	r2, r3
1000512e:	2308      	movs	r3, #8
10005130:	18fb      	adds	r3, r7, r3
10005132:	801a      	strh	r2, [r3, #0]
	param.vacOut  	= ((uint16_t)(can_m0_obj->can_data_byte[2])<<8) | can_m0_obj->can_data_byte[3];
10005134:	683b      	ldr	r3, [r7, #0]
10005136:	7c9b      	ldrb	r3, [r3, #18]
10005138:	021b      	lsls	r3, r3, #8
1000513a:	b29a      	uxth	r2, r3
1000513c:	683b      	ldr	r3, [r7, #0]
1000513e:	7cdb      	ldrb	r3, [r3, #19]
10005140:	b29b      	uxth	r3, r3
10005142:	4313      	orrs	r3, r2
10005144:	b29b      	uxth	r3, r3
10005146:	b29a      	uxth	r2, r3
10005148:	2308      	movs	r3, #8
1000514a:	18fb      	adds	r3, r7, r3
1000514c:	805a      	strh	r2, [r3, #2]
	param.vPV 		= ((uint16_t)(can_m0_obj->can_data_byte[4])<<8) | can_m0_obj->can_data_byte[5];
1000514e:	683b      	ldr	r3, [r7, #0]
10005150:	7d1b      	ldrb	r3, [r3, #20]
10005152:	021b      	lsls	r3, r3, #8
10005154:	b29a      	uxth	r2, r3
10005156:	683b      	ldr	r3, [r7, #0]
10005158:	7d5b      	ldrb	r3, [r3, #21]
1000515a:	b29b      	uxth	r3, r3
1000515c:	4313      	orrs	r3, r2
1000515e:	b29b      	uxth	r3, r3
10005160:	b29a      	uxth	r2, r3
10005162:	2308      	movs	r3, #8
10005164:	18fb      	adds	r3, r7, r3
10005166:	809a      	strh	r2, [r3, #4]
	param.vbat  	= ((uint16_t)(can_m0_obj->can_data_byte[6])<<8) | can_m0_obj->can_data_byte[7];
10005168:	683b      	ldr	r3, [r7, #0]
1000516a:	7d9b      	ldrb	r3, [r3, #22]
1000516c:	021b      	lsls	r3, r3, #8
1000516e:	b29a      	uxth	r2, r3
10005170:	683b      	ldr	r3, [r7, #0]
10005172:	7ddb      	ldrb	r3, [r3, #23]
10005174:	b29b      	uxth	r3, r3
10005176:	4313      	orrs	r3, r2
10005178:	b29b      	uxth	r3, r3
1000517a:	b29a      	uxth	r2, r3
1000517c:	2308      	movs	r3, #8
1000517e:	18fb      	adds	r3, r7, r3
10005180:	80da      	strh	r2, [r3, #6]

	return param;
10005182:	687a      	ldr	r2, [r7, #4]
10005184:	2308      	movs	r3, #8
10005186:	18fb      	adds	r3, r7, r3
10005188:	1c11      	adds	r1, r2, #0
1000518a:	1c1a      	adds	r2, r3, #0
1000518c:	2308      	movs	r3, #8
1000518e:	1c08      	adds	r0, r1, #0
10005190:	1c11      	adds	r1, r2, #0
10005192:	1c1a      	adds	r2, r3, #0
10005194:	f002 fde2 	bl	10007d5c <memcpy>
}
10005198:	6878      	ldr	r0, [r7, #4]
1000519a:	46bd      	mov	sp, r7
1000519c:	b004      	add	sp, #16
1000519e:	bd80      	pop	{r7, pc}

100051a0 <PCS_GetAmpParam>:

PCS_CURRENT_PARAM_t	PCS_GetAmpParam(XMC_CAN_MO_t *can_m0_obj)
{
100051a0:	b580      	push	{r7, lr}
100051a2:	b084      	sub	sp, #16
100051a4:	af00      	add	r7, sp, #0
100051a6:	6078      	str	r0, [r7, #4]
100051a8:	6039      	str	r1, [r7, #0]
	PCS_CURRENT_PARAM_t param;

	param.idcGrid  = ((int16_t)(can_m0_obj->can_data_byte[0])<<8) | can_m0_obj->can_data_byte[1];
100051aa:	683b      	ldr	r3, [r7, #0]
100051ac:	7c1b      	ldrb	r3, [r3, #16]
100051ae:	021b      	lsls	r3, r3, #8
100051b0:	b29a      	uxth	r2, r3
100051b2:	683b      	ldr	r3, [r7, #0]
100051b4:	7c5b      	ldrb	r3, [r3, #17]
100051b6:	b29b      	uxth	r3, r3
100051b8:	4313      	orrs	r3, r2
100051ba:	b29a      	uxth	r2, r3
100051bc:	2308      	movs	r3, #8
100051be:	18fb      	adds	r3, r7, r3
100051c0:	801a      	strh	r2, [r3, #0]
	param.iacOut   = ((uint16_t)(can_m0_obj->can_data_byte[2])<<8) | can_m0_obj->can_data_byte[3];
100051c2:	683b      	ldr	r3, [r7, #0]
100051c4:	7c9b      	ldrb	r3, [r3, #18]
100051c6:	021b      	lsls	r3, r3, #8
100051c8:	b29a      	uxth	r2, r3
100051ca:	683b      	ldr	r3, [r7, #0]
100051cc:	7cdb      	ldrb	r3, [r3, #19]
100051ce:	b29b      	uxth	r3, r3
100051d0:	4313      	orrs	r3, r2
100051d2:	b29a      	uxth	r2, r3
100051d4:	2308      	movs	r3, #8
100051d6:	18fb      	adds	r3, r7, r3
100051d8:	805a      	strh	r2, [r3, #2]
	param.iPV 		= ((uint16_t)(can_m0_obj->can_data_byte[4])<<8) | can_m0_obj->can_data_byte[5];
100051da:	683b      	ldr	r3, [r7, #0]
100051dc:	7d1b      	ldrb	r3, [r3, #20]
100051de:	021b      	lsls	r3, r3, #8
100051e0:	b29a      	uxth	r2, r3
100051e2:	683b      	ldr	r3, [r7, #0]
100051e4:	7d5b      	ldrb	r3, [r3, #21]
100051e6:	b29b      	uxth	r3, r3
100051e8:	4313      	orrs	r3, r2
100051ea:	b29a      	uxth	r2, r3
100051ec:	2308      	movs	r3, #8
100051ee:	18fb      	adds	r3, r7, r3
100051f0:	809a      	strh	r2, [r3, #4]
	param.ibat  	= ((int16_t)(can_m0_obj->can_data_byte[6])<<8) | can_m0_obj->can_data_byte[7];
100051f2:	683b      	ldr	r3, [r7, #0]
100051f4:	7d9b      	ldrb	r3, [r3, #22]
100051f6:	021b      	lsls	r3, r3, #8
100051f8:	b29a      	uxth	r2, r3
100051fa:	683b      	ldr	r3, [r7, #0]
100051fc:	7ddb      	ldrb	r3, [r3, #23]
100051fe:	b29b      	uxth	r3, r3
10005200:	4313      	orrs	r3, r2
10005202:	b29a      	uxth	r2, r3
10005204:	2308      	movs	r3, #8
10005206:	18fb      	adds	r3, r7, r3
10005208:	80da      	strh	r2, [r3, #6]

	return param;
1000520a:	687a      	ldr	r2, [r7, #4]
1000520c:	2308      	movs	r3, #8
1000520e:	18fb      	adds	r3, r7, r3
10005210:	1c11      	adds	r1, r2, #0
10005212:	1c1a      	adds	r2, r3, #0
10005214:	2308      	movs	r3, #8
10005216:	1c08      	adds	r0, r1, #0
10005218:	1c11      	adds	r1, r2, #0
1000521a:	1c1a      	adds	r2, r3, #0
1000521c:	f002 fd9e 	bl	10007d5c <memcpy>
}
10005220:	6878      	ldr	r0, [r7, #4]
10005222:	46bd      	mov	sp, r7
10005224:	b004      	add	sp, #16
10005226:	bd80      	pop	{r7, pc}

10005228 <PCS_GetPowerParam>:

PCS_POWER_PARAM_t 	PCS_GetPowerParam(XMC_CAN_MO_t *can_m0_obj)
{
10005228:	b580      	push	{r7, lr}
1000522a:	b084      	sub	sp, #16
1000522c:	af00      	add	r7, sp, #0
1000522e:	6078      	str	r0, [r7, #4]
10005230:	6039      	str	r1, [r7, #0]
	PCS_POWER_PARAM_t param;

	param.pdcGrid  = ((int16_t)(can_m0_obj->can_data_byte[0])<<8) | can_m0_obj->can_data_byte[1];
10005232:	683b      	ldr	r3, [r7, #0]
10005234:	7c1b      	ldrb	r3, [r3, #16]
10005236:	021b      	lsls	r3, r3, #8
10005238:	b29a      	uxth	r2, r3
1000523a:	683b      	ldr	r3, [r7, #0]
1000523c:	7c5b      	ldrb	r3, [r3, #17]
1000523e:	b29b      	uxth	r3, r3
10005240:	4313      	orrs	r3, r2
10005242:	b29b      	uxth	r3, r3
10005244:	b29a      	uxth	r2, r3
10005246:	2308      	movs	r3, #8
10005248:	18fb      	adds	r3, r7, r3
1000524a:	801a      	strh	r2, [r3, #0]
	param.pacOut   = ((uint16_t)(can_m0_obj->can_data_byte[2])<<8) | can_m0_obj->can_data_byte[3];
1000524c:	683b      	ldr	r3, [r7, #0]
1000524e:	7c9b      	ldrb	r3, [r3, #18]
10005250:	021b      	lsls	r3, r3, #8
10005252:	b29a      	uxth	r2, r3
10005254:	683b      	ldr	r3, [r7, #0]
10005256:	7cdb      	ldrb	r3, [r3, #19]
10005258:	b29b      	uxth	r3, r3
1000525a:	4313      	orrs	r3, r2
1000525c:	b29b      	uxth	r3, r3
1000525e:	b29a      	uxth	r2, r3
10005260:	2308      	movs	r3, #8
10005262:	18fb      	adds	r3, r7, r3
10005264:	805a      	strh	r2, [r3, #2]
	param.pPV 	   = ((uint16_t)(can_m0_obj->can_data_byte[4])<<8) | can_m0_obj->can_data_byte[5];
10005266:	683b      	ldr	r3, [r7, #0]
10005268:	7d1b      	ldrb	r3, [r3, #20]
1000526a:	021b      	lsls	r3, r3, #8
1000526c:	b29a      	uxth	r2, r3
1000526e:	683b      	ldr	r3, [r7, #0]
10005270:	7d5b      	ldrb	r3, [r3, #21]
10005272:	b29b      	uxth	r3, r3
10005274:	4313      	orrs	r3, r2
10005276:	b29b      	uxth	r3, r3
10005278:	b29a      	uxth	r2, r3
1000527a:	2308      	movs	r3, #8
1000527c:	18fb      	adds	r3, r7, r3
1000527e:	809a      	strh	r2, [r3, #4]
	param.pbat     = ((int16_t)(can_m0_obj->can_data_byte[6])<<8) | can_m0_obj->can_data_byte[7];
10005280:	683b      	ldr	r3, [r7, #0]
10005282:	7d9b      	ldrb	r3, [r3, #22]
10005284:	021b      	lsls	r3, r3, #8
10005286:	b29a      	uxth	r2, r3
10005288:	683b      	ldr	r3, [r7, #0]
1000528a:	7ddb      	ldrb	r3, [r3, #23]
1000528c:	b29b      	uxth	r3, r3
1000528e:	4313      	orrs	r3, r2
10005290:	b29b      	uxth	r3, r3
10005292:	b29a      	uxth	r2, r3
10005294:	2308      	movs	r3, #8
10005296:	18fb      	adds	r3, r7, r3
10005298:	80da      	strh	r2, [r3, #6]

	return param;
1000529a:	687a      	ldr	r2, [r7, #4]
1000529c:	2308      	movs	r3, #8
1000529e:	18fb      	adds	r3, r7, r3
100052a0:	1c11      	adds	r1, r2, #0
100052a2:	1c1a      	adds	r2, r3, #0
100052a4:	2308      	movs	r3, #8
100052a6:	1c08      	adds	r0, r1, #0
100052a8:	1c11      	adds	r1, r2, #0
100052aa:	1c1a      	adds	r2, r3, #0
100052ac:	f002 fd56 	bl	10007d5c <memcpy>
}
100052b0:	6878      	ldr	r0, [r7, #4]
100052b2:	46bd      	mov	sp, r7
100052b4:	b004      	add	sp, #16
100052b6:	bd80      	pop	{r7, pc}

100052b8 <PCS_GetMiscParam>:

PCS_MISC_PARAM_t 	PCS_GetMiscParam(XMC_CAN_MO_t *can_m0_obj)
{
100052b8:	b580      	push	{r7, lr}
100052ba:	b084      	sub	sp, #16
100052bc:	af00      	add	r7, sp, #0
100052be:	6078      	str	r0, [r7, #4]
	PCS_MISC_PARAM_t param;

	param.tempPCS 		= ((uint16_t)(can_m0_obj->can_data_byte[0])<<8) | can_m0_obj->can_data_byte[1];
100052c0:	687b      	ldr	r3, [r7, #4]
100052c2:	7c1b      	ldrb	r3, [r3, #16]
100052c4:	021b      	lsls	r3, r3, #8
100052c6:	b29a      	uxth	r2, r3
100052c8:	687b      	ldr	r3, [r7, #4]
100052ca:	7c5b      	ldrb	r3, [r3, #17]
100052cc:	b29b      	uxth	r3, r3
100052ce:	4313      	orrs	r3, r2
100052d0:	b29b      	uxth	r3, r3
100052d2:	b29a      	uxth	r2, r3
100052d4:	2308      	movs	r3, #8
100052d6:	18fb      	adds	r3, r7, r3
100052d8:	801a      	strh	r2, [r3, #0]
	param.frequency  	= ((uint16_t)(can_m0_obj->can_data_byte[2])<<8) | can_m0_obj->can_data_byte[3];
100052da:	687b      	ldr	r3, [r7, #4]
100052dc:	7c9b      	ldrb	r3, [r3, #18]
100052de:	021b      	lsls	r3, r3, #8
100052e0:	b29a      	uxth	r2, r3
100052e2:	687b      	ldr	r3, [r7, #4]
100052e4:	7cdb      	ldrb	r3, [r3, #19]
100052e6:	b29b      	uxth	r3, r3
100052e8:	4313      	orrs	r3, r2
100052ea:	b29b      	uxth	r3, r3
100052ec:	b29a      	uxth	r2, r3
100052ee:	2308      	movs	r3, #8
100052f0:	18fb      	adds	r3, r7, r3
100052f2:	805a      	strh	r2, [r3, #2]

	return param;
100052f4:	230c      	movs	r3, #12
100052f6:	18fb      	adds	r3, r7, r3
100052f8:	2208      	movs	r2, #8
100052fa:	18ba      	adds	r2, r7, r2
100052fc:	6812      	ldr	r2, [r2, #0]
100052fe:	601a      	str	r2, [r3, #0]
10005300:	230c      	movs	r3, #12
10005302:	18fa      	adds	r2, r7, r3
10005304:	2300      	movs	r3, #0
10005306:	8811      	ldrh	r1, [r2, #0]
10005308:	0409      	lsls	r1, r1, #16
1000530a:	0c09      	lsrs	r1, r1, #16
1000530c:	0c1b      	lsrs	r3, r3, #16
1000530e:	041b      	lsls	r3, r3, #16
10005310:	430b      	orrs	r3, r1
10005312:	8852      	ldrh	r2, [r2, #2]
10005314:	0412      	lsls	r2, r2, #16
10005316:	041b      	lsls	r3, r3, #16
10005318:	0c1b      	lsrs	r3, r3, #16
1000531a:	4313      	orrs	r3, r2
}
1000531c:	1c18      	adds	r0, r3, #0
1000531e:	46bd      	mov	sp, r7
10005320:	b004      	add	sp, #16
10005322:	bd80      	pop	{r7, pc}

10005324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10005324:	b580      	push	{r7, lr}
10005326:	b082      	sub	sp, #8
10005328:	af00      	add	r7, sp, #0
1000532a:	1c02      	adds	r2, r0, #0
1000532c:	1dfb      	adds	r3, r7, #7
1000532e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10005330:	1dfb      	adds	r3, r7, #7
10005332:	781b      	ldrb	r3, [r3, #0]
10005334:	2b7f      	cmp	r3, #127	; 0x7f
10005336:	d809      	bhi.n	1000534c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
10005338:	4b06      	ldr	r3, [pc, #24]	; (10005354 <__NVIC_EnableIRQ+0x30>)
1000533a:	1dfa      	adds	r2, r7, #7
1000533c:	7812      	ldrb	r2, [r2, #0]
1000533e:	1c11      	adds	r1, r2, #0
10005340:	221f      	movs	r2, #31
10005342:	400a      	ands	r2, r1
10005344:	2101      	movs	r1, #1
10005346:	4091      	lsls	r1, r2
10005348:	1c0a      	adds	r2, r1, #0
1000534a:	601a      	str	r2, [r3, #0]
  }
}
1000534c:	46bd      	mov	sp, r7
1000534e:	b002      	add	sp, #8
10005350:	bd80      	pop	{r7, pc}
10005352:	46c0      	nop			; (mov r8, r8)
10005354:	e000e100 	.word	0xe000e100

10005358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10005358:	b5b0      	push	{r4, r5, r7, lr}
1000535a:	b082      	sub	sp, #8
1000535c:	af00      	add	r7, sp, #0
1000535e:	1c02      	adds	r2, r0, #0
10005360:	6039      	str	r1, [r7, #0]
10005362:	1dfb      	adds	r3, r7, #7
10005364:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10005366:	1dfb      	adds	r3, r7, #7
10005368:	781b      	ldrb	r3, [r3, #0]
1000536a:	2b7f      	cmp	r3, #127	; 0x7f
1000536c:	d827      	bhi.n	100053be <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000536e:	4c2d      	ldr	r4, [pc, #180]	; (10005424 <__NVIC_SetPriority+0xcc>)
10005370:	1dfb      	adds	r3, r7, #7
10005372:	781b      	ldrb	r3, [r3, #0]
10005374:	b25b      	sxtb	r3, r3
10005376:	089b      	lsrs	r3, r3, #2
10005378:	492a      	ldr	r1, [pc, #168]	; (10005424 <__NVIC_SetPriority+0xcc>)
1000537a:	1dfa      	adds	r2, r7, #7
1000537c:	7812      	ldrb	r2, [r2, #0]
1000537e:	b252      	sxtb	r2, r2
10005380:	0892      	lsrs	r2, r2, #2
10005382:	32c0      	adds	r2, #192	; 0xc0
10005384:	0092      	lsls	r2, r2, #2
10005386:	5852      	ldr	r2, [r2, r1]
10005388:	1df9      	adds	r1, r7, #7
1000538a:	7809      	ldrb	r1, [r1, #0]
1000538c:	1c08      	adds	r0, r1, #0
1000538e:	2103      	movs	r1, #3
10005390:	4001      	ands	r1, r0
10005392:	00c9      	lsls	r1, r1, #3
10005394:	1c08      	adds	r0, r1, #0
10005396:	21ff      	movs	r1, #255	; 0xff
10005398:	4081      	lsls	r1, r0
1000539a:	43c9      	mvns	r1, r1
1000539c:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000539e:	683a      	ldr	r2, [r7, #0]
100053a0:	0192      	lsls	r2, r2, #6
100053a2:	20ff      	movs	r0, #255	; 0xff
100053a4:	4002      	ands	r2, r0
100053a6:	1df8      	adds	r0, r7, #7
100053a8:	7800      	ldrb	r0, [r0, #0]
100053aa:	1c05      	adds	r5, r0, #0
100053ac:	2003      	movs	r0, #3
100053ae:	4028      	ands	r0, r5
100053b0:	00c0      	lsls	r0, r0, #3
100053b2:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100053b4:	430a      	orrs	r2, r1
100053b6:	33c0      	adds	r3, #192	; 0xc0
100053b8:	009b      	lsls	r3, r3, #2
100053ba:	511a      	str	r2, [r3, r4]
100053bc:	e02e      	b.n	1000541c <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100053be:	4c1a      	ldr	r4, [pc, #104]	; (10005428 <__NVIC_SetPriority+0xd0>)
100053c0:	1dfb      	adds	r3, r7, #7
100053c2:	781b      	ldrb	r3, [r3, #0]
100053c4:	1c1a      	adds	r2, r3, #0
100053c6:	230f      	movs	r3, #15
100053c8:	4013      	ands	r3, r2
100053ca:	3b08      	subs	r3, #8
100053cc:	0899      	lsrs	r1, r3, #2
100053ce:	4a16      	ldr	r2, [pc, #88]	; (10005428 <__NVIC_SetPriority+0xd0>)
100053d0:	1dfb      	adds	r3, r7, #7
100053d2:	781b      	ldrb	r3, [r3, #0]
100053d4:	1c18      	adds	r0, r3, #0
100053d6:	230f      	movs	r3, #15
100053d8:	4003      	ands	r3, r0
100053da:	3b08      	subs	r3, #8
100053dc:	089b      	lsrs	r3, r3, #2
100053de:	3306      	adds	r3, #6
100053e0:	009b      	lsls	r3, r3, #2
100053e2:	18d3      	adds	r3, r2, r3
100053e4:	685b      	ldr	r3, [r3, #4]
100053e6:	1dfa      	adds	r2, r7, #7
100053e8:	7812      	ldrb	r2, [r2, #0]
100053ea:	1c10      	adds	r0, r2, #0
100053ec:	2203      	movs	r2, #3
100053ee:	4002      	ands	r2, r0
100053f0:	00d2      	lsls	r2, r2, #3
100053f2:	1c10      	adds	r0, r2, #0
100053f4:	22ff      	movs	r2, #255	; 0xff
100053f6:	4082      	lsls	r2, r0
100053f8:	43d2      	mvns	r2, r2
100053fa:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100053fc:	683b      	ldr	r3, [r7, #0]
100053fe:	019b      	lsls	r3, r3, #6
10005400:	20ff      	movs	r0, #255	; 0xff
10005402:	4003      	ands	r3, r0
10005404:	1df8      	adds	r0, r7, #7
10005406:	7800      	ldrb	r0, [r0, #0]
10005408:	1c05      	adds	r5, r0, #0
1000540a:	2003      	movs	r0, #3
1000540c:	4028      	ands	r0, r5
1000540e:	00c0      	lsls	r0, r0, #3
10005410:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10005412:	431a      	orrs	r2, r3
10005414:	1d8b      	adds	r3, r1, #6
10005416:	009b      	lsls	r3, r3, #2
10005418:	18e3      	adds	r3, r4, r3
1000541a:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
1000541c:	46bd      	mov	sp, r7
1000541e:	b002      	add	sp, #8
10005420:	bdb0      	pop	{r4, r5, r7, pc}
10005422:	46c0      	nop			; (mov r8, r8)
10005424:	e000e100 	.word	0xe000e100
10005428:	e000ed00 	.word	0xe000ed00

1000542c <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
1000542c:	b580      	push	{r7, lr}
1000542e:	b082      	sub	sp, #8
10005430:	af00      	add	r7, sp, #0
10005432:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
10005434:	687b      	ldr	r3, [r7, #4]
10005436:	68db      	ldr	r3, [r3, #12]
10005438:	2280      	movs	r2, #128	; 0x80
1000543a:	0052      	lsls	r2, r2, #1
1000543c:	431a      	orrs	r2, r3
1000543e:	687b      	ldr	r3, [r7, #4]
10005440:	60da      	str	r2, [r3, #12]
}
10005442:	46bd      	mov	sp, r7
10005444:	b002      	add	sp, #8
10005446:	bd80      	pop	{r7, pc}

10005448 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
10005448:	b580      	push	{r7, lr}
1000544a:	b082      	sub	sp, #8
1000544c:	af00      	add	r7, sp, #0
1000544e:	6078      	str	r0, [r7, #4]
10005450:	1c0a      	adds	r2, r1, #0
10005452:	1cfb      	adds	r3, r7, #3
10005454:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
10005456:	687b      	ldr	r3, [r7, #4]
10005458:	68da      	ldr	r2, [r3, #12]
1000545a:	1cfb      	adds	r3, r7, #3
1000545c:	781b      	ldrb	r3, [r3, #0]
1000545e:	2101      	movs	r1, #1
10005460:	4099      	lsls	r1, r3
10005462:	1c0b      	adds	r3, r1, #0
10005464:	431a      	orrs	r2, r3
10005466:	687b      	ldr	r3, [r7, #4]
10005468:	60da      	str	r2, [r3, #12]
}
1000546a:	46bd      	mov	sp, r7
1000546c:	b002      	add	sp, #8
1000546e:	bd80      	pop	{r7, pc}

10005470 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
10005470:	b580      	push	{r7, lr}
10005472:	b082      	sub	sp, #8
10005474:	af00      	add	r7, sp, #0
10005476:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
10005478:	687b      	ldr	r3, [r7, #4]
1000547a:	2201      	movs	r2, #1
1000547c:	60da      	str	r2, [r3, #12]
}
1000547e:	46bd      	mov	sp, r7
10005480:	b002      	add	sp, #8
10005482:	bd80      	pop	{r7, pc}

10005484 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
10005484:	b580      	push	{r7, lr}
10005486:	b082      	sub	sp, #8
10005488:	af00      	add	r7, sp, #0
1000548a:	6078      	str	r0, [r7, #4]
1000548c:	1c0a      	adds	r2, r1, #0
1000548e:	1cbb      	adds	r3, r7, #2
10005490:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
10005492:	1cbb      	adds	r3, r7, #2
10005494:	881a      	ldrh	r2, [r3, #0]
10005496:	687b      	ldr	r3, [r7, #4]
10005498:	635a      	str	r2, [r3, #52]	; 0x34
}
1000549a:	46bd      	mov	sp, r7
1000549c:	b002      	add	sp, #8
1000549e:	bd80      	pop	{r7, pc}

100054a0 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
100054a0:	b580      	push	{r7, lr}
100054a2:	b082      	sub	sp, #8
100054a4:	af00      	add	r7, sp, #0
100054a6:	6078      	str	r0, [r7, #4]
100054a8:	1c0a      	adds	r2, r1, #0
100054aa:	1cbb      	adds	r3, r7, #2
100054ac:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
100054ae:	1cbb      	adds	r3, r7, #2
100054b0:	881a      	ldrh	r2, [r3, #0]
100054b2:	687b      	ldr	r3, [r7, #4]
100054b4:	63da      	str	r2, [r3, #60]	; 0x3c
}
100054b6:	46bd      	mov	sp, r7
100054b8:	b002      	add	sp, #8
100054ba:	bd80      	pop	{r7, pc}

100054bc <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
100054bc:	b580      	push	{r7, lr}
100054be:	b082      	sub	sp, #8
100054c0:	af00      	add	r7, sp, #0
100054c2:	6078      	str	r0, [r7, #4]
100054c4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
100054c6:	687b      	ldr	r3, [r7, #4]
100054c8:	683a      	ldr	r2, [r7, #0]
100054ca:	611a      	str	r2, [r3, #16]
}
100054cc:	46bd      	mov	sp, r7
100054ce:	b002      	add	sp, #8
100054d0:	bd80      	pop	{r7, pc}
100054d2:	46c0      	nop			; (mov r8, r8)

100054d4 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
100054d4:	b580      	push	{r7, lr}
100054d6:	b082      	sub	sp, #8
100054d8:	af00      	add	r7, sp, #0
100054da:	6078      	str	r0, [r7, #4]
100054dc:	1c0a      	adds	r2, r1, #0
100054de:	1cfb      	adds	r3, r7, #3
100054e0:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
100054e2:	687b      	ldr	r3, [r7, #4]
100054e4:	22a4      	movs	r2, #164	; 0xa4
100054e6:	589a      	ldr	r2, [r3, r2]
100054e8:	1cfb      	adds	r3, r7, #3
100054ea:	781b      	ldrb	r3, [r3, #0]
100054ec:	2101      	movs	r1, #1
100054ee:	4099      	lsls	r1, r3
100054f0:	1c0b      	adds	r3, r1, #0
100054f2:	431a      	orrs	r2, r3
100054f4:	687b      	ldr	r3, [r7, #4]
100054f6:	21a4      	movs	r1, #164	; 0xa4
100054f8:	505a      	str	r2, [r3, r1]
}
100054fa:	46bd      	mov	sp, r7
100054fc:	b002      	add	sp, #8
100054fe:	bd80      	pop	{r7, pc}

10005500 <MISC_TimerInit>:
#include "misc_operation.h"

MISC_SYSTICK_PARAM_t sysTickHandle;

void MISC_TimerInit(void)
{
10005500:	b580      	push	{r7, lr}
10005502:	af00      	add	r7, sp, #0

	/* Enable clock, enable prescaler block and configure global control */
	XMC_CCU4_Init(CCU40, XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR);
10005504:	4b39      	ldr	r3, [pc, #228]	; (100055ec <MISC_TimerInit+0xec>)
10005506:	1c18      	adds	r0, r3, #0
10005508:	2100      	movs	r1, #0
1000550a:	f7fc fc7b 	bl	10001e04 <XMC_CCU4_Init>

	/* Start the prescaler and restore clocks to slices */
	XMC_CCU4_StartPrescaler(CCU40);
1000550e:	4b37      	ldr	r3, [pc, #220]	; (100055ec <MISC_TimerInit+0xec>)
10005510:	1c18      	adds	r0, r3, #0
10005512:	f7ff ff8b 	bl	1000542c <XMC_CCU4_StartPrescaler>

	/* Start of CCU4 configurations */
	/* Ensure fCCU reaches CCU40 */
	XMC_CCU4_SetModuleClock(CCU40, XMC_CCU4_CLOCK_SCU);
10005516:	4b35      	ldr	r3, [pc, #212]	; (100055ec <MISC_TimerInit+0xec>)
10005518:	1c18      	adds	r0, r3, #0
1000551a:	2100      	movs	r1, #0
1000551c:	f7fc fc96 	bl	10001e4c <XMC_CCU4_SetModuleClock>

	//Configure Slice(s) Functions, Interrupts and Start-up
	/* Initialize the Slice */
	XMC_CCU4_SLICE_CompareInit(CCU40_CC40, &SLICE0_config);
10005520:	4a33      	ldr	r2, [pc, #204]	; (100055f0 <MISC_TimerInit+0xf0>)
10005522:	4b34      	ldr	r3, [pc, #208]	; (100055f4 <MISC_TimerInit+0xf4>)
10005524:	1c10      	adds	r0, r2, #0
10005526:	1c19      	adds	r1, r3, #0
10005528:	f7fc fcaa 	bl	10001e80 <XMC_CCU4_SLICE_CompareInit>
	XMC_CCU4_SLICE_CompareInit(CCU40_CC41, &SLICE1_config);
1000552c:	4a32      	ldr	r2, [pc, #200]	; (100055f8 <MISC_TimerInit+0xf8>)
1000552e:	4b33      	ldr	r3, [pc, #204]	; (100055fc <MISC_TimerInit+0xfc>)
10005530:	1c10      	adds	r0, r2, #0
10005532:	1c19      	adds	r1, r3, #0
10005534:	f7fc fca4 	bl	10001e80 <XMC_CCU4_SLICE_CompareInit>

	/* Frequency CCU4 = 96MHz */
	/* Freq / Prescaler 32 = 3 MHz */
	/* Program duty cycle[50%] and frequency [1 kHz] */
	XMC_CCU4_SLICE_SetTimerCompareMatch(CCU40_CC40, 1500); // any value less than PWM Period Counter
10005538:	4a2d      	ldr	r2, [pc, #180]	; (100055f0 <MISC_TimerInit+0xf0>)
1000553a:	4b31      	ldr	r3, [pc, #196]	; (10005600 <MISC_TimerInit+0x100>)
1000553c:	1c10      	adds	r0, r2, #0
1000553e:	1c19      	adds	r1, r3, #0
10005540:	f7ff ffae 	bl	100054a0 <XMC_CCU4_SLICE_SetTimerCompareMatch>
	XMC_CCU4_SLICE_SetTimerPeriodMatch(CCU40_CC40, 3000);
10005544:	4a2a      	ldr	r2, [pc, #168]	; (100055f0 <MISC_TimerInit+0xf0>)
10005546:	4b2f      	ldr	r3, [pc, #188]	; (10005604 <MISC_TimerInit+0x104>)
10005548:	1c10      	adds	r0, r2, #0
1000554a:	1c19      	adds	r1, r3, #0
1000554c:	f7ff ff9a 	bl	10005484 <XMC_CCU4_SLICE_SetTimerPeriodMatch>

	/* Frequency CCU4 = 96MHz */
	/* Freq / Prescaler 1024 = 93750 Hz */
	/* Program duty cycle[50%] and frequency [10 Hz] */
	XMC_CCU4_SLICE_SetTimerCompareMatch(CCU40_CC41, 4687); // any value less than PWM Period Counter
10005550:	4a29      	ldr	r2, [pc, #164]	; (100055f8 <MISC_TimerInit+0xf8>)
10005552:	4b2d      	ldr	r3, [pc, #180]	; (10005608 <MISC_TimerInit+0x108>)
10005554:	1c10      	adds	r0, r2, #0
10005556:	1c19      	adds	r1, r3, #0
10005558:	f7ff ffa2 	bl	100054a0 <XMC_CCU4_SLICE_SetTimerCompareMatch>
	XMC_CCU4_SLICE_SetTimerPeriodMatch(CCU40_CC41, 9375);
1000555c:	4a26      	ldr	r2, [pc, #152]	; (100055f8 <MISC_TimerInit+0xf8>)
1000555e:	4b2b      	ldr	r3, [pc, #172]	; (1000560c <MISC_TimerInit+0x10c>)
10005560:	1c10      	adds	r0, r2, #0
10005562:	1c19      	adds	r1, r3, #0
10005564:	f7ff ff8e 	bl	10005484 <XMC_CCU4_SLICE_SetTimerPeriodMatch>

	/* Enable shadow transfer for PWM Slice */
	XMC_CCU4_EnableShadowTransfer(CCU40, \
10005568:	4b20      	ldr	r3, [pc, #128]	; (100055ec <MISC_TimerInit+0xec>)
1000556a:	1c18      	adds	r0, r3, #0
1000556c:	2105      	movs	r1, #5
1000556e:	f7ff ffa5 	bl	100054bc <XMC_CCU4_EnableShadowTransfer>
		(uint32_t)(XMC_CCU4_SHADOW_TRANSFER_SLICE_0|XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_0));
	XMC_CCU4_EnableShadowTransfer(CCU40, \
10005572:	4b1e      	ldr	r3, [pc, #120]	; (100055ec <MISC_TimerInit+0xec>)
10005574:	1c18      	adds	r0, r3, #0
10005576:	2150      	movs	r1, #80	; 0x50
10005578:	f7ff ffa0 	bl	100054bc <XMC_CCU4_EnableShadowTransfer>
		(uint32_t)(XMC_CCU4_SHADOW_TRANSFER_SLICE_1|XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_1));

	/* Enable events */
	XMC_CCU4_SLICE_EnableEvent(CCU40_CC40, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
1000557c:	4b1c      	ldr	r3, [pc, #112]	; (100055f0 <MISC_TimerInit+0xf0>)
1000557e:	1c18      	adds	r0, r3, #0
10005580:	2100      	movs	r1, #0
10005582:	f7ff ffa7 	bl	100054d4 <XMC_CCU4_SLICE_EnableEvent>
	/* Enable events */
	XMC_CCU4_SLICE_EnableEvent(CCU40_CC41, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
10005586:	4b1c      	ldr	r3, [pc, #112]	; (100055f8 <MISC_TimerInit+0xf8>)
10005588:	1c18      	adds	r0, r3, #0
1000558a:	2100      	movs	r1, #0
1000558c:	f7ff ffa2 	bl	100054d4 <XMC_CCU4_SLICE_EnableEvent>

	/* Connect event to SR2 */
	XMC_CCU4_SLICE_SetInterruptNode(CCU40_CC40, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH, XMC_CCU4_SLICE_SR_ID_2);
10005590:	4b17      	ldr	r3, [pc, #92]	; (100055f0 <MISC_TimerInit+0xf0>)
10005592:	1c18      	adds	r0, r3, #0
10005594:	2100      	movs	r1, #0
10005596:	2202      	movs	r2, #2
10005598:	f7fc fca6 	bl	10001ee8 <XMC_CCU4_SLICE_SetInterruptNode>
	XMC_CCU4_SLICE_SetInterruptNode(CCU40_CC41, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH, XMC_CCU4_SLICE_SR_ID_3);
1000559c:	4b16      	ldr	r3, [pc, #88]	; (100055f8 <MISC_TimerInit+0xf8>)
1000559e:	1c18      	adds	r0, r3, #0
100055a0:	2100      	movs	r1, #0
100055a2:	2203      	movs	r2, #3
100055a4:	f7fc fca0 	bl	10001ee8 <XMC_CCU4_SLICE_SetInterruptNode>

	/* Set NVIC priority */
	NVIC_SetPriority(IRQ23_IRQn, 3U); // for CCU40_CC40
100055a8:	2017      	movs	r0, #23
100055aa:	2103      	movs	r1, #3
100055ac:	f7ff fed4 	bl	10005358 <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQ23_IRQn);
100055b0:	2017      	movs	r0, #23
100055b2:	f7ff feb7 	bl	10005324 <__NVIC_EnableIRQ>

	/* Set NVIC priority */
	NVIC_SetPriority(IRQ24_IRQn, 9U); // for CCU40_CC41
100055b6:	2018      	movs	r0, #24
100055b8:	2109      	movs	r1, #9
100055ba:	f7ff fecd 	bl	10005358 <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQ24_IRQn);
100055be:	2018      	movs	r0, #24
100055c0:	f7ff feb0 	bl	10005324 <__NVIC_EnableIRQ>

	/* Get the slice out of idle mode */
	XMC_CCU4_EnableClock(CCU40, 0U);
100055c4:	4b09      	ldr	r3, [pc, #36]	; (100055ec <MISC_TimerInit+0xec>)
100055c6:	1c18      	adds	r0, r3, #0
100055c8:	2100      	movs	r1, #0
100055ca:	f7ff ff3d 	bl	10005448 <XMC_CCU4_EnableClock>
	XMC_CCU4_EnableClock(CCU40, 1U);
100055ce:	4b07      	ldr	r3, [pc, #28]	; (100055ec <MISC_TimerInit+0xec>)
100055d0:	1c18      	adds	r0, r3, #0
100055d2:	2101      	movs	r1, #1
100055d4:	f7ff ff38 	bl	10005448 <XMC_CCU4_EnableClock>

	/* Start the TImer*/
	XMC_CCU4_SLICE_StartTimer(CCU40_CC40);	// timer for Handshaking
100055d8:	4b05      	ldr	r3, [pc, #20]	; (100055f0 <MISC_TimerInit+0xf0>)
100055da:	1c18      	adds	r0, r3, #0
100055dc:	f7ff ff48 	bl	10005470 <XMC_CCU4_SLICE_StartTimer>
	XMC_CCU4_SLICE_StartTimer(CCU40_CC41); // clocking for BMS and ESP32
100055e0:	4b05      	ldr	r3, [pc, #20]	; (100055f8 <MISC_TimerInit+0xf8>)
100055e2:	1c18      	adds	r0, r3, #0
100055e4:	f7ff ff44 	bl	10005470 <XMC_CCU4_SLICE_StartTimer>

}
100055e8:	46bd      	mov	sp, r7
100055ea:	bd80      	pop	{r7, pc}
100055ec:	48040000 	.word	0x48040000
100055f0:	48040100 	.word	0x48040100
100055f4:	20000678 	.word	0x20000678
100055f8:	48040200 	.word	0x48040200
100055fc:	20000680 	.word	0x20000680
10005600:	000005dc 	.word	0x000005dc
10005604:	00000bb8 	.word	0x00000bb8
10005608:	0000124f 	.word	0x0000124f
1000560c:	0000249f 	.word	0x0000249f

10005610 <MF_CRC_16>:

static bool      crc_tab16_init = false;
static uint16_t  crc_tab16[256];

uint16_t MF_CRC_16(const unsigned char *input_str, unsigned char num_bytes)
{
10005610:	b580      	push	{r7, lr}
10005612:	b086      	sub	sp, #24
10005614:	af00      	add	r7, sp, #0
10005616:	6078      	str	r0, [r7, #4]
10005618:	1c0a      	adds	r2, r1, #0
1000561a:	1cfb      	adds	r3, r7, #3
1000561c:	701a      	strb	r2, [r3, #0]
	uint16_t tmp;
	uint16_t short_c;
	const unsigned char *ptr;
	unsigned char a;

	if (!crc_tab16_init) MF_Init_CRC16_Tab();
1000561e:	4b27      	ldr	r3, [pc, #156]	; (100056bc <MF_CRC_16+0xac>)
10005620:	781b      	ldrb	r3, [r3, #0]
10005622:	2201      	movs	r2, #1
10005624:	4053      	eors	r3, r2
10005626:	b2db      	uxtb	r3, r3
10005628:	2b00      	cmp	r3, #0
1000562a:	d001      	beq.n	10005630 <MF_CRC_16+0x20>
1000562c:	f000 f84a 	bl	100056c4 <MF_Init_CRC16_Tab>

	crc = CRC_START_16;
10005630:	2316      	movs	r3, #22
10005632:	18fb      	adds	r3, r7, r3
10005634:	2200      	movs	r2, #0
10005636:	801a      	strh	r2, [r3, #0]
	ptr = input_str;
10005638:	687b      	ldr	r3, [r7, #4]
1000563a:	613b      	str	r3, [r7, #16]

	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
1000563c:	693b      	ldr	r3, [r7, #16]
1000563e:	2b00      	cmp	r3, #0
10005640:	d035      	beq.n	100056ae <MF_CRC_16+0x9e>
10005642:	230f      	movs	r3, #15
10005644:	18fb      	adds	r3, r7, r3
10005646:	2200      	movs	r2, #0
10005648:	701a      	strb	r2, [r3, #0]
1000564a:	e029      	b.n	100056a0 <MF_CRC_16+0x90>

		short_c = 0x00ff & (uint16_t) *ptr;
1000564c:	693b      	ldr	r3, [r7, #16]
1000564e:	781a      	ldrb	r2, [r3, #0]
10005650:	230c      	movs	r3, #12
10005652:	18fb      	adds	r3, r7, r3
10005654:	801a      	strh	r2, [r3, #0]
		tmp     =  crc       ^ short_c;
10005656:	230a      	movs	r3, #10
10005658:	18fb      	adds	r3, r7, r3
1000565a:	2216      	movs	r2, #22
1000565c:	18b9      	adds	r1, r7, r2
1000565e:	220c      	movs	r2, #12
10005660:	18ba      	adds	r2, r7, r2
10005662:	8809      	ldrh	r1, [r1, #0]
10005664:	8812      	ldrh	r2, [r2, #0]
10005666:	404a      	eors	r2, r1
10005668:	801a      	strh	r2, [r3, #0]
		crc     = (crc >> 8) ^ crc_tab16[ tmp & 0xff ];
1000566a:	2316      	movs	r3, #22
1000566c:	18fb      	adds	r3, r7, r3
1000566e:	881b      	ldrh	r3, [r3, #0]
10005670:	0a1b      	lsrs	r3, r3, #8
10005672:	b299      	uxth	r1, r3
10005674:	230a      	movs	r3, #10
10005676:	18fb      	adds	r3, r7, r3
10005678:	881b      	ldrh	r3, [r3, #0]
1000567a:	22ff      	movs	r2, #255	; 0xff
1000567c:	401a      	ands	r2, r3
1000567e:	4b10      	ldr	r3, [pc, #64]	; (100056c0 <MF_CRC_16+0xb0>)
10005680:	0052      	lsls	r2, r2, #1
10005682:	5ad2      	ldrh	r2, [r2, r3]
10005684:	2316      	movs	r3, #22
10005686:	18fb      	adds	r3, r7, r3
10005688:	404a      	eors	r2, r1
1000568a:	801a      	strh	r2, [r3, #0]

		ptr++;
1000568c:	693b      	ldr	r3, [r7, #16]
1000568e:	3301      	adds	r3, #1
10005690:	613b      	str	r3, [r7, #16]
	if (!crc_tab16_init) MF_Init_CRC16_Tab();

	crc = CRC_START_16;
	ptr = input_str;

	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
10005692:	230f      	movs	r3, #15
10005694:	18fb      	adds	r3, r7, r3
10005696:	781a      	ldrb	r2, [r3, #0]
10005698:	230f      	movs	r3, #15
1000569a:	18fb      	adds	r3, r7, r3
1000569c:	3201      	adds	r2, #1
1000569e:	701a      	strb	r2, [r3, #0]
100056a0:	230f      	movs	r3, #15
100056a2:	18fa      	adds	r2, r7, r3
100056a4:	1cfb      	adds	r3, r7, #3
100056a6:	7812      	ldrb	r2, [r2, #0]
100056a8:	781b      	ldrb	r3, [r3, #0]
100056aa:	429a      	cmp	r2, r3
100056ac:	d3ce      	bcc.n	1000564c <MF_CRC_16+0x3c>
		crc     = (crc >> 8) ^ crc_tab16[ tmp & 0xff ];

		ptr++;
	}

	return crc;
100056ae:	2316      	movs	r3, #22
100056b0:	18fb      	adds	r3, r7, r3
100056b2:	881b      	ldrh	r3, [r3, #0]

}  /* crc_16 */
100056b4:	1c18      	adds	r0, r3, #0
100056b6:	46bd      	mov	sp, r7
100056b8:	b006      	add	sp, #24
100056ba:	bd80      	pop	{r7, pc}
100056bc:	20000830 	.word	0x20000830
100056c0:	20000834 	.word	0x20000834

100056c4 <MF_Init_CRC16_Tab>:

void MF_Init_CRC16_Tab(void)
{
100056c4:	b580      	push	{r7, lr}
100056c6:	b082      	sub	sp, #8
100056c8:	af00      	add	r7, sp, #0
	uint16_t i;
	uint16_t j;
	uint16_t crc;
	uint16_t c;

	for (i=0; i<256; i++) {
100056ca:	1dbb      	adds	r3, r7, #6
100056cc:	2200      	movs	r2, #0
100056ce:	801a      	strh	r2, [r3, #0]
100056d0:	e03c      	b.n	1000574c <MF_Init_CRC16_Tab+0x88>

		crc = 0;
100056d2:	1cbb      	adds	r3, r7, #2
100056d4:	2200      	movs	r2, #0
100056d6:	801a      	strh	r2, [r3, #0]
		c   = i;
100056d8:	1c3b      	adds	r3, r7, #0
100056da:	1dba      	adds	r2, r7, #6
100056dc:	8812      	ldrh	r2, [r2, #0]
100056de:	801a      	strh	r2, [r3, #0]

		for (j=0; j<8; j++) {
100056e0:	1d3b      	adds	r3, r7, #4
100056e2:	2200      	movs	r2, #0
100056e4:	801a      	strh	r2, [r3, #0]
100056e6:	e021      	b.n	1000572c <MF_Init_CRC16_Tab+0x68>

			if ( (crc ^ c) & 0x0001 ) crc = ( crc >> 1 ) ^ CRC_POLY_16;
100056e8:	1cba      	adds	r2, r7, #2
100056ea:	1c3b      	adds	r3, r7, #0
100056ec:	8812      	ldrh	r2, [r2, #0]
100056ee:	881b      	ldrh	r3, [r3, #0]
100056f0:	4053      	eors	r3, r2
100056f2:	b29b      	uxth	r3, r3
100056f4:	1c1a      	adds	r2, r3, #0
100056f6:	2301      	movs	r3, #1
100056f8:	4013      	ands	r3, r2
100056fa:	d008      	beq.n	1000570e <MF_Init_CRC16_Tab+0x4a>
100056fc:	1cbb      	adds	r3, r7, #2
100056fe:	881b      	ldrh	r3, [r3, #0]
10005700:	085b      	lsrs	r3, r3, #1
10005702:	b29a      	uxth	r2, r3
10005704:	1cbb      	adds	r3, r7, #2
10005706:	4916      	ldr	r1, [pc, #88]	; (10005760 <MF_Init_CRC16_Tab+0x9c>)
10005708:	404a      	eors	r2, r1
1000570a:	801a      	strh	r2, [r3, #0]
1000570c:	e004      	b.n	10005718 <MF_Init_CRC16_Tab+0x54>
			else                      crc =   crc >> 1;
1000570e:	1cbb      	adds	r3, r7, #2
10005710:	1cba      	adds	r2, r7, #2
10005712:	8812      	ldrh	r2, [r2, #0]
10005714:	0852      	lsrs	r2, r2, #1
10005716:	801a      	strh	r2, [r3, #0]

			c = c >> 1;
10005718:	1c3b      	adds	r3, r7, #0
1000571a:	1c3a      	adds	r2, r7, #0
1000571c:	8812      	ldrh	r2, [r2, #0]
1000571e:	0852      	lsrs	r2, r2, #1
10005720:	801a      	strh	r2, [r3, #0]
	for (i=0; i<256; i++) {

		crc = 0;
		c   = i;

		for (j=0; j<8; j++) {
10005722:	1d3b      	adds	r3, r7, #4
10005724:	881a      	ldrh	r2, [r3, #0]
10005726:	1d3b      	adds	r3, r7, #4
10005728:	3201      	adds	r2, #1
1000572a:	801a      	strh	r2, [r3, #0]
1000572c:	1d3b      	adds	r3, r7, #4
1000572e:	881b      	ldrh	r3, [r3, #0]
10005730:	2b07      	cmp	r3, #7
10005732:	d9d9      	bls.n	100056e8 <MF_Init_CRC16_Tab+0x24>
			else                      crc =   crc >> 1;

			c = c >> 1;
		}

		crc_tab16[i] = crc;
10005734:	1dbb      	adds	r3, r7, #6
10005736:	881a      	ldrh	r2, [r3, #0]
10005738:	4b0a      	ldr	r3, [pc, #40]	; (10005764 <MF_Init_CRC16_Tab+0xa0>)
1000573a:	0052      	lsls	r2, r2, #1
1000573c:	1cb9      	adds	r1, r7, #2
1000573e:	8809      	ldrh	r1, [r1, #0]
10005740:	52d1      	strh	r1, [r2, r3]
	uint16_t i;
	uint16_t j;
	uint16_t crc;
	uint16_t c;

	for (i=0; i<256; i++) {
10005742:	1dbb      	adds	r3, r7, #6
10005744:	881a      	ldrh	r2, [r3, #0]
10005746:	1dbb      	adds	r3, r7, #6
10005748:	3201      	adds	r2, #1
1000574a:	801a      	strh	r2, [r3, #0]
1000574c:	1dbb      	adds	r3, r7, #6
1000574e:	881b      	ldrh	r3, [r3, #0]
10005750:	2bff      	cmp	r3, #255	; 0xff
10005752:	d9be      	bls.n	100056d2 <MF_Init_CRC16_Tab+0xe>
		}

		crc_tab16[i] = crc;
	}

	crc_tab16_init = true;
10005754:	4b04      	ldr	r3, [pc, #16]	; (10005768 <MF_Init_CRC16_Tab+0xa4>)
10005756:	2201      	movs	r2, #1
10005758:	701a      	strb	r2, [r3, #0]

}  /* init_crc16_tab */
1000575a:	46bd      	mov	sp, r7
1000575c:	b002      	add	sp, #8
1000575e:	bd80      	pop	{r7, pc}
10005760:	ffffa001 	.word	0xffffa001
10005764:	20000834 	.word	0x20000834
10005768:	20000830 	.word	0x20000830

1000576c <MF_MovingAverage>:

void MF_MovingAverage(PDU_SENSOR_AVG_t *sensorAvg, PDU_SENSOR_RAW_t *sensorRaw)
{
1000576c:	b580      	push	{r7, lr}
1000576e:	b082      	sub	sp, #8
10005770:	af00      	add	r7, sp, #0
10005772:	6078      	str	r0, [r7, #4]
10005774:	6039      	str	r1, [r7, #0]
	static PDU_SENSOR_AVG_t sensorAvgBuff;
	static uint8_t count = 0;
	sensorAvgBuff.sumAvgBTPT = sensorAvgBuff.sumAvgBTPT + sensorRaw->rawBTPT;
10005776:	4b26      	ldr	r3, [pc, #152]	; (10005810 <MF_MovingAverage+0xa4>)
10005778:	689b      	ldr	r3, [r3, #8]
1000577a:	683a      	ldr	r2, [r7, #0]
1000577c:	8852      	ldrh	r2, [r2, #2]
1000577e:	189a      	adds	r2, r3, r2
10005780:	4b23      	ldr	r3, [pc, #140]	; (10005810 <MF_MovingAverage+0xa4>)
10005782:	609a      	str	r2, [r3, #8]
	sensorAvgBuff.sumAvgPVPT = sensorAvgBuff.sumAvgPVPT + sensorRaw->rawPVPT;
10005784:	4b22      	ldr	r3, [pc, #136]	; (10005810 <MF_MovingAverage+0xa4>)
10005786:	685b      	ldr	r3, [r3, #4]
10005788:	683a      	ldr	r2, [r7, #0]
1000578a:	8812      	ldrh	r2, [r2, #0]
1000578c:	189a      	adds	r2, r3, r2
1000578e:	4b20      	ldr	r3, [pc, #128]	; (10005810 <MF_MovingAverage+0xa4>)
10005790:	605a      	str	r2, [r3, #4]
	sensorAvgBuff.sumAvgHVPT = sensorAvgBuff.sumAvgHVPT + sensorRaw->rawHVPT;
10005792:	4b1f      	ldr	r3, [pc, #124]	; (10005810 <MF_MovingAverage+0xa4>)
10005794:	68db      	ldr	r3, [r3, #12]
10005796:	683a      	ldr	r2, [r7, #0]
10005798:	8892      	ldrh	r2, [r2, #4]
1000579a:	189a      	adds	r2, r3, r2
1000579c:	4b1c      	ldr	r3, [pc, #112]	; (10005810 <MF_MovingAverage+0xa4>)
1000579e:	60da      	str	r2, [r3, #12]
	sensorAvgBuff.sumAvgDCCT = sensorAvgBuff.sumAvgDCCT + sensorRaw->rawDCCT;
100057a0:	4b1b      	ldr	r3, [pc, #108]	; (10005810 <MF_MovingAverage+0xa4>)
100057a2:	691b      	ldr	r3, [r3, #16]
100057a4:	683a      	ldr	r2, [r7, #0]
100057a6:	88d2      	ldrh	r2, [r2, #6]
100057a8:	189a      	adds	r2, r3, r2
100057aa:	4b19      	ldr	r3, [pc, #100]	; (10005810 <MF_MovingAverage+0xa4>)
100057ac:	611a      	str	r2, [r3, #16]

	if(count == 31)
100057ae:	4b19      	ldr	r3, [pc, #100]	; (10005814 <MF_MovingAverage+0xa8>)
100057b0:	781b      	ldrb	r3, [r3, #0]
100057b2:	2b1f      	cmp	r3, #31
100057b4:	d123      	bne.n	100057fe <MF_MovingAverage+0x92>
	{
		sensorAvg->sumAvgPVPT = sensorAvgBuff.sumAvgPVPT >> 5;
100057b6:	4b16      	ldr	r3, [pc, #88]	; (10005810 <MF_MovingAverage+0xa4>)
100057b8:	685b      	ldr	r3, [r3, #4]
100057ba:	095a      	lsrs	r2, r3, #5
100057bc:	687b      	ldr	r3, [r7, #4]
100057be:	605a      	str	r2, [r3, #4]
		sensorAvg->sumAvgHVPT = sensorAvgBuff.sumAvgHVPT >> 5;
100057c0:	4b13      	ldr	r3, [pc, #76]	; (10005810 <MF_MovingAverage+0xa4>)
100057c2:	68db      	ldr	r3, [r3, #12]
100057c4:	095a      	lsrs	r2, r3, #5
100057c6:	687b      	ldr	r3, [r7, #4]
100057c8:	60da      	str	r2, [r3, #12]
		sensorAvg->sumAvgBTPT = sensorAvgBuff.sumAvgBTPT >> 5;
100057ca:	4b11      	ldr	r3, [pc, #68]	; (10005810 <MF_MovingAverage+0xa4>)
100057cc:	689b      	ldr	r3, [r3, #8]
100057ce:	095a      	lsrs	r2, r3, #5
100057d0:	687b      	ldr	r3, [r7, #4]
100057d2:	609a      	str	r2, [r3, #8]
		sensorAvg->sumAvgDCCT = sensorAvgBuff.sumAvgDCCT >> 5;
100057d4:	4b0e      	ldr	r3, [pc, #56]	; (10005810 <MF_MovingAverage+0xa4>)
100057d6:	691b      	ldr	r3, [r3, #16]
100057d8:	095a      	lsrs	r2, r3, #5
100057da:	687b      	ldr	r3, [r7, #4]
100057dc:	611a      	str	r2, [r3, #16]
		sensorAvgBuff.sumAvgBTPT = 0;
100057de:	4b0c      	ldr	r3, [pc, #48]	; (10005810 <MF_MovingAverage+0xa4>)
100057e0:	2200      	movs	r2, #0
100057e2:	609a      	str	r2, [r3, #8]
		sensorAvgBuff.sumAvgPVPT = 0;
100057e4:	4b0a      	ldr	r3, [pc, #40]	; (10005810 <MF_MovingAverage+0xa4>)
100057e6:	2200      	movs	r2, #0
100057e8:	605a      	str	r2, [r3, #4]
		sensorAvgBuff.sumAvgHVPT = 0;
100057ea:	4b09      	ldr	r3, [pc, #36]	; (10005810 <MF_MovingAverage+0xa4>)
100057ec:	2200      	movs	r2, #0
100057ee:	60da      	str	r2, [r3, #12]
		sensorAvgBuff.sumAvgDCCT = 0;
100057f0:	4b07      	ldr	r3, [pc, #28]	; (10005810 <MF_MovingAverage+0xa4>)
100057f2:	2200      	movs	r2, #0
100057f4:	611a      	str	r2, [r3, #16]

		count = 0;
100057f6:	4b07      	ldr	r3, [pc, #28]	; (10005814 <MF_MovingAverage+0xa8>)
100057f8:	2200      	movs	r2, #0
100057fa:	701a      	strb	r2, [r3, #0]
100057fc:	e005      	b.n	1000580a <MF_MovingAverage+0x9e>
	}
	else
	{
		count++;
100057fe:	4b05      	ldr	r3, [pc, #20]	; (10005814 <MF_MovingAverage+0xa8>)
10005800:	781b      	ldrb	r3, [r3, #0]
10005802:	3301      	adds	r3, #1
10005804:	b2da      	uxtb	r2, r3
10005806:	4b03      	ldr	r3, [pc, #12]	; (10005814 <MF_MovingAverage+0xa8>)
10005808:	701a      	strb	r2, [r3, #0]
	}
}
1000580a:	46bd      	mov	sp, r7
1000580c:	b002      	add	sp, #8
1000580e:	bd80      	pop	{r7, pc}
10005810:	20000a34 	.word	0x20000a34
10005814:	20000a48 	.word	0x20000a48

10005818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10005818:	b580      	push	{r7, lr}
1000581a:	b082      	sub	sp, #8
1000581c:	af00      	add	r7, sp, #0
1000581e:	1c02      	adds	r2, r0, #0
10005820:	1dfb      	adds	r3, r7, #7
10005822:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10005824:	1dfb      	adds	r3, r7, #7
10005826:	781b      	ldrb	r3, [r3, #0]
10005828:	2b7f      	cmp	r3, #127	; 0x7f
1000582a:	d809      	bhi.n	10005840 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
1000582c:	4b06      	ldr	r3, [pc, #24]	; (10005848 <__NVIC_EnableIRQ+0x30>)
1000582e:	1dfa      	adds	r2, r7, #7
10005830:	7812      	ldrb	r2, [r2, #0]
10005832:	1c11      	adds	r1, r2, #0
10005834:	221f      	movs	r2, #31
10005836:	400a      	ands	r2, r1
10005838:	2101      	movs	r1, #1
1000583a:	4091      	lsls	r1, r2
1000583c:	1c0a      	adds	r2, r1, #0
1000583e:	601a      	str	r2, [r3, #0]
  }
}
10005840:	46bd      	mov	sp, r7
10005842:	b002      	add	sp, #8
10005844:	bd80      	pop	{r7, pc}
10005846:	46c0      	nop			; (mov r8, r8)
10005848:	e000e100 	.word	0xe000e100

1000584c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
1000584c:	b5b0      	push	{r4, r5, r7, lr}
1000584e:	b082      	sub	sp, #8
10005850:	af00      	add	r7, sp, #0
10005852:	1c02      	adds	r2, r0, #0
10005854:	6039      	str	r1, [r7, #0]
10005856:	1dfb      	adds	r3, r7, #7
10005858:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1000585a:	1dfb      	adds	r3, r7, #7
1000585c:	781b      	ldrb	r3, [r3, #0]
1000585e:	2b7f      	cmp	r3, #127	; 0x7f
10005860:	d827      	bhi.n	100058b2 <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10005862:	4c2d      	ldr	r4, [pc, #180]	; (10005918 <__NVIC_SetPriority+0xcc>)
10005864:	1dfb      	adds	r3, r7, #7
10005866:	781b      	ldrb	r3, [r3, #0]
10005868:	b25b      	sxtb	r3, r3
1000586a:	089b      	lsrs	r3, r3, #2
1000586c:	492a      	ldr	r1, [pc, #168]	; (10005918 <__NVIC_SetPriority+0xcc>)
1000586e:	1dfa      	adds	r2, r7, #7
10005870:	7812      	ldrb	r2, [r2, #0]
10005872:	b252      	sxtb	r2, r2
10005874:	0892      	lsrs	r2, r2, #2
10005876:	32c0      	adds	r2, #192	; 0xc0
10005878:	0092      	lsls	r2, r2, #2
1000587a:	5852      	ldr	r2, [r2, r1]
1000587c:	1df9      	adds	r1, r7, #7
1000587e:	7809      	ldrb	r1, [r1, #0]
10005880:	1c08      	adds	r0, r1, #0
10005882:	2103      	movs	r1, #3
10005884:	4001      	ands	r1, r0
10005886:	00c9      	lsls	r1, r1, #3
10005888:	1c08      	adds	r0, r1, #0
1000588a:	21ff      	movs	r1, #255	; 0xff
1000588c:	4081      	lsls	r1, r0
1000588e:	43c9      	mvns	r1, r1
10005890:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10005892:	683a      	ldr	r2, [r7, #0]
10005894:	0192      	lsls	r2, r2, #6
10005896:	20ff      	movs	r0, #255	; 0xff
10005898:	4002      	ands	r2, r0
1000589a:	1df8      	adds	r0, r7, #7
1000589c:	7800      	ldrb	r0, [r0, #0]
1000589e:	1c05      	adds	r5, r0, #0
100058a0:	2003      	movs	r0, #3
100058a2:	4028      	ands	r0, r5
100058a4:	00c0      	lsls	r0, r0, #3
100058a6:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100058a8:	430a      	orrs	r2, r1
100058aa:	33c0      	adds	r3, #192	; 0xc0
100058ac:	009b      	lsls	r3, r3, #2
100058ae:	511a      	str	r2, [r3, r4]
100058b0:	e02e      	b.n	10005910 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100058b2:	4c1a      	ldr	r4, [pc, #104]	; (1000591c <__NVIC_SetPriority+0xd0>)
100058b4:	1dfb      	adds	r3, r7, #7
100058b6:	781b      	ldrb	r3, [r3, #0]
100058b8:	1c1a      	adds	r2, r3, #0
100058ba:	230f      	movs	r3, #15
100058bc:	4013      	ands	r3, r2
100058be:	3b08      	subs	r3, #8
100058c0:	0899      	lsrs	r1, r3, #2
100058c2:	4a16      	ldr	r2, [pc, #88]	; (1000591c <__NVIC_SetPriority+0xd0>)
100058c4:	1dfb      	adds	r3, r7, #7
100058c6:	781b      	ldrb	r3, [r3, #0]
100058c8:	1c18      	adds	r0, r3, #0
100058ca:	230f      	movs	r3, #15
100058cc:	4003      	ands	r3, r0
100058ce:	3b08      	subs	r3, #8
100058d0:	089b      	lsrs	r3, r3, #2
100058d2:	3306      	adds	r3, #6
100058d4:	009b      	lsls	r3, r3, #2
100058d6:	18d3      	adds	r3, r2, r3
100058d8:	685b      	ldr	r3, [r3, #4]
100058da:	1dfa      	adds	r2, r7, #7
100058dc:	7812      	ldrb	r2, [r2, #0]
100058de:	1c10      	adds	r0, r2, #0
100058e0:	2203      	movs	r2, #3
100058e2:	4002      	ands	r2, r0
100058e4:	00d2      	lsls	r2, r2, #3
100058e6:	1c10      	adds	r0, r2, #0
100058e8:	22ff      	movs	r2, #255	; 0xff
100058ea:	4082      	lsls	r2, r0
100058ec:	43d2      	mvns	r2, r2
100058ee:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100058f0:	683b      	ldr	r3, [r7, #0]
100058f2:	019b      	lsls	r3, r3, #6
100058f4:	20ff      	movs	r0, #255	; 0xff
100058f6:	4003      	ands	r3, r0
100058f8:	1df8      	adds	r0, r7, #7
100058fa:	7800      	ldrb	r0, [r0, #0]
100058fc:	1c05      	adds	r5, r0, #0
100058fe:	2003      	movs	r0, #3
10005900:	4028      	ands	r0, r5
10005902:	00c0      	lsls	r0, r0, #3
10005904:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10005906:	431a      	orrs	r2, r3
10005908:	1d8b      	adds	r3, r1, #6
1000590a:	009b      	lsls	r3, r3, #2
1000590c:	18e3      	adds	r3, r4, r3
1000590e:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10005910:	46bd      	mov	sp, r7
10005912:	b002      	add	sp, #8
10005914:	bdb0      	pop	{r4, r5, r7, pc}
10005916:	46c0      	nop			; (mov r8, r8)
10005918:	e000e100 	.word	0xe000e100
1000591c:	e000ed00 	.word	0xe000ed00

10005920 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
10005920:	b580      	push	{r7, lr}
10005922:	b082      	sub	sp, #8
10005924:	af00      	add	r7, sp, #0
10005926:	6078      	str	r0, [r7, #4]
10005928:	1c08      	adds	r0, r1, #0
1000592a:	1c11      	adds	r1, r2, #0
1000592c:	1cfb      	adds	r3, r7, #3
1000592e:	1c02      	adds	r2, r0, #0
10005930:	701a      	strb	r2, [r3, #0]
10005932:	1cbb      	adds	r3, r7, #2
10005934:	1c0a      	adds	r2, r1, #0
10005936:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
10005938:	1cfb      	adds	r3, r7, #3
1000593a:	7818      	ldrb	r0, [r3, #0]
1000593c:	1cfb      	adds	r3, r7, #3
1000593e:	781b      	ldrb	r3, [r3, #0]
10005940:	687a      	ldr	r2, [r7, #4]
10005942:	3306      	adds	r3, #6
10005944:	009b      	lsls	r3, r3, #2
10005946:	18d3      	adds	r3, r2, r3
10005948:	685b      	ldr	r3, [r3, #4]
1000594a:	2207      	movs	r2, #7
1000594c:	4393      	bics	r3, r2
1000594e:	1c1a      	adds	r2, r3, #0
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
10005950:	1cbb      	adds	r3, r7, #2
10005952:	781b      	ldrb	r3, [r3, #0]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
10005954:	431a      	orrs	r2, r3
10005956:	6879      	ldr	r1, [r7, #4]
10005958:	1d83      	adds	r3, r0, #6
1000595a:	009b      	lsls	r3, r3, #2
1000595c:	18cb      	adds	r3, r1, r3
1000595e:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
10005960:	46bd      	mov	sp, r7
10005962:	b002      	add	sp, #8
10005964:	bd80      	pop	{r7, pc}
10005966:	46c0      	nop			; (mov r8, r8)

10005968 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
10005968:	b580      	push	{r7, lr}
1000596a:	b082      	sub	sp, #8
1000596c:	af00      	add	r7, sp, #0
1000596e:	6078      	str	r0, [r7, #4]
10005970:	1c0a      	adds	r2, r1, #0
10005972:	1cfb      	adds	r3, r7, #3
10005974:	701a      	strb	r2, [r3, #0]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
10005976:	687b      	ldr	r3, [r7, #4]
10005978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000597a:	220f      	movs	r2, #15
1000597c:	4393      	bics	r3, r2
1000597e:	1c1a      	adds	r2, r3, #0
10005980:	1cfb      	adds	r3, r7, #3
10005982:	781b      	ldrb	r3, [r3, #0]
10005984:	431a      	orrs	r2, r3
10005986:	687b      	ldr	r3, [r7, #4]
10005988:	641a      	str	r2, [r3, #64]	; 0x40
}
1000598a:	46bd      	mov	sp, r7
1000598c:	b002      	add	sp, #8
1000598e:	bd80      	pop	{r7, pc}

10005990 <XMC_GPIO_SetOutputLevel>:
 *
 */


__STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_OUTPUT_LEVEL_t level)
{
10005990:	b580      	push	{r7, lr}
10005992:	b084      	sub	sp, #16
10005994:	af00      	add	r7, sp, #0
10005996:	60f8      	str	r0, [r7, #12]
10005998:	607a      	str	r2, [r7, #4]
1000599a:	230b      	movs	r3, #11
1000599c:	18fb      	adds	r3, r7, r3
1000599e:	1c0a      	adds	r2, r1, #0
100059a0:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
  
  port->OMR = (uint32_t)level << pin;
100059a2:	230b      	movs	r3, #11
100059a4:	18fb      	adds	r3, r7, r3
100059a6:	781b      	ldrb	r3, [r3, #0]
100059a8:	687a      	ldr	r2, [r7, #4]
100059aa:	409a      	lsls	r2, r3
100059ac:	68fb      	ldr	r3, [r7, #12]
100059ae:	605a      	str	r2, [r3, #4]
}
100059b0:	46bd      	mov	sp, r7
100059b2:	b004      	add	sp, #16
100059b4:	bd80      	pop	{r7, pc}
100059b6:	46c0      	nop			; (mov r8, r8)

100059b8 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
100059b8:	b580      	push	{r7, lr}
100059ba:	b082      	sub	sp, #8
100059bc:	af00      	add	r7, sp, #0
100059be:	6078      	str	r0, [r7, #4]
100059c0:	1c0a      	adds	r2, r1, #0
100059c2:	1cfb      	adds	r3, r7, #3
100059c4:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
100059c6:	1cfb      	adds	r3, r7, #3
100059c8:	781b      	ldrb	r3, [r3, #0]
100059ca:	2201      	movs	r2, #1
100059cc:	409a      	lsls	r2, r3
100059ce:	687b      	ldr	r3, [r7, #4]
100059d0:	605a      	str	r2, [r3, #4]
}
100059d2:	46bd      	mov	sp, r7
100059d4:	b002      	add	sp, #8
100059d6:	bd80      	pop	{r7, pc}

100059d8 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
100059d8:	b580      	push	{r7, lr}
100059da:	b082      	sub	sp, #8
100059dc:	af00      	add	r7, sp, #0
100059de:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
100059e0:	687b      	ldr	r3, [r7, #4]
100059e2:	1c18      	adds	r0, r3, #0
100059e4:	2104      	movs	r1, #4
100059e6:	f7ff ffbf 	bl	10005968 <XMC_USIC_CH_SetMode>
}
100059ea:	46bd      	mov	sp, r7
100059ec:	b002      	add	sp, #8
100059ee:	bd80      	pop	{r7, pc}

100059f0 <XMC_I2C_CH_SetInputSource>:
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetInptSource(), XMC_USIC_CH_SetInterruptNodePointer()
 *
 */
__STATIC_INLINE void XMC_I2C_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_INPUT_t input, const uint8_t source)
{
100059f0:	b580      	push	{r7, lr}
100059f2:	b082      	sub	sp, #8
100059f4:	af00      	add	r7, sp, #0
100059f6:	6078      	str	r0, [r7, #4]
100059f8:	1c08      	adds	r0, r1, #0
100059fa:	1c11      	adds	r1, r2, #0
100059fc:	1cfb      	adds	r3, r7, #3
100059fe:	1c02      	adds	r2, r0, #0
10005a00:	701a      	strb	r2, [r3, #0]
10005a02:	1cbb      	adds	r3, r7, #2
10005a04:	1c0a      	adds	r2, r1, #0
10005a06:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] =  (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_INSW_Msk)) | USIC_CH_DX0CR_DSEN_Msk;
10005a08:	1cfb      	adds	r3, r7, #3
10005a0a:	7818      	ldrb	r0, [r3, #0]
10005a0c:	1cfb      	adds	r3, r7, #3
10005a0e:	781b      	ldrb	r3, [r3, #0]
10005a10:	687a      	ldr	r2, [r7, #4]
10005a12:	3306      	adds	r3, #6
10005a14:	009b      	lsls	r3, r3, #2
10005a16:	18d3      	adds	r3, r2, r3
10005a18:	685b      	ldr	r3, [r3, #4]
10005a1a:	2250      	movs	r2, #80	; 0x50
10005a1c:	4393      	bics	r3, r2
10005a1e:	2240      	movs	r2, #64	; 0x40
10005a20:	431a      	orrs	r2, r3
10005a22:	6879      	ldr	r1, [r7, #4]
10005a24:	1d83      	adds	r3, r0, #6
10005a26:	009b      	lsls	r3, r3, #2
10005a28:	18cb      	adds	r3, r1, r3
10005a2a:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
10005a2c:	6879      	ldr	r1, [r7, #4]
10005a2e:	1cfb      	adds	r3, r7, #3
10005a30:	781a      	ldrb	r2, [r3, #0]
10005a32:	1cbb      	adds	r3, r7, #2
10005a34:	781b      	ldrb	r3, [r3, #0]
10005a36:	1c08      	adds	r0, r1, #0
10005a38:	1c11      	adds	r1, r2, #0
10005a3a:	1c1a      	adds	r2, r3, #0
10005a3c:	f7ff ff70 	bl	10005920 <XMC_USIC_CH_SetInputSource>
}
10005a40:	46bd      	mov	sp, r7
10005a42:	b002      	add	sp, #8
10005a44:	bd80      	pop	{r7, pc}
10005a46:	46c0      	nop			; (mov r8, r8)

10005a48 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
10005a48:	b580      	push	{r7, lr}
10005a4a:	b082      	sub	sp, #8
10005a4c:	af00      	add	r7, sp, #0
10005a4e:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
10005a50:	687b      	ldr	r3, [r7, #4]
10005a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
10005a54:	1c18      	adds	r0, r3, #0
10005a56:	46bd      	mov	sp, r7
10005a58:	b002      	add	sp, #8
10005a5a:	bd80      	pop	{r7, pc}

10005a5c <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
10005a5c:	b580      	push	{r7, lr}
10005a5e:	b082      	sub	sp, #8
10005a60:	af00      	add	r7, sp, #0
10005a62:	6078      	str	r0, [r7, #4]
10005a64:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
10005a66:	687b      	ldr	r3, [r7, #4]
10005a68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
10005a6a:	683b      	ldr	r3, [r7, #0]
10005a6c:	431a      	orrs	r2, r3
10005a6e:	687b      	ldr	r3, [r7, #4]
10005a70:	64da      	str	r2, [r3, #76]	; 0x4c
}
10005a72:	46bd      	mov	sp, r7
10005a74:	b002      	add	sp, #8
10005a76:	bd80      	pop	{r7, pc}

10005a78 <INFO_StartButtonInit>:

#include "info_operation.h"

/* Initialization */
void INFO_StartButtonInit(void)
{
10005a78:	b580      	push	{r7, lr}
10005a7a:	af00      	add	r7, sp, #0
	XMC_GPIO_Init(P2_2,&button_config);
10005a7c:	4a04      	ldr	r2, [pc, #16]	; (10005a90 <INFO_StartButtonInit+0x18>)
10005a7e:	4b05      	ldr	r3, [pc, #20]	; (10005a94 <INFO_StartButtonInit+0x1c>)
10005a80:	1c10      	adds	r0, r2, #0
10005a82:	2102      	movs	r1, #2
10005a84:	1c1a      	adds	r2, r3, #0
10005a86:	f7fb fbb1 	bl	100011ec <XMC_GPIO_Init>
}
10005a8a:	46bd      	mov	sp, r7
10005a8c:	bd80      	pop	{r7, pc}
10005a8e:	46c0      	nop			; (mov r8, r8)
10005a90:	40040200 	.word	0x40040200
10005a94:	20000688 	.word	0x20000688

10005a98 <INFO_ResetButtonInit>:
void INFO_ResetButtonInit(void)
{
10005a98:	b580      	push	{r7, lr}
10005a9a:	af00      	add	r7, sp, #0
	XMC_GPIO_Init(P2_10, &eru_io_config);
10005a9c:	4a11      	ldr	r2, [pc, #68]	; (10005ae4 <INFO_ResetButtonInit+0x4c>)
10005a9e:	4b12      	ldr	r3, [pc, #72]	; (10005ae8 <INFO_ResetButtonInit+0x50>)
10005aa0:	1c10      	adds	r0, r2, #0
10005aa2:	210a      	movs	r1, #10
10005aa4:	1c1a      	adds	r2, r3, #0
10005aa6:	f7fb fba1 	bl	100011ec <XMC_GPIO_Init>

	/* ETL and OGU Configuration */
	XMC_ERU_ETL_Init(ERU0_ETL2, &eru0_etl2_config);
10005aaa:	4a10      	ldr	r2, [pc, #64]	; (10005aec <INFO_ResetButtonInit+0x54>)
10005aac:	4b10      	ldr	r3, [pc, #64]	; (10005af0 <INFO_ResetButtonInit+0x58>)
10005aae:	1c10      	adds	r0, r2, #0
10005ab0:	2102      	movs	r1, #2
10005ab2:	1c1a      	adds	r2, r3, #0
10005ab4:	f7fc fa64 	bl	10001f80 <XMC_ERU_ETL_Init>
	XMC_ERU_OGU_Init(ERU0_OGU2, &eru0_ogu2_config);
10005ab8:	4a0c      	ldr	r2, [pc, #48]	; (10005aec <INFO_ResetButtonInit+0x54>)
10005aba:	4b0e      	ldr	r3, [pc, #56]	; (10005af4 <INFO_ResetButtonInit+0x5c>)
10005abc:	1c10      	adds	r0, r2, #0
10005abe:	2102      	movs	r1, #2
10005ac0:	1c1a      	adds	r2, r3, #0
10005ac2:	f7fc fa8b 	bl	10001fdc <XMC_ERU_OGU_Init>

	XMC_SCU_SetInterruptControl(IRQ11_IRQn, XMC_SCU_IRQCTRL_ERU0_SR2_IRQ11);
10005ac6:	4b0c      	ldr	r3, [pc, #48]	; (10005af8 <INFO_ResetButtonInit+0x60>)
10005ac8:	200b      	movs	r0, #11
10005aca:	1c19      	adds	r1, r3, #0
10005acc:	f7fb fc8a 	bl	100013e4 <XMC_SCU_SetInterruptControl>
	NVIC_SetPriority(IRQ11_IRQn, 4U);
10005ad0:	200b      	movs	r0, #11
10005ad2:	2104      	movs	r1, #4
10005ad4:	f7ff feba 	bl	1000584c <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQ11_IRQn);
10005ad8:	200b      	movs	r0, #11
10005ada:	f7ff fe9d 	bl	10005818 <__NVIC_EnableIRQ>
}
10005ade:	46bd      	mov	sp, r7
10005ae0:	bd80      	pop	{r7, pc}
10005ae2:	46c0      	nop			; (mov r8, r8)
10005ae4:	40040200 	.word	0x40040200
10005ae8:	20000a58 	.word	0x20000a58
10005aec:	40010600 	.word	0x40010600
10005af0:	200006b4 	.word	0x200006b4
10005af4:	200006bc 	.word	0x200006bc
10005af8:	00000b02 	.word	0x00000b02

10005afc <INFO_LEDInit>:
void INFO_LEDInit(void)
{
10005afc:	b580      	push	{r7, lr}
10005afe:	af00      	add	r7, sp, #0
	XMC_GPIO_Init(P2_11,&led_config);
10005b00:	4a14      	ldr	r2, [pc, #80]	; (10005b54 <INFO_LEDInit+0x58>)
10005b02:	4b15      	ldr	r3, [pc, #84]	; (10005b58 <INFO_LEDInit+0x5c>)
10005b04:	1c10      	adds	r0, r2, #0
10005b06:	210b      	movs	r1, #11
10005b08:	1c1a      	adds	r2, r3, #0
10005b0a:	f7fb fb6f 	bl	100011ec <XMC_GPIO_Init>
	XMC_GPIO_Init(P2_12,&led_config);
10005b0e:	4a11      	ldr	r2, [pc, #68]	; (10005b54 <INFO_LEDInit+0x58>)
10005b10:	4b11      	ldr	r3, [pc, #68]	; (10005b58 <INFO_LEDInit+0x5c>)
10005b12:	1c10      	adds	r0, r2, #0
10005b14:	210c      	movs	r1, #12
10005b16:	1c1a      	adds	r2, r3, #0
10005b18:	f7fb fb68 	bl	100011ec <XMC_GPIO_Init>
	XMC_GPIO_Init(P2_13,&led_config);
10005b1c:	4a0d      	ldr	r2, [pc, #52]	; (10005b54 <INFO_LEDInit+0x58>)
10005b1e:	4b0e      	ldr	r3, [pc, #56]	; (10005b58 <INFO_LEDInit+0x5c>)
10005b20:	1c10      	adds	r0, r2, #0
10005b22:	210d      	movs	r1, #13
10005b24:	1c1a      	adds	r2, r3, #0
10005b26:	f7fb fb61 	bl	100011ec <XMC_GPIO_Init>

	XMC_GPIO_SetOutputLevel(P2_11, XMC_GPIO_OUTPUT_LEVEL_HIGH);
10005b2a:	4b0a      	ldr	r3, [pc, #40]	; (10005b54 <INFO_LEDInit+0x58>)
10005b2c:	1c18      	adds	r0, r3, #0
10005b2e:	210b      	movs	r1, #11
10005b30:	2201      	movs	r2, #1
10005b32:	f7ff ff2d 	bl	10005990 <XMC_GPIO_SetOutputLevel>
	XMC_GPIO_SetOutputLevel(P2_12, XMC_GPIO_OUTPUT_LEVEL_HIGH);
10005b36:	4b07      	ldr	r3, [pc, #28]	; (10005b54 <INFO_LEDInit+0x58>)
10005b38:	1c18      	adds	r0, r3, #0
10005b3a:	210c      	movs	r1, #12
10005b3c:	2201      	movs	r2, #1
10005b3e:	f7ff ff27 	bl	10005990 <XMC_GPIO_SetOutputLevel>
	XMC_GPIO_SetOutputLevel(P2_13, XMC_GPIO_OUTPUT_LEVEL_HIGH);
10005b42:	4b04      	ldr	r3, [pc, #16]	; (10005b54 <INFO_LEDInit+0x58>)
10005b44:	1c18      	adds	r0, r3, #0
10005b46:	210d      	movs	r1, #13
10005b48:	2201      	movs	r2, #1
10005b4a:	f7ff ff21 	bl	10005990 <XMC_GPIO_SetOutputLevel>
}
10005b4e:	46bd      	mov	sp, r7
10005b50:	bd80      	pop	{r7, pc}
10005b52:	46c0      	nop			; (mov r8, r8)
10005b54:	40040200 	.word	0x40040200
10005b58:	20000690 	.word	0x20000690

10005b5c <INFO_GPIOInit>:
void INFO_GPIOInit(void)
{
10005b5c:	b580      	push	{r7, lr}
10005b5e:	af00      	add	r7, sp, #0
	XMC_GPIO_Init(P4_8,&gpio_config);
10005b60:	4a12      	ldr	r2, [pc, #72]	; (10005bac <INFO_GPIOInit+0x50>)
10005b62:	4b13      	ldr	r3, [pc, #76]	; (10005bb0 <INFO_GPIOInit+0x54>)
10005b64:	1c10      	adds	r0, r2, #0
10005b66:	2108      	movs	r1, #8
10005b68:	1c1a      	adds	r2, r3, #0
10005b6a:	f7fb fb3f 	bl	100011ec <XMC_GPIO_Init>
	XMC_GPIO_Init(P4_9,&gpio_config);
10005b6e:	4a0f      	ldr	r2, [pc, #60]	; (10005bac <INFO_GPIOInit+0x50>)
10005b70:	4b0f      	ldr	r3, [pc, #60]	; (10005bb0 <INFO_GPIOInit+0x54>)
10005b72:	1c10      	adds	r0, r2, #0
10005b74:	2109      	movs	r1, #9
10005b76:	1c1a      	adds	r2, r3, #0
10005b78:	f7fb fb38 	bl	100011ec <XMC_GPIO_Init>
	XMC_GPIO_Init(P4_10,&gpio_config);
10005b7c:	4a0b      	ldr	r2, [pc, #44]	; (10005bac <INFO_GPIOInit+0x50>)
10005b7e:	4b0c      	ldr	r3, [pc, #48]	; (10005bb0 <INFO_GPIOInit+0x54>)
10005b80:	1c10      	adds	r0, r2, #0
10005b82:	210a      	movs	r1, #10
10005b84:	1c1a      	adds	r2, r3, #0
10005b86:	f7fb fb31 	bl	100011ec <XMC_GPIO_Init>
	XMC_GPIO_Init(P4_11,&gpio_config);
10005b8a:	4a08      	ldr	r2, [pc, #32]	; (10005bac <INFO_GPIOInit+0x50>)
10005b8c:	4b08      	ldr	r3, [pc, #32]	; (10005bb0 <INFO_GPIOInit+0x54>)
10005b8e:	1c10      	adds	r0, r2, #0
10005b90:	210b      	movs	r1, #11
10005b92:	1c1a      	adds	r2, r3, #0
10005b94:	f7fb fb2a 	bl	100011ec <XMC_GPIO_Init>

	XMC_GPIO_SetOutputLevel(P4_11, XMC_GPIO_OUTPUT_LEVEL_LOW);
10005b98:	4a04      	ldr	r2, [pc, #16]	; (10005bac <INFO_GPIOInit+0x50>)
10005b9a:	2380      	movs	r3, #128	; 0x80
10005b9c:	025b      	lsls	r3, r3, #9
10005b9e:	1c10      	adds	r0, r2, #0
10005ba0:	210b      	movs	r1, #11
10005ba2:	1c1a      	adds	r2, r3, #0
10005ba4:	f7ff fef4 	bl	10005990 <XMC_GPIO_SetOutputLevel>
}
10005ba8:	46bd      	mov	sp, r7
10005baa:	bd80      	pop	{r7, pc}
10005bac:	40040400 	.word	0x40040400
10005bb0:	20000698 	.word	0x20000698

10005bb4 <INFO_ModeSelectorInit>:
void INFO_ModeSelectorInit(void)
{
10005bb4:	b580      	push	{r7, lr}
10005bb6:	af00      	add	r7, sp, #0
	XMC_GPIO_Init(P4_2,&dipswitch_config);
10005bb8:	4a0e      	ldr	r2, [pc, #56]	; (10005bf4 <INFO_ModeSelectorInit+0x40>)
10005bba:	4b0f      	ldr	r3, [pc, #60]	; (10005bf8 <INFO_ModeSelectorInit+0x44>)
10005bbc:	1c10      	adds	r0, r2, #0
10005bbe:	2102      	movs	r1, #2
10005bc0:	1c1a      	adds	r2, r3, #0
10005bc2:	f7fb fb13 	bl	100011ec <XMC_GPIO_Init>
	XMC_GPIO_Init(P4_3,&dipswitch_config);
10005bc6:	4a0b      	ldr	r2, [pc, #44]	; (10005bf4 <INFO_ModeSelectorInit+0x40>)
10005bc8:	4b0b      	ldr	r3, [pc, #44]	; (10005bf8 <INFO_ModeSelectorInit+0x44>)
10005bca:	1c10      	adds	r0, r2, #0
10005bcc:	2103      	movs	r1, #3
10005bce:	1c1a      	adds	r2, r3, #0
10005bd0:	f7fb fb0c 	bl	100011ec <XMC_GPIO_Init>
	XMC_GPIO_Init(P4_4,&dipswitch_config);
10005bd4:	4a07      	ldr	r2, [pc, #28]	; (10005bf4 <INFO_ModeSelectorInit+0x40>)
10005bd6:	4b08      	ldr	r3, [pc, #32]	; (10005bf8 <INFO_ModeSelectorInit+0x44>)
10005bd8:	1c10      	adds	r0, r2, #0
10005bda:	2104      	movs	r1, #4
10005bdc:	1c1a      	adds	r2, r3, #0
10005bde:	f7fb fb05 	bl	100011ec <XMC_GPIO_Init>
	XMC_GPIO_Init(P4_5,&dipswitch_config);
10005be2:	4a04      	ldr	r2, [pc, #16]	; (10005bf4 <INFO_ModeSelectorInit+0x40>)
10005be4:	4b04      	ldr	r3, [pc, #16]	; (10005bf8 <INFO_ModeSelectorInit+0x44>)
10005be6:	1c10      	adds	r0, r2, #0
10005be8:	2105      	movs	r1, #5
10005bea:	1c1a      	adds	r2, r3, #0
10005bec:	f7fb fafe 	bl	100011ec <XMC_GPIO_Init>
}
10005bf0:	46bd      	mov	sp, r7
10005bf2:	bd80      	pop	{r7, pc}
10005bf4:	40040400 	.word	0x40040400
10005bf8:	20000a50 	.word	0x20000a50

10005bfc <INFO_RTCEEPROMInit>:
void INFO_RTCEEPROMInit(void)
{
10005bfc:	b580      	push	{r7, lr}
10005bfe:	af00      	add	r7, sp, #0
	XMC_GPIO_Init(P3_2, &eru_io_config);
10005c00:	4a23      	ldr	r2, [pc, #140]	; (10005c90 <INFO_RTCEEPROMInit+0x94>)
10005c02:	4b24      	ldr	r3, [pc, #144]	; (10005c94 <INFO_RTCEEPROMInit+0x98>)
10005c04:	1c10      	adds	r0, r2, #0
10005c06:	2102      	movs	r1, #2
10005c08:	1c1a      	adds	r2, r3, #0
10005c0a:	f7fb faef 	bl	100011ec <XMC_GPIO_Init>

	/* ETL and OGU Configuration for RTC MFP Configuration */
	XMC_ERU_ETL_Init(ERU1_ETL2, &eru1_etl2_config);
10005c0e:	4a22      	ldr	r2, [pc, #136]	; (10005c98 <INFO_RTCEEPROMInit+0x9c>)
10005c10:	4b22      	ldr	r3, [pc, #136]	; (10005c9c <INFO_RTCEEPROMInit+0xa0>)
10005c12:	1c10      	adds	r0, r2, #0
10005c14:	2102      	movs	r1, #2
10005c16:	1c1a      	adds	r2, r3, #0
10005c18:	f7fc f9b2 	bl	10001f80 <XMC_ERU_ETL_Init>
	XMC_ERU_OGU_Init(ERU1_OGU3, &eru1_ogu3_config);
10005c1c:	4a1e      	ldr	r2, [pc, #120]	; (10005c98 <INFO_RTCEEPROMInit+0x9c>)
10005c1e:	4b20      	ldr	r3, [pc, #128]	; (10005ca0 <INFO_RTCEEPROMInit+0xa4>)
10005c20:	1c10      	adds	r0, r2, #0
10005c22:	2103      	movs	r1, #3
10005c24:	1c1a      	adds	r2, r3, #0
10005c26:	f7fc f9d9 	bl	10001fdc <XMC_ERU_OGU_Init>

	XMC_SCU_SetInterruptControl(IRQ6_IRQn, XMC_SCU_IRQCTRL_ERU1_SR3_IRQ6);
10005c2a:	4b1e      	ldr	r3, [pc, #120]	; (10005ca4 <INFO_RTCEEPROMInit+0xa8>)
10005c2c:	2006      	movs	r0, #6
10005c2e:	1c19      	adds	r1, r3, #0
10005c30:	f7fb fbd8 	bl	100013e4 <XMC_SCU_SetInterruptControl>
	NVIC_SetPriority(IRQ6_IRQn, 8U);
10005c34:	2006      	movs	r0, #6
10005c36:	2108      	movs	r1, #8
10005c38:	f7ff fe08 	bl	1000584c <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQ6_IRQn);
10005c3c:	2006      	movs	r0, #6
10005c3e:	f7ff fdeb 	bl	10005818 <__NVIC_EnableIRQ>

	/* Configure IIC channel */
	XMC_I2C_CH_Init(XMC_USIC1_CH1, &iic_config);
10005c42:	4a19      	ldr	r2, [pc, #100]	; (10005ca8 <INFO_RTCEEPROMInit+0xac>)
10005c44:	4b19      	ldr	r3, [pc, #100]	; (10005cac <INFO_RTCEEPROMInit+0xb0>)
10005c46:	1c10      	adds	r0, r2, #0
10005c48:	1c19      	adds	r1, r3, #0
10005c4a:	f7fc f9fd 	bl	10002048 <XMC_I2C_CH_Init>
	/* Configure input multiplexors */
	XMC_I2C_CH_SetInputSource(XMC_USIC1_CH1, XMC_I2C_CH_INPUT_SDA, USIC1_C1_DX0_P0_0);
10005c4e:	4b16      	ldr	r3, [pc, #88]	; (10005ca8 <INFO_RTCEEPROMInit+0xac>)
10005c50:	1c18      	adds	r0, r3, #0
10005c52:	2100      	movs	r1, #0
10005c54:	2200      	movs	r2, #0
10005c56:	f7ff fecb 	bl	100059f0 <XMC_I2C_CH_SetInputSource>
	XMC_I2C_CH_SetInputSource(XMC_USIC1_CH1, XMC_I2C_CH_INPUT_SCL, USIC1_C1_DX1_P0_1);
10005c5a:	4b13      	ldr	r3, [pc, #76]	; (10005ca8 <INFO_RTCEEPROMInit+0xac>)
10005c5c:	1c18      	adds	r0, r3, #0
10005c5e:	2101      	movs	r1, #1
10005c60:	2200      	movs	r2, #0
10005c62:	f7ff fec5 	bl	100059f0 <XMC_I2C_CH_SetInputSource>

	/* Initialize GPIO */
	XMC_GPIO_Init(P0_0, &rtc_sda_config);
10005c66:	4a12      	ldr	r2, [pc, #72]	; (10005cb0 <INFO_RTCEEPROMInit+0xb4>)
10005c68:	4b12      	ldr	r3, [pc, #72]	; (10005cb4 <INFO_RTCEEPROMInit+0xb8>)
10005c6a:	1c10      	adds	r0, r2, #0
10005c6c:	2100      	movs	r1, #0
10005c6e:	1c1a      	adds	r2, r3, #0
10005c70:	f7fb fabc 	bl	100011ec <XMC_GPIO_Init>
	XMC_GPIO_Init(P0_1, &rtc_scl_config);
10005c74:	4a0e      	ldr	r2, [pc, #56]	; (10005cb0 <INFO_RTCEEPROMInit+0xb4>)
10005c76:	4b10      	ldr	r3, [pc, #64]	; (10005cb8 <INFO_RTCEEPROMInit+0xbc>)
10005c78:	1c10      	adds	r0, r2, #0
10005c7a:	2101      	movs	r1, #1
10005c7c:	1c1a      	adds	r2, r3, #0
10005c7e:	f7fb fab5 	bl	100011ec <XMC_GPIO_Init>

	/* Start IIC channel */
	XMC_I2C_CH_Start(XMC_USIC1_CH1);
10005c82:	4b09      	ldr	r3, [pc, #36]	; (10005ca8 <INFO_RTCEEPROMInit+0xac>)
10005c84:	1c18      	adds	r0, r3, #0
10005c86:	f7ff fea7 	bl	100059d8 <XMC_I2C_CH_Start>
}
10005c8a:	46bd      	mov	sp, r7
10005c8c:	bd80      	pop	{r7, pc}
10005c8e:	46c0      	nop			; (mov r8, r8)
10005c90:	40040300 	.word	0x40040300
10005c94:	20000a58 	.word	0x20000a58
10005c98:	40010630 	.word	0x40010630
10005c9c:	200006a8 	.word	0x200006a8
10005ca0:	200006b0 	.word	0x200006b0
10005ca4:	00000601 	.word	0x00000601
10005ca8:	48004200 	.word	0x48004200
10005cac:	200006a0 	.word	0x200006a0
10005cb0:	40040000 	.word	0x40040000
10005cb4:	200006c0 	.word	0x200006c0
10005cb8:	200006c8 	.word	0x200006c8

10005cbc <INFO_LEDSwitch>:

/* LED Method */
void INFO_LEDSwitch(LED_NAME_t led_name, LED_STATUS_t status)
{
10005cbc:	b580      	push	{r7, lr}
10005cbe:	b082      	sub	sp, #8
10005cc0:	af00      	add	r7, sp, #0
10005cc2:	1c02      	adds	r2, r0, #0
10005cc4:	1dfb      	adds	r3, r7, #7
10005cc6:	701a      	strb	r2, [r3, #0]
10005cc8:	1dbb      	adds	r3, r7, #6
10005cca:	1c0a      	adds	r2, r1, #0
10005ccc:	701a      	strb	r2, [r3, #0]
	// active low IO
	switch(led_name)
10005cce:	1dfb      	adds	r3, r7, #7
10005cd0:	781b      	ldrb	r3, [r3, #0]
10005cd2:	2b01      	cmp	r3, #1
10005cd4:	d018      	beq.n	10005d08 <INFO_LEDSwitch+0x4c>
10005cd6:	2b02      	cmp	r3, #2
10005cd8:	d02a      	beq.n	10005d30 <INFO_LEDSwitch+0x74>
10005cda:	2b00      	cmp	r3, #0
10005cdc:	d000      	beq.n	10005ce0 <INFO_LEDSwitch+0x24>
							 (XMC_GPIO_SetOutputLevel(P2_12, XMC_GPIO_OUTPUT_LEVEL_HIGH));
							  break;
		case LED2 	: status?(XMC_GPIO_SetOutputLevel(P2_13, XMC_GPIO_OUTPUT_LEVEL_LOW)):\
							 (XMC_GPIO_SetOutputLevel(P2_13, XMC_GPIO_OUTPUT_LEVEL_HIGH));
							  break;
		default				: break;
10005cde:	e03b      	b.n	10005d58 <INFO_LEDSwitch+0x9c>
void INFO_LEDSwitch(LED_NAME_t led_name, LED_STATUS_t status)
{
	// active low IO
	switch(led_name)
	{
		case LED0   : status?(XMC_GPIO_SetOutputLevel(P2_11, XMC_GPIO_OUTPUT_LEVEL_LOW)):\
10005ce0:	1dbb      	adds	r3, r7, #6
10005ce2:	781b      	ldrb	r3, [r3, #0]
10005ce4:	2b00      	cmp	r3, #0
10005ce6:	d008      	beq.n	10005cfa <INFO_LEDSwitch+0x3e>
10005ce8:	4a1d      	ldr	r2, [pc, #116]	; (10005d60 <INFO_LEDSwitch+0xa4>)
10005cea:	2380      	movs	r3, #128	; 0x80
10005cec:	025b      	lsls	r3, r3, #9
10005cee:	1c10      	adds	r0, r2, #0
10005cf0:	210b      	movs	r1, #11
10005cf2:	1c1a      	adds	r2, r3, #0
10005cf4:	f7ff fe4c 	bl	10005990 <XMC_GPIO_SetOutputLevel>
							 (XMC_GPIO_SetOutputLevel(P2_11, XMC_GPIO_OUTPUT_LEVEL_HIGH));
						  	  break;
10005cf8:	e02e      	b.n	10005d58 <INFO_LEDSwitch+0x9c>
{
	// active low IO
	switch(led_name)
	{
		case LED0   : status?(XMC_GPIO_SetOutputLevel(P2_11, XMC_GPIO_OUTPUT_LEVEL_LOW)):\
							 (XMC_GPIO_SetOutputLevel(P2_11, XMC_GPIO_OUTPUT_LEVEL_HIGH));
10005cfa:	4b19      	ldr	r3, [pc, #100]	; (10005d60 <INFO_LEDSwitch+0xa4>)
10005cfc:	1c18      	adds	r0, r3, #0
10005cfe:	210b      	movs	r1, #11
10005d00:	2201      	movs	r2, #1
10005d02:	f7ff fe45 	bl	10005990 <XMC_GPIO_SetOutputLevel>
						  	  break;
10005d06:	e027      	b.n	10005d58 <INFO_LEDSwitch+0x9c>
		case LED1 	: status?(XMC_GPIO_SetOutputLevel(P2_12, XMC_GPIO_OUTPUT_LEVEL_LOW)):\
10005d08:	1dbb      	adds	r3, r7, #6
10005d0a:	781b      	ldrb	r3, [r3, #0]
10005d0c:	2b00      	cmp	r3, #0
10005d0e:	d008      	beq.n	10005d22 <INFO_LEDSwitch+0x66>
10005d10:	4a13      	ldr	r2, [pc, #76]	; (10005d60 <INFO_LEDSwitch+0xa4>)
10005d12:	2380      	movs	r3, #128	; 0x80
10005d14:	025b      	lsls	r3, r3, #9
10005d16:	1c10      	adds	r0, r2, #0
10005d18:	210c      	movs	r1, #12
10005d1a:	1c1a      	adds	r2, r3, #0
10005d1c:	f7ff fe38 	bl	10005990 <XMC_GPIO_SetOutputLevel>
							 (XMC_GPIO_SetOutputLevel(P2_12, XMC_GPIO_OUTPUT_LEVEL_HIGH));
							  break;
10005d20:	e01a      	b.n	10005d58 <INFO_LEDSwitch+0x9c>
	{
		case LED0   : status?(XMC_GPIO_SetOutputLevel(P2_11, XMC_GPIO_OUTPUT_LEVEL_LOW)):\
							 (XMC_GPIO_SetOutputLevel(P2_11, XMC_GPIO_OUTPUT_LEVEL_HIGH));
						  	  break;
		case LED1 	: status?(XMC_GPIO_SetOutputLevel(P2_12, XMC_GPIO_OUTPUT_LEVEL_LOW)):\
							 (XMC_GPIO_SetOutputLevel(P2_12, XMC_GPIO_OUTPUT_LEVEL_HIGH));
10005d22:	4b0f      	ldr	r3, [pc, #60]	; (10005d60 <INFO_LEDSwitch+0xa4>)
10005d24:	1c18      	adds	r0, r3, #0
10005d26:	210c      	movs	r1, #12
10005d28:	2201      	movs	r2, #1
10005d2a:	f7ff fe31 	bl	10005990 <XMC_GPIO_SetOutputLevel>
							  break;
10005d2e:	e013      	b.n	10005d58 <INFO_LEDSwitch+0x9c>
		case LED2 	: status?(XMC_GPIO_SetOutputLevel(P2_13, XMC_GPIO_OUTPUT_LEVEL_LOW)):\
10005d30:	1dbb      	adds	r3, r7, #6
10005d32:	781b      	ldrb	r3, [r3, #0]
10005d34:	2b00      	cmp	r3, #0
10005d36:	d008      	beq.n	10005d4a <INFO_LEDSwitch+0x8e>
10005d38:	4a09      	ldr	r2, [pc, #36]	; (10005d60 <INFO_LEDSwitch+0xa4>)
10005d3a:	2380      	movs	r3, #128	; 0x80
10005d3c:	025b      	lsls	r3, r3, #9
10005d3e:	1c10      	adds	r0, r2, #0
10005d40:	210d      	movs	r1, #13
10005d42:	1c1a      	adds	r2, r3, #0
10005d44:	f7ff fe24 	bl	10005990 <XMC_GPIO_SetOutputLevel>
							 (XMC_GPIO_SetOutputLevel(P2_13, XMC_GPIO_OUTPUT_LEVEL_HIGH));
							  break;
10005d48:	e005      	b.n	10005d56 <INFO_LEDSwitch+0x9a>
						  	  break;
		case LED1 	: status?(XMC_GPIO_SetOutputLevel(P2_12, XMC_GPIO_OUTPUT_LEVEL_LOW)):\
							 (XMC_GPIO_SetOutputLevel(P2_12, XMC_GPIO_OUTPUT_LEVEL_HIGH));
							  break;
		case LED2 	: status?(XMC_GPIO_SetOutputLevel(P2_13, XMC_GPIO_OUTPUT_LEVEL_LOW)):\
							 (XMC_GPIO_SetOutputLevel(P2_13, XMC_GPIO_OUTPUT_LEVEL_HIGH));
10005d4a:	4b05      	ldr	r3, [pc, #20]	; (10005d60 <INFO_LEDSwitch+0xa4>)
10005d4c:	1c18      	adds	r0, r3, #0
10005d4e:	210d      	movs	r1, #13
10005d50:	2201      	movs	r2, #1
10005d52:	f7ff fe1d 	bl	10005990 <XMC_GPIO_SetOutputLevel>
							  break;
10005d56:	46c0      	nop			; (mov r8, r8)
		default				: break;
	}
}
10005d58:	46bd      	mov	sp, r7
10005d5a:	b002      	add	sp, #8
10005d5c:	bd80      	pop	{r7, pc}
10005d5e:	46c0      	nop			; (mov r8, r8)
10005d60:	40040200 	.word	0x40040200

10005d64 <INFO_RTCOscillatorEnable>:
	}
}

/* RTC Methods */
uint8_t INFO_RTCOscillatorEnable(void)
{
10005d64:	b590      	push	{r4, r7, lr}
10005d66:	b085      	sub	sp, #20
10005d68:	af00      	add	r7, sp, #0
	uint8_t data;

	/*    						Accessing RTCC Control Byte w/ WR					*/
	XMC_I2C_CH_MasterStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_WRITE);
10005d6a:	4b76      	ldr	r3, [pc, #472]	; (10005f44 <INFO_RTCOscillatorEnable+0x1e0>)
10005d6c:	1c18      	adds	r0, r3, #0
10005d6e:	21de      	movs	r1, #222	; 0xde
10005d70:	2200      	movs	r2, #0
10005d72:	f7fc fa07 	bl	10002184 <XMC_I2C_CH_MasterStart>
//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
	for(uint16_t count=0; count < 500; count++){}
10005d76:	230e      	movs	r3, #14
10005d78:	18fb      	adds	r3, r7, r3
10005d7a:	2200      	movs	r2, #0
10005d7c:	801a      	strh	r2, [r3, #0]
10005d7e:	e006      	b.n	10005d8e <INFO_RTCOscillatorEnable+0x2a>
10005d80:	230e      	movs	r3, #14
10005d82:	18fb      	adds	r3, r7, r3
10005d84:	881a      	ldrh	r2, [r3, #0]
10005d86:	230e      	movs	r3, #14
10005d88:	18fb      	adds	r3, r7, r3
10005d8a:	3201      	adds	r2, #1
10005d8c:	801a      	strh	r2, [r3, #0]
10005d8e:	230e      	movs	r3, #14
10005d90:	18fb      	adds	r3, r7, r3
10005d92:	881a      	ldrh	r2, [r3, #0]
10005d94:	23f4      	movs	r3, #244	; 0xf4
10005d96:	33ff      	adds	r3, #255	; 0xff
10005d98:	429a      	cmp	r2, r3
10005d9a:	d9f1      	bls.n	10005d80 <INFO_RTCOscillatorEnable+0x1c>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
10005d9c:	4a69      	ldr	r2, [pc, #420]	; (10005f44 <INFO_RTCOscillatorEnable+0x1e0>)
10005d9e:	2380      	movs	r3, #128	; 0x80
10005da0:	009b      	lsls	r3, r3, #2
10005da2:	1c10      	adds	r0, r2, #0
10005da4:	1c19      	adds	r1, r3, #0
10005da6:	f7ff fe59 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

    /*    						Write RTC Second Address Byte   							*/
    XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, RTCSECOND);
10005daa:	4b66      	ldr	r3, [pc, #408]	; (10005f44 <INFO_RTCOscillatorEnable+0x1e0>)
10005dac:	1c18      	adds	r0, r3, #0
10005dae:	2100      	movs	r1, #0
10005db0:	f7fc fa92 	bl	100022d8 <XMC_I2C_CH_MasterTransmit>
//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
    for(uint16_t count=0; count < 500; count++){}
10005db4:	230c      	movs	r3, #12
10005db6:	18fb      	adds	r3, r7, r3
10005db8:	2200      	movs	r2, #0
10005dba:	801a      	strh	r2, [r3, #0]
10005dbc:	e006      	b.n	10005dcc <INFO_RTCOscillatorEnable+0x68>
10005dbe:	230c      	movs	r3, #12
10005dc0:	18fb      	adds	r3, r7, r3
10005dc2:	881a      	ldrh	r2, [r3, #0]
10005dc4:	230c      	movs	r3, #12
10005dc6:	18fb      	adds	r3, r7, r3
10005dc8:	3201      	adds	r2, #1
10005dca:	801a      	strh	r2, [r3, #0]
10005dcc:	230c      	movs	r3, #12
10005dce:	18fb      	adds	r3, r7, r3
10005dd0:	881a      	ldrh	r2, [r3, #0]
10005dd2:	23f4      	movs	r3, #244	; 0xf4
10005dd4:	33ff      	adds	r3, #255	; 0xff
10005dd6:	429a      	cmp	r2, r3
10005dd8:	d9f1      	bls.n	10005dbe <INFO_RTCOscillatorEnable+0x5a>
    XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
10005dda:	4a5a      	ldr	r2, [pc, #360]	; (10005f44 <INFO_RTCOscillatorEnable+0x1e0>)
10005ddc:	2380      	movs	r3, #128	; 0x80
10005dde:	009b      	lsls	r3, r3, #2
10005de0:	1c10      	adds	r0, r2, #0
10005de2:	1c19      	adds	r1, r3, #0
10005de4:	f7ff fe3a 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

    /*    						Accessing RTCC Control Byte again w/ RD				*/
    XMC_I2C_CH_MasterRepeatedStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_READ);
10005de8:	4b56      	ldr	r3, [pc, #344]	; (10005f44 <INFO_RTCOscillatorEnable+0x1e0>)
10005dea:	1c18      	adds	r0, r3, #0
10005dec:	21de      	movs	r1, #222	; 0xde
10005dee:	2201      	movs	r2, #1
10005df0:	f7fc fa08 	bl	10002204 <XMC_I2C_CH_MasterRepeatedStart>
//    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
    for(uint16_t count=0; count < 500; count++){}
10005df4:	230a      	movs	r3, #10
10005df6:	18fb      	adds	r3, r7, r3
10005df8:	2200      	movs	r2, #0
10005dfa:	801a      	strh	r2, [r3, #0]
10005dfc:	e006      	b.n	10005e0c <INFO_RTCOscillatorEnable+0xa8>
10005dfe:	230a      	movs	r3, #10
10005e00:	18fb      	adds	r3, r7, r3
10005e02:	881a      	ldrh	r2, [r3, #0]
10005e04:	230a      	movs	r3, #10
10005e06:	18fb      	adds	r3, r7, r3
10005e08:	3201      	adds	r2, #1
10005e0a:	801a      	strh	r2, [r3, #0]
10005e0c:	230a      	movs	r3, #10
10005e0e:	18fb      	adds	r3, r7, r3
10005e10:	881a      	ldrh	r2, [r3, #0]
10005e12:	23f4      	movs	r3, #244	; 0xf4
10005e14:	33ff      	adds	r3, #255	; 0xff
10005e16:	429a      	cmp	r2, r3
10005e18:	d9f1      	bls.n	10005dfe <INFO_RTCOscillatorEnable+0x9a>
    XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
10005e1a:	4a4a      	ldr	r2, [pc, #296]	; (10005f44 <INFO_RTCOscillatorEnable+0x1e0>)
10005e1c:	2380      	movs	r3, #128	; 0x80
10005e1e:	009b      	lsls	r3, r3, #2
10005e20:	1c10      	adds	r0, r2, #0
10005e22:	1c19      	adds	r1, r3, #0
10005e24:	f7ff fe1a 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

	/*							Send NACK											*/
    XMC_I2C_CH_MasterReceiveNack(XMC_USIC1_CH1);
10005e28:	4b46      	ldr	r3, [pc, #280]	; (10005f44 <INFO_RTCOscillatorEnable+0x1e0>)
10005e2a:	1c18      	adds	r0, r3, #0
10005e2c:	f7fc faac 	bl	10002388 <XMC_I2C_CH_MasterReceiveNack>
//    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & (XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
//	                              XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)) == 0U){/* wait for ACK */}
    for(uint16_t count=0; count < 500; count++){}
10005e30:	2308      	movs	r3, #8
10005e32:	18fb      	adds	r3, r7, r3
10005e34:	2200      	movs	r2, #0
10005e36:	801a      	strh	r2, [r3, #0]
10005e38:	e006      	b.n	10005e48 <INFO_RTCOscillatorEnable+0xe4>
10005e3a:	2308      	movs	r3, #8
10005e3c:	18fb      	adds	r3, r7, r3
10005e3e:	881a      	ldrh	r2, [r3, #0]
10005e40:	2308      	movs	r3, #8
10005e42:	18fb      	adds	r3, r7, r3
10005e44:	3201      	adds	r2, #1
10005e46:	801a      	strh	r2, [r3, #0]
10005e48:	2308      	movs	r3, #8
10005e4a:	18fb      	adds	r3, r7, r3
10005e4c:	881a      	ldrh	r2, [r3, #0]
10005e4e:	23f4      	movs	r3, #244	; 0xf4
10005e50:	33ff      	adds	r3, #255	; 0xff
10005e52:	429a      	cmp	r2, r3
10005e54:	d9f1      	bls.n	10005e3a <INFO_RTCOscillatorEnable+0xd6>
    XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
10005e56:	4a3b      	ldr	r2, [pc, #236]	; (10005f44 <INFO_RTCOscillatorEnable+0x1e0>)
10005e58:	23c0      	movs	r3, #192	; 0xc0
10005e5a:	021b      	lsls	r3, r3, #8
10005e5c:	1c10      	adds	r0, r2, #0
10005e5e:	1c19      	adds	r1, r3, #0
10005e60:	f7ff fdfc 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>
                                  XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);

    /*    						Load Register Information  								*/
    data     = XMC_I2C_CH_GetReceivedData(XMC_USIC1_CH1);
10005e64:	1c7c      	adds	r4, r7, #1
10005e66:	4b37      	ldr	r3, [pc, #220]	; (10005f44 <INFO_RTCOscillatorEnable+0x1e0>)
10005e68:	1c18      	adds	r0, r3, #0
10005e6a:	f7fc fab7 	bl	100023dc <XMC_I2C_CH_GetReceivedData>
10005e6e:	1c03      	adds	r3, r0, #0
10005e70:	7023      	strb	r3, [r4, #0]
    XMC_I2C_CH_MasterStop(XMC_USIC1_CH1);
10005e72:	4b34      	ldr	r3, [pc, #208]	; (10005f44 <INFO_RTCOscillatorEnable+0x1e0>)
10005e74:	1c18      	adds	r0, r3, #0
10005e76:	f7fc fa05 	bl	10002284 <XMC_I2C_CH_MasterStop>

    /* 							Enable ST Bit 										*/
    data	= data | 0x80;
10005e7a:	1c7b      	adds	r3, r7, #1
10005e7c:	1c7a      	adds	r2, r7, #1
10005e7e:	7812      	ldrb	r2, [r2, #0]
10005e80:	2180      	movs	r1, #128	; 0x80
10005e82:	4249      	negs	r1, r1
10005e84:	430a      	orrs	r2, r1
10005e86:	701a      	strb	r2, [r3, #0]

	/*    						Accessing RTCC Control Byte 						*/
	XMC_I2C_CH_MasterStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_WRITE);
10005e88:	4b2e      	ldr	r3, [pc, #184]	; (10005f44 <INFO_RTCOscillatorEnable+0x1e0>)
10005e8a:	1c18      	adds	r0, r3, #0
10005e8c:	21de      	movs	r1, #222	; 0xde
10005e8e:	2200      	movs	r2, #0
10005e90:	f7fc f978 	bl	10002184 <XMC_I2C_CH_MasterStart>
//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
	for(uint16_t count=0; count < 500; count++){}
10005e94:	1dbb      	adds	r3, r7, #6
10005e96:	2200      	movs	r2, #0
10005e98:	801a      	strh	r2, [r3, #0]
10005e9a:	e004      	b.n	10005ea6 <INFO_RTCOscillatorEnable+0x142>
10005e9c:	1dbb      	adds	r3, r7, #6
10005e9e:	881a      	ldrh	r2, [r3, #0]
10005ea0:	1dbb      	adds	r3, r7, #6
10005ea2:	3201      	adds	r2, #1
10005ea4:	801a      	strh	r2, [r3, #0]
10005ea6:	1dbb      	adds	r3, r7, #6
10005ea8:	881a      	ldrh	r2, [r3, #0]
10005eaa:	23f4      	movs	r3, #244	; 0xf4
10005eac:	33ff      	adds	r3, #255	; 0xff
10005eae:	429a      	cmp	r2, r3
10005eb0:	d9f4      	bls.n	10005e9c <INFO_RTCOscillatorEnable+0x138>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
10005eb2:	4a24      	ldr	r2, [pc, #144]	; (10005f44 <INFO_RTCOscillatorEnable+0x1e0>)
10005eb4:	2380      	movs	r3, #128	; 0x80
10005eb6:	009b      	lsls	r3, r3, #2
10005eb8:	1c10      	adds	r0, r2, #0
10005eba:	1c19      	adds	r1, r3, #0
10005ebc:	f7ff fdce 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

    /*    						Write RTC Second Address Byte  					*/
    XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, RTCSECOND);
10005ec0:	4b20      	ldr	r3, [pc, #128]	; (10005f44 <INFO_RTCOscillatorEnable+0x1e0>)
10005ec2:	1c18      	adds	r0, r3, #0
10005ec4:	2100      	movs	r1, #0
10005ec6:	f7fc fa07 	bl	100022d8 <XMC_I2C_CH_MasterTransmit>
//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
    for(uint16_t count=0; count < 500; count++){}
10005eca:	1d3b      	adds	r3, r7, #4
10005ecc:	2200      	movs	r2, #0
10005ece:	801a      	strh	r2, [r3, #0]
10005ed0:	e004      	b.n	10005edc <INFO_RTCOscillatorEnable+0x178>
10005ed2:	1d3b      	adds	r3, r7, #4
10005ed4:	881a      	ldrh	r2, [r3, #0]
10005ed6:	1d3b      	adds	r3, r7, #4
10005ed8:	3201      	adds	r2, #1
10005eda:	801a      	strh	r2, [r3, #0]
10005edc:	1d3b      	adds	r3, r7, #4
10005ede:	881a      	ldrh	r2, [r3, #0]
10005ee0:	23f4      	movs	r3, #244	; 0xf4
10005ee2:	33ff      	adds	r3, #255	; 0xff
10005ee4:	429a      	cmp	r2, r3
10005ee6:	d9f4      	bls.n	10005ed2 <INFO_RTCOscillatorEnable+0x16e>
    XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
10005ee8:	4a16      	ldr	r2, [pc, #88]	; (10005f44 <INFO_RTCOscillatorEnable+0x1e0>)
10005eea:	2380      	movs	r3, #128	; 0x80
10005eec:	009b      	lsls	r3, r3, #2
10005eee:	1c10      	adds	r0, r2, #0
10005ef0:	1c19      	adds	r1, r3, #0
10005ef2:	f7ff fdb3 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

	/*	 					   Write value at Second Address Byte 					*/
	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, data);
10005ef6:	4a13      	ldr	r2, [pc, #76]	; (10005f44 <INFO_RTCOscillatorEnable+0x1e0>)
10005ef8:	1c7b      	adds	r3, r7, #1
10005efa:	781b      	ldrb	r3, [r3, #0]
10005efc:	1c10      	adds	r0, r2, #0
10005efe:	1c19      	adds	r1, r3, #0
10005f00:	f7fc f9ea 	bl	100022d8 <XMC_I2C_CH_MasterTransmit>
//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
	for(uint16_t count=0; count < 500; count++){}
10005f04:	1cbb      	adds	r3, r7, #2
10005f06:	2200      	movs	r2, #0
10005f08:	801a      	strh	r2, [r3, #0]
10005f0a:	e004      	b.n	10005f16 <INFO_RTCOscillatorEnable+0x1b2>
10005f0c:	1cbb      	adds	r3, r7, #2
10005f0e:	881a      	ldrh	r2, [r3, #0]
10005f10:	1cbb      	adds	r3, r7, #2
10005f12:	3201      	adds	r2, #1
10005f14:	801a      	strh	r2, [r3, #0]
10005f16:	1cbb      	adds	r3, r7, #2
10005f18:	881a      	ldrh	r2, [r3, #0]
10005f1a:	23f4      	movs	r3, #244	; 0xf4
10005f1c:	33ff      	adds	r3, #255	; 0xff
10005f1e:	429a      	cmp	r2, r3
10005f20:	d9f4      	bls.n	10005f0c <INFO_RTCOscillatorEnable+0x1a8>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
10005f22:	4a08      	ldr	r2, [pc, #32]	; (10005f44 <INFO_RTCOscillatorEnable+0x1e0>)
10005f24:	2380      	movs	r3, #128	; 0x80
10005f26:	009b      	lsls	r3, r3, #2
10005f28:	1c10      	adds	r0, r2, #0
10005f2a:	1c19      	adds	r1, r3, #0
10005f2c:	f7ff fd96 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

	XMC_I2C_CH_MasterStop(XMC_USIC1_CH1);
10005f30:	4b04      	ldr	r3, [pc, #16]	; (10005f44 <INFO_RTCOscillatorEnable+0x1e0>)
10005f32:	1c18      	adds	r0, r3, #0
10005f34:	f7fc f9a6 	bl	10002284 <XMC_I2C_CH_MasterStop>

	return data;
10005f38:	1c7b      	adds	r3, r7, #1
10005f3a:	781b      	ldrb	r3, [r3, #0]

}
10005f3c:	1c18      	adds	r0, r3, #0
10005f3e:	46bd      	mov	sp, r7
10005f40:	b005      	add	sp, #20
10005f42:	bd90      	pop	{r4, r7, pc}
10005f44:	48004200 	.word	0x48004200

10005f48 <INFO_RTCTimeInit>:

	XMC_I2C_CH_MasterStop(XMC_USIC1_CH1);
}

void INFO_RTCTimeInit(RTC_TIME_PARAM_t rtc_time)
{
10005f48:	b580      	push	{r7, lr}
10005f4a:	b086      	sub	sp, #24
10005f4c:	af00      	add	r7, sp, #0
10005f4e:	1d3b      	adds	r3, r7, #4
10005f50:	6018      	str	r0, [r3, #0]
	static uint8_t tens;
	static uint8_t ones;

	/*    						Accessing RTCC Control Byte 						*/
	XMC_I2C_CH_MasterStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_WRITE);
10005f52:	4b93      	ldr	r3, [pc, #588]	; (100061a0 <INFO_RTCTimeInit+0x258>)
10005f54:	1c18      	adds	r0, r3, #0
10005f56:	21de      	movs	r1, #222	; 0xde
10005f58:	2200      	movs	r2, #0
10005f5a:	f7fc f913 	bl	10002184 <XMC_I2C_CH_MasterStart>

//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
	for(uint16_t count=0; count < 500; count++){}
10005f5e:	2316      	movs	r3, #22
10005f60:	18fb      	adds	r3, r7, r3
10005f62:	2200      	movs	r2, #0
10005f64:	801a      	strh	r2, [r3, #0]
10005f66:	e006      	b.n	10005f76 <INFO_RTCTimeInit+0x2e>
10005f68:	2316      	movs	r3, #22
10005f6a:	18fb      	adds	r3, r7, r3
10005f6c:	881a      	ldrh	r2, [r3, #0]
10005f6e:	2316      	movs	r3, #22
10005f70:	18fb      	adds	r3, r7, r3
10005f72:	3201      	adds	r2, #1
10005f74:	801a      	strh	r2, [r3, #0]
10005f76:	2316      	movs	r3, #22
10005f78:	18fb      	adds	r3, r7, r3
10005f7a:	881a      	ldrh	r2, [r3, #0]
10005f7c:	23f4      	movs	r3, #244	; 0xf4
10005f7e:	33ff      	adds	r3, #255	; 0xff
10005f80:	429a      	cmp	r2, r3
10005f82:	d9f1      	bls.n	10005f68 <INFO_RTCTimeInit+0x20>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
10005f84:	4a86      	ldr	r2, [pc, #536]	; (100061a0 <INFO_RTCTimeInit+0x258>)
10005f86:	2380      	movs	r3, #128	; 0x80
10005f88:	009b      	lsls	r3, r3, #2
10005f8a:	1c10      	adds	r0, r2, #0
10005f8c:	1c19      	adds	r1, r3, #0
10005f8e:	f7ff fd65 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

  	/*    						Write Seconds Address Byte   					*/
	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, RTCSECOND);
10005f92:	4b83      	ldr	r3, [pc, #524]	; (100061a0 <INFO_RTCTimeInit+0x258>)
10005f94:	1c18      	adds	r0, r3, #0
10005f96:	2100      	movs	r1, #0
10005f98:	f7fc f99e 	bl	100022d8 <XMC_I2C_CH_MasterTransmit>
 	ones	= rtc_time.second % 10;				// preparing 'seconds' value while bus is transmitting RTCSEC address value
10005f9c:	1d3b      	adds	r3, r7, #4
10005f9e:	789b      	ldrb	r3, [r3, #2]
10005fa0:	1c18      	adds	r0, r3, #0
10005fa2:	210a      	movs	r1, #10
10005fa4:	f7fc fa62 	bl	1000246c <__aeabi_uidivmod>
10005fa8:	1c0b      	adds	r3, r1, #0
10005faa:	b2da      	uxtb	r2, r3
10005fac:	4b7d      	ldr	r3, [pc, #500]	; (100061a4 <INFO_RTCTimeInit+0x25c>)
10005fae:	701a      	strb	r2, [r3, #0]
	tens	= rtc_time.second / 10;
10005fb0:	1d3b      	adds	r3, r7, #4
10005fb2:	789b      	ldrb	r3, [r3, #2]
10005fb4:	1c18      	adds	r0, r3, #0
10005fb6:	210a      	movs	r1, #10
10005fb8:	f7fc fa30 	bl	1000241c <__aeabi_uidiv>
10005fbc:	1c03      	adds	r3, r0, #0
10005fbe:	b2da      	uxtb	r2, r3
10005fc0:	4b79      	ldr	r3, [pc, #484]	; (100061a8 <INFO_RTCTimeInit+0x260>)
10005fc2:	701a      	strb	r2, [r3, #0]
	rtc_time.second = (tens << 4) | (0x0F & ones);
10005fc4:	4b78      	ldr	r3, [pc, #480]	; (100061a8 <INFO_RTCTimeInit+0x260>)
10005fc6:	781b      	ldrb	r3, [r3, #0]
10005fc8:	011b      	lsls	r3, r3, #4
10005fca:	b2da      	uxtb	r2, r3
10005fcc:	4b75      	ldr	r3, [pc, #468]	; (100061a4 <INFO_RTCTimeInit+0x25c>)
10005fce:	781b      	ldrb	r3, [r3, #0]
10005fd0:	b2db      	uxtb	r3, r3
10005fd2:	1c19      	adds	r1, r3, #0
10005fd4:	230f      	movs	r3, #15
10005fd6:	400b      	ands	r3, r1
10005fd8:	b2db      	uxtb	r3, r3
10005fda:	4313      	orrs	r3, r2
10005fdc:	b2db      	uxtb	r3, r3
10005fde:	b2da      	uxtb	r2, r3
10005fe0:	1d3b      	adds	r3, r7, #4
10005fe2:	709a      	strb	r2, [r3, #2]

	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
10005fe4:	46c0      	nop			; (mov r8, r8)
10005fe6:	4b6e      	ldr	r3, [pc, #440]	; (100061a0 <INFO_RTCTimeInit+0x258>)
10005fe8:	1c18      	adds	r0, r3, #0
10005fea:	f7ff fd2d 	bl	10005a48 <XMC_I2C_CH_GetStatusFlag>
10005fee:	1c02      	adds	r2, r0, #0
10005ff0:	2380      	movs	r3, #128	; 0x80
10005ff2:	009b      	lsls	r3, r3, #2
10005ff4:	4013      	ands	r3, r2
10005ff6:	d0f6      	beq.n	10005fe6 <INFO_RTCTimeInit+0x9e>
	for(uint16_t count=0; count < 500; count++){}
10005ff8:	2314      	movs	r3, #20
10005ffa:	18fb      	adds	r3, r7, r3
10005ffc:	2200      	movs	r2, #0
10005ffe:	801a      	strh	r2, [r3, #0]
10006000:	e006      	b.n	10006010 <INFO_RTCTimeInit+0xc8>
10006002:	2314      	movs	r3, #20
10006004:	18fb      	adds	r3, r7, r3
10006006:	881a      	ldrh	r2, [r3, #0]
10006008:	2314      	movs	r3, #20
1000600a:	18fb      	adds	r3, r7, r3
1000600c:	3201      	adds	r2, #1
1000600e:	801a      	strh	r2, [r3, #0]
10006010:	2314      	movs	r3, #20
10006012:	18fb      	adds	r3, r7, r3
10006014:	881a      	ldrh	r2, [r3, #0]
10006016:	23f4      	movs	r3, #244	; 0xf4
10006018:	33ff      	adds	r3, #255	; 0xff
1000601a:	429a      	cmp	r2, r3
1000601c:	d9f1      	bls.n	10006002 <INFO_RTCTimeInit+0xba>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1000601e:	4a60      	ldr	r2, [pc, #384]	; (100061a0 <INFO_RTCTimeInit+0x258>)
10006020:	2380      	movs	r3, #128	; 0x80
10006022:	009b      	lsls	r3, r3, #2
10006024:	1c10      	adds	r0, r2, #0
10006026:	1c19      	adds	r1, r3, #0
10006028:	f7ff fd18 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

	/*	 					   Write Data into Seconds Byte						*/
	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, rtc_time.second | 0x80);	// '1' in MSB is used to keep ST bit active
1000602c:	1d3b      	adds	r3, r7, #4
1000602e:	789b      	ldrb	r3, [r3, #2]
10006030:	2280      	movs	r2, #128	; 0x80
10006032:	4252      	negs	r2, r2
10006034:	4313      	orrs	r3, r2
10006036:	b2db      	uxtb	r3, r3
10006038:	4a59      	ldr	r2, [pc, #356]	; (100061a0 <INFO_RTCTimeInit+0x258>)
1000603a:	1c10      	adds	r0, r2, #0
1000603c:	1c19      	adds	r1, r3, #0
1000603e:	f7fc f94b 	bl	100022d8 <XMC_I2C_CH_MasterTransmit>
	ones 		= rtc_time.minute % 10;		// preparing 'minutes' value while bus is transmitting 'seconds' value
10006042:	1d3b      	adds	r3, r7, #4
10006044:	785b      	ldrb	r3, [r3, #1]
10006046:	1c18      	adds	r0, r3, #0
10006048:	210a      	movs	r1, #10
1000604a:	f7fc fa0f 	bl	1000246c <__aeabi_uidivmod>
1000604e:	1c0b      	adds	r3, r1, #0
10006050:	b2da      	uxtb	r2, r3
10006052:	4b54      	ldr	r3, [pc, #336]	; (100061a4 <INFO_RTCTimeInit+0x25c>)
10006054:	701a      	strb	r2, [r3, #0]
	tens 		= rtc_time.minute / 10;
10006056:	1d3b      	adds	r3, r7, #4
10006058:	785b      	ldrb	r3, [r3, #1]
1000605a:	1c18      	adds	r0, r3, #0
1000605c:	210a      	movs	r1, #10
1000605e:	f7fc f9dd 	bl	1000241c <__aeabi_uidiv>
10006062:	1c03      	adds	r3, r0, #0
10006064:	b2da      	uxtb	r2, r3
10006066:	4b50      	ldr	r3, [pc, #320]	; (100061a8 <INFO_RTCTimeInit+0x260>)
10006068:	701a      	strb	r2, [r3, #0]
	rtc_time.minute = (tens << 4) | (0x0F & ones);
1000606a:	4b4f      	ldr	r3, [pc, #316]	; (100061a8 <INFO_RTCTimeInit+0x260>)
1000606c:	781b      	ldrb	r3, [r3, #0]
1000606e:	011b      	lsls	r3, r3, #4
10006070:	b2da      	uxtb	r2, r3
10006072:	4b4c      	ldr	r3, [pc, #304]	; (100061a4 <INFO_RTCTimeInit+0x25c>)
10006074:	781b      	ldrb	r3, [r3, #0]
10006076:	b2db      	uxtb	r3, r3
10006078:	1c19      	adds	r1, r3, #0
1000607a:	230f      	movs	r3, #15
1000607c:	400b      	ands	r3, r1
1000607e:	b2db      	uxtb	r3, r3
10006080:	4313      	orrs	r3, r2
10006082:	b2db      	uxtb	r3, r3
10006084:	b2da      	uxtb	r2, r3
10006086:	1d3b      	adds	r3, r7, #4
10006088:	705a      	strb	r2, [r3, #1]

//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
	for(uint16_t count=0; count < 500; count++){}
1000608a:	2312      	movs	r3, #18
1000608c:	18fb      	adds	r3, r7, r3
1000608e:	2200      	movs	r2, #0
10006090:	801a      	strh	r2, [r3, #0]
10006092:	e006      	b.n	100060a2 <INFO_RTCTimeInit+0x15a>
10006094:	2312      	movs	r3, #18
10006096:	18fb      	adds	r3, r7, r3
10006098:	881a      	ldrh	r2, [r3, #0]
1000609a:	2312      	movs	r3, #18
1000609c:	18fb      	adds	r3, r7, r3
1000609e:	3201      	adds	r2, #1
100060a0:	801a      	strh	r2, [r3, #0]
100060a2:	2312      	movs	r3, #18
100060a4:	18fb      	adds	r3, r7, r3
100060a6:	881a      	ldrh	r2, [r3, #0]
100060a8:	23f4      	movs	r3, #244	; 0xf4
100060aa:	33ff      	adds	r3, #255	; 0xff
100060ac:	429a      	cmp	r2, r3
100060ae:	d9f1      	bls.n	10006094 <INFO_RTCTimeInit+0x14c>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
100060b0:	4a3b      	ldr	r2, [pc, #236]	; (100061a0 <INFO_RTCTimeInit+0x258>)
100060b2:	2380      	movs	r3, #128	; 0x80
100060b4:	009b      	lsls	r3, r3, #2
100060b6:	1c10      	adds	r0, r2, #0
100060b8:	1c19      	adds	r1, r3, #0
100060ba:	f7ff fccf 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

	/*	 					   Write Data into Minutes Byte						*/
	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, rtc_time.minute);
100060be:	1d3b      	adds	r3, r7, #4
100060c0:	785b      	ldrb	r3, [r3, #1]
100060c2:	4a37      	ldr	r2, [pc, #220]	; (100061a0 <INFO_RTCTimeInit+0x258>)
100060c4:	1c10      	adds	r0, r2, #0
100060c6:	1c19      	adds	r1, r3, #0
100060c8:	f7fc f906 	bl	100022d8 <XMC_I2C_CH_MasterTransmit>
	ones 		= rtc_time.hour % 10;				// preparing 'hour' value while bus is transmitting 'minutes' value
100060cc:	1d3b      	adds	r3, r7, #4
100060ce:	781b      	ldrb	r3, [r3, #0]
100060d0:	1c18      	adds	r0, r3, #0
100060d2:	210a      	movs	r1, #10
100060d4:	f7fc f9ca 	bl	1000246c <__aeabi_uidivmod>
100060d8:	1c0b      	adds	r3, r1, #0
100060da:	b2da      	uxtb	r2, r3
100060dc:	4b31      	ldr	r3, [pc, #196]	; (100061a4 <INFO_RTCTimeInit+0x25c>)
100060de:	701a      	strb	r2, [r3, #0]
	tens 		= rtc_time.hour / 10;
100060e0:	1d3b      	adds	r3, r7, #4
100060e2:	781b      	ldrb	r3, [r3, #0]
100060e4:	1c18      	adds	r0, r3, #0
100060e6:	210a      	movs	r1, #10
100060e8:	f7fc f998 	bl	1000241c <__aeabi_uidiv>
100060ec:	1c03      	adds	r3, r0, #0
100060ee:	b2da      	uxtb	r2, r3
100060f0:	4b2d      	ldr	r3, [pc, #180]	; (100061a8 <INFO_RTCTimeInit+0x260>)
100060f2:	701a      	strb	r2, [r3, #0]
	rtc_time.hour = (tens << 4) | (0x0F & ones);
100060f4:	4b2c      	ldr	r3, [pc, #176]	; (100061a8 <INFO_RTCTimeInit+0x260>)
100060f6:	781b      	ldrb	r3, [r3, #0]
100060f8:	011b      	lsls	r3, r3, #4
100060fa:	b2da      	uxtb	r2, r3
100060fc:	4b29      	ldr	r3, [pc, #164]	; (100061a4 <INFO_RTCTimeInit+0x25c>)
100060fe:	781b      	ldrb	r3, [r3, #0]
10006100:	b2db      	uxtb	r3, r3
10006102:	1c19      	adds	r1, r3, #0
10006104:	230f      	movs	r3, #15
10006106:	400b      	ands	r3, r1
10006108:	b2db      	uxtb	r3, r3
1000610a:	4313      	orrs	r3, r2
1000610c:	b2db      	uxtb	r3, r3
1000610e:	b2da      	uxtb	r2, r3
10006110:	1d3b      	adds	r3, r7, #4
10006112:	701a      	strb	r2, [r3, #0]

//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
	for(uint16_t count=0; count < 500; count++){}
10006114:	2310      	movs	r3, #16
10006116:	18fb      	adds	r3, r7, r3
10006118:	2200      	movs	r2, #0
1000611a:	801a      	strh	r2, [r3, #0]
1000611c:	e006      	b.n	1000612c <INFO_RTCTimeInit+0x1e4>
1000611e:	2310      	movs	r3, #16
10006120:	18fb      	adds	r3, r7, r3
10006122:	881a      	ldrh	r2, [r3, #0]
10006124:	2310      	movs	r3, #16
10006126:	18fb      	adds	r3, r7, r3
10006128:	3201      	adds	r2, #1
1000612a:	801a      	strh	r2, [r3, #0]
1000612c:	2310      	movs	r3, #16
1000612e:	18fb      	adds	r3, r7, r3
10006130:	881a      	ldrh	r2, [r3, #0]
10006132:	23f4      	movs	r3, #244	; 0xf4
10006134:	33ff      	adds	r3, #255	; 0xff
10006136:	429a      	cmp	r2, r3
10006138:	d9f1      	bls.n	1000611e <INFO_RTCTimeInit+0x1d6>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1000613a:	4a19      	ldr	r2, [pc, #100]	; (100061a0 <INFO_RTCTimeInit+0x258>)
1000613c:	2380      	movs	r3, #128	; 0x80
1000613e:	009b      	lsls	r3, r3, #2
10006140:	1c10      	adds	r0, r2, #0
10006142:	1c19      	adds	r1, r3, #0
10006144:	f7ff fc8a 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

	/*	 						Write Data into Hour Byte						*/
	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, rtc_time.hour & ~0x40);		// is used for 24H mode
10006148:	1d3b      	adds	r3, r7, #4
1000614a:	781b      	ldrb	r3, [r3, #0]
1000614c:	2240      	movs	r2, #64	; 0x40
1000614e:	4393      	bics	r3, r2
10006150:	b2db      	uxtb	r3, r3
10006152:	4a13      	ldr	r2, [pc, #76]	; (100061a0 <INFO_RTCTimeInit+0x258>)
10006154:	1c10      	adds	r0, r2, #0
10006156:	1c19      	adds	r1, r3, #0
10006158:	f7fc f8be 	bl	100022d8 <XMC_I2C_CH_MasterTransmit>

//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
	for(uint16_t count=0; count < 500; count++){}
1000615c:	230e      	movs	r3, #14
1000615e:	18fb      	adds	r3, r7, r3
10006160:	2200      	movs	r2, #0
10006162:	801a      	strh	r2, [r3, #0]
10006164:	e006      	b.n	10006174 <INFO_RTCTimeInit+0x22c>
10006166:	230e      	movs	r3, #14
10006168:	18fb      	adds	r3, r7, r3
1000616a:	881a      	ldrh	r2, [r3, #0]
1000616c:	230e      	movs	r3, #14
1000616e:	18fb      	adds	r3, r7, r3
10006170:	3201      	adds	r2, #1
10006172:	801a      	strh	r2, [r3, #0]
10006174:	230e      	movs	r3, #14
10006176:	18fb      	adds	r3, r7, r3
10006178:	881a      	ldrh	r2, [r3, #0]
1000617a:	23f4      	movs	r3, #244	; 0xf4
1000617c:	33ff      	adds	r3, #255	; 0xff
1000617e:	429a      	cmp	r2, r3
10006180:	d9f1      	bls.n	10006166 <INFO_RTCTimeInit+0x21e>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
10006182:	4a07      	ldr	r2, [pc, #28]	; (100061a0 <INFO_RTCTimeInit+0x258>)
10006184:	2380      	movs	r3, #128	; 0x80
10006186:	009b      	lsls	r3, r3, #2
10006188:	1c10      	adds	r0, r2, #0
1000618a:	1c19      	adds	r1, r3, #0
1000618c:	f7ff fc66 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

  	XMC_I2C_CH_MasterStop(XMC_USIC1_CH1);
10006190:	4b03      	ldr	r3, [pc, #12]	; (100061a0 <INFO_RTCTimeInit+0x258>)
10006192:	1c18      	adds	r0, r3, #0
10006194:	f7fc f876 	bl	10002284 <XMC_I2C_CH_MasterStop>
}
10006198:	46bd      	mov	sp, r7
1000619a:	b006      	add	sp, #24
1000619c:	bd80      	pop	{r7, pc}
1000619e:	46c0      	nop			; (mov r8, r8)
100061a0:	48004200 	.word	0x48004200
100061a4:	20000a49 	.word	0x20000a49
100061a8:	20000a4a 	.word	0x20000a4a

100061ac <INFO_RTCDateInit>:
void INFO_RTCDateInit(RTC_DATE_PARAM_t rtc_date)
{
100061ac:	b580      	push	{r7, lr}
100061ae:	b086      	sub	sp, #24
100061b0:	af00      	add	r7, sp, #0
100061b2:	1d3b      	adds	r3, r7, #4
100061b4:	6018      	str	r0, [r3, #0]
	static uint8_t tens;
	static uint8_t ones;

	/*    						Accessing RTCC Control Byte 						*/
	XMC_I2C_CH_MasterStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_WRITE);
100061b6:	4b91      	ldr	r3, [pc, #580]	; (100063fc <INFO_RTCDateInit+0x250>)
100061b8:	1c18      	adds	r0, r3, #0
100061ba:	21de      	movs	r1, #222	; 0xde
100061bc:	2200      	movs	r2, #0
100061be:	f7fb ffe1 	bl	10002184 <XMC_I2C_CH_MasterStart>

//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
	for(uint16_t count=0; count < 500; count++){}
100061c2:	2316      	movs	r3, #22
100061c4:	18fb      	adds	r3, r7, r3
100061c6:	2200      	movs	r2, #0
100061c8:	801a      	strh	r2, [r3, #0]
100061ca:	e006      	b.n	100061da <INFO_RTCDateInit+0x2e>
100061cc:	2316      	movs	r3, #22
100061ce:	18fb      	adds	r3, r7, r3
100061d0:	881a      	ldrh	r2, [r3, #0]
100061d2:	2316      	movs	r3, #22
100061d4:	18fb      	adds	r3, r7, r3
100061d6:	3201      	adds	r2, #1
100061d8:	801a      	strh	r2, [r3, #0]
100061da:	2316      	movs	r3, #22
100061dc:	18fb      	adds	r3, r7, r3
100061de:	881a      	ldrh	r2, [r3, #0]
100061e0:	23f4      	movs	r3, #244	; 0xf4
100061e2:	33ff      	adds	r3, #255	; 0xff
100061e4:	429a      	cmp	r2, r3
100061e6:	d9f1      	bls.n	100061cc <INFO_RTCDateInit+0x20>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
100061e8:	4a84      	ldr	r2, [pc, #528]	; (100063fc <INFO_RTCDateInit+0x250>)
100061ea:	2380      	movs	r3, #128	; 0x80
100061ec:	009b      	lsls	r3, r3, #2
100061ee:	1c10      	adds	r0, r2, #0
100061f0:	1c19      	adds	r1, r3, #0
100061f2:	f7ff fc33 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

  	/*    						Write Date Address Byte   					*/
	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, RTCDATE);
100061f6:	4b81      	ldr	r3, [pc, #516]	; (100063fc <INFO_RTCDateInit+0x250>)
100061f8:	1c18      	adds	r0, r3, #0
100061fa:	2104      	movs	r1, #4
100061fc:	f7fc f86c 	bl	100022d8 <XMC_I2C_CH_MasterTransmit>
 	ones	= rtc_date.date % 10;
10006200:	1d3b      	adds	r3, r7, #4
10006202:	78db      	ldrb	r3, [r3, #3]
10006204:	1c18      	adds	r0, r3, #0
10006206:	210a      	movs	r1, #10
10006208:	f7fc f930 	bl	1000246c <__aeabi_uidivmod>
1000620c:	1c0b      	adds	r3, r1, #0
1000620e:	b2da      	uxtb	r2, r3
10006210:	4b7b      	ldr	r3, [pc, #492]	; (10006400 <INFO_RTCDateInit+0x254>)
10006212:	701a      	strb	r2, [r3, #0]
	tens	= rtc_date.date / 10;
10006214:	1d3b      	adds	r3, r7, #4
10006216:	78db      	ldrb	r3, [r3, #3]
10006218:	1c18      	adds	r0, r3, #0
1000621a:	210a      	movs	r1, #10
1000621c:	f7fc f8fe 	bl	1000241c <__aeabi_uidiv>
10006220:	1c03      	adds	r3, r0, #0
10006222:	b2da      	uxtb	r2, r3
10006224:	4b77      	ldr	r3, [pc, #476]	; (10006404 <INFO_RTCDateInit+0x258>)
10006226:	701a      	strb	r2, [r3, #0]
	rtc_date.date = (tens << 4) | (0x0F & ones);
10006228:	4b76      	ldr	r3, [pc, #472]	; (10006404 <INFO_RTCDateInit+0x258>)
1000622a:	781b      	ldrb	r3, [r3, #0]
1000622c:	011b      	lsls	r3, r3, #4
1000622e:	b2da      	uxtb	r2, r3
10006230:	4b73      	ldr	r3, [pc, #460]	; (10006400 <INFO_RTCDateInit+0x254>)
10006232:	781b      	ldrb	r3, [r3, #0]
10006234:	b2db      	uxtb	r3, r3
10006236:	1c19      	adds	r1, r3, #0
10006238:	230f      	movs	r3, #15
1000623a:	400b      	ands	r3, r1
1000623c:	b2db      	uxtb	r3, r3
1000623e:	4313      	orrs	r3, r2
10006240:	b2db      	uxtb	r3, r3
10006242:	b2da      	uxtb	r2, r3
10006244:	1d3b      	adds	r3, r7, #4
10006246:	70da      	strb	r2, [r3, #3]

//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
	for(uint16_t count=0; count < 500; count++){}
10006248:	2314      	movs	r3, #20
1000624a:	18fb      	adds	r3, r7, r3
1000624c:	2200      	movs	r2, #0
1000624e:	801a      	strh	r2, [r3, #0]
10006250:	e006      	b.n	10006260 <INFO_RTCDateInit+0xb4>
10006252:	2314      	movs	r3, #20
10006254:	18fb      	adds	r3, r7, r3
10006256:	881a      	ldrh	r2, [r3, #0]
10006258:	2314      	movs	r3, #20
1000625a:	18fb      	adds	r3, r7, r3
1000625c:	3201      	adds	r2, #1
1000625e:	801a      	strh	r2, [r3, #0]
10006260:	2314      	movs	r3, #20
10006262:	18fb      	adds	r3, r7, r3
10006264:	881a      	ldrh	r2, [r3, #0]
10006266:	23f4      	movs	r3, #244	; 0xf4
10006268:	33ff      	adds	r3, #255	; 0xff
1000626a:	429a      	cmp	r2, r3
1000626c:	d9f1      	bls.n	10006252 <INFO_RTCDateInit+0xa6>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1000626e:	4a63      	ldr	r2, [pc, #396]	; (100063fc <INFO_RTCDateInit+0x250>)
10006270:	2380      	movs	r3, #128	; 0x80
10006272:	009b      	lsls	r3, r3, #2
10006274:	1c10      	adds	r0, r2, #0
10006276:	1c19      	adds	r1, r3, #0
10006278:	f7ff fbf0 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

	/*	 					   Write Data into Date Byte						*/
	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, rtc_date.date);
1000627c:	1d3b      	adds	r3, r7, #4
1000627e:	78db      	ldrb	r3, [r3, #3]
10006280:	4a5e      	ldr	r2, [pc, #376]	; (100063fc <INFO_RTCDateInit+0x250>)
10006282:	1c10      	adds	r0, r2, #0
10006284:	1c19      	adds	r1, r3, #0
10006286:	f7fc f827 	bl	100022d8 <XMC_I2C_CH_MasterTransmit>
	ones 		= rtc_date.month % 10;
1000628a:	1d3b      	adds	r3, r7, #4
1000628c:	789b      	ldrb	r3, [r3, #2]
1000628e:	1c18      	adds	r0, r3, #0
10006290:	210a      	movs	r1, #10
10006292:	f7fc f8eb 	bl	1000246c <__aeabi_uidivmod>
10006296:	1c0b      	adds	r3, r1, #0
10006298:	b2da      	uxtb	r2, r3
1000629a:	4b59      	ldr	r3, [pc, #356]	; (10006400 <INFO_RTCDateInit+0x254>)
1000629c:	701a      	strb	r2, [r3, #0]
	tens 		= rtc_date.month / 10;
1000629e:	1d3b      	adds	r3, r7, #4
100062a0:	789b      	ldrb	r3, [r3, #2]
100062a2:	1c18      	adds	r0, r3, #0
100062a4:	210a      	movs	r1, #10
100062a6:	f7fc f8b9 	bl	1000241c <__aeabi_uidiv>
100062aa:	1c03      	adds	r3, r0, #0
100062ac:	b2da      	uxtb	r2, r3
100062ae:	4b55      	ldr	r3, [pc, #340]	; (10006404 <INFO_RTCDateInit+0x258>)
100062b0:	701a      	strb	r2, [r3, #0]
	rtc_date.month = (tens << 4) | (0x0F & ones);
100062b2:	4b54      	ldr	r3, [pc, #336]	; (10006404 <INFO_RTCDateInit+0x258>)
100062b4:	781b      	ldrb	r3, [r3, #0]
100062b6:	011b      	lsls	r3, r3, #4
100062b8:	b2da      	uxtb	r2, r3
100062ba:	4b51      	ldr	r3, [pc, #324]	; (10006400 <INFO_RTCDateInit+0x254>)
100062bc:	781b      	ldrb	r3, [r3, #0]
100062be:	b2db      	uxtb	r3, r3
100062c0:	1c19      	adds	r1, r3, #0
100062c2:	230f      	movs	r3, #15
100062c4:	400b      	ands	r3, r1
100062c6:	b2db      	uxtb	r3, r3
100062c8:	4313      	orrs	r3, r2
100062ca:	b2db      	uxtb	r3, r3
100062cc:	b2da      	uxtb	r2, r3
100062ce:	1d3b      	adds	r3, r7, #4
100062d0:	709a      	strb	r2, [r3, #2]

//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
	for(uint16_t count=0; count < 500; count++){}
100062d2:	2312      	movs	r3, #18
100062d4:	18fb      	adds	r3, r7, r3
100062d6:	2200      	movs	r2, #0
100062d8:	801a      	strh	r2, [r3, #0]
100062da:	e006      	b.n	100062ea <INFO_RTCDateInit+0x13e>
100062dc:	2312      	movs	r3, #18
100062de:	18fb      	adds	r3, r7, r3
100062e0:	881a      	ldrh	r2, [r3, #0]
100062e2:	2312      	movs	r3, #18
100062e4:	18fb      	adds	r3, r7, r3
100062e6:	3201      	adds	r2, #1
100062e8:	801a      	strh	r2, [r3, #0]
100062ea:	2312      	movs	r3, #18
100062ec:	18fb      	adds	r3, r7, r3
100062ee:	881a      	ldrh	r2, [r3, #0]
100062f0:	23f4      	movs	r3, #244	; 0xf4
100062f2:	33ff      	adds	r3, #255	; 0xff
100062f4:	429a      	cmp	r2, r3
100062f6:	d9f1      	bls.n	100062dc <INFO_RTCDateInit+0x130>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
100062f8:	4a40      	ldr	r2, [pc, #256]	; (100063fc <INFO_RTCDateInit+0x250>)
100062fa:	2380      	movs	r3, #128	; 0x80
100062fc:	009b      	lsls	r3, r3, #2
100062fe:	1c10      	adds	r0, r2, #0
10006300:	1c19      	adds	r1, r3, #0
10006302:	f7ff fbab 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

	/*	 					   Write Data into Month Byte						*/
	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, rtc_date.month);
10006306:	1d3b      	adds	r3, r7, #4
10006308:	789b      	ldrb	r3, [r3, #2]
1000630a:	4a3c      	ldr	r2, [pc, #240]	; (100063fc <INFO_RTCDateInit+0x250>)
1000630c:	1c10      	adds	r0, r2, #0
1000630e:	1c19      	adds	r1, r3, #0
10006310:	f7fb ffe2 	bl	100022d8 <XMC_I2C_CH_MasterTransmit>
	ones 		= rtc_date.year % 10;
10006314:	1d3b      	adds	r3, r7, #4
10006316:	881b      	ldrh	r3, [r3, #0]
10006318:	1c18      	adds	r0, r3, #0
1000631a:	210a      	movs	r1, #10
1000631c:	f7fc f8a6 	bl	1000246c <__aeabi_uidivmod>
10006320:	1c0b      	adds	r3, r1, #0
10006322:	b29b      	uxth	r3, r3
10006324:	b2da      	uxtb	r2, r3
10006326:	4b36      	ldr	r3, [pc, #216]	; (10006400 <INFO_RTCDateInit+0x254>)
10006328:	701a      	strb	r2, [r3, #0]
	tens 		= rtc_date.year / 10;
1000632a:	1d3b      	adds	r3, r7, #4
1000632c:	881b      	ldrh	r3, [r3, #0]
1000632e:	1c18      	adds	r0, r3, #0
10006330:	210a      	movs	r1, #10
10006332:	f7fc f873 	bl	1000241c <__aeabi_uidiv>
10006336:	1c03      	adds	r3, r0, #0
10006338:	b29b      	uxth	r3, r3
1000633a:	b2da      	uxtb	r2, r3
1000633c:	4b31      	ldr	r3, [pc, #196]	; (10006404 <INFO_RTCDateInit+0x258>)
1000633e:	701a      	strb	r2, [r3, #0]
	rtc_date.year = (tens << 4) | (0x0F & ones);
10006340:	4b30      	ldr	r3, [pc, #192]	; (10006404 <INFO_RTCDateInit+0x258>)
10006342:	781b      	ldrb	r3, [r3, #0]
10006344:	011b      	lsls	r3, r3, #4
10006346:	b29a      	uxth	r2, r3
10006348:	4b2d      	ldr	r3, [pc, #180]	; (10006400 <INFO_RTCDateInit+0x254>)
1000634a:	781b      	ldrb	r3, [r3, #0]
1000634c:	b29b      	uxth	r3, r3
1000634e:	1c19      	adds	r1, r3, #0
10006350:	230f      	movs	r3, #15
10006352:	400b      	ands	r3, r1
10006354:	b29b      	uxth	r3, r3
10006356:	4313      	orrs	r3, r2
10006358:	b29b      	uxth	r3, r3
1000635a:	b29a      	uxth	r2, r3
1000635c:	1d3b      	adds	r3, r7, #4
1000635e:	801a      	strh	r2, [r3, #0]

	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
10006360:	46c0      	nop			; (mov r8, r8)
10006362:	4b26      	ldr	r3, [pc, #152]	; (100063fc <INFO_RTCDateInit+0x250>)
10006364:	1c18      	adds	r0, r3, #0
10006366:	f7ff fb6f 	bl	10005a48 <XMC_I2C_CH_GetStatusFlag>
1000636a:	1c02      	adds	r2, r0, #0
1000636c:	2380      	movs	r3, #128	; 0x80
1000636e:	009b      	lsls	r3, r3, #2
10006370:	4013      	ands	r3, r2
10006372:	d0f6      	beq.n	10006362 <INFO_RTCDateInit+0x1b6>
	for(uint16_t count=0; count < 500; count++){}
10006374:	2310      	movs	r3, #16
10006376:	18fb      	adds	r3, r7, r3
10006378:	2200      	movs	r2, #0
1000637a:	801a      	strh	r2, [r3, #0]
1000637c:	e006      	b.n	1000638c <INFO_RTCDateInit+0x1e0>
1000637e:	2310      	movs	r3, #16
10006380:	18fb      	adds	r3, r7, r3
10006382:	881a      	ldrh	r2, [r3, #0]
10006384:	2310      	movs	r3, #16
10006386:	18fb      	adds	r3, r7, r3
10006388:	3201      	adds	r2, #1
1000638a:	801a      	strh	r2, [r3, #0]
1000638c:	2310      	movs	r3, #16
1000638e:	18fb      	adds	r3, r7, r3
10006390:	881a      	ldrh	r2, [r3, #0]
10006392:	23f4      	movs	r3, #244	; 0xf4
10006394:	33ff      	adds	r3, #255	; 0xff
10006396:	429a      	cmp	r2, r3
10006398:	d9f1      	bls.n	1000637e <INFO_RTCDateInit+0x1d2>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1000639a:	4a18      	ldr	r2, [pc, #96]	; (100063fc <INFO_RTCDateInit+0x250>)
1000639c:	2380      	movs	r3, #128	; 0x80
1000639e:	009b      	lsls	r3, r3, #2
100063a0:	1c10      	adds	r0, r2, #0
100063a2:	1c19      	adds	r1, r3, #0
100063a4:	f7ff fb5a 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

	/*	 						Write Data into Year Byte						*/
	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, rtc_date.year);
100063a8:	1d3b      	adds	r3, r7, #4
100063aa:	881b      	ldrh	r3, [r3, #0]
100063ac:	b2db      	uxtb	r3, r3
100063ae:	4a13      	ldr	r2, [pc, #76]	; (100063fc <INFO_RTCDateInit+0x250>)
100063b0:	1c10      	adds	r0, r2, #0
100063b2:	1c19      	adds	r1, r3, #0
100063b4:	f7fb ff90 	bl	100022d8 <XMC_I2C_CH_MasterTransmit>

//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
	for(uint16_t count=0; count < 500; count++){}
100063b8:	230e      	movs	r3, #14
100063ba:	18fb      	adds	r3, r7, r3
100063bc:	2200      	movs	r2, #0
100063be:	801a      	strh	r2, [r3, #0]
100063c0:	e006      	b.n	100063d0 <INFO_RTCDateInit+0x224>
100063c2:	230e      	movs	r3, #14
100063c4:	18fb      	adds	r3, r7, r3
100063c6:	881a      	ldrh	r2, [r3, #0]
100063c8:	230e      	movs	r3, #14
100063ca:	18fb      	adds	r3, r7, r3
100063cc:	3201      	adds	r2, #1
100063ce:	801a      	strh	r2, [r3, #0]
100063d0:	230e      	movs	r3, #14
100063d2:	18fb      	adds	r3, r7, r3
100063d4:	881a      	ldrh	r2, [r3, #0]
100063d6:	23f4      	movs	r3, #244	; 0xf4
100063d8:	33ff      	adds	r3, #255	; 0xff
100063da:	429a      	cmp	r2, r3
100063dc:	d9f1      	bls.n	100063c2 <INFO_RTCDateInit+0x216>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
100063de:	4a07      	ldr	r2, [pc, #28]	; (100063fc <INFO_RTCDateInit+0x250>)
100063e0:	2380      	movs	r3, #128	; 0x80
100063e2:	009b      	lsls	r3, r3, #2
100063e4:	1c10      	adds	r0, r2, #0
100063e6:	1c19      	adds	r1, r3, #0
100063e8:	f7ff fb38 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

  	XMC_I2C_CH_MasterStop(XMC_USIC1_CH1);
100063ec:	4b03      	ldr	r3, [pc, #12]	; (100063fc <INFO_RTCDateInit+0x250>)
100063ee:	1c18      	adds	r0, r3, #0
100063f0:	f7fb ff48 	bl	10002284 <XMC_I2C_CH_MasterStop>
}
100063f4:	46bd      	mov	sp, r7
100063f6:	b006      	add	sp, #24
100063f8:	bd80      	pop	{r7, pc}
100063fa:	46c0      	nop			; (mov r8, r8)
100063fc:	48004200 	.word	0x48004200
10006400:	20000a4b 	.word	0x20000a4b
10006404:	20000a4c 	.word	0x20000a4c

10006408 <INFO_RTCGetDate>:

RTC_DATE_PARAM_t INFO_RTCGetDate(void)
{
10006408:	b580      	push	{r7, lr}
1000640a:	b086      	sub	sp, #24
1000640c:	af00      	add	r7, sp, #0
	RTC_DATE_PARAM_t DataReceived;
	uint8_t tens;
	uint8_t ones;

	/*    						Accessing RTCC Control Byte 						*/
	XMC_I2C_CH_MasterStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_WRITE);
1000640e:	4ba8      	ldr	r3, [pc, #672]	; (100066b0 <INFO_RTCGetDate+0x2a8>)
10006410:	1c18      	adds	r0, r3, #0
10006412:	21de      	movs	r1, #222	; 0xde
10006414:	2200      	movs	r2, #0
10006416:	f7fb feb5 	bl	10002184 <XMC_I2C_CH_MasterStart>
//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
	for(uint16_t count=0; count < 500; count++){}
1000641a:	2316      	movs	r3, #22
1000641c:	18fb      	adds	r3, r7, r3
1000641e:	2200      	movs	r2, #0
10006420:	801a      	strh	r2, [r3, #0]
10006422:	e006      	b.n	10006432 <INFO_RTCGetDate+0x2a>
10006424:	2316      	movs	r3, #22
10006426:	18fb      	adds	r3, r7, r3
10006428:	881a      	ldrh	r2, [r3, #0]
1000642a:	2316      	movs	r3, #22
1000642c:	18fb      	adds	r3, r7, r3
1000642e:	3201      	adds	r2, #1
10006430:	801a      	strh	r2, [r3, #0]
10006432:	2316      	movs	r3, #22
10006434:	18fb      	adds	r3, r7, r3
10006436:	881a      	ldrh	r2, [r3, #0]
10006438:	23f4      	movs	r3, #244	; 0xf4
1000643a:	33ff      	adds	r3, #255	; 0xff
1000643c:	429a      	cmp	r2, r3
1000643e:	d9f1      	bls.n	10006424 <INFO_RTCGetDate+0x1c>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
10006440:	4a9b      	ldr	r2, [pc, #620]	; (100066b0 <INFO_RTCGetDate+0x2a8>)
10006442:	2380      	movs	r3, #128	; 0x80
10006444:	009b      	lsls	r3, r3, #2
10006446:	1c10      	adds	r0, r2, #0
10006448:	1c19      	adds	r1, r3, #0
1000644a:	f7ff fb07 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

    /*    						Write Date Address Byte   					*/
    XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, RTCDATE);
1000644e:	4b98      	ldr	r3, [pc, #608]	; (100066b0 <INFO_RTCGetDate+0x2a8>)
10006450:	1c18      	adds	r0, r3, #0
10006452:	2104      	movs	r1, #4
10006454:	f7fb ff40 	bl	100022d8 <XMC_I2C_CH_MasterTransmit>
//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
    for(uint16_t count=0; count < 500; count++){}
10006458:	2314      	movs	r3, #20
1000645a:	18fb      	adds	r3, r7, r3
1000645c:	2200      	movs	r2, #0
1000645e:	801a      	strh	r2, [r3, #0]
10006460:	e006      	b.n	10006470 <INFO_RTCGetDate+0x68>
10006462:	2314      	movs	r3, #20
10006464:	18fb      	adds	r3, r7, r3
10006466:	881a      	ldrh	r2, [r3, #0]
10006468:	2314      	movs	r3, #20
1000646a:	18fb      	adds	r3, r7, r3
1000646c:	3201      	adds	r2, #1
1000646e:	801a      	strh	r2, [r3, #0]
10006470:	2314      	movs	r3, #20
10006472:	18fb      	adds	r3, r7, r3
10006474:	881a      	ldrh	r2, [r3, #0]
10006476:	23f4      	movs	r3, #244	; 0xf4
10006478:	33ff      	adds	r3, #255	; 0xff
1000647a:	429a      	cmp	r2, r3
1000647c:	d9f1      	bls.n	10006462 <INFO_RTCGetDate+0x5a>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1000647e:	4a8c      	ldr	r2, [pc, #560]	; (100066b0 <INFO_RTCGetDate+0x2a8>)
10006480:	2380      	movs	r3, #128	; 0x80
10006482:	009b      	lsls	r3, r3, #2
10006484:	1c10      	adds	r0, r2, #0
10006486:	1c19      	adds	r1, r3, #0
10006488:	f7ff fae8 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

    /*    						Accessing RTCC Control Byte again  					*/
    XMC_I2C_CH_MasterRepeatedStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_READ);
1000648c:	4b88      	ldr	r3, [pc, #544]	; (100066b0 <INFO_RTCGetDate+0x2a8>)
1000648e:	1c18      	adds	r0, r3, #0
10006490:	21de      	movs	r1, #222	; 0xde
10006492:	2201      	movs	r2, #1
10006494:	f7fb feb6 	bl	10002204 <XMC_I2C_CH_MasterRepeatedStart>
//    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
    for(uint16_t count=0; count < 500; count++){}
10006498:	2312      	movs	r3, #18
1000649a:	18fb      	adds	r3, r7, r3
1000649c:	2200      	movs	r2, #0
1000649e:	801a      	strh	r2, [r3, #0]
100064a0:	e006      	b.n	100064b0 <INFO_RTCGetDate+0xa8>
100064a2:	2312      	movs	r3, #18
100064a4:	18fb      	adds	r3, r7, r3
100064a6:	881a      	ldrh	r2, [r3, #0]
100064a8:	2312      	movs	r3, #18
100064aa:	18fb      	adds	r3, r7, r3
100064ac:	3201      	adds	r2, #1
100064ae:	801a      	strh	r2, [r3, #0]
100064b0:	2312      	movs	r3, #18
100064b2:	18fb      	adds	r3, r7, r3
100064b4:	881a      	ldrh	r2, [r3, #0]
100064b6:	23f4      	movs	r3, #244	; 0xf4
100064b8:	33ff      	adds	r3, #255	; 0xff
100064ba:	429a      	cmp	r2, r3
100064bc:	d9f1      	bls.n	100064a2 <INFO_RTCGetDate+0x9a>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
100064be:	4a7c      	ldr	r2, [pc, #496]	; (100066b0 <INFO_RTCGetDate+0x2a8>)
100064c0:	2380      	movs	r3, #128	; 0x80
100064c2:	009b      	lsls	r3, r3, #2
100064c4:	1c10      	adds	r0, r2, #0
100064c6:	1c19      	adds	r1, r3, #0
100064c8:	f7ff fac8 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

    XMC_I2C_CH_MasterReceiveAck(XMC_USIC1_CH1);
100064cc:	4b78      	ldr	r3, [pc, #480]	; (100066b0 <INFO_RTCGetDate+0x2a8>)
100064ce:	1c18      	adds	r0, r3, #0
100064d0:	f7fb ff30 	bl	10002334 <XMC_I2C_CH_MasterReceiveAck>

//    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & (XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
//	                              XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)) == 0U){/* wait for ACK */}
    for(uint16_t count=0; count < 500; count++){}
100064d4:	2310      	movs	r3, #16
100064d6:	18fb      	adds	r3, r7, r3
100064d8:	2200      	movs	r2, #0
100064da:	801a      	strh	r2, [r3, #0]
100064dc:	e006      	b.n	100064ec <INFO_RTCGetDate+0xe4>
100064de:	2310      	movs	r3, #16
100064e0:	18fb      	adds	r3, r7, r3
100064e2:	881a      	ldrh	r2, [r3, #0]
100064e4:	2310      	movs	r3, #16
100064e6:	18fb      	adds	r3, r7, r3
100064e8:	3201      	adds	r2, #1
100064ea:	801a      	strh	r2, [r3, #0]
100064ec:	2310      	movs	r3, #16
100064ee:	18fb      	adds	r3, r7, r3
100064f0:	881a      	ldrh	r2, [r3, #0]
100064f2:	23f4      	movs	r3, #244	; 0xf4
100064f4:	33ff      	adds	r3, #255	; 0xff
100064f6:	429a      	cmp	r2, r3
100064f8:	d9f1      	bls.n	100064de <INFO_RTCGetDate+0xd6>
    XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
100064fa:	4a6d      	ldr	r2, [pc, #436]	; (100066b0 <INFO_RTCGetDate+0x2a8>)
100064fc:	23c0      	movs	r3, #192	; 0xc0
100064fe:	021b      	lsls	r3, r3, #8
10006500:	1c10      	adds	r0, r2, #0
10006502:	1c19      	adds	r1, r3, #0
10006504:	f7ff faaa 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>
                                             XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);

    /*    						Read Date Information  					*/
    DataReceived.date     = XMC_I2C_CH_GetReceivedData(XMC_USIC1_CH1);
10006508:	4b69      	ldr	r3, [pc, #420]	; (100066b0 <INFO_RTCGetDate+0x2a8>)
1000650a:	1c18      	adds	r0, r3, #0
1000650c:	f7fb ff66 	bl	100023dc <XMC_I2C_CH_GetReceivedData>
10006510:	1c03      	adds	r3, r0, #0
10006512:	1c1a      	adds	r2, r3, #0
10006514:	1c3b      	adds	r3, r7, #0
10006516:	70da      	strb	r2, [r3, #3]
    DataReceived.date     = DataReceived.date & 0x7F;
10006518:	1c3b      	adds	r3, r7, #0
1000651a:	78db      	ldrb	r3, [r3, #3]
1000651c:	227f      	movs	r2, #127	; 0x7f
1000651e:	4013      	ands	r3, r2
10006520:	b2da      	uxtb	r2, r3
10006522:	1c3b      	adds	r3, r7, #0
10006524:	70da      	strb	r2, [r3, #3]

    XMC_I2C_CH_MasterReceiveAck(XMC_USIC1_CH1);
10006526:	4b62      	ldr	r3, [pc, #392]	; (100066b0 <INFO_RTCGetDate+0x2a8>)
10006528:	1c18      	adds	r0, r3, #0
1000652a:	f7fb ff03 	bl	10002334 <XMC_I2C_CH_MasterReceiveAck>
//    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & (XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
//	                             XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)) == 0U){/* wait for ACK */}
    for(uint16_t count=0; count < 500; count++){}
1000652e:	230e      	movs	r3, #14
10006530:	18fb      	adds	r3, r7, r3
10006532:	2200      	movs	r2, #0
10006534:	801a      	strh	r2, [r3, #0]
10006536:	e006      	b.n	10006546 <INFO_RTCGetDate+0x13e>
10006538:	230e      	movs	r3, #14
1000653a:	18fb      	adds	r3, r7, r3
1000653c:	881a      	ldrh	r2, [r3, #0]
1000653e:	230e      	movs	r3, #14
10006540:	18fb      	adds	r3, r7, r3
10006542:	3201      	adds	r2, #1
10006544:	801a      	strh	r2, [r3, #0]
10006546:	230e      	movs	r3, #14
10006548:	18fb      	adds	r3, r7, r3
1000654a:	881a      	ldrh	r2, [r3, #0]
1000654c:	23f4      	movs	r3, #244	; 0xf4
1000654e:	33ff      	adds	r3, #255	; 0xff
10006550:	429a      	cmp	r2, r3
10006552:	d9f1      	bls.n	10006538 <INFO_RTCGetDate+0x130>
    XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
10006554:	4a56      	ldr	r2, [pc, #344]	; (100066b0 <INFO_RTCGetDate+0x2a8>)
10006556:	23c0      	movs	r3, #192	; 0xc0
10006558:	021b      	lsls	r3, r3, #8
1000655a:	1c10      	adds	r0, r2, #0
1000655c:	1c19      	adds	r1, r3, #0
1000655e:	f7ff fa7d 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>
                                           XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);

    /*    						Read Month Information  					*/
    DataReceived.month    = XMC_I2C_CH_GetReceivedData(XMC_USIC1_CH1);
10006562:	4b53      	ldr	r3, [pc, #332]	; (100066b0 <INFO_RTCGetDate+0x2a8>)
10006564:	1c18      	adds	r0, r3, #0
10006566:	f7fb ff39 	bl	100023dc <XMC_I2C_CH_GetReceivedData>
1000656a:	1c03      	adds	r3, r0, #0
1000656c:	1c1a      	adds	r2, r3, #0
1000656e:	1c3b      	adds	r3, r7, #0
10006570:	709a      	strb	r2, [r3, #2]
    DataReceived.month	  = DataReceived.month & 0x1F;
10006572:	1c3b      	adds	r3, r7, #0
10006574:	789b      	ldrb	r3, [r3, #2]
10006576:	221f      	movs	r2, #31
10006578:	4013      	ands	r3, r2
1000657a:	b2da      	uxtb	r2, r3
1000657c:	1c3b      	adds	r3, r7, #0
1000657e:	709a      	strb	r2, [r3, #2]

    XMC_I2C_CH_MasterReceiveNack(XMC_USIC1_CH1);
10006580:	4b4b      	ldr	r3, [pc, #300]	; (100066b0 <INFO_RTCGetDate+0x2a8>)
10006582:	1c18      	adds	r0, r3, #0
10006584:	f7fb ff00 	bl	10002388 <XMC_I2C_CH_MasterReceiveNack>
//    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & (XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
//                                XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)) == 0U){/* wait for ACK */}
    for(uint16_t count=0; count < 500; count++){}
10006588:	230c      	movs	r3, #12
1000658a:	18fb      	adds	r3, r7, r3
1000658c:	2200      	movs	r2, #0
1000658e:	801a      	strh	r2, [r3, #0]
10006590:	e006      	b.n	100065a0 <INFO_RTCGetDate+0x198>
10006592:	230c      	movs	r3, #12
10006594:	18fb      	adds	r3, r7, r3
10006596:	881a      	ldrh	r2, [r3, #0]
10006598:	230c      	movs	r3, #12
1000659a:	18fb      	adds	r3, r7, r3
1000659c:	3201      	adds	r2, #1
1000659e:	801a      	strh	r2, [r3, #0]
100065a0:	230c      	movs	r3, #12
100065a2:	18fb      	adds	r3, r7, r3
100065a4:	881a      	ldrh	r2, [r3, #0]
100065a6:	23f4      	movs	r3, #244	; 0xf4
100065a8:	33ff      	adds	r3, #255	; 0xff
100065aa:	429a      	cmp	r2, r3
100065ac:	d9f1      	bls.n	10006592 <INFO_RTCGetDate+0x18a>
    XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
100065ae:	4a40      	ldr	r2, [pc, #256]	; (100066b0 <INFO_RTCGetDate+0x2a8>)
100065b0:	23c0      	movs	r3, #192	; 0xc0
100065b2:	021b      	lsls	r3, r3, #8
100065b4:	1c10      	adds	r0, r2, #0
100065b6:	1c19      	adds	r1, r3, #0
100065b8:	f7ff fa50 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>
                                           XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);

    /*    						Read Year Information  					*/
    DataReceived.year      = XMC_I2C_CH_GetReceivedData(XMC_USIC1_CH1);
100065bc:	4b3c      	ldr	r3, [pc, #240]	; (100066b0 <INFO_RTCGetDate+0x2a8>)
100065be:	1c18      	adds	r0, r3, #0
100065c0:	f7fb ff0c 	bl	100023dc <XMC_I2C_CH_GetReceivedData>
100065c4:	1c03      	adds	r3, r0, #0
100065c6:	b29a      	uxth	r2, r3
100065c8:	1c3b      	adds	r3, r7, #0
100065ca:	801a      	strh	r2, [r3, #0]
    XMC_I2C_CH_MasterStop(XMC_USIC1_CH1);
100065cc:	4b38      	ldr	r3, [pc, #224]	; (100066b0 <INFO_RTCGetDate+0x2a8>)
100065ce:	1c18      	adds	r0, r3, #0
100065d0:	f7fb fe58 	bl	10002284 <XMC_I2C_CH_MasterStop>

    tens = 10*(DataReceived.date >> 4);
100065d4:	1c3b      	adds	r3, r7, #0
100065d6:	78db      	ldrb	r3, [r3, #3]
100065d8:	091b      	lsrs	r3, r3, #4
100065da:	b2db      	uxtb	r3, r3
100065dc:	220b      	movs	r2, #11
100065de:	18ba      	adds	r2, r7, r2
100065e0:	1c19      	adds	r1, r3, #0
100065e2:	0089      	lsls	r1, r1, #2
100065e4:	18cb      	adds	r3, r1, r3
100065e6:	18db      	adds	r3, r3, r3
100065e8:	7013      	strb	r3, [r2, #0]
    ones = DataReceived.date & 0x0F;
100065ea:	1c3b      	adds	r3, r7, #0
100065ec:	78da      	ldrb	r2, [r3, #3]
100065ee:	230a      	movs	r3, #10
100065f0:	18fb      	adds	r3, r7, r3
100065f2:	210f      	movs	r1, #15
100065f4:	400a      	ands	r2, r1
100065f6:	701a      	strb	r2, [r3, #0]
    DataReceived.date = tens + ones;
100065f8:	230b      	movs	r3, #11
100065fa:	18fa      	adds	r2, r7, r3
100065fc:	230a      	movs	r3, #10
100065fe:	18fb      	adds	r3, r7, r3
10006600:	7812      	ldrb	r2, [r2, #0]
10006602:	781b      	ldrb	r3, [r3, #0]
10006604:	18d3      	adds	r3, r2, r3
10006606:	b2da      	uxtb	r2, r3
10006608:	1c3b      	adds	r3, r7, #0
1000660a:	70da      	strb	r2, [r3, #3]

    tens = 10*(DataReceived.month >> 4);
1000660c:	1c3b      	adds	r3, r7, #0
1000660e:	789b      	ldrb	r3, [r3, #2]
10006610:	091b      	lsrs	r3, r3, #4
10006612:	b2db      	uxtb	r3, r3
10006614:	220b      	movs	r2, #11
10006616:	18ba      	adds	r2, r7, r2
10006618:	1c19      	adds	r1, r3, #0
1000661a:	0089      	lsls	r1, r1, #2
1000661c:	18cb      	adds	r3, r1, r3
1000661e:	18db      	adds	r3, r3, r3
10006620:	7013      	strb	r3, [r2, #0]
    ones = DataReceived.month & 0x0F;
10006622:	1c3b      	adds	r3, r7, #0
10006624:	789a      	ldrb	r2, [r3, #2]
10006626:	230a      	movs	r3, #10
10006628:	18fb      	adds	r3, r7, r3
1000662a:	210f      	movs	r1, #15
1000662c:	400a      	ands	r2, r1
1000662e:	701a      	strb	r2, [r3, #0]
    DataReceived.month = tens + ones;
10006630:	230b      	movs	r3, #11
10006632:	18fa      	adds	r2, r7, r3
10006634:	230a      	movs	r3, #10
10006636:	18fb      	adds	r3, r7, r3
10006638:	7812      	ldrb	r2, [r2, #0]
1000663a:	781b      	ldrb	r3, [r3, #0]
1000663c:	18d3      	adds	r3, r2, r3
1000663e:	b2da      	uxtb	r2, r3
10006640:	1c3b      	adds	r3, r7, #0
10006642:	709a      	strb	r2, [r3, #2]

    tens = 10*(DataReceived.year >> 4);
10006644:	1c3b      	adds	r3, r7, #0
10006646:	881b      	ldrh	r3, [r3, #0]
10006648:	091b      	lsrs	r3, r3, #4
1000664a:	b29b      	uxth	r3, r3
1000664c:	b2db      	uxtb	r3, r3
1000664e:	220b      	movs	r2, #11
10006650:	18ba      	adds	r2, r7, r2
10006652:	1c19      	adds	r1, r3, #0
10006654:	0089      	lsls	r1, r1, #2
10006656:	18cb      	adds	r3, r1, r3
10006658:	18db      	adds	r3, r3, r3
1000665a:	7013      	strb	r3, [r2, #0]
    ones = DataReceived.year & 0x0F;
1000665c:	1c3b      	adds	r3, r7, #0
1000665e:	881b      	ldrh	r3, [r3, #0]
10006660:	b2da      	uxtb	r2, r3
10006662:	230a      	movs	r3, #10
10006664:	18fb      	adds	r3, r7, r3
10006666:	210f      	movs	r1, #15
10006668:	400a      	ands	r2, r1
1000666a:	701a      	strb	r2, [r3, #0]
    DataReceived.year = tens + ones;
1000666c:	230b      	movs	r3, #11
1000666e:	18fb      	adds	r3, r7, r3
10006670:	781b      	ldrb	r3, [r3, #0]
10006672:	b29a      	uxth	r2, r3
10006674:	230a      	movs	r3, #10
10006676:	18fb      	adds	r3, r7, r3
10006678:	781b      	ldrb	r3, [r3, #0]
1000667a:	b29b      	uxth	r3, r3
1000667c:	18d3      	adds	r3, r2, r3
1000667e:	b29a      	uxth	r2, r3
10006680:	1c3b      	adds	r3, r7, #0
10006682:	801a      	strh	r2, [r3, #0]

    return DataReceived;
10006684:	1d3b      	adds	r3, r7, #4
10006686:	1c3a      	adds	r2, r7, #0
10006688:	6812      	ldr	r2, [r2, #0]
1000668a:	601a      	str	r2, [r3, #0]
1000668c:	1d3a      	adds	r2, r7, #4
1000668e:	2300      	movs	r3, #0
10006690:	8811      	ldrh	r1, [r2, #0]
10006692:	0409      	lsls	r1, r1, #16
10006694:	0c09      	lsrs	r1, r1, #16
10006696:	0c1b      	lsrs	r3, r3, #16
10006698:	041b      	lsls	r3, r3, #16
1000669a:	430b      	orrs	r3, r1
1000669c:	8852      	ldrh	r2, [r2, #2]
1000669e:	0412      	lsls	r2, r2, #16
100066a0:	041b      	lsls	r3, r3, #16
100066a2:	0c1b      	lsrs	r3, r3, #16
100066a4:	4313      	orrs	r3, r2
}
100066a6:	1c18      	adds	r0, r3, #0
100066a8:	46bd      	mov	sp, r7
100066aa:	b006      	add	sp, #24
100066ac:	bd80      	pop	{r7, pc}
100066ae:	46c0      	nop			; (mov r8, r8)
100066b0:	48004200 	.word	0x48004200

100066b4 <INFO_RTCGetTime>:

RTC_TIME_PARAM_t INFO_RTCGetTime(void)
{
100066b4:	b580      	push	{r7, lr}
100066b6:	b086      	sub	sp, #24
100066b8:	af00      	add	r7, sp, #0
	RTC_TIME_PARAM_t DataReceived;
	uint8_t tens;
	uint8_t ones;
	XMC_GPIO_SetOutputHigh(P2_11);
100066ba:	4bb1      	ldr	r3, [pc, #708]	; (10006980 <INFO_RTCGetTime+0x2cc>)
100066bc:	1c18      	adds	r0, r3, #0
100066be:	210b      	movs	r1, #11
100066c0:	f7ff f97a 	bl	100059b8 <XMC_GPIO_SetOutputHigh>

	/*    						Accessing RTCC Control Byte 					*/
	XMC_I2C_CH_MasterStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_WRITE);
100066c4:	4baf      	ldr	r3, [pc, #700]	; (10006984 <INFO_RTCGetTime+0x2d0>)
100066c6:	1c18      	adds	r0, r3, #0
100066c8:	21de      	movs	r1, #222	; 0xde
100066ca:	2200      	movs	r2, #0
100066cc:	f7fb fd5a 	bl	10002184 <XMC_I2C_CH_MasterStart>
//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
	for(uint16_t count=0; count < 500; count++){}
100066d0:	2316      	movs	r3, #22
100066d2:	18fb      	adds	r3, r7, r3
100066d4:	2200      	movs	r2, #0
100066d6:	801a      	strh	r2, [r3, #0]
100066d8:	e006      	b.n	100066e8 <INFO_RTCGetTime+0x34>
100066da:	2316      	movs	r3, #22
100066dc:	18fb      	adds	r3, r7, r3
100066de:	881a      	ldrh	r2, [r3, #0]
100066e0:	2316      	movs	r3, #22
100066e2:	18fb      	adds	r3, r7, r3
100066e4:	3201      	adds	r2, #1
100066e6:	801a      	strh	r2, [r3, #0]
100066e8:	2316      	movs	r3, #22
100066ea:	18fb      	adds	r3, r7, r3
100066ec:	881a      	ldrh	r2, [r3, #0]
100066ee:	23f4      	movs	r3, #244	; 0xf4
100066f0:	33ff      	adds	r3, #255	; 0xff
100066f2:	429a      	cmp	r2, r3
100066f4:	d9f1      	bls.n	100066da <INFO_RTCGetTime+0x26>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
100066f6:	4aa3      	ldr	r2, [pc, #652]	; (10006984 <INFO_RTCGetTime+0x2d0>)
100066f8:	2380      	movs	r3, #128	; 0x80
100066fa:	009b      	lsls	r3, r3, #2
100066fc:	1c10      	adds	r0, r2, #0
100066fe:	1c19      	adds	r1, r3, #0
10006700:	f7ff f9ac 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

  	/*    						Write Seconds Address Byte   					*/
    XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, RTCSECOND);
10006704:	4b9f      	ldr	r3, [pc, #636]	; (10006984 <INFO_RTCGetTime+0x2d0>)
10006706:	1c18      	adds	r0, r3, #0
10006708:	2100      	movs	r1, #0
1000670a:	f7fb fde5 	bl	100022d8 <XMC_I2C_CH_MasterTransmit>
//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
    for(uint16_t count=0; count < 500; count++){}
1000670e:	2314      	movs	r3, #20
10006710:	18fb      	adds	r3, r7, r3
10006712:	2200      	movs	r2, #0
10006714:	801a      	strh	r2, [r3, #0]
10006716:	e006      	b.n	10006726 <INFO_RTCGetTime+0x72>
10006718:	2314      	movs	r3, #20
1000671a:	18fb      	adds	r3, r7, r3
1000671c:	881a      	ldrh	r2, [r3, #0]
1000671e:	2314      	movs	r3, #20
10006720:	18fb      	adds	r3, r7, r3
10006722:	3201      	adds	r2, #1
10006724:	801a      	strh	r2, [r3, #0]
10006726:	2314      	movs	r3, #20
10006728:	18fb      	adds	r3, r7, r3
1000672a:	881a      	ldrh	r2, [r3, #0]
1000672c:	23f4      	movs	r3, #244	; 0xf4
1000672e:	33ff      	adds	r3, #255	; 0xff
10006730:	429a      	cmp	r2, r3
10006732:	d9f1      	bls.n	10006718 <INFO_RTCGetTime+0x64>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
10006734:	4a93      	ldr	r2, [pc, #588]	; (10006984 <INFO_RTCGetTime+0x2d0>)
10006736:	2380      	movs	r3, #128	; 0x80
10006738:	009b      	lsls	r3, r3, #2
1000673a:	1c10      	adds	r0, r2, #0
1000673c:	1c19      	adds	r1, r3, #0
1000673e:	f7ff f98d 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

	/* 							Start Read Sequence								*/
    XMC_I2C_CH_MasterRepeatedStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_READ);
10006742:	4b90      	ldr	r3, [pc, #576]	; (10006984 <INFO_RTCGetTime+0x2d0>)
10006744:	1c18      	adds	r0, r3, #0
10006746:	21de      	movs	r1, #222	; 0xde
10006748:	2201      	movs	r2, #1
1000674a:	f7fb fd5b 	bl	10002204 <XMC_I2C_CH_MasterRepeatedStart>
//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
    for(uint16_t count=0; count < 500; count++){}
1000674e:	2312      	movs	r3, #18
10006750:	18fb      	adds	r3, r7, r3
10006752:	2200      	movs	r2, #0
10006754:	801a      	strh	r2, [r3, #0]
10006756:	e006      	b.n	10006766 <INFO_RTCGetTime+0xb2>
10006758:	2312      	movs	r3, #18
1000675a:	18fb      	adds	r3, r7, r3
1000675c:	881a      	ldrh	r2, [r3, #0]
1000675e:	2312      	movs	r3, #18
10006760:	18fb      	adds	r3, r7, r3
10006762:	3201      	adds	r2, #1
10006764:	801a      	strh	r2, [r3, #0]
10006766:	2312      	movs	r3, #18
10006768:	18fb      	adds	r3, r7, r3
1000676a:	881a      	ldrh	r2, [r3, #0]
1000676c:	23f4      	movs	r3, #244	; 0xf4
1000676e:	33ff      	adds	r3, #255	; 0xff
10006770:	429a      	cmp	r2, r3
10006772:	d9f1      	bls.n	10006758 <INFO_RTCGetTime+0xa4>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
10006774:	4a83      	ldr	r2, [pc, #524]	; (10006984 <INFO_RTCGetTime+0x2d0>)
10006776:	2380      	movs	r3, #128	; 0x80
10006778:	009b      	lsls	r3, r3, #2
1000677a:	1c10      	adds	r0, r2, #0
1000677c:	1c19      	adds	r1, r3, #0
1000677e:	f7ff f96d 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

	/* 							Read first sequence 							*/
    XMC_I2C_CH_MasterReceiveAck(XMC_USIC1_CH1);
10006782:	4b80      	ldr	r3, [pc, #512]	; (10006984 <INFO_RTCGetTime+0x2d0>)
10006784:	1c18      	adds	r0, r3, #0
10006786:	f7fb fdd5 	bl	10002334 <XMC_I2C_CH_MasterReceiveAck>
//    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & (XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
//                                   XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)) == 0U){/* wait for ACK */}
    for(uint16_t count=0; count < 500; count++){}
1000678a:	2310      	movs	r3, #16
1000678c:	18fb      	adds	r3, r7, r3
1000678e:	2200      	movs	r2, #0
10006790:	801a      	strh	r2, [r3, #0]
10006792:	e006      	b.n	100067a2 <INFO_RTCGetTime+0xee>
10006794:	2310      	movs	r3, #16
10006796:	18fb      	adds	r3, r7, r3
10006798:	881a      	ldrh	r2, [r3, #0]
1000679a:	2310      	movs	r3, #16
1000679c:	18fb      	adds	r3, r7, r3
1000679e:	3201      	adds	r2, #1
100067a0:	801a      	strh	r2, [r3, #0]
100067a2:	2310      	movs	r3, #16
100067a4:	18fb      	adds	r3, r7, r3
100067a6:	881a      	ldrh	r2, [r3, #0]
100067a8:	23f4      	movs	r3, #244	; 0xf4
100067aa:	33ff      	adds	r3, #255	; 0xff
100067ac:	429a      	cmp	r2, r3
100067ae:	d9f1      	bls.n	10006794 <INFO_RTCGetTime+0xe0>
    XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
100067b0:	4a74      	ldr	r2, [pc, #464]	; (10006984 <INFO_RTCGetTime+0x2d0>)
100067b2:	23c0      	movs	r3, #192	; 0xc0
100067b4:	021b      	lsls	r3, r3, #8
100067b6:	1c10      	adds	r0, r2, #0
100067b8:	1c19      	adds	r1, r3, #0
100067ba:	f7ff f94f 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>
                                   XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);

    DataReceived.second   = XMC_I2C_CH_GetReceivedData(XMC_USIC1_CH1);
100067be:	4b71      	ldr	r3, [pc, #452]	; (10006984 <INFO_RTCGetTime+0x2d0>)
100067c0:	1c18      	adds	r0, r3, #0
100067c2:	f7fb fe0b 	bl	100023dc <XMC_I2C_CH_GetReceivedData>
100067c6:	1c03      	adds	r3, r0, #0
100067c8:	1c1a      	adds	r2, r3, #0
100067ca:	1c3b      	adds	r3, r7, #0
100067cc:	709a      	strb	r2, [r3, #2]
    DataReceived.second   = DataReceived.second & 0x7F;
100067ce:	1c3b      	adds	r3, r7, #0
100067d0:	789b      	ldrb	r3, [r3, #2]
100067d2:	227f      	movs	r2, #127	; 0x7f
100067d4:	4013      	ands	r3, r2
100067d6:	b2da      	uxtb	r2, r3
100067d8:	1c3b      	adds	r3, r7, #0
100067da:	709a      	strb	r2, [r3, #2]

    /*							Read Second Sequence							*/
    XMC_I2C_CH_MasterReceiveAck(XMC_USIC1_CH1);
100067dc:	4b69      	ldr	r3, [pc, #420]	; (10006984 <INFO_RTCGetTime+0x2d0>)
100067de:	1c18      	adds	r0, r3, #0
100067e0:	f7fb fda8 	bl	10002334 <XMC_I2C_CH_MasterReceiveAck>
//    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & (XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
//                                   XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)) == 0U){/* wait for ACK */}
    for(uint16_t count=0; count < 500; count++){}
100067e4:	230e      	movs	r3, #14
100067e6:	18fb      	adds	r3, r7, r3
100067e8:	2200      	movs	r2, #0
100067ea:	801a      	strh	r2, [r3, #0]
100067ec:	e006      	b.n	100067fc <INFO_RTCGetTime+0x148>
100067ee:	230e      	movs	r3, #14
100067f0:	18fb      	adds	r3, r7, r3
100067f2:	881a      	ldrh	r2, [r3, #0]
100067f4:	230e      	movs	r3, #14
100067f6:	18fb      	adds	r3, r7, r3
100067f8:	3201      	adds	r2, #1
100067fa:	801a      	strh	r2, [r3, #0]
100067fc:	230e      	movs	r3, #14
100067fe:	18fb      	adds	r3, r7, r3
10006800:	881a      	ldrh	r2, [r3, #0]
10006802:	23f4      	movs	r3, #244	; 0xf4
10006804:	33ff      	adds	r3, #255	; 0xff
10006806:	429a      	cmp	r2, r3
10006808:	d9f1      	bls.n	100067ee <INFO_RTCGetTime+0x13a>
    XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
1000680a:	4a5e      	ldr	r2, [pc, #376]	; (10006984 <INFO_RTCGetTime+0x2d0>)
1000680c:	23c0      	movs	r3, #192	; 0xc0
1000680e:	021b      	lsls	r3, r3, #8
10006810:	1c10      	adds	r0, r2, #0
10006812:	1c19      	adds	r1, r3, #0
10006814:	f7ff f922 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>
                                   XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);

    DataReceived.minute    = XMC_I2C_CH_GetReceivedData(XMC_USIC1_CH1);
10006818:	4b5a      	ldr	r3, [pc, #360]	; (10006984 <INFO_RTCGetTime+0x2d0>)
1000681a:	1c18      	adds	r0, r3, #0
1000681c:	f7fb fdde 	bl	100023dc <XMC_I2C_CH_GetReceivedData>
10006820:	1c03      	adds	r3, r0, #0
10006822:	1c1a      	adds	r2, r3, #0
10006824:	1c3b      	adds	r3, r7, #0
10006826:	705a      	strb	r2, [r3, #1]
    DataReceived.minute	 = DataReceived.minute & 0x7F;
10006828:	1c3b      	adds	r3, r7, #0
1000682a:	785b      	ldrb	r3, [r3, #1]
1000682c:	227f      	movs	r2, #127	; 0x7f
1000682e:	4013      	ands	r3, r2
10006830:	b2da      	uxtb	r2, r3
10006832:	1c3b      	adds	r3, r7, #0
10006834:	705a      	strb	r2, [r3, #1]

    /*							Read Third Sequence then Dismiss				*/
    XMC_I2C_CH_MasterReceiveNack(XMC_USIC1_CH1);
10006836:	4b53      	ldr	r3, [pc, #332]	; (10006984 <INFO_RTCGetTime+0x2d0>)
10006838:	1c18      	adds	r0, r3, #0
1000683a:	f7fb fda5 	bl	10002388 <XMC_I2C_CH_MasterReceiveNack>
//    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & (XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
//                                   XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)) == 0U){/* wait for ACK */}
    for(uint16_t count=0; count < 500; count++){}
1000683e:	230c      	movs	r3, #12
10006840:	18fb      	adds	r3, r7, r3
10006842:	2200      	movs	r2, #0
10006844:	801a      	strh	r2, [r3, #0]
10006846:	e006      	b.n	10006856 <INFO_RTCGetTime+0x1a2>
10006848:	230c      	movs	r3, #12
1000684a:	18fb      	adds	r3, r7, r3
1000684c:	881a      	ldrh	r2, [r3, #0]
1000684e:	230c      	movs	r3, #12
10006850:	18fb      	adds	r3, r7, r3
10006852:	3201      	adds	r2, #1
10006854:	801a      	strh	r2, [r3, #0]
10006856:	230c      	movs	r3, #12
10006858:	18fb      	adds	r3, r7, r3
1000685a:	881a      	ldrh	r2, [r3, #0]
1000685c:	23f4      	movs	r3, #244	; 0xf4
1000685e:	33ff      	adds	r3, #255	; 0xff
10006860:	429a      	cmp	r2, r3
10006862:	d9f1      	bls.n	10006848 <INFO_RTCGetTime+0x194>
    XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
10006864:	4a47      	ldr	r2, [pc, #284]	; (10006984 <INFO_RTCGetTime+0x2d0>)
10006866:	23c0      	movs	r3, #192	; 0xc0
10006868:	021b      	lsls	r3, r3, #8
1000686a:	1c10      	adds	r0, r2, #0
1000686c:	1c19      	adds	r1, r3, #0
1000686e:	f7ff f8f5 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>
                                    XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);

    DataReceived.hour      = XMC_I2C_CH_GetReceivedData(XMC_USIC1_CH1);
10006872:	4b44      	ldr	r3, [pc, #272]	; (10006984 <INFO_RTCGetTime+0x2d0>)
10006874:	1c18      	adds	r0, r3, #0
10006876:	f7fb fdb1 	bl	100023dc <XMC_I2C_CH_GetReceivedData>
1000687a:	1c03      	adds	r3, r0, #0
1000687c:	1c1a      	adds	r2, r3, #0
1000687e:	1c3b      	adds	r3, r7, #0
10006880:	701a      	strb	r2, [r3, #0]
    DataReceived.hour	     = DataReceived.hour & 0x3F;
10006882:	1c3b      	adds	r3, r7, #0
10006884:	781b      	ldrb	r3, [r3, #0]
10006886:	223f      	movs	r2, #63	; 0x3f
10006888:	4013      	ands	r3, r2
1000688a:	b2da      	uxtb	r2, r3
1000688c:	1c3b      	adds	r3, r7, #0
1000688e:	701a      	strb	r2, [r3, #0]

    XMC_I2C_CH_MasterStop(XMC_USIC1_CH1);
10006890:	4b3c      	ldr	r3, [pc, #240]	; (10006984 <INFO_RTCGetTime+0x2d0>)
10006892:	1c18      	adds	r0, r3, #0
10006894:	f7fb fcf6 	bl	10002284 <XMC_I2C_CH_MasterStop>

    tens = 10*(DataReceived.hour >> 4);
10006898:	1c3b      	adds	r3, r7, #0
1000689a:	781b      	ldrb	r3, [r3, #0]
1000689c:	091b      	lsrs	r3, r3, #4
1000689e:	b2db      	uxtb	r3, r3
100068a0:	220b      	movs	r2, #11
100068a2:	18ba      	adds	r2, r7, r2
100068a4:	1c19      	adds	r1, r3, #0
100068a6:	0089      	lsls	r1, r1, #2
100068a8:	18cb      	adds	r3, r1, r3
100068aa:	18db      	adds	r3, r3, r3
100068ac:	7013      	strb	r3, [r2, #0]
    ones = DataReceived.hour & 0x0F;
100068ae:	1c3b      	adds	r3, r7, #0
100068b0:	781a      	ldrb	r2, [r3, #0]
100068b2:	230a      	movs	r3, #10
100068b4:	18fb      	adds	r3, r7, r3
100068b6:	210f      	movs	r1, #15
100068b8:	400a      	ands	r2, r1
100068ba:	701a      	strb	r2, [r3, #0]
    DataReceived.hour = tens + ones;
100068bc:	230b      	movs	r3, #11
100068be:	18fa      	adds	r2, r7, r3
100068c0:	230a      	movs	r3, #10
100068c2:	18fb      	adds	r3, r7, r3
100068c4:	7812      	ldrb	r2, [r2, #0]
100068c6:	781b      	ldrb	r3, [r3, #0]
100068c8:	18d3      	adds	r3, r2, r3
100068ca:	b2da      	uxtb	r2, r3
100068cc:	1c3b      	adds	r3, r7, #0
100068ce:	701a      	strb	r2, [r3, #0]

    tens = 10*(DataReceived.minute >> 4);
100068d0:	1c3b      	adds	r3, r7, #0
100068d2:	785b      	ldrb	r3, [r3, #1]
100068d4:	091b      	lsrs	r3, r3, #4
100068d6:	b2db      	uxtb	r3, r3
100068d8:	220b      	movs	r2, #11
100068da:	18ba      	adds	r2, r7, r2
100068dc:	1c19      	adds	r1, r3, #0
100068de:	0089      	lsls	r1, r1, #2
100068e0:	18cb      	adds	r3, r1, r3
100068e2:	18db      	adds	r3, r3, r3
100068e4:	7013      	strb	r3, [r2, #0]
    ones = DataReceived.minute & 0x0F;
100068e6:	1c3b      	adds	r3, r7, #0
100068e8:	785a      	ldrb	r2, [r3, #1]
100068ea:	230a      	movs	r3, #10
100068ec:	18fb      	adds	r3, r7, r3
100068ee:	210f      	movs	r1, #15
100068f0:	400a      	ands	r2, r1
100068f2:	701a      	strb	r2, [r3, #0]
    DataReceived.minute = tens + ones;
100068f4:	230b      	movs	r3, #11
100068f6:	18fa      	adds	r2, r7, r3
100068f8:	230a      	movs	r3, #10
100068fa:	18fb      	adds	r3, r7, r3
100068fc:	7812      	ldrb	r2, [r2, #0]
100068fe:	781b      	ldrb	r3, [r3, #0]
10006900:	18d3      	adds	r3, r2, r3
10006902:	b2da      	uxtb	r2, r3
10006904:	1c3b      	adds	r3, r7, #0
10006906:	705a      	strb	r2, [r3, #1]

    tens = 10*(DataReceived.second >> 4);
10006908:	1c3b      	adds	r3, r7, #0
1000690a:	789b      	ldrb	r3, [r3, #2]
1000690c:	091b      	lsrs	r3, r3, #4
1000690e:	b2db      	uxtb	r3, r3
10006910:	220b      	movs	r2, #11
10006912:	18ba      	adds	r2, r7, r2
10006914:	1c19      	adds	r1, r3, #0
10006916:	0089      	lsls	r1, r1, #2
10006918:	18cb      	adds	r3, r1, r3
1000691a:	18db      	adds	r3, r3, r3
1000691c:	7013      	strb	r3, [r2, #0]
    ones = DataReceived.second & 0x0F;
1000691e:	1c3b      	adds	r3, r7, #0
10006920:	789a      	ldrb	r2, [r3, #2]
10006922:	230a      	movs	r3, #10
10006924:	18fb      	adds	r3, r7, r3
10006926:	210f      	movs	r1, #15
10006928:	400a      	ands	r2, r1
1000692a:	701a      	strb	r2, [r3, #0]
    DataReceived.second = tens + ones;
1000692c:	230b      	movs	r3, #11
1000692e:	18fa      	adds	r2, r7, r3
10006930:	230a      	movs	r3, #10
10006932:	18fb      	adds	r3, r7, r3
10006934:	7812      	ldrb	r2, [r2, #0]
10006936:	781b      	ldrb	r3, [r3, #0]
10006938:	18d3      	adds	r3, r2, r3
1000693a:	b2da      	uxtb	r2, r3
1000693c:	1c3b      	adds	r3, r7, #0
1000693e:	709a      	strb	r2, [r3, #2]

    return DataReceived;
10006940:	1d3b      	adds	r3, r7, #4
10006942:	1c3a      	adds	r2, r7, #0
10006944:	8811      	ldrh	r1, [r2, #0]
10006946:	8019      	strh	r1, [r3, #0]
10006948:	7892      	ldrb	r2, [r2, #2]
1000694a:	709a      	strb	r2, [r3, #2]
1000694c:	1d3a      	adds	r2, r7, #4
1000694e:	2300      	movs	r3, #0
10006950:	7811      	ldrb	r1, [r2, #0]
10006952:	20ff      	movs	r0, #255	; 0xff
10006954:	4001      	ands	r1, r0
10006956:	20ff      	movs	r0, #255	; 0xff
10006958:	4383      	bics	r3, r0
1000695a:	430b      	orrs	r3, r1
1000695c:	7851      	ldrb	r1, [r2, #1]
1000695e:	20ff      	movs	r0, #255	; 0xff
10006960:	4001      	ands	r1, r0
10006962:	0209      	lsls	r1, r1, #8
10006964:	4808      	ldr	r0, [pc, #32]	; (10006988 <INFO_RTCGetTime+0x2d4>)
10006966:	4003      	ands	r3, r0
10006968:	430b      	orrs	r3, r1
1000696a:	7892      	ldrb	r2, [r2, #2]
1000696c:	21ff      	movs	r1, #255	; 0xff
1000696e:	400a      	ands	r2, r1
10006970:	0412      	lsls	r2, r2, #16
10006972:	4906      	ldr	r1, [pc, #24]	; (1000698c <INFO_RTCGetTime+0x2d8>)
10006974:	400b      	ands	r3, r1
10006976:	4313      	orrs	r3, r2
}
10006978:	1c18      	adds	r0, r3, #0
1000697a:	46bd      	mov	sp, r7
1000697c:	b006      	add	sp, #24
1000697e:	bd80      	pop	{r7, pc}
10006980:	40040200 	.word	0x40040200
10006984:	48004200 	.word	0x48004200
10006988:	ffff00ff 	.word	0xffff00ff
1000698c:	ff00ffff 	.word	0xff00ffff

10006990 <INFO_RTCVBatEnable>:

void INFO_RTCVBatEnable(void)
{
10006990:	b590      	push	{r4, r7, lr}
10006992:	b085      	sub	sp, #20
10006994:	af00      	add	r7, sp, #0
	uint8_t data;

	/*    						Accessing RTCC Control Byte w/ WR					*/
	XMC_I2C_CH_MasterStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_WRITE);
10006996:	4b77      	ldr	r3, [pc, #476]	; (10006b74 <INFO_RTCVBatEnable+0x1e4>)
10006998:	1c18      	adds	r0, r3, #0
1000699a:	21de      	movs	r1, #222	; 0xde
1000699c:	2200      	movs	r2, #0
1000699e:	f7fb fbf1 	bl	10002184 <XMC_I2C_CH_MasterStart>
//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
	for(uint16_t count=0; count < 500; count++){}
100069a2:	230e      	movs	r3, #14
100069a4:	18fb      	adds	r3, r7, r3
100069a6:	2200      	movs	r2, #0
100069a8:	801a      	strh	r2, [r3, #0]
100069aa:	e006      	b.n	100069ba <INFO_RTCVBatEnable+0x2a>
100069ac:	230e      	movs	r3, #14
100069ae:	18fb      	adds	r3, r7, r3
100069b0:	881a      	ldrh	r2, [r3, #0]
100069b2:	230e      	movs	r3, #14
100069b4:	18fb      	adds	r3, r7, r3
100069b6:	3201      	adds	r2, #1
100069b8:	801a      	strh	r2, [r3, #0]
100069ba:	230e      	movs	r3, #14
100069bc:	18fb      	adds	r3, r7, r3
100069be:	881a      	ldrh	r2, [r3, #0]
100069c0:	23f4      	movs	r3, #244	; 0xf4
100069c2:	33ff      	adds	r3, #255	; 0xff
100069c4:	429a      	cmp	r2, r3
100069c6:	d9f1      	bls.n	100069ac <INFO_RTCVBatEnable+0x1c>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
100069c8:	4a6a      	ldr	r2, [pc, #424]	; (10006b74 <INFO_RTCVBatEnable+0x1e4>)
100069ca:	2380      	movs	r3, #128	; 0x80
100069cc:	009b      	lsls	r3, r3, #2
100069ce:	1c10      	adds	r0, r2, #0
100069d0:	1c19      	adds	r1, r3, #0
100069d2:	f7ff f843 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

    /*    						Write Date Address Byte   							*/
    XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, RTCWKDAY);
100069d6:	4b67      	ldr	r3, [pc, #412]	; (10006b74 <INFO_RTCVBatEnable+0x1e4>)
100069d8:	1c18      	adds	r0, r3, #0
100069da:	2103      	movs	r1, #3
100069dc:	f7fb fc7c 	bl	100022d8 <XMC_I2C_CH_MasterTransmit>
//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
    for(uint16_t count=0; count < 500; count++){}
100069e0:	230c      	movs	r3, #12
100069e2:	18fb      	adds	r3, r7, r3
100069e4:	2200      	movs	r2, #0
100069e6:	801a      	strh	r2, [r3, #0]
100069e8:	e006      	b.n	100069f8 <INFO_RTCVBatEnable+0x68>
100069ea:	230c      	movs	r3, #12
100069ec:	18fb      	adds	r3, r7, r3
100069ee:	881a      	ldrh	r2, [r3, #0]
100069f0:	230c      	movs	r3, #12
100069f2:	18fb      	adds	r3, r7, r3
100069f4:	3201      	adds	r2, #1
100069f6:	801a      	strh	r2, [r3, #0]
100069f8:	230c      	movs	r3, #12
100069fa:	18fb      	adds	r3, r7, r3
100069fc:	881a      	ldrh	r2, [r3, #0]
100069fe:	23f4      	movs	r3, #244	; 0xf4
10006a00:	33ff      	adds	r3, #255	; 0xff
10006a02:	429a      	cmp	r2, r3
10006a04:	d9f1      	bls.n	100069ea <INFO_RTCVBatEnable+0x5a>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
10006a06:	4a5b      	ldr	r2, [pc, #364]	; (10006b74 <INFO_RTCVBatEnable+0x1e4>)
10006a08:	2380      	movs	r3, #128	; 0x80
10006a0a:	009b      	lsls	r3, r3, #2
10006a0c:	1c10      	adds	r0, r2, #0
10006a0e:	1c19      	adds	r1, r3, #0
10006a10:	f7ff f824 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

    /*    						Accessing RTCC Control Byte again w/ RD				*/
    XMC_I2C_CH_MasterRepeatedStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_READ);
10006a14:	4b57      	ldr	r3, [pc, #348]	; (10006b74 <INFO_RTCVBatEnable+0x1e4>)
10006a16:	1c18      	adds	r0, r3, #0
10006a18:	21de      	movs	r1, #222	; 0xde
10006a1a:	2201      	movs	r2, #1
10006a1c:	f7fb fbf2 	bl	10002204 <XMC_I2C_CH_MasterRepeatedStart>
//    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
    for(uint16_t count=0; count < 500; count++){}
10006a20:	230a      	movs	r3, #10
10006a22:	18fb      	adds	r3, r7, r3
10006a24:	2200      	movs	r2, #0
10006a26:	801a      	strh	r2, [r3, #0]
10006a28:	e006      	b.n	10006a38 <INFO_RTCVBatEnable+0xa8>
10006a2a:	230a      	movs	r3, #10
10006a2c:	18fb      	adds	r3, r7, r3
10006a2e:	881a      	ldrh	r2, [r3, #0]
10006a30:	230a      	movs	r3, #10
10006a32:	18fb      	adds	r3, r7, r3
10006a34:	3201      	adds	r2, #1
10006a36:	801a      	strh	r2, [r3, #0]
10006a38:	230a      	movs	r3, #10
10006a3a:	18fb      	adds	r3, r7, r3
10006a3c:	881a      	ldrh	r2, [r3, #0]
10006a3e:	23f4      	movs	r3, #244	; 0xf4
10006a40:	33ff      	adds	r3, #255	; 0xff
10006a42:	429a      	cmp	r2, r3
10006a44:	d9f1      	bls.n	10006a2a <INFO_RTCVBatEnable+0x9a>
    XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
10006a46:	4a4b      	ldr	r2, [pc, #300]	; (10006b74 <INFO_RTCVBatEnable+0x1e4>)
10006a48:	2380      	movs	r3, #128	; 0x80
10006a4a:	009b      	lsls	r3, r3, #2
10006a4c:	1c10      	adds	r0, r2, #0
10006a4e:	1c19      	adds	r1, r3, #0
10006a50:	f7ff f804 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

	/*							Send NACK											*/
    XMC_I2C_CH_MasterReceiveNack(XMC_USIC1_CH1);
10006a54:	4b47      	ldr	r3, [pc, #284]	; (10006b74 <INFO_RTCVBatEnable+0x1e4>)
10006a56:	1c18      	adds	r0, r3, #0
10006a58:	f7fb fc96 	bl	10002388 <XMC_I2C_CH_MasterReceiveNack>
//    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & (XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
//	                              XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)) == 0U){/* wait for ACK */}
    for(uint16_t count=0; count < 500; count++){}
10006a5c:	2308      	movs	r3, #8
10006a5e:	18fb      	adds	r3, r7, r3
10006a60:	2200      	movs	r2, #0
10006a62:	801a      	strh	r2, [r3, #0]
10006a64:	e006      	b.n	10006a74 <INFO_RTCVBatEnable+0xe4>
10006a66:	2308      	movs	r3, #8
10006a68:	18fb      	adds	r3, r7, r3
10006a6a:	881a      	ldrh	r2, [r3, #0]
10006a6c:	2308      	movs	r3, #8
10006a6e:	18fb      	adds	r3, r7, r3
10006a70:	3201      	adds	r2, #1
10006a72:	801a      	strh	r2, [r3, #0]
10006a74:	2308      	movs	r3, #8
10006a76:	18fb      	adds	r3, r7, r3
10006a78:	881a      	ldrh	r2, [r3, #0]
10006a7a:	23f4      	movs	r3, #244	; 0xf4
10006a7c:	33ff      	adds	r3, #255	; 0xff
10006a7e:	429a      	cmp	r2, r3
10006a80:	d9f1      	bls.n	10006a66 <INFO_RTCVBatEnable+0xd6>
    XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
10006a82:	4a3c      	ldr	r2, [pc, #240]	; (10006b74 <INFO_RTCVBatEnable+0x1e4>)
10006a84:	23c0      	movs	r3, #192	; 0xc0
10006a86:	021b      	lsls	r3, r3, #8
10006a88:	1c10      	adds	r0, r2, #0
10006a8a:	1c19      	adds	r1, r3, #0
10006a8c:	f7fe ffe6 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>
                                  XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);

    /*    						Load Register Information  								*/
    data     = XMC_I2C_CH_GetReceivedData(XMC_USIC1_CH1);
10006a90:	1c7c      	adds	r4, r7, #1
10006a92:	4b38      	ldr	r3, [pc, #224]	; (10006b74 <INFO_RTCVBatEnable+0x1e4>)
10006a94:	1c18      	adds	r0, r3, #0
10006a96:	f7fb fca1 	bl	100023dc <XMC_I2C_CH_GetReceivedData>
10006a9a:	1c03      	adds	r3, r0, #0
10006a9c:	7023      	strb	r3, [r4, #0]
    XMC_I2C_CH_MasterStop(XMC_USIC1_CH1);
10006a9e:	4b35      	ldr	r3, [pc, #212]	; (10006b74 <INFO_RTCVBatEnable+0x1e4>)
10006aa0:	1c18      	adds	r0, r3, #0
10006aa2:	f7fb fbef 	bl	10002284 <XMC_I2C_CH_MasterStop>

    /* 							Enable VBATEN bit										*/
    data	= data & 0x07; // enable VBATEN bit
10006aa6:	1c7b      	adds	r3, r7, #1
10006aa8:	1c7a      	adds	r2, r7, #1
10006aaa:	7812      	ldrb	r2, [r2, #0]
10006aac:	2107      	movs	r1, #7
10006aae:	400a      	ands	r2, r1
10006ab0:	701a      	strb	r2, [r3, #0]
    data	= data | 0x08; // enable VBATEN bit
10006ab2:	1c7b      	adds	r3, r7, #1
10006ab4:	1c7a      	adds	r2, r7, #1
10006ab6:	7812      	ldrb	r2, [r2, #0]
10006ab8:	2108      	movs	r1, #8
10006aba:	430a      	orrs	r2, r1
10006abc:	701a      	strb	r2, [r3, #0]

	/*    						Accessing RTCC Control Byte 						*/
	XMC_I2C_CH_MasterStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_WRITE);
10006abe:	4b2d      	ldr	r3, [pc, #180]	; (10006b74 <INFO_RTCVBatEnable+0x1e4>)
10006ac0:	1c18      	adds	r0, r3, #0
10006ac2:	21de      	movs	r1, #222	; 0xde
10006ac4:	2200      	movs	r2, #0
10006ac6:	f7fb fb5d 	bl	10002184 <XMC_I2C_CH_MasterStart>
//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
	for(uint16_t count=0; count < 500; count++){}
10006aca:	1dbb      	adds	r3, r7, #6
10006acc:	2200      	movs	r2, #0
10006ace:	801a      	strh	r2, [r3, #0]
10006ad0:	e004      	b.n	10006adc <INFO_RTCVBatEnable+0x14c>
10006ad2:	1dbb      	adds	r3, r7, #6
10006ad4:	881a      	ldrh	r2, [r3, #0]
10006ad6:	1dbb      	adds	r3, r7, #6
10006ad8:	3201      	adds	r2, #1
10006ada:	801a      	strh	r2, [r3, #0]
10006adc:	1dbb      	adds	r3, r7, #6
10006ade:	881a      	ldrh	r2, [r3, #0]
10006ae0:	23f4      	movs	r3, #244	; 0xf4
10006ae2:	33ff      	adds	r3, #255	; 0xff
10006ae4:	429a      	cmp	r2, r3
10006ae6:	d9f4      	bls.n	10006ad2 <INFO_RTCVBatEnable+0x142>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
10006ae8:	4a22      	ldr	r2, [pc, #136]	; (10006b74 <INFO_RTCVBatEnable+0x1e4>)
10006aea:	2380      	movs	r3, #128	; 0x80
10006aec:	009b      	lsls	r3, r3, #2
10006aee:	1c10      	adds	r0, r2, #0
10006af0:	1c19      	adds	r1, r3, #0
10006af2:	f7fe ffb3 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

    /*    						Write Control Address Byte  					*/
    XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, RTCWKDAY);
10006af6:	4b1f      	ldr	r3, [pc, #124]	; (10006b74 <INFO_RTCVBatEnable+0x1e4>)
10006af8:	1c18      	adds	r0, r3, #0
10006afa:	2103      	movs	r1, #3
10006afc:	f7fb fbec 	bl	100022d8 <XMC_I2C_CH_MasterTransmit>
//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
    for(uint16_t count=0; count < 500; count++){}
10006b00:	1d3b      	adds	r3, r7, #4
10006b02:	2200      	movs	r2, #0
10006b04:	801a      	strh	r2, [r3, #0]
10006b06:	e004      	b.n	10006b12 <INFO_RTCVBatEnable+0x182>
10006b08:	1d3b      	adds	r3, r7, #4
10006b0a:	881a      	ldrh	r2, [r3, #0]
10006b0c:	1d3b      	adds	r3, r7, #4
10006b0e:	3201      	adds	r2, #1
10006b10:	801a      	strh	r2, [r3, #0]
10006b12:	1d3b      	adds	r3, r7, #4
10006b14:	881a      	ldrh	r2, [r3, #0]
10006b16:	23f4      	movs	r3, #244	; 0xf4
10006b18:	33ff      	adds	r3, #255	; 0xff
10006b1a:	429a      	cmp	r2, r3
10006b1c:	d9f4      	bls.n	10006b08 <INFO_RTCVBatEnable+0x178>
    XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
10006b1e:	4a15      	ldr	r2, [pc, #84]	; (10006b74 <INFO_RTCVBatEnable+0x1e4>)
10006b20:	2380      	movs	r3, #128	; 0x80
10006b22:	009b      	lsls	r3, r3, #2
10006b24:	1c10      	adds	r0, r2, #0
10006b26:	1c19      	adds	r1, r3, #0
10006b28:	f7fe ff98 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

	/*	 					   Write value at Control Register 					*/
	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, data);
10006b2c:	4a11      	ldr	r2, [pc, #68]	; (10006b74 <INFO_RTCVBatEnable+0x1e4>)
10006b2e:	1c7b      	adds	r3, r7, #1
10006b30:	781b      	ldrb	r3, [r3, #0]
10006b32:	1c10      	adds	r0, r2, #0
10006b34:	1c19      	adds	r1, r3, #0
10006b36:	f7fb fbcf 	bl	100022d8 <XMC_I2C_CH_MasterTransmit>
//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
	for(uint16_t count=0; count < 500; count++){}
10006b3a:	1cbb      	adds	r3, r7, #2
10006b3c:	2200      	movs	r2, #0
10006b3e:	801a      	strh	r2, [r3, #0]
10006b40:	e004      	b.n	10006b4c <INFO_RTCVBatEnable+0x1bc>
10006b42:	1cbb      	adds	r3, r7, #2
10006b44:	881a      	ldrh	r2, [r3, #0]
10006b46:	1cbb      	adds	r3, r7, #2
10006b48:	3201      	adds	r2, #1
10006b4a:	801a      	strh	r2, [r3, #0]
10006b4c:	1cbb      	adds	r3, r7, #2
10006b4e:	881a      	ldrh	r2, [r3, #0]
10006b50:	23f4      	movs	r3, #244	; 0xf4
10006b52:	33ff      	adds	r3, #255	; 0xff
10006b54:	429a      	cmp	r2, r3
10006b56:	d9f4      	bls.n	10006b42 <INFO_RTCVBatEnable+0x1b2>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
10006b58:	4a06      	ldr	r2, [pc, #24]	; (10006b74 <INFO_RTCVBatEnable+0x1e4>)
10006b5a:	2380      	movs	r3, #128	; 0x80
10006b5c:	009b      	lsls	r3, r3, #2
10006b5e:	1c10      	adds	r0, r2, #0
10006b60:	1c19      	adds	r1, r3, #0
10006b62:	f7fe ff7b 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

	XMC_I2C_CH_MasterStop(XMC_USIC1_CH1);
10006b66:	4b03      	ldr	r3, [pc, #12]	; (10006b74 <INFO_RTCVBatEnable+0x1e4>)
10006b68:	1c18      	adds	r0, r3, #0
10006b6a:	f7fb fb8b 	bl	10002284 <XMC_I2C_CH_MasterStop>
}
10006b6e:	46bd      	mov	sp, r7
10006b70:	b005      	add	sp, #20
10006b72:	bd90      	pop	{r4, r7, pc}
10006b74:	48004200 	.word	0x48004200

10006b78 <INFO_RTCMFPEnable>:

void INFO_RTCMFPEnable(void)
{
10006b78:	b590      	push	{r4, r7, lr}
10006b7a:	b085      	sub	sp, #20
10006b7c:	af00      	add	r7, sp, #0
	uint8_t data;

	/*    						Accessing RTCC Control Byte w/ WR					*/
	XMC_I2C_CH_MasterStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_WRITE);
10006b7e:	4b74      	ldr	r3, [pc, #464]	; (10006d50 <INFO_RTCMFPEnable+0x1d8>)
10006b80:	1c18      	adds	r0, r3, #0
10006b82:	21de      	movs	r1, #222	; 0xde
10006b84:	2200      	movs	r2, #0
10006b86:	f7fb fafd 	bl	10002184 <XMC_I2C_CH_MasterStart>
//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
	for(uint16_t count=0; count < 500; count++){}
10006b8a:	230e      	movs	r3, #14
10006b8c:	18fb      	adds	r3, r7, r3
10006b8e:	2200      	movs	r2, #0
10006b90:	801a      	strh	r2, [r3, #0]
10006b92:	e006      	b.n	10006ba2 <INFO_RTCMFPEnable+0x2a>
10006b94:	230e      	movs	r3, #14
10006b96:	18fb      	adds	r3, r7, r3
10006b98:	881a      	ldrh	r2, [r3, #0]
10006b9a:	230e      	movs	r3, #14
10006b9c:	18fb      	adds	r3, r7, r3
10006b9e:	3201      	adds	r2, #1
10006ba0:	801a      	strh	r2, [r3, #0]
10006ba2:	230e      	movs	r3, #14
10006ba4:	18fb      	adds	r3, r7, r3
10006ba6:	881a      	ldrh	r2, [r3, #0]
10006ba8:	23f4      	movs	r3, #244	; 0xf4
10006baa:	33ff      	adds	r3, #255	; 0xff
10006bac:	429a      	cmp	r2, r3
10006bae:	d9f1      	bls.n	10006b94 <INFO_RTCMFPEnable+0x1c>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
10006bb0:	4a67      	ldr	r2, [pc, #412]	; (10006d50 <INFO_RTCMFPEnable+0x1d8>)
10006bb2:	2380      	movs	r3, #128	; 0x80
10006bb4:	009b      	lsls	r3, r3, #2
10006bb6:	1c10      	adds	r0, r2, #0
10006bb8:	1c19      	adds	r1, r3, #0
10006bba:	f7fe ff4f 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

    /*    						Write RTC Second Address Byte   							*/
    XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, MFPCONTROL);
10006bbe:	4b64      	ldr	r3, [pc, #400]	; (10006d50 <INFO_RTCMFPEnable+0x1d8>)
10006bc0:	1c18      	adds	r0, r3, #0
10006bc2:	2107      	movs	r1, #7
10006bc4:	f7fb fb88 	bl	100022d8 <XMC_I2C_CH_MasterTransmit>
//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
    for(uint16_t count=0; count < 500; count++){}
10006bc8:	230c      	movs	r3, #12
10006bca:	18fb      	adds	r3, r7, r3
10006bcc:	2200      	movs	r2, #0
10006bce:	801a      	strh	r2, [r3, #0]
10006bd0:	e006      	b.n	10006be0 <INFO_RTCMFPEnable+0x68>
10006bd2:	230c      	movs	r3, #12
10006bd4:	18fb      	adds	r3, r7, r3
10006bd6:	881a      	ldrh	r2, [r3, #0]
10006bd8:	230c      	movs	r3, #12
10006bda:	18fb      	adds	r3, r7, r3
10006bdc:	3201      	adds	r2, #1
10006bde:	801a      	strh	r2, [r3, #0]
10006be0:	230c      	movs	r3, #12
10006be2:	18fb      	adds	r3, r7, r3
10006be4:	881a      	ldrh	r2, [r3, #0]
10006be6:	23f4      	movs	r3, #244	; 0xf4
10006be8:	33ff      	adds	r3, #255	; 0xff
10006bea:	429a      	cmp	r2, r3
10006bec:	d9f1      	bls.n	10006bd2 <INFO_RTCMFPEnable+0x5a>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
10006bee:	4a58      	ldr	r2, [pc, #352]	; (10006d50 <INFO_RTCMFPEnable+0x1d8>)
10006bf0:	2380      	movs	r3, #128	; 0x80
10006bf2:	009b      	lsls	r3, r3, #2
10006bf4:	1c10      	adds	r0, r2, #0
10006bf6:	1c19      	adds	r1, r3, #0
10006bf8:	f7fe ff30 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

    /*    						Accessing RTCC Control Byte again w/ RD				*/
    XMC_I2C_CH_MasterRepeatedStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_READ);
10006bfc:	4b54      	ldr	r3, [pc, #336]	; (10006d50 <INFO_RTCMFPEnable+0x1d8>)
10006bfe:	1c18      	adds	r0, r3, #0
10006c00:	21de      	movs	r1, #222	; 0xde
10006c02:	2201      	movs	r2, #1
10006c04:	f7fb fafe 	bl	10002204 <XMC_I2C_CH_MasterRepeatedStart>
//    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
    for(uint16_t count=0; count < 500; count++){}
10006c08:	230a      	movs	r3, #10
10006c0a:	18fb      	adds	r3, r7, r3
10006c0c:	2200      	movs	r2, #0
10006c0e:	801a      	strh	r2, [r3, #0]
10006c10:	e006      	b.n	10006c20 <INFO_RTCMFPEnable+0xa8>
10006c12:	230a      	movs	r3, #10
10006c14:	18fb      	adds	r3, r7, r3
10006c16:	881a      	ldrh	r2, [r3, #0]
10006c18:	230a      	movs	r3, #10
10006c1a:	18fb      	adds	r3, r7, r3
10006c1c:	3201      	adds	r2, #1
10006c1e:	801a      	strh	r2, [r3, #0]
10006c20:	230a      	movs	r3, #10
10006c22:	18fb      	adds	r3, r7, r3
10006c24:	881a      	ldrh	r2, [r3, #0]
10006c26:	23f4      	movs	r3, #244	; 0xf4
10006c28:	33ff      	adds	r3, #255	; 0xff
10006c2a:	429a      	cmp	r2, r3
10006c2c:	d9f1      	bls.n	10006c12 <INFO_RTCMFPEnable+0x9a>
    XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
10006c2e:	4a48      	ldr	r2, [pc, #288]	; (10006d50 <INFO_RTCMFPEnable+0x1d8>)
10006c30:	2380      	movs	r3, #128	; 0x80
10006c32:	009b      	lsls	r3, r3, #2
10006c34:	1c10      	adds	r0, r2, #0
10006c36:	1c19      	adds	r1, r3, #0
10006c38:	f7fe ff10 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

	/*							Send NACK											*/
    XMC_I2C_CH_MasterReceiveNack(XMC_USIC1_CH1);
10006c3c:	4b44      	ldr	r3, [pc, #272]	; (10006d50 <INFO_RTCMFPEnable+0x1d8>)
10006c3e:	1c18      	adds	r0, r3, #0
10006c40:	f7fb fba2 	bl	10002388 <XMC_I2C_CH_MasterReceiveNack>
//    while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & (XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
//	                              XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)) == 0U){/* wait for ACK */}
    for(uint16_t count=0; count < 500; count++){}
10006c44:	2308      	movs	r3, #8
10006c46:	18fb      	adds	r3, r7, r3
10006c48:	2200      	movs	r2, #0
10006c4a:	801a      	strh	r2, [r3, #0]
10006c4c:	e006      	b.n	10006c5c <INFO_RTCMFPEnable+0xe4>
10006c4e:	2308      	movs	r3, #8
10006c50:	18fb      	adds	r3, r7, r3
10006c52:	881a      	ldrh	r2, [r3, #0]
10006c54:	2308      	movs	r3, #8
10006c56:	18fb      	adds	r3, r7, r3
10006c58:	3201      	adds	r2, #1
10006c5a:	801a      	strh	r2, [r3, #0]
10006c5c:	2308      	movs	r3, #8
10006c5e:	18fb      	adds	r3, r7, r3
10006c60:	881a      	ldrh	r2, [r3, #0]
10006c62:	23f4      	movs	r3, #244	; 0xf4
10006c64:	33ff      	adds	r3, #255	; 0xff
10006c66:	429a      	cmp	r2, r3
10006c68:	d9f1      	bls.n	10006c4e <INFO_RTCMFPEnable+0xd6>
    XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
10006c6a:	4a39      	ldr	r2, [pc, #228]	; (10006d50 <INFO_RTCMFPEnable+0x1d8>)
10006c6c:	23c0      	movs	r3, #192	; 0xc0
10006c6e:	021b      	lsls	r3, r3, #8
10006c70:	1c10      	adds	r0, r2, #0
10006c72:	1c19      	adds	r1, r3, #0
10006c74:	f7fe fef2 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>
                                  XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);

    /*    						Load Register Information  								*/
    data     = XMC_I2C_CH_GetReceivedData(XMC_USIC1_CH1);
10006c78:	1c7c      	adds	r4, r7, #1
10006c7a:	4b35      	ldr	r3, [pc, #212]	; (10006d50 <INFO_RTCMFPEnable+0x1d8>)
10006c7c:	1c18      	adds	r0, r3, #0
10006c7e:	f7fb fbad 	bl	100023dc <XMC_I2C_CH_GetReceivedData>
10006c82:	1c03      	adds	r3, r0, #0
10006c84:	7023      	strb	r3, [r4, #0]
    XMC_I2C_CH_MasterStop(XMC_USIC1_CH1);
10006c86:	4b32      	ldr	r3, [pc, #200]	; (10006d50 <INFO_RTCMFPEnable+0x1d8>)
10006c88:	1c18      	adds	r0, r3, #0
10006c8a:	f7fb fafb 	bl	10002284 <XMC_I2C_CH_MasterStop>

    /* 							Enable SQWEN Bit SQWFS1 and SQWFS0 depend on MFP_FREQ value, others '0'									*/
    data	= data | 0x40;
10006c8e:	1c7b      	adds	r3, r7, #1
10006c90:	1c7a      	adds	r2, r7, #1
10006c92:	7812      	ldrb	r2, [r2, #0]
10006c94:	2140      	movs	r1, #64	; 0x40
10006c96:	430a      	orrs	r2, r1
10006c98:	701a      	strb	r2, [r3, #0]

	/*    						Accessing RTCC Control Byte 						*/
	XMC_I2C_CH_MasterStart(XMC_USIC1_CH1, SRAMRTCC, XMC_I2C_CH_CMD_WRITE);
10006c9a:	4b2d      	ldr	r3, [pc, #180]	; (10006d50 <INFO_RTCMFPEnable+0x1d8>)
10006c9c:	1c18      	adds	r0, r3, #0
10006c9e:	21de      	movs	r1, #222	; 0xde
10006ca0:	2200      	movs	r2, #0
10006ca2:	f7fb fa6f 	bl	10002184 <XMC_I2C_CH_MasterStart>
//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
	for(uint16_t count=0; count < 500; count++){}
10006ca6:	1dbb      	adds	r3, r7, #6
10006ca8:	2200      	movs	r2, #0
10006caa:	801a      	strh	r2, [r3, #0]
10006cac:	e004      	b.n	10006cb8 <INFO_RTCMFPEnable+0x140>
10006cae:	1dbb      	adds	r3, r7, #6
10006cb0:	881a      	ldrh	r2, [r3, #0]
10006cb2:	1dbb      	adds	r3, r7, #6
10006cb4:	3201      	adds	r2, #1
10006cb6:	801a      	strh	r2, [r3, #0]
10006cb8:	1dbb      	adds	r3, r7, #6
10006cba:	881a      	ldrh	r2, [r3, #0]
10006cbc:	23f4      	movs	r3, #244	; 0xf4
10006cbe:	33ff      	adds	r3, #255	; 0xff
10006cc0:	429a      	cmp	r2, r3
10006cc2:	d9f4      	bls.n	10006cae <INFO_RTCMFPEnable+0x136>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
10006cc4:	4a22      	ldr	r2, [pc, #136]	; (10006d50 <INFO_RTCMFPEnable+0x1d8>)
10006cc6:	2380      	movs	r3, #128	; 0x80
10006cc8:	009b      	lsls	r3, r3, #2
10006cca:	1c10      	adds	r0, r2, #0
10006ccc:	1c19      	adds	r1, r3, #0
10006cce:	f7fe fec5 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

    /*    						Write RTC Control Address Byte  					*/
    XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, MFPCONTROL);
10006cd2:	4b1f      	ldr	r3, [pc, #124]	; (10006d50 <INFO_RTCMFPEnable+0x1d8>)
10006cd4:	1c18      	adds	r0, r3, #0
10006cd6:	2107      	movs	r1, #7
10006cd8:	f7fb fafe 	bl	100022d8 <XMC_I2C_CH_MasterTransmit>
//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
    for(uint16_t count=0; count < 500; count++){}
10006cdc:	1d3b      	adds	r3, r7, #4
10006cde:	2200      	movs	r2, #0
10006ce0:	801a      	strh	r2, [r3, #0]
10006ce2:	e004      	b.n	10006cee <INFO_RTCMFPEnable+0x176>
10006ce4:	1d3b      	adds	r3, r7, #4
10006ce6:	881a      	ldrh	r2, [r3, #0]
10006ce8:	1d3b      	adds	r3, r7, #4
10006cea:	3201      	adds	r2, #1
10006cec:	801a      	strh	r2, [r3, #0]
10006cee:	1d3b      	adds	r3, r7, #4
10006cf0:	881a      	ldrh	r2, [r3, #0]
10006cf2:	23f4      	movs	r3, #244	; 0xf4
10006cf4:	33ff      	adds	r3, #255	; 0xff
10006cf6:	429a      	cmp	r2, r3
10006cf8:	d9f4      	bls.n	10006ce4 <INFO_RTCMFPEnable+0x16c>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
10006cfa:	4a15      	ldr	r2, [pc, #84]	; (10006d50 <INFO_RTCMFPEnable+0x1d8>)
10006cfc:	2380      	movs	r3, #128	; 0x80
10006cfe:	009b      	lsls	r3, r3, #2
10006d00:	1c10      	adds	r0, r2, #0
10006d02:	1c19      	adds	r1, r3, #0
10006d04:	f7fe feaa 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

	/*	 					   Write value at Control Address Byte 					*/
	XMC_I2C_CH_MasterTransmit(XMC_USIC1_CH1, data);
10006d08:	4a11      	ldr	r2, [pc, #68]	; (10006d50 <INFO_RTCMFPEnable+0x1d8>)
10006d0a:	1c7b      	adds	r3, r7, #1
10006d0c:	781b      	ldrb	r3, [r3, #0]
10006d0e:	1c10      	adds	r0, r2, #0
10006d10:	1c19      	adds	r1, r3, #0
10006d12:	f7fb fae1 	bl	100022d8 <XMC_I2C_CH_MasterTransmit>
//	while((XMC_I2C_CH_GetStatusFlag(XMC_USIC1_CH1) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U){/* wait for ACK */}
	for(uint16_t count=0; count < 500; count++){}
10006d16:	1cbb      	adds	r3, r7, #2
10006d18:	2200      	movs	r2, #0
10006d1a:	801a      	strh	r2, [r3, #0]
10006d1c:	e004      	b.n	10006d28 <INFO_RTCMFPEnable+0x1b0>
10006d1e:	1cbb      	adds	r3, r7, #2
10006d20:	881a      	ldrh	r2, [r3, #0]
10006d22:	1cbb      	adds	r3, r7, #2
10006d24:	3201      	adds	r2, #1
10006d26:	801a      	strh	r2, [r3, #0]
10006d28:	1cbb      	adds	r3, r7, #2
10006d2a:	881a      	ldrh	r2, [r3, #0]
10006d2c:	23f4      	movs	r3, #244	; 0xf4
10006d2e:	33ff      	adds	r3, #255	; 0xff
10006d30:	429a      	cmp	r2, r3
10006d32:	d9f4      	bls.n	10006d1e <INFO_RTCMFPEnable+0x1a6>
	XMC_I2C_CH_ClearStatusFlag(XMC_USIC1_CH1, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
10006d34:	4a06      	ldr	r2, [pc, #24]	; (10006d50 <INFO_RTCMFPEnable+0x1d8>)
10006d36:	2380      	movs	r3, #128	; 0x80
10006d38:	009b      	lsls	r3, r3, #2
10006d3a:	1c10      	adds	r0, r2, #0
10006d3c:	1c19      	adds	r1, r3, #0
10006d3e:	f7fe fe8d 	bl	10005a5c <XMC_I2C_CH_ClearStatusFlag>

	XMC_I2C_CH_MasterStop(XMC_USIC1_CH1);
10006d42:	4b03      	ldr	r3, [pc, #12]	; (10006d50 <INFO_RTCMFPEnable+0x1d8>)
10006d44:	1c18      	adds	r0, r3, #0
10006d46:	f7fb fa9d 	bl	10002284 <XMC_I2C_CH_MasterStop>
}
10006d4a:	46bd      	mov	sp, r7
10006d4c:	b005      	add	sp, #20
10006d4e:	bd90      	pop	{r4, r7, pc}
10006d50:	48004200 	.word	0x48004200

10006d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10006d54:	b580      	push	{r7, lr}
10006d56:	b082      	sub	sp, #8
10006d58:	af00      	add	r7, sp, #0
10006d5a:	1c02      	adds	r2, r0, #0
10006d5c:	1dfb      	adds	r3, r7, #7
10006d5e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10006d60:	1dfb      	adds	r3, r7, #7
10006d62:	781b      	ldrb	r3, [r3, #0]
10006d64:	2b7f      	cmp	r3, #127	; 0x7f
10006d66:	d809      	bhi.n	10006d7c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
10006d68:	4b06      	ldr	r3, [pc, #24]	; (10006d84 <__NVIC_EnableIRQ+0x30>)
10006d6a:	1dfa      	adds	r2, r7, #7
10006d6c:	7812      	ldrb	r2, [r2, #0]
10006d6e:	1c11      	adds	r1, r2, #0
10006d70:	221f      	movs	r2, #31
10006d72:	400a      	ands	r2, r1
10006d74:	2101      	movs	r1, #1
10006d76:	4091      	lsls	r1, r2
10006d78:	1c0a      	adds	r2, r1, #0
10006d7a:	601a      	str	r2, [r3, #0]
  }
}
10006d7c:	46bd      	mov	sp, r7
10006d7e:	b002      	add	sp, #8
10006d80:	bd80      	pop	{r7, pc}
10006d82:	46c0      	nop			; (mov r8, r8)
10006d84:	e000e100 	.word	0xe000e100

10006d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10006d88:	b5b0      	push	{r4, r5, r7, lr}
10006d8a:	b082      	sub	sp, #8
10006d8c:	af00      	add	r7, sp, #0
10006d8e:	1c02      	adds	r2, r0, #0
10006d90:	6039      	str	r1, [r7, #0]
10006d92:	1dfb      	adds	r3, r7, #7
10006d94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10006d96:	1dfb      	adds	r3, r7, #7
10006d98:	781b      	ldrb	r3, [r3, #0]
10006d9a:	2b7f      	cmp	r3, #127	; 0x7f
10006d9c:	d827      	bhi.n	10006dee <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10006d9e:	4c2d      	ldr	r4, [pc, #180]	; (10006e54 <__NVIC_SetPriority+0xcc>)
10006da0:	1dfb      	adds	r3, r7, #7
10006da2:	781b      	ldrb	r3, [r3, #0]
10006da4:	b25b      	sxtb	r3, r3
10006da6:	089b      	lsrs	r3, r3, #2
10006da8:	492a      	ldr	r1, [pc, #168]	; (10006e54 <__NVIC_SetPriority+0xcc>)
10006daa:	1dfa      	adds	r2, r7, #7
10006dac:	7812      	ldrb	r2, [r2, #0]
10006dae:	b252      	sxtb	r2, r2
10006db0:	0892      	lsrs	r2, r2, #2
10006db2:	32c0      	adds	r2, #192	; 0xc0
10006db4:	0092      	lsls	r2, r2, #2
10006db6:	5852      	ldr	r2, [r2, r1]
10006db8:	1df9      	adds	r1, r7, #7
10006dba:	7809      	ldrb	r1, [r1, #0]
10006dbc:	1c08      	adds	r0, r1, #0
10006dbe:	2103      	movs	r1, #3
10006dc0:	4001      	ands	r1, r0
10006dc2:	00c9      	lsls	r1, r1, #3
10006dc4:	1c08      	adds	r0, r1, #0
10006dc6:	21ff      	movs	r1, #255	; 0xff
10006dc8:	4081      	lsls	r1, r0
10006dca:	43c9      	mvns	r1, r1
10006dcc:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10006dce:	683a      	ldr	r2, [r7, #0]
10006dd0:	0192      	lsls	r2, r2, #6
10006dd2:	20ff      	movs	r0, #255	; 0xff
10006dd4:	4002      	ands	r2, r0
10006dd6:	1df8      	adds	r0, r7, #7
10006dd8:	7800      	ldrb	r0, [r0, #0]
10006dda:	1c05      	adds	r5, r0, #0
10006ddc:	2003      	movs	r0, #3
10006dde:	4028      	ands	r0, r5
10006de0:	00c0      	lsls	r0, r0, #3
10006de2:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10006de4:	430a      	orrs	r2, r1
10006de6:	33c0      	adds	r3, #192	; 0xc0
10006de8:	009b      	lsls	r3, r3, #2
10006dea:	511a      	str	r2, [r3, r4]
10006dec:	e02e      	b.n	10006e4c <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10006dee:	4c1a      	ldr	r4, [pc, #104]	; (10006e58 <__NVIC_SetPriority+0xd0>)
10006df0:	1dfb      	adds	r3, r7, #7
10006df2:	781b      	ldrb	r3, [r3, #0]
10006df4:	1c1a      	adds	r2, r3, #0
10006df6:	230f      	movs	r3, #15
10006df8:	4013      	ands	r3, r2
10006dfa:	3b08      	subs	r3, #8
10006dfc:	0899      	lsrs	r1, r3, #2
10006dfe:	4a16      	ldr	r2, [pc, #88]	; (10006e58 <__NVIC_SetPriority+0xd0>)
10006e00:	1dfb      	adds	r3, r7, #7
10006e02:	781b      	ldrb	r3, [r3, #0]
10006e04:	1c18      	adds	r0, r3, #0
10006e06:	230f      	movs	r3, #15
10006e08:	4003      	ands	r3, r0
10006e0a:	3b08      	subs	r3, #8
10006e0c:	089b      	lsrs	r3, r3, #2
10006e0e:	3306      	adds	r3, #6
10006e10:	009b      	lsls	r3, r3, #2
10006e12:	18d3      	adds	r3, r2, r3
10006e14:	685b      	ldr	r3, [r3, #4]
10006e16:	1dfa      	adds	r2, r7, #7
10006e18:	7812      	ldrb	r2, [r2, #0]
10006e1a:	1c10      	adds	r0, r2, #0
10006e1c:	2203      	movs	r2, #3
10006e1e:	4002      	ands	r2, r0
10006e20:	00d2      	lsls	r2, r2, #3
10006e22:	1c10      	adds	r0, r2, #0
10006e24:	22ff      	movs	r2, #255	; 0xff
10006e26:	4082      	lsls	r2, r0
10006e28:	43d2      	mvns	r2, r2
10006e2a:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10006e2c:	683b      	ldr	r3, [r7, #0]
10006e2e:	019b      	lsls	r3, r3, #6
10006e30:	20ff      	movs	r0, #255	; 0xff
10006e32:	4003      	ands	r3, r0
10006e34:	1df8      	adds	r0, r7, #7
10006e36:	7800      	ldrb	r0, [r0, #0]
10006e38:	1c05      	adds	r5, r0, #0
10006e3a:	2003      	movs	r0, #3
10006e3c:	4028      	ands	r0, r5
10006e3e:	00c0      	lsls	r0, r0, #3
10006e40:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10006e42:	431a      	orrs	r2, r3
10006e44:	1d8b      	adds	r3, r1, #6
10006e46:	009b      	lsls	r3, r3, #2
10006e48:	18e3      	adds	r3, r4, r3
10006e4a:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10006e4c:	46bd      	mov	sp, r7
10006e4e:	b002      	add	sp, #8
10006e50:	bdb0      	pop	{r4, r5, r7, pc}
10006e52:	46c0      	nop			; (mov r8, r8)
10006e54:	e000e100 	.word	0xe000e100
10006e58:	e000ed00 	.word	0xe000ed00

10006e5c <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
10006e5c:	b580      	push	{r7, lr}
10006e5e:	b082      	sub	sp, #8
10006e60:	af00      	add	r7, sp, #0
10006e62:	6078      	str	r0, [r7, #4]
10006e64:	1c08      	adds	r0, r1, #0
10006e66:	1c11      	adds	r1, r2, #0
10006e68:	1cfb      	adds	r3, r7, #3
10006e6a:	1c02      	adds	r2, r0, #0
10006e6c:	701a      	strb	r2, [r3, #0]
10006e6e:	1cbb      	adds	r3, r7, #2
10006e70:	1c0a      	adds	r2, r1, #0
10006e72:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
10006e74:	1cfb      	adds	r3, r7, #3
10006e76:	7818      	ldrb	r0, [r3, #0]
10006e78:	1cfb      	adds	r3, r7, #3
10006e7a:	781b      	ldrb	r3, [r3, #0]
10006e7c:	687a      	ldr	r2, [r7, #4]
10006e7e:	3306      	adds	r3, #6
10006e80:	009b      	lsls	r3, r3, #2
10006e82:	18d3      	adds	r3, r2, r3
10006e84:	685b      	ldr	r3, [r3, #4]
10006e86:	2207      	movs	r2, #7
10006e88:	4393      	bics	r3, r2
10006e8a:	1c1a      	adds	r2, r3, #0
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
10006e8c:	1cbb      	adds	r3, r7, #2
10006e8e:	781b      	ldrb	r3, [r3, #0]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
10006e90:	431a      	orrs	r2, r3
10006e92:	6879      	ldr	r1, [r7, #4]
10006e94:	1d83      	adds	r3, r0, #6
10006e96:	009b      	lsls	r3, r3, #2
10006e98:	18cb      	adds	r3, r1, r3
10006e9a:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
10006e9c:	46bd      	mov	sp, r7
10006e9e:	b002      	add	sp, #8
10006ea0:	bd80      	pop	{r7, pc}
10006ea2:	46c0      	nop			; (mov r8, r8)

10006ea4 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
10006ea4:	b580      	push	{r7, lr}
10006ea6:	b082      	sub	sp, #8
10006ea8:	af00      	add	r7, sp, #0
10006eaa:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
10006eac:	687b      	ldr	r3, [r7, #4]
10006eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10006eb0:	220f      	movs	r2, #15
10006eb2:	4393      	bics	r3, r2
10006eb4:	2202      	movs	r2, #2
10006eb6:	431a      	orrs	r2, r3
10006eb8:	687b      	ldr	r3, [r7, #4]
10006eba:	641a      	str	r2, [r3, #64]	; 0x40
}
10006ebc:	46bd      	mov	sp, r7
10006ebe:	b002      	add	sp, #8
10006ec0:	bd80      	pop	{r7, pc}
10006ec2:	46c0      	nop			; (mov r8, r8)

10006ec4 <XMC_UART_CH_SelectInterruptNodePointer>:
 * XMC_UART_CH_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SelectInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                            const XMC_UART_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                            const uint32_t service_request)
{
10006ec4:	b580      	push	{r7, lr}
10006ec6:	b084      	sub	sp, #16
10006ec8:	af00      	add	r7, sp, #0
10006eca:	60f8      	str	r0, [r7, #12]
10006ecc:	607a      	str	r2, [r7, #4]
10006ece:	230b      	movs	r3, #11
10006ed0:	18fb      	adds	r3, r7, r3
10006ed2:	1c0a      	adds	r2, r1, #0
10006ed4:	701a      	strb	r2, [r3, #0]
  XMC_USIC_CH_SetInterruptNodePointer(channel, (XMC_USIC_CH_INTERRUPT_NODE_POINTER_t)interrupt_node,
10006ed6:	68f9      	ldr	r1, [r7, #12]
10006ed8:	230b      	movs	r3, #11
10006eda:	18fb      	adds	r3, r7, r3
10006edc:	781a      	ldrb	r2, [r3, #0]
10006ede:	687b      	ldr	r3, [r7, #4]
10006ee0:	1c08      	adds	r0, r1, #0
10006ee2:	1c11      	adds	r1, r2, #0
10006ee4:	1c1a      	adds	r2, r3, #0
10006ee6:	f7fb fc89 	bl	100027fc <XMC_USIC_CH_SetInterruptNodePointer>
		                                       (uint32_t)service_request);
}
10006eea:	46bd      	mov	sp, r7
10006eec:	b004      	add	sp, #16
10006eee:	bd80      	pop	{r7, pc}

10006ef0 <XMC_UART_CH_SetInputSource>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_UART_CH_INPUT_t input, const uint8_t source)
{
10006ef0:	b580      	push	{r7, lr}
10006ef2:	b082      	sub	sp, #8
10006ef4:	af00      	add	r7, sp, #0
10006ef6:	6078      	str	r0, [r7, #4]
10006ef8:	1c08      	adds	r0, r1, #0
10006efa:	1c11      	adds	r1, r2, #0
10006efc:	1cfb      	adds	r3, r7, #3
10006efe:	1c02      	adds	r2, r0, #0
10006f00:	701a      	strb	r2, [r3, #0]
10006f02:	1cbb      	adds	r3, r7, #2
10006f04:	1c0a      	adds	r2, r1, #0
10006f06:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~(USIC_CH_DX0CR_INSW_Msk|USIC_CH_DX0CR_DSEN_Msk)));
10006f08:	1cfb      	adds	r3, r7, #3
10006f0a:	7818      	ldrb	r0, [r3, #0]
10006f0c:	1cfb      	adds	r3, r7, #3
10006f0e:	781b      	ldrb	r3, [r3, #0]
10006f10:	687a      	ldr	r2, [r7, #4]
10006f12:	3306      	adds	r3, #6
10006f14:	009b      	lsls	r3, r3, #2
10006f16:	18d3      	adds	r3, r2, r3
10006f18:	685b      	ldr	r3, [r3, #4]
10006f1a:	2250      	movs	r2, #80	; 0x50
10006f1c:	4393      	bics	r3, r2
10006f1e:	1c1a      	adds	r2, r3, #0
10006f20:	6879      	ldr	r1, [r7, #4]
10006f22:	1d83      	adds	r3, r0, #6
10006f24:	009b      	lsls	r3, r3, #2
10006f26:	18cb      	adds	r3, r1, r3
10006f28:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
10006f2a:	6879      	ldr	r1, [r7, #4]
10006f2c:	1cfb      	adds	r3, r7, #3
10006f2e:	781a      	ldrb	r2, [r3, #0]
10006f30:	1cbb      	adds	r3, r7, #2
10006f32:	781b      	ldrb	r3, [r3, #0]
10006f34:	1c08      	adds	r0, r1, #0
10006f36:	1c11      	adds	r1, r2, #0
10006f38:	1c1a      	adds	r2, r3, #0
10006f3a:	f7ff ff8f 	bl	10006e5c <XMC_USIC_CH_SetInputSource>
}
10006f3e:	46bd      	mov	sp, r7
10006f40:	b002      	add	sp, #8
10006f42:	bd80      	pop	{r7, pc}

10006f44 <XMC_GPIO_SetOutputLevel>:
 *
 */


__STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_OUTPUT_LEVEL_t level)
{
10006f44:	b580      	push	{r7, lr}
10006f46:	b084      	sub	sp, #16
10006f48:	af00      	add	r7, sp, #0
10006f4a:	60f8      	str	r0, [r7, #12]
10006f4c:	607a      	str	r2, [r7, #4]
10006f4e:	230b      	movs	r3, #11
10006f50:	18fb      	adds	r3, r7, r3
10006f52:	1c0a      	adds	r2, r1, #0
10006f54:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
  
  port->OMR = (uint32_t)level << pin;
10006f56:	230b      	movs	r3, #11
10006f58:	18fb      	adds	r3, r7, r3
10006f5a:	781b      	ldrb	r3, [r3, #0]
10006f5c:	687a      	ldr	r2, [r7, #4]
10006f5e:	409a      	lsls	r2, r3
10006f60:	68fb      	ldr	r3, [r7, #12]
10006f62:	605a      	str	r2, [r3, #4]
}
10006f64:	46bd      	mov	sp, r7
10006f66:	b004      	add	sp, #16
10006f68:	bd80      	pop	{r7, pc}
10006f6a:	46c0      	nop			; (mov r8, r8)

10006f6c <GEENIX_Connection_Init>:

#include "geenix_operation.h"
#include "misc_operation.h"

void GEENIX_Connection_Init(void)
{
10006f6c:	b580      	push	{r7, lr}
10006f6e:	af00      	add	r7, sp, #0
	XMC_GPIO_Init(P0_6, &geenix_sel_config);
10006f70:	4a21      	ldr	r2, [pc, #132]	; (10006ff8 <GEENIX_Connection_Init+0x8c>)
10006f72:	4b22      	ldr	r3, [pc, #136]	; (10006ffc <GEENIX_Connection_Init+0x90>)
10006f74:	1c10      	adds	r0, r2, #0
10006f76:	2106      	movs	r1, #6
10006f78:	1c1a      	adds	r2, r3, #0
10006f7a:	f7fa f937 	bl	100011ec <XMC_GPIO_Init>
    XMC_GPIO_Init(P0_2, &geenix_tx_config);
10006f7e:	4a1e      	ldr	r2, [pc, #120]	; (10006ff8 <GEENIX_Connection_Init+0x8c>)
10006f80:	4b1f      	ldr	r3, [pc, #124]	; (10007000 <GEENIX_Connection_Init+0x94>)
10006f82:	1c10      	adds	r0, r2, #0
10006f84:	2102      	movs	r1, #2
10006f86:	1c1a      	adds	r2, r3, #0
10006f88:	f7fa f930 	bl	100011ec <XMC_GPIO_Init>
    XMC_GPIO_Init(P0_3, &geenix_rx_config);
10006f8c:	4a1a      	ldr	r2, [pc, #104]	; (10006ff8 <GEENIX_Connection_Init+0x8c>)
10006f8e:	4b1d      	ldr	r3, [pc, #116]	; (10007004 <GEENIX_Connection_Init+0x98>)
10006f90:	1c10      	adds	r0, r2, #0
10006f92:	2103      	movs	r1, #3
10006f94:	1c1a      	adds	r2, r3, #0
10006f96:	f7fa f929 	bl	100011ec <XMC_GPIO_Init>

   	XMC_USIC_CH_Enable(XMC_USIC1_CH0);
10006f9a:	4b1b      	ldr	r3, [pc, #108]	; (10007008 <GEENIX_Connection_Init+0x9c>)
10006f9c:	1c18      	adds	r0, r3, #0
10006f9e:	f7fb fb7b 	bl	10002698 <XMC_USIC_CH_Enable>
	XMC_UART_CH_Init(XMC_USIC1_CH0, &geenix_config);
10006fa2:	4a19      	ldr	r2, [pc, #100]	; (10007008 <GEENIX_Connection_Init+0x9c>)
10006fa4:	4b19      	ldr	r3, [pc, #100]	; (1000700c <GEENIX_Connection_Init+0xa0>)
10006fa6:	1c10      	adds	r0, r2, #0
10006fa8:	1c19      	adds	r1, r3, #0
10006faa:	f7fb fab3 	bl	10002514 <XMC_UART_CH_Init>
	XMC_UART_CH_SetInputSource(XMC_USIC1_CH0, XMC_UART_CH_INPUT_RXD, USIC1_C0_DX0_P0_3);
10006fae:	4b16      	ldr	r3, [pc, #88]	; (10007008 <GEENIX_Connection_Init+0x9c>)
10006fb0:	1c18      	adds	r0, r3, #0
10006fb2:	2100      	movs	r1, #0
10006fb4:	2201      	movs	r2, #1
10006fb6:	f7ff ff9b 	bl	10006ef0 <XMC_UART_CH_SetInputSource>

	XMC_UART_CH_EnableEvent(XMC_USIC1_CH0,XMC_UART_CH_EVENT_STANDARD_RECEIVE); // PSR.RFF
10006fba:	4a13      	ldr	r2, [pc, #76]	; (10007008 <GEENIX_Connection_Init+0x9c>)
10006fbc:	2380      	movs	r3, #128	; 0x80
10006fbe:	01db      	lsls	r3, r3, #7
10006fc0:	1c10      	adds	r0, r2, #0
10006fc2:	1c19      	adds	r1, r3, #0
10006fc4:	f7fb fb4e 	bl	10002664 <XMC_UART_CH_EnableEvent>
	XMC_UART_CH_SelectInterruptNodePointer(XMC_USIC1_CH0, XMC_UART_CH_INTERRUPT_NODE_POINTER_RECEIVE, 3);
10006fc8:	4b0f      	ldr	r3, [pc, #60]	; (10007008 <GEENIX_Connection_Init+0x9c>)
10006fca:	1c18      	adds	r0, r3, #0
10006fcc:	2108      	movs	r1, #8
10006fce:	2203      	movs	r2, #3
10006fd0:	f7ff ff78 	bl	10006ec4 <XMC_UART_CH_SelectInterruptNodePointer>
	XMC_SCU_SetInterruptControl(IRQ12_IRQn, XMC_SCU_IRQCTRL_USIC1_SR3_IRQ12);
10006fd4:	4b0e      	ldr	r3, [pc, #56]	; (10007010 <GEENIX_Connection_Init+0xa4>)
10006fd6:	200c      	movs	r0, #12
10006fd8:	1c19      	adds	r1, r3, #0
10006fda:	f7fa fa03 	bl	100013e4 <XMC_SCU_SetInterruptControl>
	NVIC_SetPriority(IRQ12_IRQn, 10U);
10006fde:	200c      	movs	r0, #12
10006fe0:	210a      	movs	r1, #10
10006fe2:	f7ff fed1 	bl	10006d88 <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQ12_IRQn);
10006fe6:	200c      	movs	r0, #12
10006fe8:	f7ff feb4 	bl	10006d54 <__NVIC_EnableIRQ>

	XMC_UART_CH_Start(XMC_USIC1_CH0); // Sets the USIC channel operation mode to UART mode
10006fec:	4b06      	ldr	r3, [pc, #24]	; (10007008 <GEENIX_Connection_Init+0x9c>)
10006fee:	1c18      	adds	r0, r3, #0
10006ff0:	f7ff ff58 	bl	10006ea4 <XMC_UART_CH_Start>
}
10006ff4:	46bd      	mov	sp, r7
10006ff6:	bd80      	pop	{r7, pc}
10006ff8:	40040000 	.word	0x40040000
10006ffc:	200006d0 	.word	0x200006d0
10007000:	200006d8 	.word	0x200006d8
10007004:	20000a60 	.word	0x20000a60
10007008:	48004000 	.word	0x48004000
1000700c:	200006e0 	.word	0x200006e0
10007010:	00000c01 	.word	0x00000c01

10007014 <GEENIX_Async_Delay>:

void GEENIX_Async_Delay(uint8_t byte_sent)
{
10007014:	b580      	push	{r7, lr}
10007016:	b084      	sub	sp, #16
10007018:	af00      	add	r7, sp, #0
1000701a:	1c02      	adds	r2, r0, #0
1000701c:	1dfb      	adds	r3, r7, #7
1000701e:	701a      	strb	r2, [r3, #0]
	uint8_t  byte_count;
	uint16_t delay_count;
	for(byte_count = 0; byte_count<=byte_sent-1;byte_count++)
10007020:	230f      	movs	r3, #15
10007022:	18fb      	adds	r3, r7, r3
10007024:	2200      	movs	r2, #0
10007026:	701a      	strb	r2, [r3, #0]
10007028:	e019      	b.n	1000705e <GEENIX_Async_Delay+0x4a>
	{
		for(delay_count=0; delay_count < 700; delay_count++)
1000702a:	230c      	movs	r3, #12
1000702c:	18fb      	adds	r3, r7, r3
1000702e:	2200      	movs	r2, #0
10007030:	801a      	strh	r2, [r3, #0]
10007032:	e007      	b.n	10007044 <GEENIX_Async_Delay+0x30>
		{
			__NOP();
10007034:	46c0      	nop			; (mov r8, r8)
{
	uint8_t  byte_count;
	uint16_t delay_count;
	for(byte_count = 0; byte_count<=byte_sent-1;byte_count++)
	{
		for(delay_count=0; delay_count < 700; delay_count++)
10007036:	230c      	movs	r3, #12
10007038:	18fb      	adds	r3, r7, r3
1000703a:	881a      	ldrh	r2, [r3, #0]
1000703c:	230c      	movs	r3, #12
1000703e:	18fb      	adds	r3, r7, r3
10007040:	3201      	adds	r2, #1
10007042:	801a      	strh	r2, [r3, #0]
10007044:	230c      	movs	r3, #12
10007046:	18fb      	adds	r3, r7, r3
10007048:	881b      	ldrh	r3, [r3, #0]
1000704a:	4a0a      	ldr	r2, [pc, #40]	; (10007074 <GEENIX_Async_Delay+0x60>)
1000704c:	4293      	cmp	r3, r2
1000704e:	d9f1      	bls.n	10007034 <GEENIX_Async_Delay+0x20>

void GEENIX_Async_Delay(uint8_t byte_sent)
{
	uint8_t  byte_count;
	uint16_t delay_count;
	for(byte_count = 0; byte_count<=byte_sent-1;byte_count++)
10007050:	230f      	movs	r3, #15
10007052:	18fb      	adds	r3, r7, r3
10007054:	781a      	ldrb	r2, [r3, #0]
10007056:	230f      	movs	r3, #15
10007058:	18fb      	adds	r3, r7, r3
1000705a:	3201      	adds	r2, #1
1000705c:	701a      	strb	r2, [r3, #0]
1000705e:	230f      	movs	r3, #15
10007060:	18fb      	adds	r3, r7, r3
10007062:	781a      	ldrb	r2, [r3, #0]
10007064:	1dfb      	adds	r3, r7, #7
10007066:	781b      	ldrb	r3, [r3, #0]
10007068:	3b01      	subs	r3, #1
1000706a:	429a      	cmp	r2, r3
1000706c:	dddd      	ble.n	1000702a <GEENIX_Async_Delay+0x16>
		{
			__NOP();
		}
	}

}
1000706e:	46bd      	mov	sp, r7
10007070:	b004      	add	sp, #16
10007072:	bd80      	pop	{r7, pc}
10007074:	000002bb 	.word	0x000002bb

10007078 <GEENIX_Sel_Mode>:

void GEENIX_Sel_Mode(GEENIX_SEL_STAT_t mode)
{
10007078:	b580      	push	{r7, lr}
1000707a:	b082      	sub	sp, #8
1000707c:	af00      	add	r7, sp, #0
1000707e:	1c02      	adds	r2, r0, #0
10007080:	1dfb      	adds	r3, r7, #7
10007082:	701a      	strb	r2, [r3, #0]
	mode?(XMC_GPIO_SetOutputLevel(P0_6, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
10007084:	1dfb      	adds	r3, r7, #7
10007086:	781b      	ldrb	r3, [r3, #0]
10007088:	2b00      	cmp	r3, #0
1000708a:	d006      	beq.n	1000709a <GEENIX_Sel_Mode+0x22>
1000708c:	4b08      	ldr	r3, [pc, #32]	; (100070b0 <GEENIX_Sel_Mode+0x38>)
1000708e:	1c18      	adds	r0, r3, #0
10007090:	2106      	movs	r1, #6
10007092:	2201      	movs	r2, #1
10007094:	f7ff ff56 	bl	10006f44 <XMC_GPIO_SetOutputLevel>
10007098:	e007      	b.n	100070aa <GEENIX_Sel_Mode+0x32>
		 (XMC_GPIO_SetOutputLevel(P0_6, XMC_GPIO_OUTPUT_LEVEL_LOW));
1000709a:	4a05      	ldr	r2, [pc, #20]	; (100070b0 <GEENIX_Sel_Mode+0x38>)
1000709c:	2380      	movs	r3, #128	; 0x80
1000709e:	025b      	lsls	r3, r3, #9
100070a0:	1c10      	adds	r0, r2, #0
100070a2:	2106      	movs	r1, #6
100070a4:	1c1a      	adds	r2, r3, #0
100070a6:	f7ff ff4d 	bl	10006f44 <XMC_GPIO_SetOutputLevel>
}
100070aa:	46bd      	mov	sp, r7
100070ac:	b002      	add	sp, #8
100070ae:	bd80      	pop	{r7, pc}
100070b0:	40040000 	.word	0x40040000

100070b4 <GEENIX_AskData>:

void GEENIX_AskData(GEENIX_COMMAND_TYPE_t command)
{
100070b4:	b580      	push	{r7, lr}
100070b6:	b086      	sub	sp, #24
100070b8:	af00      	add	r7, sp, #0
100070ba:	1c02      	adds	r2, r0, #0
100070bc:	1dfb      	adds	r3, r7, #7
100070be:	701a      	strb	r2, [r3, #0]
	unsigned char ecc;
	unsigned char buffer[10];

	buffer[0] = 0xCC;
100070c0:	2308      	movs	r3, #8
100070c2:	18fb      	adds	r3, r7, r3
100070c4:	22cc      	movs	r2, #204	; 0xcc
100070c6:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0xDD;
100070c8:	2308      	movs	r3, #8
100070ca:	18fb      	adds	r3, r7, r3
100070cc:	22dd      	movs	r2, #221	; 0xdd
100070ce:	705a      	strb	r2, [r3, #1]
	buffer[2] = 0x0A;
100070d0:	2308      	movs	r3, #8
100070d2:	18fb      	adds	r3, r7, r3
100070d4:	220a      	movs	r2, #10
100070d6:	709a      	strb	r2, [r3, #2]
	buffer[3] = command;
100070d8:	2308      	movs	r3, #8
100070da:	18fb      	adds	r3, r7, r3
100070dc:	1dfa      	adds	r2, r7, #7
100070de:	7812      	ldrb	r2, [r2, #0]
100070e0:	70da      	strb	r2, [r3, #3]
	buffer[4] = 0x00;
100070e2:	2308      	movs	r3, #8
100070e4:	18fb      	adds	r3, r7, r3
100070e6:	2200      	movs	r2, #0
100070e8:	711a      	strb	r2, [r3, #4]
	buffer[5] = 0x00;
100070ea:	2308      	movs	r3, #8
100070ec:	18fb      	adds	r3, r7, r3
100070ee:	2200      	movs	r2, #0
100070f0:	715a      	strb	r2, [r3, #5]
	buffer[6] = 0x00;
100070f2:	2308      	movs	r3, #8
100070f4:	18fb      	adds	r3, r7, r3
100070f6:	2200      	movs	r2, #0
100070f8:	719a      	strb	r2, [r3, #6]
	buffer[7] = 0x00;
100070fa:	2308      	movs	r3, #8
100070fc:	18fb      	adds	r3, r7, r3
100070fe:	2200      	movs	r2, #0
10007100:	71da      	strb	r2, [r3, #7]
	buffer[8] = 0x00;
10007102:	2308      	movs	r3, #8
10007104:	18fb      	adds	r3, r7, r3
10007106:	2200      	movs	r2, #0
10007108:	721a      	strb	r2, [r3, #8]
	buffer[9] = 0x00;
1000710a:	2308      	movs	r3, #8
1000710c:	18fb      	adds	r3, r7, r3
1000710e:	2200      	movs	r2, #0
10007110:	725a      	strb	r2, [r3, #9]

	ecc = 0x00;
10007112:	2317      	movs	r3, #23
10007114:	18fb      	adds	r3, r7, r3
10007116:	2200      	movs	r2, #0
10007118:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<10; i++)
1000711a:	2316      	movs	r3, #22
1000711c:	18fb      	adds	r3, r7, r3
1000711e:	2200      	movs	r2, #0
10007120:	701a      	strb	r2, [r3, #0]
10007122:	e013      	b.n	1000714c <GEENIX_AskData+0x98>
	{
		ecc = ecc+buffer[i];
10007124:	2316      	movs	r3, #22
10007126:	18fb      	adds	r3, r7, r3
10007128:	781b      	ldrb	r3, [r3, #0]
1000712a:	2208      	movs	r2, #8
1000712c:	18ba      	adds	r2, r7, r2
1000712e:	5cd1      	ldrb	r1, [r2, r3]
10007130:	2317      	movs	r3, #23
10007132:	18fb      	adds	r3, r7, r3
10007134:	2217      	movs	r2, #23
10007136:	18ba      	adds	r2, r7, r2
10007138:	7812      	ldrb	r2, [r2, #0]
1000713a:	188a      	adds	r2, r1, r2
1000713c:	701a      	strb	r2, [r3, #0]
	buffer[7] = 0x00;
	buffer[8] = 0x00;
	buffer[9] = 0x00;

	ecc = 0x00;
	for(uint8_t i = 0; i<10; i++)
1000713e:	2316      	movs	r3, #22
10007140:	18fb      	adds	r3, r7, r3
10007142:	781a      	ldrb	r2, [r3, #0]
10007144:	2316      	movs	r3, #22
10007146:	18fb      	adds	r3, r7, r3
10007148:	3201      	adds	r2, #1
1000714a:	701a      	strb	r2, [r3, #0]
1000714c:	2316      	movs	r3, #22
1000714e:	18fb      	adds	r3, r7, r3
10007150:	781b      	ldrb	r3, [r3, #0]
10007152:	2b09      	cmp	r3, #9
10007154:	d9e6      	bls.n	10007124 <GEENIX_AskData+0x70>
	{
		ecc = ecc+buffer[i];
	}

	ecc = 0x1D;
10007156:	2317      	movs	r3, #23
10007158:	18fb      	adds	r3, r7, r3
1000715a:	221d      	movs	r2, #29
1000715c:	701a      	strb	r2, [r3, #0]

	for(uint8_t i=0; i<10;i++)
1000715e:	2315      	movs	r3, #21
10007160:	18fb      	adds	r3, r7, r3
10007162:	2200      	movs	r2, #0
10007164:	701a      	strb	r2, [r3, #0]
10007166:	e012      	b.n	1000718e <GEENIX_AskData+0xda>
	{
		XMC_UART_CH_Transmit(XMC_USIC1_CH0, buffer[i]);
10007168:	2315      	movs	r3, #21
1000716a:	18fb      	adds	r3, r7, r3
1000716c:	781b      	ldrb	r3, [r3, #0]
1000716e:	2208      	movs	r2, #8
10007170:	18ba      	adds	r2, r7, r2
10007172:	5cd3      	ldrb	r3, [r2, r3]
10007174:	b29b      	uxth	r3, r3
10007176:	4a15      	ldr	r2, [pc, #84]	; (100071cc <GEENIX_AskData+0x118>)
10007178:	1c10      	adds	r0, r2, #0
1000717a:	1c19      	adds	r1, r3, #0
1000717c:	f7fb fa24 	bl	100025c8 <XMC_UART_CH_Transmit>
		ecc = ecc+buffer[i];
	}

	ecc = 0x1D;

	for(uint8_t i=0; i<10;i++)
10007180:	2315      	movs	r3, #21
10007182:	18fb      	adds	r3, r7, r3
10007184:	781a      	ldrb	r2, [r3, #0]
10007186:	2315      	movs	r3, #21
10007188:	18fb      	adds	r3, r7, r3
1000718a:	3201      	adds	r2, #1
1000718c:	701a      	strb	r2, [r3, #0]
1000718e:	2315      	movs	r3, #21
10007190:	18fb      	adds	r3, r7, r3
10007192:	781b      	ldrb	r3, [r3, #0]
10007194:	2b09      	cmp	r3, #9
10007196:	d9e7      	bls.n	10007168 <GEENIX_AskData+0xb4>
	{
		XMC_UART_CH_Transmit(XMC_USIC1_CH0, buffer[i]);
	}
	XMC_UART_CH_Transmit(XMC_USIC1_CH0, ecc);
10007198:	2317      	movs	r3, #23
1000719a:	18fb      	adds	r3, r7, r3
1000719c:	781b      	ldrb	r3, [r3, #0]
1000719e:	b29b      	uxth	r3, r3
100071a0:	4a0a      	ldr	r2, [pc, #40]	; (100071cc <GEENIX_AskData+0x118>)
100071a2:	1c10      	adds	r0, r2, #0
100071a4:	1c19      	adds	r1, r3, #0
100071a6:	f7fb fa0f 	bl	100025c8 <XMC_UART_CH_Transmit>
	XMC_UART_CH_Transmit(XMC_USIC1_CH0, 0x0D);
100071aa:	4b08      	ldr	r3, [pc, #32]	; (100071cc <GEENIX_AskData+0x118>)
100071ac:	1c18      	adds	r0, r3, #0
100071ae:	210d      	movs	r1, #13
100071b0:	f7fb fa0a 	bl	100025c8 <XMC_UART_CH_Transmit>
	XMC_UART_CH_Transmit(XMC_USIC1_CH0, 0x0A);
100071b4:	4b05      	ldr	r3, [pc, #20]	; (100071cc <GEENIX_AskData+0x118>)
100071b6:	1c18      	adds	r0, r3, #0
100071b8:	210a      	movs	r1, #10
100071ba:	f7fb fa05 	bl	100025c8 <XMC_UART_CH_Transmit>

	GEENIX_Async_Delay(13);
100071be:	200d      	movs	r0, #13
100071c0:	f7ff ff28 	bl	10007014 <GEENIX_Async_Delay>
//	MISC_DelayUs(14); // take 14 ms
}
100071c4:	46bd      	mov	sp, r7
100071c6:	b006      	add	sp, #24
100071c8:	bd80      	pop	{r7, pc}
100071ca:	46c0      	nop			; (mov r8, r8)
100071cc:	48004000 	.word	0x48004000

100071d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
100071d0:	b580      	push	{r7, lr}
100071d2:	b082      	sub	sp, #8
100071d4:	af00      	add	r7, sp, #0
100071d6:	1c02      	adds	r2, r0, #0
100071d8:	1dfb      	adds	r3, r7, #7
100071da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100071dc:	1dfb      	adds	r3, r7, #7
100071de:	781b      	ldrb	r3, [r3, #0]
100071e0:	2b7f      	cmp	r3, #127	; 0x7f
100071e2:	d809      	bhi.n	100071f8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
100071e4:	4b06      	ldr	r3, [pc, #24]	; (10007200 <__NVIC_EnableIRQ+0x30>)
100071e6:	1dfa      	adds	r2, r7, #7
100071e8:	7812      	ldrb	r2, [r2, #0]
100071ea:	1c11      	adds	r1, r2, #0
100071ec:	221f      	movs	r2, #31
100071ee:	400a      	ands	r2, r1
100071f0:	2101      	movs	r1, #1
100071f2:	4091      	lsls	r1, r2
100071f4:	1c0a      	adds	r2, r1, #0
100071f6:	601a      	str	r2, [r3, #0]
  }
}
100071f8:	46bd      	mov	sp, r7
100071fa:	b002      	add	sp, #8
100071fc:	bd80      	pop	{r7, pc}
100071fe:	46c0      	nop			; (mov r8, r8)
10007200:	e000e100 	.word	0xe000e100

10007204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10007204:	b5b0      	push	{r4, r5, r7, lr}
10007206:	b082      	sub	sp, #8
10007208:	af00      	add	r7, sp, #0
1000720a:	1c02      	adds	r2, r0, #0
1000720c:	6039      	str	r1, [r7, #0]
1000720e:	1dfb      	adds	r3, r7, #7
10007210:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10007212:	1dfb      	adds	r3, r7, #7
10007214:	781b      	ldrb	r3, [r3, #0]
10007216:	2b7f      	cmp	r3, #127	; 0x7f
10007218:	d827      	bhi.n	1000726a <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000721a:	4c2d      	ldr	r4, [pc, #180]	; (100072d0 <__NVIC_SetPriority+0xcc>)
1000721c:	1dfb      	adds	r3, r7, #7
1000721e:	781b      	ldrb	r3, [r3, #0]
10007220:	b25b      	sxtb	r3, r3
10007222:	089b      	lsrs	r3, r3, #2
10007224:	492a      	ldr	r1, [pc, #168]	; (100072d0 <__NVIC_SetPriority+0xcc>)
10007226:	1dfa      	adds	r2, r7, #7
10007228:	7812      	ldrb	r2, [r2, #0]
1000722a:	b252      	sxtb	r2, r2
1000722c:	0892      	lsrs	r2, r2, #2
1000722e:	32c0      	adds	r2, #192	; 0xc0
10007230:	0092      	lsls	r2, r2, #2
10007232:	5852      	ldr	r2, [r2, r1]
10007234:	1df9      	adds	r1, r7, #7
10007236:	7809      	ldrb	r1, [r1, #0]
10007238:	1c08      	adds	r0, r1, #0
1000723a:	2103      	movs	r1, #3
1000723c:	4001      	ands	r1, r0
1000723e:	00c9      	lsls	r1, r1, #3
10007240:	1c08      	adds	r0, r1, #0
10007242:	21ff      	movs	r1, #255	; 0xff
10007244:	4081      	lsls	r1, r0
10007246:	43c9      	mvns	r1, r1
10007248:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000724a:	683a      	ldr	r2, [r7, #0]
1000724c:	0192      	lsls	r2, r2, #6
1000724e:	20ff      	movs	r0, #255	; 0xff
10007250:	4002      	ands	r2, r0
10007252:	1df8      	adds	r0, r7, #7
10007254:	7800      	ldrb	r0, [r0, #0]
10007256:	1c05      	adds	r5, r0, #0
10007258:	2003      	movs	r0, #3
1000725a:	4028      	ands	r0, r5
1000725c:	00c0      	lsls	r0, r0, #3
1000725e:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10007260:	430a      	orrs	r2, r1
10007262:	33c0      	adds	r3, #192	; 0xc0
10007264:	009b      	lsls	r3, r3, #2
10007266:	511a      	str	r2, [r3, r4]
10007268:	e02e      	b.n	100072c8 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000726a:	4c1a      	ldr	r4, [pc, #104]	; (100072d4 <__NVIC_SetPriority+0xd0>)
1000726c:	1dfb      	adds	r3, r7, #7
1000726e:	781b      	ldrb	r3, [r3, #0]
10007270:	1c1a      	adds	r2, r3, #0
10007272:	230f      	movs	r3, #15
10007274:	4013      	ands	r3, r2
10007276:	3b08      	subs	r3, #8
10007278:	0899      	lsrs	r1, r3, #2
1000727a:	4a16      	ldr	r2, [pc, #88]	; (100072d4 <__NVIC_SetPriority+0xd0>)
1000727c:	1dfb      	adds	r3, r7, #7
1000727e:	781b      	ldrb	r3, [r3, #0]
10007280:	1c18      	adds	r0, r3, #0
10007282:	230f      	movs	r3, #15
10007284:	4003      	ands	r3, r0
10007286:	3b08      	subs	r3, #8
10007288:	089b      	lsrs	r3, r3, #2
1000728a:	3306      	adds	r3, #6
1000728c:	009b      	lsls	r3, r3, #2
1000728e:	18d3      	adds	r3, r2, r3
10007290:	685b      	ldr	r3, [r3, #4]
10007292:	1dfa      	adds	r2, r7, #7
10007294:	7812      	ldrb	r2, [r2, #0]
10007296:	1c10      	adds	r0, r2, #0
10007298:	2203      	movs	r2, #3
1000729a:	4002      	ands	r2, r0
1000729c:	00d2      	lsls	r2, r2, #3
1000729e:	1c10      	adds	r0, r2, #0
100072a0:	22ff      	movs	r2, #255	; 0xff
100072a2:	4082      	lsls	r2, r0
100072a4:	43d2      	mvns	r2, r2
100072a6:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100072a8:	683b      	ldr	r3, [r7, #0]
100072aa:	019b      	lsls	r3, r3, #6
100072ac:	20ff      	movs	r0, #255	; 0xff
100072ae:	4003      	ands	r3, r0
100072b0:	1df8      	adds	r0, r7, #7
100072b2:	7800      	ldrb	r0, [r0, #0]
100072b4:	1c05      	adds	r5, r0, #0
100072b6:	2003      	movs	r0, #3
100072b8:	4028      	ands	r0, r5
100072ba:	00c0      	lsls	r0, r0, #3
100072bc:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100072be:	431a      	orrs	r2, r3
100072c0:	1d8b      	adds	r3, r1, #6
100072c2:	009b      	lsls	r3, r3, #2
100072c4:	18e3      	adds	r3, r4, r3
100072c6:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
100072c8:	46bd      	mov	sp, r7
100072ca:	b002      	add	sp, #8
100072cc:	bdb0      	pop	{r4, r5, r7, pc}
100072ce:	46c0      	nop			; (mov r8, r8)
100072d0:	e000e100 	.word	0xe000e100
100072d4:	e000ed00 	.word	0xe000ed00

100072d8 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
100072d8:	b580      	push	{r7, lr}
100072da:	b082      	sub	sp, #8
100072dc:	af00      	add	r7, sp, #0
100072de:	6078      	str	r0, [r7, #4]
100072e0:	1c08      	adds	r0, r1, #0
100072e2:	1c11      	adds	r1, r2, #0
100072e4:	1cfb      	adds	r3, r7, #3
100072e6:	1c02      	adds	r2, r0, #0
100072e8:	701a      	strb	r2, [r3, #0]
100072ea:	1cbb      	adds	r3, r7, #2
100072ec:	1c0a      	adds	r2, r1, #0
100072ee:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
100072f0:	1cfb      	adds	r3, r7, #3
100072f2:	7818      	ldrb	r0, [r3, #0]
100072f4:	1cfb      	adds	r3, r7, #3
100072f6:	781b      	ldrb	r3, [r3, #0]
100072f8:	687a      	ldr	r2, [r7, #4]
100072fa:	3306      	adds	r3, #6
100072fc:	009b      	lsls	r3, r3, #2
100072fe:	18d3      	adds	r3, r2, r3
10007300:	685b      	ldr	r3, [r3, #4]
10007302:	2207      	movs	r2, #7
10007304:	4393      	bics	r3, r2
10007306:	1c1a      	adds	r2, r3, #0
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
10007308:	1cbb      	adds	r3, r7, #2
1000730a:	781b      	ldrb	r3, [r3, #0]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
1000730c:	431a      	orrs	r2, r3
1000730e:	6879      	ldr	r1, [r7, #4]
10007310:	1d83      	adds	r3, r0, #6
10007312:	009b      	lsls	r3, r3, #2
10007314:	18cb      	adds	r3, r1, r3
10007316:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
10007318:	46bd      	mov	sp, r7
1000731a:	b002      	add	sp, #8
1000731c:	bd80      	pop	{r7, pc}
1000731e:	46c0      	nop			; (mov r8, r8)

10007320 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
10007320:	b580      	push	{r7, lr}
10007322:	b082      	sub	sp, #8
10007324:	af00      	add	r7, sp, #0
10007326:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
10007328:	687b      	ldr	r3, [r7, #4]
1000732a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000732c:	b2db      	uxtb	r3, r3
1000732e:	227f      	movs	r2, #127	; 0x7f
10007330:	4393      	bics	r3, r2
10007332:	b2db      	uxtb	r3, r3
}
10007334:	1c18      	adds	r0, r3, #0
10007336:	46bd      	mov	sp, r7
10007338:	b002      	add	sp, #8
1000733a:	bd80      	pop	{r7, pc}

1000733c <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
1000733c:	b580      	push	{r7, lr}
1000733e:	b082      	sub	sp, #8
10007340:	af00      	add	r7, sp, #0
10007342:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
10007344:	687b      	ldr	r3, [r7, #4]
10007346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10007348:	220f      	movs	r2, #15
1000734a:	4393      	bics	r3, r2
1000734c:	2202      	movs	r2, #2
1000734e:	431a      	orrs	r2, r3
10007350:	687b      	ldr	r3, [r7, #4]
10007352:	641a      	str	r2, [r3, #64]	; 0x40
}
10007354:	46bd      	mov	sp, r7
10007356:	b002      	add	sp, #8
10007358:	bd80      	pop	{r7, pc}
1000735a:	46c0      	nop			; (mov r8, r8)

1000735c <XMC_UART_CH_SelectInterruptNodePointer>:
 * XMC_UART_CH_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SelectInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                            const XMC_UART_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                            const uint32_t service_request)
{
1000735c:	b580      	push	{r7, lr}
1000735e:	b084      	sub	sp, #16
10007360:	af00      	add	r7, sp, #0
10007362:	60f8      	str	r0, [r7, #12]
10007364:	607a      	str	r2, [r7, #4]
10007366:	230b      	movs	r3, #11
10007368:	18fb      	adds	r3, r7, r3
1000736a:	1c0a      	adds	r2, r1, #0
1000736c:	701a      	strb	r2, [r3, #0]
  XMC_USIC_CH_SetInterruptNodePointer(channel, (XMC_USIC_CH_INTERRUPT_NODE_POINTER_t)interrupt_node,
1000736e:	68f9      	ldr	r1, [r7, #12]
10007370:	230b      	movs	r3, #11
10007372:	18fb      	adds	r3, r7, r3
10007374:	781a      	ldrb	r2, [r3, #0]
10007376:	687b      	ldr	r3, [r7, #4]
10007378:	1c08      	adds	r0, r1, #0
1000737a:	1c11      	adds	r1, r2, #0
1000737c:	1c1a      	adds	r2, r3, #0
1000737e:	f7fb fa3d 	bl	100027fc <XMC_USIC_CH_SetInterruptNodePointer>
		                                       (uint32_t)service_request);
}
10007382:	46bd      	mov	sp, r7
10007384:	b004      	add	sp, #16
10007386:	bd80      	pop	{r7, pc}

10007388 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
10007388:	b580      	push	{r7, lr}
1000738a:	b082      	sub	sp, #8
1000738c:	af00      	add	r7, sp, #0
1000738e:	6078      	str	r0, [r7, #4]
10007390:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
10007392:	687b      	ldr	r3, [r7, #4]
10007394:	683a      	ldr	r2, [r7, #0]
10007396:	64da      	str	r2, [r3, #76]	; 0x4c
}
10007398:	46bd      	mov	sp, r7
1000739a:	b002      	add	sp, #8
1000739c:	bd80      	pop	{r7, pc}
1000739e:	46c0      	nop			; (mov r8, r8)

100073a0 <XMC_UART_CH_SetInputSource>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_UART_CH_INPUT_t input, const uint8_t source)
{
100073a0:	b580      	push	{r7, lr}
100073a2:	b082      	sub	sp, #8
100073a4:	af00      	add	r7, sp, #0
100073a6:	6078      	str	r0, [r7, #4]
100073a8:	1c08      	adds	r0, r1, #0
100073aa:	1c11      	adds	r1, r2, #0
100073ac:	1cfb      	adds	r3, r7, #3
100073ae:	1c02      	adds	r2, r0, #0
100073b0:	701a      	strb	r2, [r3, #0]
100073b2:	1cbb      	adds	r3, r7, #2
100073b4:	1c0a      	adds	r2, r1, #0
100073b6:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~(USIC_CH_DX0CR_INSW_Msk|USIC_CH_DX0CR_DSEN_Msk)));
100073b8:	1cfb      	adds	r3, r7, #3
100073ba:	7818      	ldrb	r0, [r3, #0]
100073bc:	1cfb      	adds	r3, r7, #3
100073be:	781b      	ldrb	r3, [r3, #0]
100073c0:	687a      	ldr	r2, [r7, #4]
100073c2:	3306      	adds	r3, #6
100073c4:	009b      	lsls	r3, r3, #2
100073c6:	18d3      	adds	r3, r2, r3
100073c8:	685b      	ldr	r3, [r3, #4]
100073ca:	2250      	movs	r2, #80	; 0x50
100073cc:	4393      	bics	r3, r2
100073ce:	1c1a      	adds	r2, r3, #0
100073d0:	6879      	ldr	r1, [r7, #4]
100073d2:	1d83      	adds	r3, r0, #6
100073d4:	009b      	lsls	r3, r3, #2
100073d6:	18cb      	adds	r3, r1, r3
100073d8:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
100073da:	6879      	ldr	r1, [r7, #4]
100073dc:	1cfb      	adds	r3, r7, #3
100073de:	781a      	ldrb	r2, [r3, #0]
100073e0:	1cbb      	adds	r3, r7, #2
100073e2:	781b      	ldrb	r3, [r3, #0]
100073e4:	1c08      	adds	r0, r1, #0
100073e6:	1c11      	adds	r1, r2, #0
100073e8:	1c1a      	adds	r2, r3, #0
100073ea:	f7ff ff75 	bl	100072d8 <XMC_USIC_CH_SetInputSource>
}
100073ee:	46bd      	mov	sp, r7
100073f0:	b002      	add	sp, #8
100073f2:	bd80      	pop	{r7, pc}

100073f4 <ESP32_ConnectionInit>:
 */

#include "esp32_operation.h"

void ESP32_ConnectionInit(void)
{
100073f4:	b580      	push	{r7, lr}
100073f6:	af00      	add	r7, sp, #0
    XMC_GPIO_Init(P2_0, &esp32_tx_config);
100073f8:	4a21      	ldr	r2, [pc, #132]	; (10007480 <ESP32_ConnectionInit+0x8c>)
100073fa:	4b22      	ldr	r3, [pc, #136]	; (10007484 <ESP32_ConnectionInit+0x90>)
100073fc:	1c10      	adds	r0, r2, #0
100073fe:	2100      	movs	r1, #0
10007400:	1c1a      	adds	r2, r3, #0
10007402:	f7f9 fef3 	bl	100011ec <XMC_GPIO_Init>
    XMC_GPIO_Init(P2_1, &esp32_rx_config);
10007406:	4a1e      	ldr	r2, [pc, #120]	; (10007480 <ESP32_ConnectionInit+0x8c>)
10007408:	4b1f      	ldr	r3, [pc, #124]	; (10007488 <ESP32_ConnectionInit+0x94>)
1000740a:	1c10      	adds	r0, r2, #0
1000740c:	2101      	movs	r1, #1
1000740e:	1c1a      	adds	r2, r3, #0
10007410:	f7f9 feec 	bl	100011ec <XMC_GPIO_Init>

   	XMC_USIC_CH_Enable(XMC_USIC0_CH0);
10007414:	2390      	movs	r3, #144	; 0x90
10007416:	05db      	lsls	r3, r3, #23
10007418:	1c18      	adds	r0, r3, #0
1000741a:	f7fb f93d 	bl	10002698 <XMC_USIC_CH_Enable>
	XMC_UART_CH_Init(XMC_USIC0_CH0, &esp32_config);
1000741e:	2390      	movs	r3, #144	; 0x90
10007420:	05da      	lsls	r2, r3, #23
10007422:	4b1a      	ldr	r3, [pc, #104]	; (1000748c <ESP32_ConnectionInit+0x98>)
10007424:	1c10      	adds	r0, r2, #0
10007426:	1c19      	adds	r1, r3, #0
10007428:	f7fb f874 	bl	10002514 <XMC_UART_CH_Init>
	XMC_UART_CH_SetInputSource(XMC_USIC0_CH0, XMC_UART_CH_INPUT_RXD, USIC0_C0_DX0_P2_1);
1000742c:	2390      	movs	r3, #144	; 0x90
1000742e:	05db      	lsls	r3, r3, #23
10007430:	1c18      	adds	r0, r3, #0
10007432:	2100      	movs	r1, #0
10007434:	2205      	movs	r2, #5
10007436:	f7ff ffb3 	bl	100073a0 <XMC_UART_CH_SetInputSource>

	XMC_UART_CH_EnableEvent(XMC_USIC0_CH0,XMC_UART_CH_EVENT_STANDARD_RECEIVE); // PSR.RFF
1000743a:	2390      	movs	r3, #144	; 0x90
1000743c:	05da      	lsls	r2, r3, #23
1000743e:	2380      	movs	r3, #128	; 0x80
10007440:	01db      	lsls	r3, r3, #7
10007442:	1c10      	adds	r0, r2, #0
10007444:	1c19      	adds	r1, r3, #0
10007446:	f7fb f90d 	bl	10002664 <XMC_UART_CH_EnableEvent>
	XMC_UART_CH_SelectInterruptNodePointer(XMC_USIC0_CH0, XMC_UART_CH_INTERRUPT_NODE_POINTER_RECEIVE, 3);
1000744a:	2390      	movs	r3, #144	; 0x90
1000744c:	05db      	lsls	r3, r3, #23
1000744e:	1c18      	adds	r0, r3, #0
10007450:	2108      	movs	r1, #8
10007452:	2203      	movs	r2, #3
10007454:	f7ff ff82 	bl	1000735c <XMC_UART_CH_SelectInterruptNodePointer>
	XMC_SCU_SetInterruptControl(IRQ18_IRQn, XMC_SCU_IRQCTRL_USIC0_SR3_IRQ18);
10007458:	4b0d      	ldr	r3, [pc, #52]	; (10007490 <ESP32_ConnectionInit+0x9c>)
1000745a:	2012      	movs	r0, #18
1000745c:	1c19      	adds	r1, r3, #0
1000745e:	f7f9 ffc1 	bl	100013e4 <XMC_SCU_SetInterruptControl>
	NVIC_SetPriority(IRQ18_IRQn, 10U);
10007462:	2012      	movs	r0, #18
10007464:	210a      	movs	r1, #10
10007466:	f7ff fecd 	bl	10007204 <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQ18_IRQn);
1000746a:	2012      	movs	r0, #18
1000746c:	f7ff feb0 	bl	100071d0 <__NVIC_EnableIRQ>

	XMC_UART_CH_Start(XMC_USIC0_CH0);
10007470:	2390      	movs	r3, #144	; 0x90
10007472:	05db      	lsls	r3, r3, #23
10007474:	1c18      	adds	r0, r3, #0
10007476:	f7ff ff61 	bl	1000733c <XMC_UART_CH_Start>
}
1000747a:	46bd      	mov	sp, r7
1000747c:	bd80      	pop	{r7, pc}
1000747e:	46c0      	nop			; (mov r8, r8)
10007480:	40040200 	.word	0x40040200
10007484:	200006ec 	.word	0x200006ec
10007488:	200006f4 	.word	0x200006f4
1000748c:	200006fc 	.word	0x200006fc
10007490:	00001201 	.word	0x00001201

10007494 <BT_prepareData>:

void BT_prepareData(char *buffer, uint8_t header, uint8_t length, BLUETOOTH_DATA *btData, uint8_t footer)
{
10007494:	b580      	push	{r7, lr}
10007496:	b084      	sub	sp, #16
10007498:	af00      	add	r7, sp, #0
1000749a:	60f8      	str	r0, [r7, #12]
1000749c:	1c08      	adds	r0, r1, #0
1000749e:	1c11      	adds	r1, r2, #0
100074a0:	607b      	str	r3, [r7, #4]
100074a2:	230b      	movs	r3, #11
100074a4:	18fb      	adds	r3, r7, r3
100074a6:	1c02      	adds	r2, r0, #0
100074a8:	701a      	strb	r2, [r3, #0]
100074aa:	230a      	movs	r3, #10
100074ac:	18fb      	adds	r3, r7, r3
100074ae:	1c0a      	adds	r2, r1, #0
100074b0:	701a      	strb	r2, [r3, #0]
		static uint16_t bt_crc;

		buffer[0] = header;
100074b2:	68fb      	ldr	r3, [r7, #12]
100074b4:	220b      	movs	r2, #11
100074b6:	18ba      	adds	r2, r7, r2
100074b8:	7812      	ldrb	r2, [r2, #0]
100074ba:	701a      	strb	r2, [r3, #0]
		buffer[1] = length;
100074bc:	68fb      	ldr	r3, [r7, #12]
100074be:	3301      	adds	r3, #1
100074c0:	220a      	movs	r2, #10
100074c2:	18ba      	adds	r2, r7, r2
100074c4:	7812      	ldrb	r2, [r2, #0]
100074c6:	701a      	strb	r2, [r3, #0]

		/* PCS Parameter */
		buffer[2] = (char)(btData->bt_pcs_version >> 8);
100074c8:	68fb      	ldr	r3, [r7, #12]
100074ca:	3302      	adds	r3, #2
100074cc:	687a      	ldr	r2, [r7, #4]
100074ce:	8812      	ldrh	r2, [r2, #0]
100074d0:	0a12      	lsrs	r2, r2, #8
100074d2:	b292      	uxth	r2, r2
100074d4:	b2d2      	uxtb	r2, r2
100074d6:	701a      	strb	r2, [r3, #0]
		buffer[3] = (char)(btData->bt_pcs_version & 0xFF);
100074d8:	68fb      	ldr	r3, [r7, #12]
100074da:	3303      	adds	r3, #3
100074dc:	687a      	ldr	r2, [r7, #4]
100074de:	8812      	ldrh	r2, [r2, #0]
100074e0:	b2d2      	uxtb	r2, r2
100074e2:	701a      	strb	r2, [r3, #0]
		buffer[4] = (char)(btData->bt_pcs_temp >> 8);
100074e4:	68fb      	ldr	r3, [r7, #12]
100074e6:	3304      	adds	r3, #4
100074e8:	687a      	ldr	r2, [r7, #4]
100074ea:	8852      	ldrh	r2, [r2, #2]
100074ec:	0a12      	lsrs	r2, r2, #8
100074ee:	b292      	uxth	r2, r2
100074f0:	b2d2      	uxtb	r2, r2
100074f2:	701a      	strb	r2, [r3, #0]
		buffer[5] = (char)(btData->bt_pcs_temp & 0xFF);
100074f4:	68fb      	ldr	r3, [r7, #12]
100074f6:	3305      	adds	r3, #5
100074f8:	687a      	ldr	r2, [r7, #4]
100074fa:	8852      	ldrh	r2, [r2, #2]
100074fc:	b2d2      	uxtb	r2, r2
100074fe:	701a      	strb	r2, [r3, #0]
		buffer[6] = (char)(btData->bt_pcs_status);
10007500:	68fb      	ldr	r3, [r7, #12]
10007502:	3306      	adds	r3, #6
10007504:	687a      	ldr	r2, [r7, #4]
10007506:	7912      	ldrb	r2, [r2, #4]
10007508:	701a      	strb	r2, [r3, #0]

		/* Voltage Parameter */
		buffer[7]  = (char)(btData->bt_voltage_batt >> 8);
1000750a:	68fb      	ldr	r3, [r7, #12]
1000750c:	3307      	adds	r3, #7
1000750e:	687a      	ldr	r2, [r7, #4]
10007510:	88d2      	ldrh	r2, [r2, #6]
10007512:	0a12      	lsrs	r2, r2, #8
10007514:	b292      	uxth	r2, r2
10007516:	b2d2      	uxtb	r2, r2
10007518:	701a      	strb	r2, [r3, #0]
		buffer[8]  = (char)(btData->bt_voltage_batt & 0xFF);
1000751a:	68fb      	ldr	r3, [r7, #12]
1000751c:	3308      	adds	r3, #8
1000751e:	687a      	ldr	r2, [r7, #4]
10007520:	88d2      	ldrh	r2, [r2, #6]
10007522:	b2d2      	uxtb	r2, r2
10007524:	701a      	strb	r2, [r3, #0]
		buffer[9] = (char)(btData->bt_voltage_pv >> 8);
10007526:	68fb      	ldr	r3, [r7, #12]
10007528:	3309      	adds	r3, #9
1000752a:	687a      	ldr	r2, [r7, #4]
1000752c:	8912      	ldrh	r2, [r2, #8]
1000752e:	0a12      	lsrs	r2, r2, #8
10007530:	b292      	uxth	r2, r2
10007532:	b2d2      	uxtb	r2, r2
10007534:	701a      	strb	r2, [r3, #0]
		buffer[10] = (char)(btData->bt_voltage_pv & 0xFF);
10007536:	68fb      	ldr	r3, [r7, #12]
10007538:	330a      	adds	r3, #10
1000753a:	687a      	ldr	r2, [r7, #4]
1000753c:	8912      	ldrh	r2, [r2, #8]
1000753e:	b2d2      	uxtb	r2, r2
10007540:	701a      	strb	r2, [r3, #0]
		buffer[11] = (char)(btData->bt_voltage_grid >> 8);
10007542:	68fb      	ldr	r3, [r7, #12]
10007544:	330b      	adds	r3, #11
10007546:	687a      	ldr	r2, [r7, #4]
10007548:	8952      	ldrh	r2, [r2, #10]
1000754a:	0a12      	lsrs	r2, r2, #8
1000754c:	b292      	uxth	r2, r2
1000754e:	b2d2      	uxtb	r2, r2
10007550:	701a      	strb	r2, [r3, #0]
		buffer[12] = (char)(btData->bt_voltage_grid & 0xFF);
10007552:	68fb      	ldr	r3, [r7, #12]
10007554:	330c      	adds	r3, #12
10007556:	687a      	ldr	r2, [r7, #4]
10007558:	8952      	ldrh	r2, [r2, #10]
1000755a:	b2d2      	uxtb	r2, r2
1000755c:	701a      	strb	r2, [r3, #0]
		buffer[13] = (char)(btData->bt_voltage_inv >> 8);
1000755e:	68fb      	ldr	r3, [r7, #12]
10007560:	330d      	adds	r3, #13
10007562:	687a      	ldr	r2, [r7, #4]
10007564:	8992      	ldrh	r2, [r2, #12]
10007566:	0a12      	lsrs	r2, r2, #8
10007568:	b292      	uxth	r2, r2
1000756a:	b2d2      	uxtb	r2, r2
1000756c:	701a      	strb	r2, [r3, #0]
		buffer[14] = (char)(btData->bt_voltage_inv & 0xFF);
1000756e:	68fb      	ldr	r3, [r7, #12]
10007570:	330e      	adds	r3, #14
10007572:	687a      	ldr	r2, [r7, #4]
10007574:	8992      	ldrh	r2, [r2, #12]
10007576:	b2d2      	uxtb	r2, r2
10007578:	701a      	strb	r2, [r3, #0]

		/* Current Parameter */
		buffer[15] 	= (char)(btData->bt_current_batt >> 8);
1000757a:	68fb      	ldr	r3, [r7, #12]
1000757c:	330f      	adds	r3, #15
1000757e:	687a      	ldr	r2, [r7, #4]
10007580:	89d2      	ldrh	r2, [r2, #14]
10007582:	0a12      	lsrs	r2, r2, #8
10007584:	b292      	uxth	r2, r2
10007586:	b2d2      	uxtb	r2, r2
10007588:	701a      	strb	r2, [r3, #0]
		buffer[16] 	= (char)(btData->bt_current_batt & 0xFF);
1000758a:	68fb      	ldr	r3, [r7, #12]
1000758c:	3310      	adds	r3, #16
1000758e:	687a      	ldr	r2, [r7, #4]
10007590:	89d2      	ldrh	r2, [r2, #14]
10007592:	b2d2      	uxtb	r2, r2
10007594:	701a      	strb	r2, [r3, #0]
		buffer[17] 	= (char)(btData->bt_current_pv >> 8);
10007596:	68fb      	ldr	r3, [r7, #12]
10007598:	3311      	adds	r3, #17
1000759a:	687a      	ldr	r2, [r7, #4]
1000759c:	8a12      	ldrh	r2, [r2, #16]
1000759e:	0a12      	lsrs	r2, r2, #8
100075a0:	b292      	uxth	r2, r2
100075a2:	b2d2      	uxtb	r2, r2
100075a4:	701a      	strb	r2, [r3, #0]
		buffer[18] 	= (char)(btData->bt_current_pv & 0xFF);
100075a6:	68fb      	ldr	r3, [r7, #12]
100075a8:	3312      	adds	r3, #18
100075aa:	687a      	ldr	r2, [r7, #4]
100075ac:	8a12      	ldrh	r2, [r2, #16]
100075ae:	b2d2      	uxtb	r2, r2
100075b0:	701a      	strb	r2, [r3, #0]
		buffer[19] 	= (char)(btData->bt_current_grid >> 8);
100075b2:	68fb      	ldr	r3, [r7, #12]
100075b4:	3313      	adds	r3, #19
100075b6:	687a      	ldr	r2, [r7, #4]
100075b8:	8a52      	ldrh	r2, [r2, #18]
100075ba:	0a12      	lsrs	r2, r2, #8
100075bc:	b292      	uxth	r2, r2
100075be:	b2d2      	uxtb	r2, r2
100075c0:	701a      	strb	r2, [r3, #0]
		buffer[20] 	= (char)(btData->bt_current_grid & 0xFF);
100075c2:	68fb      	ldr	r3, [r7, #12]
100075c4:	3314      	adds	r3, #20
100075c6:	687a      	ldr	r2, [r7, #4]
100075c8:	8a52      	ldrh	r2, [r2, #18]
100075ca:	b2d2      	uxtb	r2, r2
100075cc:	701a      	strb	r2, [r3, #0]
		buffer[21] 	= (char)(btData->bt_current_inv >> 8);
100075ce:	68fb      	ldr	r3, [r7, #12]
100075d0:	3315      	adds	r3, #21
100075d2:	687a      	ldr	r2, [r7, #4]
100075d4:	8a92      	ldrh	r2, [r2, #20]
100075d6:	0a12      	lsrs	r2, r2, #8
100075d8:	b292      	uxth	r2, r2
100075da:	b2d2      	uxtb	r2, r2
100075dc:	701a      	strb	r2, [r3, #0]
		buffer[22] 	= (char)(btData->bt_current_inv & 0xFF);
100075de:	68fb      	ldr	r3, [r7, #12]
100075e0:	3316      	adds	r3, #22
100075e2:	687a      	ldr	r2, [r7, #4]
100075e4:	8a92      	ldrh	r2, [r2, #20]
100075e6:	b2d2      	uxtb	r2, r2
100075e8:	701a      	strb	r2, [r3, #0]

		/* Power bt_Parameter */
		buffer[23] 	= (char)(btData->bt_power_batt >> 8);
100075ea:	68fb      	ldr	r3, [r7, #12]
100075ec:	3317      	adds	r3, #23
100075ee:	687a      	ldr	r2, [r7, #4]
100075f0:	8ad2      	ldrh	r2, [r2, #22]
100075f2:	0a12      	lsrs	r2, r2, #8
100075f4:	b292      	uxth	r2, r2
100075f6:	b2d2      	uxtb	r2, r2
100075f8:	701a      	strb	r2, [r3, #0]
		buffer[24] 	= (char)(btData->bt_power_batt & 0xFF);
100075fa:	68fb      	ldr	r3, [r7, #12]
100075fc:	3318      	adds	r3, #24
100075fe:	687a      	ldr	r2, [r7, #4]
10007600:	8ad2      	ldrh	r2, [r2, #22]
10007602:	b2d2      	uxtb	r2, r2
10007604:	701a      	strb	r2, [r3, #0]
		buffer[25] 	= (char)(btData->bt_power_pv >> 8);
10007606:	68fb      	ldr	r3, [r7, #12]
10007608:	3319      	adds	r3, #25
1000760a:	687a      	ldr	r2, [r7, #4]
1000760c:	8b12      	ldrh	r2, [r2, #24]
1000760e:	0a12      	lsrs	r2, r2, #8
10007610:	b292      	uxth	r2, r2
10007612:	b2d2      	uxtb	r2, r2
10007614:	701a      	strb	r2, [r3, #0]
		buffer[26] 	= (char)(btData->bt_power_pv & 0xFF);
10007616:	68fb      	ldr	r3, [r7, #12]
10007618:	331a      	adds	r3, #26
1000761a:	687a      	ldr	r2, [r7, #4]
1000761c:	8b12      	ldrh	r2, [r2, #24]
1000761e:	b2d2      	uxtb	r2, r2
10007620:	701a      	strb	r2, [r3, #0]
		buffer[27] 	= (char)(btData->bt_power_grid >> 8);
10007622:	68fb      	ldr	r3, [r7, #12]
10007624:	331b      	adds	r3, #27
10007626:	687a      	ldr	r2, [r7, #4]
10007628:	8b52      	ldrh	r2, [r2, #26]
1000762a:	0a12      	lsrs	r2, r2, #8
1000762c:	b292      	uxth	r2, r2
1000762e:	b2d2      	uxtb	r2, r2
10007630:	701a      	strb	r2, [r3, #0]
		buffer[28] 	= (char)(btData->bt_power_grid & 0xFF);
10007632:	68fb      	ldr	r3, [r7, #12]
10007634:	331c      	adds	r3, #28
10007636:	687a      	ldr	r2, [r7, #4]
10007638:	8b52      	ldrh	r2, [r2, #26]
1000763a:	b2d2      	uxtb	r2, r2
1000763c:	701a      	strb	r2, [r3, #0]
		buffer[29] 	= (char)(btData->bt_power_inv >> 8);
1000763e:	68fb      	ldr	r3, [r7, #12]
10007640:	331d      	adds	r3, #29
10007642:	687a      	ldr	r2, [r7, #4]
10007644:	8b92      	ldrh	r2, [r2, #28]
10007646:	0a12      	lsrs	r2, r2, #8
10007648:	b292      	uxth	r2, r2
1000764a:	b2d2      	uxtb	r2, r2
1000764c:	701a      	strb	r2, [r3, #0]
		buffer[30] 	= (char)(btData->bt_power_inv & 0xFF);
1000764e:	68fb      	ldr	r3, [r7, #12]
10007650:	331e      	adds	r3, #30
10007652:	687a      	ldr	r2, [r7, #4]
10007654:	8b92      	ldrh	r2, [r2, #28]
10007656:	b2d2      	uxtb	r2, r2
10007658:	701a      	strb	r2, [r3, #0]

		/* Module Status */
		buffer[31] 	= (char)(btData->bt_grid_status);
1000765a:	68fb      	ldr	r3, [r7, #12]
1000765c:	331f      	adds	r3, #31
1000765e:	687a      	ldr	r2, [r7, #4]
10007660:	2120      	movs	r1, #32
10007662:	5c52      	ldrb	r2, [r2, r1]
10007664:	701a      	strb	r2, [r3, #0]
		buffer[32] 	= (char)(btData->bt_inv_status);
10007666:	68fb      	ldr	r3, [r7, #12]
10007668:	3320      	adds	r3, #32
1000766a:	687a      	ldr	r2, [r7, #4]
1000766c:	2121      	movs	r1, #33	; 0x21
1000766e:	5c52      	ldrb	r2, [r2, r1]
10007670:	701a      	strb	r2, [r3, #0]
		buffer[33] 	= (char)(btData->bt_pv_status);
10007672:	68fb      	ldr	r3, [r7, #12]
10007674:	3321      	adds	r3, #33	; 0x21
10007676:	687a      	ldr	r2, [r7, #4]
10007678:	2122      	movs	r1, #34	; 0x22
1000767a:	5c52      	ldrb	r2, [r2, r1]
1000767c:	701a      	strb	r2, [r3, #0]
		buffer[34] 	= (char)(btData->bt_batt_status);
1000767e:	68fb      	ldr	r3, [r7, #12]
10007680:	3322      	adds	r3, #34	; 0x22
10007682:	687a      	ldr	r2, [r7, #4]
10007684:	2123      	movs	r1, #35	; 0x23
10007686:	5c52      	ldrb	r2, [r2, r1]
10007688:	701a      	strb	r2, [r3, #0]

		/* Miscellaneous */
		buffer[35] 	= (char)(btData->bt_inv_frequency >> 8);
1000768a:	68fb      	ldr	r3, [r7, #12]
1000768c:	3323      	adds	r3, #35	; 0x23
1000768e:	687a      	ldr	r2, [r7, #4]
10007690:	8bd2      	ldrh	r2, [r2, #30]
10007692:	0a12      	lsrs	r2, r2, #8
10007694:	b292      	uxth	r2, r2
10007696:	b2d2      	uxtb	r2, r2
10007698:	701a      	strb	r2, [r3, #0]
		buffer[36] 	= (char)(btData->bt_inv_frequency & 0xFF);
1000769a:	68fb      	ldr	r3, [r7, #12]
1000769c:	3324      	adds	r3, #36	; 0x24
1000769e:	687a      	ldr	r2, [r7, #4]
100076a0:	8bd2      	ldrh	r2, [r2, #30]
100076a2:	b2d2      	uxtb	r2, r2
100076a4:	701a      	strb	r2, [r3, #0]

		/* Battery Parameter */
		buffer[37] 	= (char)(btData->bt_bat_pack_soc);
100076a6:	68fb      	ldr	r3, [r7, #12]
100076a8:	3325      	adds	r3, #37	; 0x25
100076aa:	687a      	ldr	r2, [r7, #4]
100076ac:	2124      	movs	r1, #36	; 0x24
100076ae:	5c52      	ldrb	r2, [r2, r1]
100076b0:	701a      	strb	r2, [r3, #0]
		buffer[38] 	= (char)(btData->bt_bat_pack_volt >> 8);
100076b2:	68fb      	ldr	r3, [r7, #12]
100076b4:	3326      	adds	r3, #38	; 0x26
100076b6:	687a      	ldr	r2, [r7, #4]
100076b8:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
100076ba:	0a12      	lsrs	r2, r2, #8
100076bc:	b292      	uxth	r2, r2
100076be:	b2d2      	uxtb	r2, r2
100076c0:	701a      	strb	r2, [r3, #0]
		buffer[39] 	= (char)(btData->bt_bat_pack_volt & 0xFF);
100076c2:	68fb      	ldr	r3, [r7, #12]
100076c4:	3327      	adds	r3, #39	; 0x27
100076c6:	687a      	ldr	r2, [r7, #4]
100076c8:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
100076ca:	b2d2      	uxtb	r2, r2
100076cc:	701a      	strb	r2, [r3, #0]
		buffer[40] 	= (char)(btData->bt_bat_pack_max_temp);
100076ce:	68fb      	ldr	r3, [r7, #12]
100076d0:	3328      	adds	r3, #40	; 0x28
100076d2:	687a      	ldr	r2, [r7, #4]
100076d4:	2128      	movs	r1, #40	; 0x28
100076d6:	5c52      	ldrb	r2, [r2, r1]
100076d8:	701a      	strb	r2, [r3, #0]
		buffer[41] 	= (char)(btData->bt_bat_pack_min_temp);
100076da:	68fb      	ldr	r3, [r7, #12]
100076dc:	3329      	adds	r3, #41	; 0x29
100076de:	687a      	ldr	r2, [r7, #4]
100076e0:	2129      	movs	r1, #41	; 0x29
100076e2:	5c52      	ldrb	r2, [r2, r1]
100076e4:	701a      	strb	r2, [r3, #0]
		buffer[42] 	= (char)(btData->bt_bat_pack_status);
100076e6:	68fb      	ldr	r3, [r7, #12]
100076e8:	332a      	adds	r3, #42	; 0x2a
100076ea:	687a      	ldr	r2, [r7, #4]
100076ec:	212a      	movs	r1, #42	; 0x2a
100076ee:	5c52      	ldrb	r2, [r2, r1]
100076f0:	701a      	strb	r2, [r3, #0]

		/* do CRC */
		bt_crc		= MF_CRC_16((unsigned char *) &buffer[0], length+2);
100076f2:	230a      	movs	r3, #10
100076f4:	18fb      	adds	r3, r7, r3
100076f6:	781b      	ldrb	r3, [r3, #0]
100076f8:	3302      	adds	r3, #2
100076fa:	b2db      	uxtb	r3, r3
100076fc:	68fa      	ldr	r2, [r7, #12]
100076fe:	1c10      	adds	r0, r2, #0
10007700:	1c19      	adds	r1, r3, #0
10007702:	f7fd ff85 	bl	10005610 <MF_CRC_16>
10007706:	1c03      	adds	r3, r0, #0
10007708:	1c1a      	adds	r2, r3, #0
1000770a:	4b0c      	ldr	r3, [pc, #48]	; (1000773c <BT_prepareData+0x2a8>)
1000770c:	801a      	strh	r2, [r3, #0]

		buffer[43]  = (char) (bt_crc >> 8);
1000770e:	68fb      	ldr	r3, [r7, #12]
10007710:	332b      	adds	r3, #43	; 0x2b
10007712:	4a0a      	ldr	r2, [pc, #40]	; (1000773c <BT_prepareData+0x2a8>)
10007714:	8812      	ldrh	r2, [r2, #0]
10007716:	0a12      	lsrs	r2, r2, #8
10007718:	b292      	uxth	r2, r2
1000771a:	b2d2      	uxtb	r2, r2
1000771c:	701a      	strb	r2, [r3, #0]
		buffer[44]  = (char) (bt_crc & 0xFF);
1000771e:	68fb      	ldr	r3, [r7, #12]
10007720:	332c      	adds	r3, #44	; 0x2c
10007722:	4a06      	ldr	r2, [pc, #24]	; (1000773c <BT_prepareData+0x2a8>)
10007724:	8812      	ldrh	r2, [r2, #0]
10007726:	b2d2      	uxtb	r2, r2
10007728:	701a      	strb	r2, [r3, #0]

		buffer[45]	= (char) (footer);
1000772a:	68fb      	ldr	r3, [r7, #12]
1000772c:	332d      	adds	r3, #45	; 0x2d
1000772e:	2218      	movs	r2, #24
10007730:	18ba      	adds	r2, r7, r2
10007732:	7812      	ldrb	r2, [r2, #0]
10007734:	701a      	strb	r2, [r3, #0]
}
10007736:	46bd      	mov	sp, r7
10007738:	b004      	add	sp, #16
1000773a:	bd80      	pop	{r7, pc}
1000773c:	20000a68 	.word	0x20000a68

10007740 <BT_sendStream>:

void BT_sendStream(char *buffer, uint8_t length)
{
10007740:	b580      	push	{r7, lr}
10007742:	b084      	sub	sp, #16
10007744:	af00      	add	r7, sp, #0
10007746:	6078      	str	r0, [r7, #4]
10007748:	1c0a      	adds	r2, r1, #0
1000774a:	1cfb      	adds	r3, r7, #3
1000774c:	701a      	strb	r2, [r3, #0]
	uint8_t count = 0;
1000774e:	230f      	movs	r3, #15
10007750:	18fb      	adds	r3, r7, r3
10007752:	2200      	movs	r2, #0
10007754:	701a      	strb	r2, [r3, #0]
	while(count < length)
10007756:	e022      	b.n	1000779e <BT_sendStream+0x5e>
	{
		while(XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
10007758:	46c0      	nop			; (mov r8, r8)
1000775a:	2390      	movs	r3, #144	; 0x90
1000775c:	05db      	lsls	r3, r3, #23
1000775e:	1c18      	adds	r0, r3, #0
10007760:	f7ff fdde 	bl	10007320 <XMC_USIC_CH_GetTransmitBufferStatus>
10007764:	1e03      	subs	r3, r0, #0
10007766:	2b80      	cmp	r3, #128	; 0x80
10007768:	d0f7      	beq.n	1000775a <BT_sendStream+0x1a>
		XMC_UART_CH_ClearStatusFlag(XMC_USIC0_CH0, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
1000776a:	2390      	movs	r3, #144	; 0x90
1000776c:	05da      	lsls	r2, r3, #23
1000776e:	2380      	movs	r3, #128	; 0x80
10007770:	019b      	lsls	r3, r3, #6
10007772:	1c10      	adds	r0, r2, #0
10007774:	1c19      	adds	r1, r3, #0
10007776:	f7ff fe07 	bl	10007388 <XMC_UART_CH_ClearStatusFlag>

		XMC_USIC0_CH0->TBUF[0U] = buffer[count];
1000777a:	2390      	movs	r3, #144	; 0x90
1000777c:	05db      	lsls	r3, r3, #23
1000777e:	220f      	movs	r2, #15
10007780:	18ba      	adds	r2, r7, r2
10007782:	7812      	ldrb	r2, [r2, #0]
10007784:	6879      	ldr	r1, [r7, #4]
10007786:	188a      	adds	r2, r1, r2
10007788:	7812      	ldrb	r2, [r2, #0]
1000778a:	1c11      	adds	r1, r2, #0
1000778c:	2280      	movs	r2, #128	; 0x80
1000778e:	5099      	str	r1, [r3, r2]

		count++;
10007790:	230f      	movs	r3, #15
10007792:	18fb      	adds	r3, r7, r3
10007794:	781a      	ldrb	r2, [r3, #0]
10007796:	230f      	movs	r3, #15
10007798:	18fb      	adds	r3, r7, r3
1000779a:	3201      	adds	r2, #1
1000779c:	701a      	strb	r2, [r3, #0]
}

void BT_sendStream(char *buffer, uint8_t length)
{
	uint8_t count = 0;
	while(count < length)
1000779e:	230f      	movs	r3, #15
100077a0:	18fa      	adds	r2, r7, r3
100077a2:	1cfb      	adds	r3, r7, #3
100077a4:	7812      	ldrb	r2, [r2, #0]
100077a6:	781b      	ldrb	r3, [r3, #0]
100077a8:	429a      	cmp	r2, r3
100077aa:	d3d5      	bcc.n	10007758 <BT_sendStream+0x18>

		XMC_USIC0_CH0->TBUF[0U] = buffer[count];

		count++;
	 }
}
100077ac:	46bd      	mov	sp, r7
100077ae:	b004      	add	sp, #16
100077b0:	bd80      	pop	{r7, pc}
100077b2:	46c0      	nop			; (mov r8, r8)

100077b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100077b4:	b5b0      	push	{r4, r5, r7, lr}
100077b6:	b082      	sub	sp, #8
100077b8:	af00      	add	r7, sp, #0
100077ba:	1c02      	adds	r2, r0, #0
100077bc:	6039      	str	r1, [r7, #0]
100077be:	1dfb      	adds	r3, r7, #7
100077c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100077c2:	1dfb      	adds	r3, r7, #7
100077c4:	781b      	ldrb	r3, [r3, #0]
100077c6:	2b7f      	cmp	r3, #127	; 0x7f
100077c8:	d827      	bhi.n	1000781a <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100077ca:	4c2d      	ldr	r4, [pc, #180]	; (10007880 <__NVIC_SetPriority+0xcc>)
100077cc:	1dfb      	adds	r3, r7, #7
100077ce:	781b      	ldrb	r3, [r3, #0]
100077d0:	b25b      	sxtb	r3, r3
100077d2:	089b      	lsrs	r3, r3, #2
100077d4:	492a      	ldr	r1, [pc, #168]	; (10007880 <__NVIC_SetPriority+0xcc>)
100077d6:	1dfa      	adds	r2, r7, #7
100077d8:	7812      	ldrb	r2, [r2, #0]
100077da:	b252      	sxtb	r2, r2
100077dc:	0892      	lsrs	r2, r2, #2
100077de:	32c0      	adds	r2, #192	; 0xc0
100077e0:	0092      	lsls	r2, r2, #2
100077e2:	5852      	ldr	r2, [r2, r1]
100077e4:	1df9      	adds	r1, r7, #7
100077e6:	7809      	ldrb	r1, [r1, #0]
100077e8:	1c08      	adds	r0, r1, #0
100077ea:	2103      	movs	r1, #3
100077ec:	4001      	ands	r1, r0
100077ee:	00c9      	lsls	r1, r1, #3
100077f0:	1c08      	adds	r0, r1, #0
100077f2:	21ff      	movs	r1, #255	; 0xff
100077f4:	4081      	lsls	r1, r0
100077f6:	43c9      	mvns	r1, r1
100077f8:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100077fa:	683a      	ldr	r2, [r7, #0]
100077fc:	0192      	lsls	r2, r2, #6
100077fe:	20ff      	movs	r0, #255	; 0xff
10007800:	4002      	ands	r2, r0
10007802:	1df8      	adds	r0, r7, #7
10007804:	7800      	ldrb	r0, [r0, #0]
10007806:	1c05      	adds	r5, r0, #0
10007808:	2003      	movs	r0, #3
1000780a:	4028      	ands	r0, r5
1000780c:	00c0      	lsls	r0, r0, #3
1000780e:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10007810:	430a      	orrs	r2, r1
10007812:	33c0      	adds	r3, #192	; 0xc0
10007814:	009b      	lsls	r3, r3, #2
10007816:	511a      	str	r2, [r3, r4]
10007818:	e02e      	b.n	10007878 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000781a:	4c1a      	ldr	r4, [pc, #104]	; (10007884 <__NVIC_SetPriority+0xd0>)
1000781c:	1dfb      	adds	r3, r7, #7
1000781e:	781b      	ldrb	r3, [r3, #0]
10007820:	1c1a      	adds	r2, r3, #0
10007822:	230f      	movs	r3, #15
10007824:	4013      	ands	r3, r2
10007826:	3b08      	subs	r3, #8
10007828:	0899      	lsrs	r1, r3, #2
1000782a:	4a16      	ldr	r2, [pc, #88]	; (10007884 <__NVIC_SetPriority+0xd0>)
1000782c:	1dfb      	adds	r3, r7, #7
1000782e:	781b      	ldrb	r3, [r3, #0]
10007830:	1c18      	adds	r0, r3, #0
10007832:	230f      	movs	r3, #15
10007834:	4003      	ands	r3, r0
10007836:	3b08      	subs	r3, #8
10007838:	089b      	lsrs	r3, r3, #2
1000783a:	3306      	adds	r3, #6
1000783c:	009b      	lsls	r3, r3, #2
1000783e:	18d3      	adds	r3, r2, r3
10007840:	685b      	ldr	r3, [r3, #4]
10007842:	1dfa      	adds	r2, r7, #7
10007844:	7812      	ldrb	r2, [r2, #0]
10007846:	1c10      	adds	r0, r2, #0
10007848:	2203      	movs	r2, #3
1000784a:	4002      	ands	r2, r0
1000784c:	00d2      	lsls	r2, r2, #3
1000784e:	1c10      	adds	r0, r2, #0
10007850:	22ff      	movs	r2, #255	; 0xff
10007852:	4082      	lsls	r2, r0
10007854:	43d2      	mvns	r2, r2
10007856:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10007858:	683b      	ldr	r3, [r7, #0]
1000785a:	019b      	lsls	r3, r3, #6
1000785c:	20ff      	movs	r0, #255	; 0xff
1000785e:	4003      	ands	r3, r0
10007860:	1df8      	adds	r0, r7, #7
10007862:	7800      	ldrb	r0, [r0, #0]
10007864:	1c05      	adds	r5, r0, #0
10007866:	2003      	movs	r0, #3
10007868:	4028      	ands	r0, r5
1000786a:	00c0      	lsls	r0, r0, #3
1000786c:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000786e:	431a      	orrs	r2, r3
10007870:	1d8b      	adds	r3, r1, #6
10007872:	009b      	lsls	r3, r3, #2
10007874:	18e3      	adds	r3, r4, r3
10007876:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10007878:	46bd      	mov	sp, r7
1000787a:	b002      	add	sp, #8
1000787c:	bdb0      	pop	{r4, r5, r7, pc}
1000787e:	46c0      	nop			; (mov r8, r8)
10007880:	e000e100 	.word	0xe000e100
10007884:	e000ed00 	.word	0xe000ed00

10007888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10007888:	b580      	push	{r7, lr}
1000788a:	b082      	sub	sp, #8
1000788c:	af00      	add	r7, sp, #0
1000788e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10007890:	687b      	ldr	r3, [r7, #4]
10007892:	3b01      	subs	r3, #1
10007894:	4a0c      	ldr	r2, [pc, #48]	; (100078c8 <SysTick_Config+0x40>)
10007896:	4293      	cmp	r3, r2
10007898:	d901      	bls.n	1000789e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
1000789a:	2301      	movs	r3, #1
1000789c:	e010      	b.n	100078c0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1000789e:	4b0b      	ldr	r3, [pc, #44]	; (100078cc <SysTick_Config+0x44>)
100078a0:	687a      	ldr	r2, [r7, #4]
100078a2:	3a01      	subs	r2, #1
100078a4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
100078a6:	2301      	movs	r3, #1
100078a8:	425b      	negs	r3, r3
100078aa:	1c18      	adds	r0, r3, #0
100078ac:	2103      	movs	r1, #3
100078ae:	f7ff ff81 	bl	100077b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
100078b2:	4b06      	ldr	r3, [pc, #24]	; (100078cc <SysTick_Config+0x44>)
100078b4:	2200      	movs	r2, #0
100078b6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
100078b8:	4b04      	ldr	r3, [pc, #16]	; (100078cc <SysTick_Config+0x44>)
100078ba:	2207      	movs	r2, #7
100078bc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
100078be:	2300      	movs	r3, #0
}
100078c0:	1c18      	adds	r0, r3, #0
100078c2:	46bd      	mov	sp, r7
100078c4:	b002      	add	sp, #8
100078c6:	bd80      	pop	{r7, pc}
100078c8:	00ffffff 	.word	0x00ffffff
100078cc:	e000e010 	.word	0xe000e010

100078d0 <main>:

#include <xmc_common.h>
#include "op_config.h"

int main(void)
{
100078d0:	b590      	push	{r4, r7, lr}
100078d2:	b087      	sub	sp, #28
100078d4:	af06      	add	r7, sp, #24
  /* Create 1 kHz tick */
  SysTick_Config(SystemCoreClock / 1000);
100078d6:	4b81      	ldr	r3, [pc, #516]	; (10007adc <main+0x20c>)
100078d8:	681b      	ldr	r3, [r3, #0]
100078da:	1c18      	adds	r0, r3, #0
100078dc:	23fa      	movs	r3, #250	; 0xfa
100078de:	0099      	lsls	r1, r3, #2
100078e0:	f7fa fd9c 	bl	1000241c <__aeabi_uidiv>
100078e4:	1c03      	adds	r3, r0, #0
100078e6:	1c18      	adds	r0, r3, #0
100078e8:	f7ff ffce 	bl	10007888 <SysTick_Config>

  /* Initialization for PC Communication */
  RS232_Connection_Init();
100078ec:	f7fc fc78 	bl	100041e0 <RS232_Connection_Init>

  /* Initialization for ESP32 Communication */
  ESP32_ConnectionInit();
100078f0:	f7ff fd80 	bl	100073f4 <ESP32_ConnectionInit>

  /* Initialization for PCS Communication */
  PCS_Connection_Init();
100078f4:	f7fd f804 	bl	10004900 <PCS_Connection_Init>

  /* Initialization for Battery Communication */
  GEENIX_Connection_Init();
100078f8:	f7ff fb38 	bl	10006f6c <GEENIX_Connection_Init>

  /* Initialization for Power Distribution Control Peripheral */
  PDU_Relay_Init();
100078fc:	f7fc fe6a 	bl	100045d4 <PDU_Relay_Init>
  PDU_SensorADC_Init();
10007900:	f7fc fdac 	bl	1000445c <PDU_SensorADC_Init>
  pduSensorAvg.count 	= 0;
10007904:	4b76      	ldr	r3, [pc, #472]	; (10007ae0 <main+0x210>)
10007906:	2200      	movs	r2, #0
10007908:	709a      	strb	r2, [r3, #2]
  pduSensorAvg.isValid 			= false;
1000790a:	4b75      	ldr	r3, [pc, #468]	; (10007ae0 <main+0x210>)
1000790c:	2200      	movs	r2, #0
1000790e:	701a      	strb	r2, [r3, #0]
  pduSensorAvg.isBeingProcessed = false;
10007910:	4b73      	ldr	r3, [pc, #460]	; (10007ae0 <main+0x210>)
10007912:	2200      	movs	r2, #0
10007914:	705a      	strb	r2, [r3, #1]

  /* Setup for infotainment Functions */
  INFO_LEDInit();
10007916:	f7fe f8f1 	bl	10005afc <INFO_LEDInit>
  INFO_GPIOInit();
1000791a:	f7fe f91f 	bl	10005b5c <INFO_GPIOInit>
  INFO_StartButtonInit();
1000791e:	f7fe f8ab 	bl	10005a78 <INFO_StartButtonInit>
  INFO_ModeSelectorInit();
10007922:	f7fe f947 	bl	10005bb4 <INFO_ModeSelectorInit>
  INFO_ResetButtonInit();
10007926:	f7fe f8b7 	bl	10005a98 <INFO_ResetButtonInit>
  INFO_RTCEEPROMInit();
1000792a:	f7fe f967 	bl	10005bfc <INFO_RTCEEPROMInit>

  /* Setup Timer */
  MISC_TimerInit();
1000792e:	f7fd fde7 	bl	10005500 <MISC_TimerInit>

  /* Initiate RTC Modes */
  INFO_RTCVBatEnable();
10007932:	f7ff f82d 	bl	10006990 <INFO_RTCVBatEnable>
  INFO_RTCOscillatorEnable();
10007936:	f7fe fa15 	bl	10005d64 <INFO_RTCOscillatorEnable>
  INFO_RTCMFPEnable();
1000793a:	f7ff f91d 	bl	10006b78 <INFO_RTCMFPEnable>

  /* PCS Command Initialization */
  mcuState = OP_SETUP;
1000793e:	4b69      	ldr	r3, [pc, #420]	; (10007ae4 <main+0x214>)
10007940:	2200      	movs	r2, #0
10007942:	701a      	strb	r2, [r3, #0]
  recEspCommIsHalt = false;
10007944:	4b68      	ldr	r3, [pc, #416]	; (10007ae8 <main+0x218>)
10007946:	2200      	movs	r2, #0
10007948:	701a      	strb	r2, [r3, #0]

  while(1U)
  {
	  /* Continuously Checking Mode and Error */
	  OP_CheckingError(&controlFlag, &pcsSystemStatus, &pcsDCgridStatus,
1000794a:	4868      	ldr	r0, [pc, #416]	; (10007aec <main+0x21c>)
1000794c:	4968      	ldr	r1, [pc, #416]	; (10007af0 <main+0x220>)
1000794e:	4a69      	ldr	r2, [pc, #420]	; (10007af4 <main+0x224>)
10007950:	4c69      	ldr	r4, [pc, #420]	; (10007af8 <main+0x228>)
10007952:	4b6a      	ldr	r3, [pc, #424]	; (10007afc <main+0x22c>)
10007954:	9300      	str	r3, [sp, #0]
10007956:	4b6a      	ldr	r3, [pc, #424]	; (10007b00 <main+0x230>)
10007958:	9301      	str	r3, [sp, #4]
1000795a:	1c23      	adds	r3, r4, #0
1000795c:	f7fb fcec 	bl	10003338 <OP_CheckingError>
			  	  	   &pcsACinvStatus, &pcsPVconvStatus, &pcsBatconvStatus);
	  OP_CheckingMode(&controlFlag);
10007960:	4b62      	ldr	r3, [pc, #392]	; (10007aec <main+0x21c>)
10007962:	1c18      	adds	r0, r3, #0
10007964:	f7fb fca2 	bl	100032ac <OP_CheckingMode>
	  if(controlFlag.isChecking_peripheral){
10007968:	4b60      	ldr	r3, [pc, #384]	; (10007aec <main+0x21c>)
1000796a:	795b      	ldrb	r3, [r3, #5]
1000796c:	2b00      	cmp	r3, #0
1000796e:	d002      	beq.n	10007976 <main+0xa6>
		  mcuState = OP_PERIPH;
10007970:	4b5c      	ldr	r3, [pc, #368]	; (10007ae4 <main+0x214>)
10007972:	2206      	movs	r2, #6
10007974:	701a      	strb	r2, [r3, #0]
	  }

	  /* Perform an action the according to the state */
	  switch(mcuState)
10007976:	4b5b      	ldr	r3, [pc, #364]	; (10007ae4 <main+0x214>)
10007978:	781b      	ldrb	r3, [r3, #0]
1000797a:	2b06      	cmp	r3, #6
1000797c:	d900      	bls.n	10007980 <main+0xb0>
1000797e:	e0ab      	b.n	10007ad8 <main+0x208>
10007980:	009a      	lsls	r2, r3, #2
10007982:	4b60      	ldr	r3, [pc, #384]	; (10007b04 <main+0x234>)
10007984:	18d3      	adds	r3, r2, r3
10007986:	681b      	ldr	r3, [r3, #0]
10007988:	469f      	mov	pc, r3
	  {
	  case OP_SETUP 	:
		  mcuState	= OP_SETUP;
1000798a:	4b56      	ldr	r3, [pc, #344]	; (10007ae4 <main+0x214>)
1000798c:	2200      	movs	r2, #0
1000798e:	701a      	strb	r2, [r3, #0]

		  /* Set LED Indicator for this state */
		  INFO_LEDSwitch(LED0, LED_ON);
10007990:	2000      	movs	r0, #0
10007992:	2101      	movs	r1, #1
10007994:	f7fe f992 	bl	10005cbc <INFO_LEDSwitch>
		  INFO_LEDSwitch(LED1, LED_OFF);
10007998:	2001      	movs	r0, #1
1000799a:	2100      	movs	r1, #0
1000799c:	f7fe f98e 	bl	10005cbc <INFO_LEDSwitch>
		  INFO_LEDSwitch(LED2, LED_OFF);
100079a0:	2002      	movs	r0, #2
100079a2:	2100      	movs	r1, #0
100079a4:	f7fe f98a 	bl	10005cbc <INFO_LEDSwitch>

		  /* Perform actions for this state */
		  OP_SetupConnection(&mcuState, &esp32HShake, &pvHShake, &controlFlag,
100079a8:	4b57      	ldr	r3, [pc, #348]	; (10007b08 <main+0x238>)
100079aa:	681b      	ldr	r3, [r3, #0]
100079ac:	484d      	ldr	r0, [pc, #308]	; (10007ae4 <main+0x214>)
100079ae:	4957      	ldr	r1, [pc, #348]	; (10007b0c <main+0x23c>)
100079b0:	4a57      	ldr	r2, [pc, #348]	; (10007b10 <main+0x240>)
100079b2:	4c4e      	ldr	r4, [pc, #312]	; (10007aec <main+0x21c>)
100079b4:	9300      	str	r3, [sp, #0]
100079b6:	4b57      	ldr	r3, [pc, #348]	; (10007b14 <main+0x244>)
100079b8:	9301      	str	r3, [sp, #4]
100079ba:	4b4d      	ldr	r3, [pc, #308]	; (10007af0 <main+0x220>)
100079bc:	9302      	str	r3, [sp, #8]
100079be:	4b56      	ldr	r3, [pc, #344]	; (10007b18 <main+0x248>)
100079c0:	9303      	str	r3, [sp, #12]
100079c2:	4b56      	ldr	r3, [pc, #344]	; (10007b1c <main+0x24c>)
100079c4:	9304      	str	r3, [sp, #16]
100079c6:	1c23      	adds	r3, r4, #0
100079c8:	f7fb fa1e 	bl	10002e08 <OP_SetupConnection>
				  	  	  	 pduSensor.mPVPT, &pcsBmsStatus, &pcsSystemStatus,
							 &rtcTime, &rtcDate);
		  break;
100079cc:	e085      	b.n	10007ada <main+0x20a>
	  case OP_TURN_ON 	:
		  mcuState	= OP_TURN_ON;
100079ce:	4b45      	ldr	r3, [pc, #276]	; (10007ae4 <main+0x214>)
100079d0:	2201      	movs	r2, #1
100079d2:	701a      	strb	r2, [r3, #0]

		  /* Set LED Indicator for this state */
		  INFO_LEDSwitch(LED0, LED_OFF);
100079d4:	2000      	movs	r0, #0
100079d6:	2100      	movs	r1, #0
100079d8:	f7fe f970 	bl	10005cbc <INFO_LEDSwitch>
		  INFO_LEDSwitch(LED1, LED_ON);
100079dc:	2001      	movs	r0, #1
100079de:	2101      	movs	r1, #1
100079e0:	f7fe f96c 	bl	10005cbc <INFO_LEDSwitch>
		  INFO_LEDSwitch(LED2, LED_OFF);
100079e4:	2002      	movs	r0, #2
100079e6:	2100      	movs	r1, #0
100079e8:	f7fe f968 	bl	10005cbc <INFO_LEDSwitch>

		  /* Perform actions for this state */
		  OP_TurnOnPCS(&mcuState, &buttonHShake, &controlFlag, &pcsBmsStatus);
100079ec:	483d      	ldr	r0, [pc, #244]	; (10007ae4 <main+0x214>)
100079ee:	494c      	ldr	r1, [pc, #304]	; (10007b20 <main+0x250>)
100079f0:	4a3e      	ldr	r2, [pc, #248]	; (10007aec <main+0x21c>)
100079f2:	4b48      	ldr	r3, [pc, #288]	; (10007b14 <main+0x244>)
100079f4:	f7fb fac8 	bl	10002f88 <OP_TurnOnPCS>
		  break;
100079f8:	e06f      	b.n	10007ada <main+0x20a>
	  case OP_RUNNING 	:
		  mcuState	= OP_RUNNING;
100079fa:	4b3a      	ldr	r3, [pc, #232]	; (10007ae4 <main+0x214>)
100079fc:	2202      	movs	r2, #2
100079fe:	701a      	strb	r2, [r3, #0]

		  /* Set LED Indicator for this state */
		  INFO_LEDSwitch(LED0, LED_ON);
10007a00:	2000      	movs	r0, #0
10007a02:	2101      	movs	r1, #1
10007a04:	f7fe f95a 	bl	10005cbc <INFO_LEDSwitch>
		  INFO_LEDSwitch(LED1, LED_ON);
10007a08:	2001      	movs	r0, #1
10007a0a:	2101      	movs	r1, #1
10007a0c:	f7fe f956 	bl	10005cbc <INFO_LEDSwitch>
		  INFO_LEDSwitch(LED2, LED_OFF);
10007a10:	2002      	movs	r0, #2
10007a12:	2100      	movs	r1, #0
10007a14:	f7fe f952 	bl	10005cbc <INFO_LEDSwitch>

		  /* Perform actions for this state */
		  OP_CheckingPCSStatus(&mcuState, &pcsSystemStatus, &buttonHShake,
10007a18:	4832      	ldr	r0, [pc, #200]	; (10007ae4 <main+0x214>)
10007a1a:	4935      	ldr	r1, [pc, #212]	; (10007af0 <main+0x220>)
10007a1c:	4a40      	ldr	r2, [pc, #256]	; (10007b20 <main+0x250>)
10007a1e:	4b33      	ldr	r3, [pc, #204]	; (10007aec <main+0x21c>)
10007a20:	f7fb fb3e 	bl	100030a0 <OP_CheckingPCSStatus>
				  	  	  	   &controlFlag);
		  break;
10007a24:	e059      	b.n	10007ada <main+0x20a>
	  case OP_STANDBY	:
		  mcuState	= OP_STANDBY;
10007a26:	4b2f      	ldr	r3, [pc, #188]	; (10007ae4 <main+0x214>)
10007a28:	2203      	movs	r2, #3
10007a2a:	701a      	strb	r2, [r3, #0]

		  /* Set LED Indicator for this state */
		  INFO_LEDSwitch(LED0, LED_OFF);
10007a2c:	2000      	movs	r0, #0
10007a2e:	2100      	movs	r1, #0
10007a30:	f7fe f944 	bl	10005cbc <INFO_LEDSwitch>
		  INFO_LEDSwitch(LED1, LED_OFF);
10007a34:	2001      	movs	r0, #1
10007a36:	2100      	movs	r1, #0
10007a38:	f7fe f940 	bl	10005cbc <INFO_LEDSwitch>
		  INFO_LEDSwitch(LED2, LED_ON);
10007a3c:	2002      	movs	r0, #2
10007a3e:	2101      	movs	r1, #1
10007a40:	f7fe f93c 	bl	10005cbc <INFO_LEDSwitch>

		  /* Perform actions for this state */
		  OP_PutSystemStandby(&mcuState, &pcsSystemStatus, &buttonHShake,
10007a44:	4827      	ldr	r0, [pc, #156]	; (10007ae4 <main+0x214>)
10007a46:	492a      	ldr	r1, [pc, #168]	; (10007af0 <main+0x220>)
10007a48:	4a35      	ldr	r2, [pc, #212]	; (10007b20 <main+0x250>)
10007a4a:	4c28      	ldr	r4, [pc, #160]	; (10007aec <main+0x21c>)
10007a4c:	4b31      	ldr	r3, [pc, #196]	; (10007b14 <main+0x244>)
10007a4e:	9300      	str	r3, [sp, #0]
10007a50:	1c23      	adds	r3, r4, #0
10007a52:	f7fb fb95 	bl	10003180 <OP_PutSystemStandby>
				  	  	  	  &controlFlag, &pcsBmsStatus);
		  break;
10007a56:	e040      	b.n	10007ada <main+0x20a>
	  case OP_ERROR		:
		  mcuState	= OP_ERROR;
10007a58:	4b22      	ldr	r3, [pc, #136]	; (10007ae4 <main+0x214>)
10007a5a:	2204      	movs	r2, #4
10007a5c:	701a      	strb	r2, [r3, #0]

		  /* Set LED Indicator for this state */
		  INFO_LEDSwitch(LED0, LED_ON);
10007a5e:	2000      	movs	r0, #0
10007a60:	2101      	movs	r1, #1
10007a62:	f7fe f92b 	bl	10005cbc <INFO_LEDSwitch>
		  INFO_LEDSwitch(LED1, LED_OFF);
10007a66:	2001      	movs	r0, #1
10007a68:	2100      	movs	r1, #0
10007a6a:	f7fe f927 	bl	10005cbc <INFO_LEDSwitch>
		  INFO_LEDSwitch(LED2, LED_ON);
10007a6e:	2002      	movs	r0, #2
10007a70:	2101      	movs	r1, #1
10007a72:	f7fe f923 	bl	10005cbc <INFO_LEDSwitch>

		  /* Perform actions for this state */
		  OP_HandlingPCSWarning(&mcuState, &pcsSystemStatus, &buttonHShake,
10007a76:	481b      	ldr	r0, [pc, #108]	; (10007ae4 <main+0x214>)
10007a78:	491d      	ldr	r1, [pc, #116]	; (10007af0 <main+0x220>)
10007a7a:	4a29      	ldr	r2, [pc, #164]	; (10007b20 <main+0x250>)
10007a7c:	4c1b      	ldr	r4, [pc, #108]	; (10007aec <main+0x21c>)
10007a7e:	4b29      	ldr	r3, [pc, #164]	; (10007b24 <main+0x254>)
10007a80:	9300      	str	r3, [sp, #0]
10007a82:	4b24      	ldr	r3, [pc, #144]	; (10007b14 <main+0x244>)
10007a84:	9301      	str	r3, [sp, #4]
10007a86:	1c23      	adds	r3, r4, #0
10007a88:	f7fb fbbc 	bl	10003204 <OP_HandlingPCSWarning>
				  	  	  	  	&controlFlag, &bmsSensor, &pcsBmsStatus);
		  break;
10007a8c:	e025      	b.n	10007ada <main+0x20a>
	  case OP_SHUTDOWN	:
		  mcuState 	= OP_SHUTDOWN;
10007a8e:	4b15      	ldr	r3, [pc, #84]	; (10007ae4 <main+0x214>)
10007a90:	2205      	movs	r2, #5
10007a92:	701a      	strb	r2, [r3, #0]

		  /* Set LED Indicator for this state */
		  INFO_LEDSwitch(LED0, LED_ON);
10007a94:	2000      	movs	r0, #0
10007a96:	2101      	movs	r1, #1
10007a98:	f7fe f910 	bl	10005cbc <INFO_LEDSwitch>
		  INFO_LEDSwitch(LED1, LED_ON);
10007a9c:	2001      	movs	r0, #1
10007a9e:	2101      	movs	r1, #1
10007aa0:	f7fe f90c 	bl	10005cbc <INFO_LEDSwitch>
		  INFO_LEDSwitch(LED2, LED_ON);
10007aa4:	2002      	movs	r0, #2
10007aa6:	2101      	movs	r1, #1
10007aa8:	f7fe f908 	bl	10005cbc <INFO_LEDSwitch>

		  /* Perform actions for this state */
		  OP_PutSystemShutDown(&mcuState, &buttonHShake);
10007aac:	4a0d      	ldr	r2, [pc, #52]	; (10007ae4 <main+0x214>)
10007aae:	4b1c      	ldr	r3, [pc, #112]	; (10007b20 <main+0x250>)
10007ab0:	1c10      	adds	r0, r2, #0
10007ab2:	1c19      	adds	r1, r3, #0
10007ab4:	f7fb fbd0 	bl	10003258 <OP_PutSystemShutDown>
		  break;
10007ab8:	e00f      	b.n	10007ada <main+0x20a>
	  case OP_PERIPH	:
		  mcuState	= OP_PERIPH;
10007aba:	4b0a      	ldr	r3, [pc, #40]	; (10007ae4 <main+0x214>)
10007abc:	2206      	movs	r2, #6
10007abe:	701a      	strb	r2, [r3, #0]
//		  INFO_LEDSwitch(LED0, LED_ON);
//		  INFO_LEDSwitch(LED1, LED_ON);
//		  INFO_LEDSwitch(LED2, LED_ON);

		  /* Perform actions for this state */
		  if(!controlFlag.isChecking_peripheral)
10007ac0:	4b0a      	ldr	r3, [pc, #40]	; (10007aec <main+0x21c>)
10007ac2:	795b      	ldrb	r3, [r3, #5]
10007ac4:	2201      	movs	r2, #1
10007ac6:	4053      	eors	r3, r2
10007ac8:	b2db      	uxtb	r3, r3
10007aca:	2b00      	cmp	r3, #0
10007acc:	d003      	beq.n	10007ad6 <main+0x206>
		  {
			  mcuState = OP_SETUP;
10007ace:	4b05      	ldr	r3, [pc, #20]	; (10007ae4 <main+0x214>)
10007ad0:	2200      	movs	r2, #0
10007ad2:	701a      	strb	r2, [r3, #0]
		  }
		  break;
10007ad4:	e001      	b.n	10007ada <main+0x20a>
10007ad6:	e000      	b.n	10007ada <main+0x20a>
	  default			: break;
10007ad8:	46c0      	nop			; (mov r8, r8)
	  }
  }
10007ada:	e736      	b.n	1000794a <main+0x7a>
10007adc:	20003ffc 	.word	0x20003ffc
10007ae0:	20000b18 	.word	0x20000b18
10007ae4:	20000b16 	.word	0x20000b16
10007ae8:	20000550 	.word	0x20000550
10007aec:	20000a98 	.word	0x20000a98
10007af0:	20000d80 	.word	0x20000d80
10007af4:	20000d30 	.word	0x20000d30
10007af8:	20000a94 	.word	0x20000a94
10007afc:	20000a88 	.word	0x20000a88
10007b00:	20000ab4 	.word	0x20000ab4
10007b04:	10007e78 	.word	0x10007e78
10007b08:	20000d44 	.word	0x20000d44
10007b0c:	20000d94 	.word	0x20000d94
10007b10:	20000a78 	.word	0x20000a78
10007b14:	20000d9c 	.word	0x20000d9c
10007b18:	20000d2c 	.word	0x20000d2c
10007b1c:	20000a8c 	.word	0x20000a8c
10007b20:	20000da4 	.word	0x20000da4
10007b24:	20000a80 	.word	0x20000a80

10007b28 <__aeabi_cfrcmple>:
10007b28:	4684      	mov	ip, r0
10007b2a:	1c08      	adds	r0, r1, #0
10007b2c:	4661      	mov	r1, ip
10007b2e:	e7ff      	b.n	10007b30 <__aeabi_cfcmpeq>

10007b30 <__aeabi_cfcmpeq>:
10007b30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10007b32:	f000 f8a7 	bl	10007c84 <__lesf2>
10007b36:	2800      	cmp	r0, #0
10007b38:	d401      	bmi.n	10007b3e <__aeabi_cfcmpeq+0xe>
10007b3a:	2100      	movs	r1, #0
10007b3c:	42c8      	cmn	r0, r1
10007b3e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10007b40 <__aeabi_fcmpeq>:
10007b40:	b510      	push	{r4, lr}
10007b42:	f000 f82b 	bl	10007b9c <__eqsf2>
10007b46:	4240      	negs	r0, r0
10007b48:	3001      	adds	r0, #1
10007b4a:	bd10      	pop	{r4, pc}

10007b4c <__aeabi_fcmplt>:
10007b4c:	b510      	push	{r4, lr}
10007b4e:	f000 f899 	bl	10007c84 <__lesf2>
10007b52:	2800      	cmp	r0, #0
10007b54:	db01      	blt.n	10007b5a <__aeabi_fcmplt+0xe>
10007b56:	2000      	movs	r0, #0
10007b58:	bd10      	pop	{r4, pc}
10007b5a:	2001      	movs	r0, #1
10007b5c:	bd10      	pop	{r4, pc}
10007b5e:	46c0      	nop			; (mov r8, r8)

10007b60 <__aeabi_fcmple>:
10007b60:	b510      	push	{r4, lr}
10007b62:	f000 f88f 	bl	10007c84 <__lesf2>
10007b66:	2800      	cmp	r0, #0
10007b68:	dd01      	ble.n	10007b6e <__aeabi_fcmple+0xe>
10007b6a:	2000      	movs	r0, #0
10007b6c:	bd10      	pop	{r4, pc}
10007b6e:	2001      	movs	r0, #1
10007b70:	bd10      	pop	{r4, pc}
10007b72:	46c0      	nop			; (mov r8, r8)

10007b74 <__aeabi_fcmpgt>:
10007b74:	b510      	push	{r4, lr}
10007b76:	f000 f83b 	bl	10007bf0 <__gesf2>
10007b7a:	2800      	cmp	r0, #0
10007b7c:	dc01      	bgt.n	10007b82 <__aeabi_fcmpgt+0xe>
10007b7e:	2000      	movs	r0, #0
10007b80:	bd10      	pop	{r4, pc}
10007b82:	2001      	movs	r0, #1
10007b84:	bd10      	pop	{r4, pc}
10007b86:	46c0      	nop			; (mov r8, r8)

10007b88 <__aeabi_fcmpge>:
10007b88:	b510      	push	{r4, lr}
10007b8a:	f000 f831 	bl	10007bf0 <__gesf2>
10007b8e:	2800      	cmp	r0, #0
10007b90:	da01      	bge.n	10007b96 <__aeabi_fcmpge+0xe>
10007b92:	2000      	movs	r0, #0
10007b94:	bd10      	pop	{r4, pc}
10007b96:	2001      	movs	r0, #1
10007b98:	bd10      	pop	{r4, pc}
10007b9a:	46c0      	nop			; (mov r8, r8)

10007b9c <__eqsf2>:
10007b9c:	0243      	lsls	r3, r0, #9
10007b9e:	b570      	push	{r4, r5, r6, lr}
10007ba0:	0042      	lsls	r2, r0, #1
10007ba2:	004c      	lsls	r4, r1, #1
10007ba4:	0a5d      	lsrs	r5, r3, #9
10007ba6:	0fc3      	lsrs	r3, r0, #31
10007ba8:	0248      	lsls	r0, r1, #9
10007baa:	0e12      	lsrs	r2, r2, #24
10007bac:	0a46      	lsrs	r6, r0, #9
10007bae:	0e24      	lsrs	r4, r4, #24
10007bb0:	0fc9      	lsrs	r1, r1, #31
10007bb2:	2aff      	cmp	r2, #255	; 0xff
10007bb4:	d005      	beq.n	10007bc2 <__eqsf2+0x26>
10007bb6:	2cff      	cmp	r4, #255	; 0xff
10007bb8:	d008      	beq.n	10007bcc <__eqsf2+0x30>
10007bba:	2001      	movs	r0, #1
10007bbc:	42a2      	cmp	r2, r4
10007bbe:	d00b      	beq.n	10007bd8 <__eqsf2+0x3c>
10007bc0:	bd70      	pop	{r4, r5, r6, pc}
10007bc2:	2001      	movs	r0, #1
10007bc4:	2d00      	cmp	r5, #0
10007bc6:	d1fb      	bne.n	10007bc0 <__eqsf2+0x24>
10007bc8:	2cff      	cmp	r4, #255	; 0xff
10007bca:	d1f6      	bne.n	10007bba <__eqsf2+0x1e>
10007bcc:	2001      	movs	r0, #1
10007bce:	2e00      	cmp	r6, #0
10007bd0:	d1f6      	bne.n	10007bc0 <__eqsf2+0x24>
10007bd2:	2001      	movs	r0, #1
10007bd4:	42a2      	cmp	r2, r4
10007bd6:	d1f3      	bne.n	10007bc0 <__eqsf2+0x24>
10007bd8:	42b5      	cmp	r5, r6
10007bda:	d1f1      	bne.n	10007bc0 <__eqsf2+0x24>
10007bdc:	428b      	cmp	r3, r1
10007bde:	d005      	beq.n	10007bec <__eqsf2+0x50>
10007be0:	2a00      	cmp	r2, #0
10007be2:	d1ed      	bne.n	10007bc0 <__eqsf2+0x24>
10007be4:	1c28      	adds	r0, r5, #0
10007be6:	1e43      	subs	r3, r0, #1
10007be8:	4198      	sbcs	r0, r3
10007bea:	e7e9      	b.n	10007bc0 <__eqsf2+0x24>
10007bec:	2000      	movs	r0, #0
10007bee:	e7e7      	b.n	10007bc0 <__eqsf2+0x24>

10007bf0 <__gesf2>:
10007bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
10007bf2:	0243      	lsls	r3, r0, #9
10007bf4:	024d      	lsls	r5, r1, #9
10007bf6:	004a      	lsls	r2, r1, #1
10007bf8:	0044      	lsls	r4, r0, #1
10007bfa:	0a5e      	lsrs	r6, r3, #9
10007bfc:	0e24      	lsrs	r4, r4, #24
10007bfe:	0fc3      	lsrs	r3, r0, #31
10007c00:	0a6d      	lsrs	r5, r5, #9
10007c02:	0e12      	lsrs	r2, r2, #24
10007c04:	0fc9      	lsrs	r1, r1, #31
10007c06:	2cff      	cmp	r4, #255	; 0xff
10007c08:	d00d      	beq.n	10007c26 <__gesf2+0x36>
10007c0a:	2aff      	cmp	r2, #255	; 0xff
10007c0c:	d031      	beq.n	10007c72 <__gesf2+0x82>
10007c0e:	2c00      	cmp	r4, #0
10007c10:	d10d      	bne.n	10007c2e <__gesf2+0x3e>
10007c12:	4277      	negs	r7, r6
10007c14:	4177      	adcs	r7, r6
10007c16:	2a00      	cmp	r2, #0
10007c18:	d123      	bne.n	10007c62 <__gesf2+0x72>
10007c1a:	2d00      	cmp	r5, #0
10007c1c:	d121      	bne.n	10007c62 <__gesf2+0x72>
10007c1e:	2000      	movs	r0, #0
10007c20:	2f00      	cmp	r7, #0
10007c22:	d10b      	bne.n	10007c3c <__gesf2+0x4c>
10007c24:	e007      	b.n	10007c36 <__gesf2+0x46>
10007c26:	2e00      	cmp	r6, #0
10007c28:	d128      	bne.n	10007c7c <__gesf2+0x8c>
10007c2a:	2aff      	cmp	r2, #255	; 0xff
10007c2c:	d021      	beq.n	10007c72 <__gesf2+0x82>
10007c2e:	2a00      	cmp	r2, #0
10007c30:	d005      	beq.n	10007c3e <__gesf2+0x4e>
10007c32:	428b      	cmp	r3, r1
10007c34:	d007      	beq.n	10007c46 <__gesf2+0x56>
10007c36:	4258      	negs	r0, r3
10007c38:	2301      	movs	r3, #1
10007c3a:	4318      	orrs	r0, r3
10007c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007c3e:	2d00      	cmp	r5, #0
10007c40:	d0f9      	beq.n	10007c36 <__gesf2+0x46>
10007c42:	428b      	cmp	r3, r1
10007c44:	d1f7      	bne.n	10007c36 <__gesf2+0x46>
10007c46:	4294      	cmp	r4, r2
10007c48:	dcf5      	bgt.n	10007c36 <__gesf2+0x46>
10007c4a:	db04      	blt.n	10007c56 <__gesf2+0x66>
10007c4c:	42ae      	cmp	r6, r5
10007c4e:	d8f2      	bhi.n	10007c36 <__gesf2+0x46>
10007c50:	2000      	movs	r0, #0
10007c52:	42ae      	cmp	r6, r5
10007c54:	d2f2      	bcs.n	10007c3c <__gesf2+0x4c>
10007c56:	4258      	negs	r0, r3
10007c58:	4143      	adcs	r3, r0
10007c5a:	2001      	movs	r0, #1
10007c5c:	425b      	negs	r3, r3
10007c5e:	4318      	orrs	r0, r3
10007c60:	e7ec      	b.n	10007c3c <__gesf2+0x4c>
10007c62:	2f00      	cmp	r7, #0
10007c64:	d0e5      	beq.n	10007c32 <__gesf2+0x42>
10007c66:	4248      	negs	r0, r1
10007c68:	4141      	adcs	r1, r0
10007c6a:	2001      	movs	r0, #1
10007c6c:	4249      	negs	r1, r1
10007c6e:	4308      	orrs	r0, r1
10007c70:	e7e4      	b.n	10007c3c <__gesf2+0x4c>
10007c72:	2d00      	cmp	r5, #0
10007c74:	d102      	bne.n	10007c7c <__gesf2+0x8c>
10007c76:	2c00      	cmp	r4, #0
10007c78:	d0cb      	beq.n	10007c12 <__gesf2+0x22>
10007c7a:	e7da      	b.n	10007c32 <__gesf2+0x42>
10007c7c:	2002      	movs	r0, #2
10007c7e:	4240      	negs	r0, r0
10007c80:	e7dc      	b.n	10007c3c <__gesf2+0x4c>
10007c82:	46c0      	nop			; (mov r8, r8)

10007c84 <__lesf2>:
10007c84:	0243      	lsls	r3, r0, #9
10007c86:	b5f0      	push	{r4, r5, r6, r7, lr}
10007c88:	0042      	lsls	r2, r0, #1
10007c8a:	004c      	lsls	r4, r1, #1
10007c8c:	0a5e      	lsrs	r6, r3, #9
10007c8e:	0fc3      	lsrs	r3, r0, #31
10007c90:	0248      	lsls	r0, r1, #9
10007c92:	0e12      	lsrs	r2, r2, #24
10007c94:	0a45      	lsrs	r5, r0, #9
10007c96:	0e24      	lsrs	r4, r4, #24
10007c98:	0fc9      	lsrs	r1, r1, #31
10007c9a:	2aff      	cmp	r2, #255	; 0xff
10007c9c:	d00f      	beq.n	10007cbe <__lesf2+0x3a>
10007c9e:	2cff      	cmp	r4, #255	; 0xff
10007ca0:	d01a      	beq.n	10007cd8 <__lesf2+0x54>
10007ca2:	2a00      	cmp	r2, #0
10007ca4:	d110      	bne.n	10007cc8 <__lesf2+0x44>
10007ca6:	4277      	negs	r7, r6
10007ca8:	4177      	adcs	r7, r6
10007caa:	2c00      	cmp	r4, #0
10007cac:	d029      	beq.n	10007d02 <__lesf2+0x7e>
10007cae:	2f00      	cmp	r7, #0
10007cb0:	d017      	beq.n	10007ce2 <__lesf2+0x5e>
10007cb2:	4248      	negs	r0, r1
10007cb4:	4141      	adcs	r1, r0
10007cb6:	2001      	movs	r0, #1
10007cb8:	4249      	negs	r1, r1
10007cba:	4308      	orrs	r0, r1
10007cbc:	e00b      	b.n	10007cd6 <__lesf2+0x52>
10007cbe:	2002      	movs	r0, #2
10007cc0:	2e00      	cmp	r6, #0
10007cc2:	d108      	bne.n	10007cd6 <__lesf2+0x52>
10007cc4:	2cff      	cmp	r4, #255	; 0xff
10007cc6:	d007      	beq.n	10007cd8 <__lesf2+0x54>
10007cc8:	2c00      	cmp	r4, #0
10007cca:	d10a      	bne.n	10007ce2 <__lesf2+0x5e>
10007ccc:	2d00      	cmp	r5, #0
10007cce:	d108      	bne.n	10007ce2 <__lesf2+0x5e>
10007cd0:	4258      	negs	r0, r3
10007cd2:	2301      	movs	r3, #1
10007cd4:	4318      	orrs	r0, r3
10007cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007cd8:	2002      	movs	r0, #2
10007cda:	2d00      	cmp	r5, #0
10007cdc:	d1fb      	bne.n	10007cd6 <__lesf2+0x52>
10007cde:	2a00      	cmp	r2, #0
10007ce0:	d0e1      	beq.n	10007ca6 <__lesf2+0x22>
10007ce2:	428b      	cmp	r3, r1
10007ce4:	d1f4      	bne.n	10007cd0 <__lesf2+0x4c>
10007ce6:	42a2      	cmp	r2, r4
10007ce8:	dcf2      	bgt.n	10007cd0 <__lesf2+0x4c>
10007cea:	db04      	blt.n	10007cf6 <__lesf2+0x72>
10007cec:	42ae      	cmp	r6, r5
10007cee:	d8ef      	bhi.n	10007cd0 <__lesf2+0x4c>
10007cf0:	2000      	movs	r0, #0
10007cf2:	42ae      	cmp	r6, r5
10007cf4:	d2ef      	bcs.n	10007cd6 <__lesf2+0x52>
10007cf6:	4258      	negs	r0, r3
10007cf8:	4143      	adcs	r3, r0
10007cfa:	2001      	movs	r0, #1
10007cfc:	425b      	negs	r3, r3
10007cfe:	4318      	orrs	r0, r3
10007d00:	e7e9      	b.n	10007cd6 <__lesf2+0x52>
10007d02:	2d00      	cmp	r5, #0
10007d04:	d1d3      	bne.n	10007cae <__lesf2+0x2a>
10007d06:	2000      	movs	r0, #0
10007d08:	2f00      	cmp	r7, #0
10007d0a:	d1e4      	bne.n	10007cd6 <__lesf2+0x52>
10007d0c:	e7e0      	b.n	10007cd0 <__lesf2+0x4c>
10007d0e:	46c0      	nop			; (mov r8, r8)

10007d10 <__libc_init_array>:
10007d10:	4b0e      	ldr	r3, [pc, #56]	; (10007d4c <__libc_init_array+0x3c>)
10007d12:	b570      	push	{r4, r5, r6, lr}
10007d14:	2500      	movs	r5, #0
10007d16:	1c1e      	adds	r6, r3, #0
10007d18:	4c0d      	ldr	r4, [pc, #52]	; (10007d50 <__libc_init_array+0x40>)
10007d1a:	1ae4      	subs	r4, r4, r3
10007d1c:	10a4      	asrs	r4, r4, #2
10007d1e:	42a5      	cmp	r5, r4
10007d20:	d004      	beq.n	10007d2c <__libc_init_array+0x1c>
10007d22:	00ab      	lsls	r3, r5, #2
10007d24:	58f3      	ldr	r3, [r6, r3]
10007d26:	4798      	blx	r3
10007d28:	3501      	adds	r5, #1
10007d2a:	e7f8      	b.n	10007d1e <__libc_init_array+0xe>
10007d2c:	f7fb f854 	bl	10002dd8 <_init>
10007d30:	4b08      	ldr	r3, [pc, #32]	; (10007d54 <__libc_init_array+0x44>)
10007d32:	2500      	movs	r5, #0
10007d34:	1c1e      	adds	r6, r3, #0
10007d36:	4c08      	ldr	r4, [pc, #32]	; (10007d58 <__libc_init_array+0x48>)
10007d38:	1ae4      	subs	r4, r4, r3
10007d3a:	10a4      	asrs	r4, r4, #2
10007d3c:	42a5      	cmp	r5, r4
10007d3e:	d004      	beq.n	10007d4a <__libc_init_array+0x3a>
10007d40:	00ab      	lsls	r3, r5, #2
10007d42:	58f3      	ldr	r3, [r6, r3]
10007d44:	4798      	blx	r3
10007d46:	3501      	adds	r5, #1
10007d48:	e7f8      	b.n	10007d3c <__libc_init_array+0x2c>
10007d4a:	bd70      	pop	{r4, r5, r6, pc}
10007d4c:	20000708 	.word	0x20000708
10007d50:	20000708 	.word	0x20000708
10007d54:	20000708 	.word	0x20000708
10007d58:	20000708 	.word	0x20000708

10007d5c <memcpy>:
10007d5c:	2300      	movs	r3, #0
10007d5e:	b510      	push	{r4, lr}
10007d60:	4293      	cmp	r3, r2
10007d62:	d003      	beq.n	10007d6c <memcpy+0x10>
10007d64:	5ccc      	ldrb	r4, [r1, r3]
10007d66:	54c4      	strb	r4, [r0, r3]
10007d68:	3301      	adds	r3, #1
10007d6a:	e7f9      	b.n	10007d60 <memcpy+0x4>
10007d6c:	bd10      	pop	{r4, pc}
10007d6e:	0000      	movs	r0, r0
10007d70:	10001f1a 	.word	0x10001f1a
10007d74:	10001f1a 	.word	0x10001f1a
10007d78:	10001f24 	.word	0x10001f24
10007d7c:	10001f24 	.word	0x10001f24
10007d80:	10001f46 	.word	0x10001f46
10007d84:	10001f46 	.word	0x10001f46
10007d88:	10001f46 	.word	0x10001f46
10007d8c:	10001f46 	.word	0x10001f46
10007d90:	10001f2e 	.word	0x10001f2e
10007d94:	10001f3a 	.word	0x10001f3a

10007d98 <g_xmc_vadc_group_array>:
10007d98:	48030400 48030800 100034d2 1000353e     ...H...H.4..>5..
10007da8:	1000353e 1000353e 1000353e 100034fa     >5..>5..>5...4..
10007db8:	1000350e 10003522 1000353e 10003536     .5.."5..>5..65..
10007dc8:	1000353e 1000353e 1000353e 1000353e     >5..>5..>5..>5..
10007dd8:	1000353e 1000353e 1000353e 1000353e     >5..>5..>5..>5..
10007de8:	1000353e 1000353e 1000353e 1000353e     >5..>5..>5..>5..
10007df8:	1000353e 1000353e 1000353e 1000353e     >5..>5..>5..>5..
10007e08:	1000353e 1000353e 1000353e 1000353e     >5..>5..>5..>5..
10007e18:	1000353e 1000353e 1000353e 1000353e     >5..>5..>5..>5..
10007e28:	1000353e 1000353e 100034f0 10003504     >5..>5...4...5..
10007e38:	10003518 1000352c 1000353e 1000353e     .5..,5..>5..>5..
10007e48:	1000353e 1000353e 1000353e 10003698     >5..>5..>5...6..
10007e58:	10003700 10003766 100037cc 10003832     .7..f7...7..28..
10007e68:	10003898 100038da 10003924 10003966     .8...8..$9..f9..
10007e78:	1000798a 100079ce 100079fa 10007a26     .y...y...y..&z..
10007e88:	10007a58 10007a8e 10007aba              Xz...z...z..

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veener>:
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <IRQ31_Veener+0x4>)
2000000e:	4700      	bx	r0
	...

2000002c <SVC_Veener>:
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <IRQ31_Veener+0x8>)
2000002e:	4700      	bx	r0
	...

20000038 <PendSV_Veener>:
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <IRQ31_Veener+0xc>)
2000003a:	4700      	bx	r0

2000003c <SysTick_Veener>:
	Insert_InterruptVeener SysTick
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <IRQ31_Veener+0x10>)
2000003e:	4700      	bx	r0

20000040 <IRQ0_Veener>:
	
	Insert_InterruptVeener IRQ0	
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <IRQ31_Veener+0x14>)
20000042:	4700      	bx	r0

20000044 <IRQ1_Veener>:
	Insert_InterruptVeener IRQ1	
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <IRQ31_Veener+0x18>)
20000046:	4700      	bx	r0

20000048 <IRQ2_Veener>:
	Insert_InterruptVeener IRQ2	
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <IRQ31_Veener+0x1c>)
2000004a:	4700      	bx	r0

2000004c <IRQ3_Veener>:
	Insert_InterruptVeener IRQ3	
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <IRQ31_Veener+0x20>)
2000004e:	4700      	bx	r0

20000050 <IRQ4_Veener>:
	Insert_InterruptVeener IRQ4	
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <IRQ31_Veener+0x24>)
20000052:	4700      	bx	r0

20000054 <IRQ5_Veener>:
	Insert_InterruptVeener IRQ5	
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <IRQ31_Veener+0x28>)
20000056:	4700      	bx	r0

20000058 <IRQ6_Veener>:
	Insert_InterruptVeener IRQ6	
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <IRQ31_Veener+0x2c>)
2000005a:	4700      	bx	r0

2000005c <IRQ7_Veener>:
	Insert_InterruptVeener IRQ7	
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <IRQ31_Veener+0x30>)
2000005e:	4700      	bx	r0

20000060 <IRQ8_Veener>:
	Insert_InterruptVeener IRQ8	
20000060:	4823      	ldr	r0, [pc, #140]	; (200000f0 <IRQ31_Veener+0x34>)
20000062:	4700      	bx	r0

20000064 <IRQ9_Veener>:
	Insert_InterruptVeener IRQ9	
20000064:	4823      	ldr	r0, [pc, #140]	; (200000f4 <IRQ31_Veener+0x38>)
20000066:	4700      	bx	r0

20000068 <IRQ10_Veener>:
	Insert_InterruptVeener IRQ10	
20000068:	4823      	ldr	r0, [pc, #140]	; (200000f8 <IRQ31_Veener+0x3c>)
2000006a:	4700      	bx	r0

2000006c <IRQ11_Veener>:
	Insert_InterruptVeener IRQ11	
2000006c:	4823      	ldr	r0, [pc, #140]	; (200000fc <IRQ31_Veener+0x40>)
2000006e:	4700      	bx	r0

20000070 <IRQ12_Veener>:
	Insert_InterruptVeener IRQ12	
20000070:	4823      	ldr	r0, [pc, #140]	; (20000100 <IRQ31_Veener+0x44>)
20000072:	4700      	bx	r0

20000074 <IRQ13_Veener>:
	Insert_InterruptVeener IRQ13	
20000074:	4823      	ldr	r0, [pc, #140]	; (20000104 <IRQ31_Veener+0x48>)
20000076:	4700      	bx	r0

20000078 <IRQ14_Veener>:
	Insert_InterruptVeener IRQ14	
20000078:	4823      	ldr	r0, [pc, #140]	; (20000108 <IRQ31_Veener+0x4c>)
2000007a:	4700      	bx	r0

2000007c <IRQ15_Veener>:
	Insert_InterruptVeener IRQ15	
2000007c:	4823      	ldr	r0, [pc, #140]	; (2000010c <IRQ31_Veener+0x50>)
2000007e:	4700      	bx	r0

20000080 <IRQ16_Veener>:
	Insert_InterruptVeener IRQ16	
20000080:	4823      	ldr	r0, [pc, #140]	; (20000110 <IRQ31_Veener+0x54>)
20000082:	4700      	bx	r0

20000084 <IRQ17_Veener>:
	Insert_InterruptVeener IRQ17	
20000084:	4823      	ldr	r0, [pc, #140]	; (20000114 <IRQ31_Veener+0x58>)
20000086:	4700      	bx	r0

20000088 <IRQ18_Veener>:
	Insert_InterruptVeener IRQ18	
20000088:	4823      	ldr	r0, [pc, #140]	; (20000118 <IRQ31_Veener+0x5c>)
2000008a:	4700      	bx	r0

2000008c <IRQ19_Veener>:
	Insert_InterruptVeener IRQ19	
2000008c:	4823      	ldr	r0, [pc, #140]	; (2000011c <IRQ31_Veener+0x60>)
2000008e:	4700      	bx	r0

20000090 <IRQ20_Veener>:
	Insert_InterruptVeener IRQ20
20000090:	4823      	ldr	r0, [pc, #140]	; (20000120 <IRQ31_Veener+0x64>)
20000092:	4700      	bx	r0

20000094 <IRQ21_Veener>:
	Insert_InterruptVeener IRQ21
20000094:	4823      	ldr	r0, [pc, #140]	; (20000124 <IRQ31_Veener+0x68>)
20000096:	4700      	bx	r0

20000098 <IRQ22_Veener>:
	Insert_InterruptVeener IRQ22	
20000098:	4823      	ldr	r0, [pc, #140]	; (20000128 <IRQ31_Veener+0x6c>)
2000009a:	4700      	bx	r0

2000009c <IRQ23_Veener>:
	Insert_InterruptVeener IRQ23	
2000009c:	4823      	ldr	r0, [pc, #140]	; (2000012c <IRQ31_Veener+0x70>)
2000009e:	4700      	bx	r0

200000a0 <IRQ24_Veener>:
	Insert_InterruptVeener IRQ24	
200000a0:	4823      	ldr	r0, [pc, #140]	; (20000130 <IRQ31_Veener+0x74>)
200000a2:	4700      	bx	r0

200000a4 <IRQ25_Veener>:
	Insert_InterruptVeener IRQ25	
200000a4:	4823      	ldr	r0, [pc, #140]	; (20000134 <IRQ31_Veener+0x78>)
200000a6:	4700      	bx	r0

200000a8 <IRQ26_Veener>:
	Insert_InterruptVeener IRQ26	
200000a8:	4823      	ldr	r0, [pc, #140]	; (20000138 <IRQ31_Veener+0x7c>)
200000aa:	4700      	bx	r0

200000ac <IRQ27_Veener>:
	Insert_InterruptVeener IRQ27	
200000ac:	4823      	ldr	r0, [pc, #140]	; (2000013c <IRQ31_Veener+0x80>)
200000ae:	4700      	bx	r0

200000b0 <IRQ28_Veener>:
	Insert_InterruptVeener IRQ28	
200000b0:	4823      	ldr	r0, [pc, #140]	; (20000140 <IRQ31_Veener+0x84>)
200000b2:	4700      	bx	r0

200000b4 <IRQ29_Veener>:
	Insert_InterruptVeener IRQ29	
200000b4:	4823      	ldr	r0, [pc, #140]	; (20000144 <IRQ31_Veener+0x88>)
200000b6:	4700      	bx	r0

200000b8 <IRQ30_Veener>:
	Insert_InterruptVeener IRQ30	
200000b8:	4823      	ldr	r0, [pc, #140]	; (20000148 <IRQ31_Veener+0x8c>)
200000ba:	4700      	bx	r0

200000bc <IRQ31_Veener>:
	Insert_InterruptVeener IRQ31	
200000bc:	4823      	ldr	r0, [pc, #140]	; (2000014c <IRQ31_Veener+0x90>)
200000be:	4700      	bx	r0
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
200000c0:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
200000c4:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
200000c8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener SysTick
200000cc:	10003f89 	.word	0x10003f89
	
	Insert_InterruptVeener IRQ0	
200000d0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ1	
200000d4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ2	
200000d8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ3	
200000dc:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ4	
200000e0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ5	
200000e4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ6	
200000e8:	10003565 	.word	0x10003565
	Insert_InterruptVeener IRQ7	
200000ec:	1000366d 	.word	0x1000366d
	Insert_InterruptVeener IRQ8	
200000f0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ9	
200000f4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ10	
200000f8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ11	
200000fc:	100039e1 	.word	0x100039e1
	Insert_InterruptVeener IRQ12	
20000100:	10003c3d 	.word	0x10003c3d
	Insert_InterruptVeener IRQ13	
20000104:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ14	
20000108:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ15	
2000010c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ16	
20000110:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ17	
20000114:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ18	
20000118:	10003e11 	.word	0x10003e11
	Insert_InterruptVeener IRQ19	
2000011c:	100035f9 	.word	0x100035f9
	Insert_InterruptVeener IRQ20
20000120:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ21
20000124:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ22	
20000128:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ23	
2000012c:	100039fd 	.word	0x100039fd
	Insert_InterruptVeener IRQ24	
20000130:	10003b01 	.word	0x10003b01
	Insert_InterruptVeener IRQ25	
20000134:	10003499 	.word	0x10003499
	Insert_InterruptVeener IRQ26	
20000138:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ27	
2000013c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ28	
20000140:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ29	
20000144:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ30	
20000148:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ31	
2000014c:	1000109d 	.word	0x1000109d
